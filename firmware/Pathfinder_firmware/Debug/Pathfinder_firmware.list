
Pathfinder_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08010160  08010160  00011160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108a0  080108a0  000121e0  2**0
                  CONTENTS
  4 .ARM          00000008  080108a0  080108a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108a8  080108a8  000121e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108a8  080108a8  000118a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108ac  080108ac  000118ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080108b0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200001e0  08010a90  000121e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08010a90  00012680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b30d  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b2  00000000  00000000  0002d51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001577  00000000  00000000  000323c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4d3  00000000  00000000  00033937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8a6  00000000  00000000  0005ee0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112a4e  00000000  00000000  0007d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001900fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef4  00000000  00000000  00190144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00199038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010148 	.word	0x08010148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08010148 	.word	0x08010148

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <cJSON_strdup+0x1c>
    {
        return NULL;
 800101c:	2300      	movs	r3, #0
 800101e:	e015      	b.n	800104c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f935 	bl	8000290 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	4798      	blx	r3
 8001034:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <cJSON_strdup+0x3c>
    {
        return NULL;
 800103c:	2300      	movs	r3, #0
 800103e:	e005      	b.n	800104c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f00b f82e 	bl	800c0a6 <memcpy>

    return copy;
 800104a:	68bb      	ldr	r3, [r7, #8]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2028      	movs	r0, #40	@ 0x28
 8001062:	4798      	blx	r3
 8001064:	60f8      	str	r0, [r7, #12]
    if (node)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800106c:	2228      	movs	r2, #40	@ 0x28
 800106e:	2100      	movs	r1, #0
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f00a ff76 	bl	800bf62 <memset>
    }

    return node;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800108c:	e03d      	b.n	800110a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109c:	2b00      	cmp	r3, #0
 800109e:	d108      	bne.n	80010b2 <cJSON_Delete+0x32>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffe7 	bl	8001080 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <cJSON_Delete+0x58>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <cJSON_Delete+0x9c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6912      	ldr	r2, [r2, #16]
 80010ce:	4610      	mov	r0, r2
 80010d0:	4798      	blx	r3
            item->valuestring = NULL;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10c      	bne.n	80010fe <cJSON_Delete+0x7e>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <cJSON_Delete+0x9c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6a12      	ldr	r2, [r2, #32]
 80010f4:	4610      	mov	r0, r2
 80010f6:	4798      	blx	r3
            item->string = NULL;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <cJSON_Delete+0x9c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	4798      	blx	r3
        item = next;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1be      	bne.n	800108e <cJSON_Delete+0xe>
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001124:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <ensure+0x20>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <ensure+0x24>
    {
        return NULL;
 8001150:	2300      	movs	r3, #0
 8001152:	e083      	b.n	800125c <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d007      	beq.n	800116c <ensure+0x3c>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d301      	bcc.n	800116c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001168:	2300      	movs	r3, #0
 800116a:	e077      	b.n	800125c <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da01      	bge.n	8001176 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001172:	2300      	movs	r3, #0
 8001174:	e072      	b.n	800125c <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	3301      	adds	r3, #1
 8001180:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d805      	bhi.n	8001198 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4413      	add	r3, r2
 8001196:	e061      	b.n	800125c <ensure+0x12c>
    }

    if (p->noalloc) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <ensure+0x74>
        return NULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e05b      	b.n	800125c <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011aa:	d308      	bcc.n	80011be <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db03      	blt.n	80011ba <ensure+0x8a>
        {
            newsize = INT_MAX;
 80011b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	e004      	b.n	80011c4 <ensure+0x94>
        }
        else
        {
            return NULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e04e      	b.n	800125c <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d018      	beq.n	80011fe <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	4610      	mov	r0, r2
 80011d8:	4798      	blx	r3
 80011da:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d132      	bne.n	8001248 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	4610      	mov	r0, r2
 80011ec:	4798      	blx	r3
            p->length = 0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]

            return NULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e02e      	b.n	800125c <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	4798      	blx	r3
 8001206:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4610      	mov	r0, r2
 8001218:	4798      	blx	r3
            p->length = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

            return NULL;
 8001226:	2300      	movs	r3, #0
 8001228:	e018      	b.n	800125c <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	3301      	adds	r3, #1
 8001234:	461a      	mov	r2, r3
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f00a ff35 	bl	800c0a6 <memcpy>
        p->hooks.deallocate(p->buffer);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	4610      	mov	r0, r2
 8001246:	4798      	blx	r3
    }
    p->length = newsize;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4413      	add	r3, r2
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d013      	beq.n	800129e <update_offset+0x3a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00f      	beq.n	800129e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689c      	ldr	r4, [r3, #8]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7fe fffe 	bl	8000290 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	18e2      	adds	r2, r4, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e000      	b.n	80012a0 <update_offset+0x3c>
        return;
 800129e:	bf00      	nop
}
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
	...

080012a8 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ac:	b087      	sub	sp, #28
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80012b4:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	68fe      	ldr	r6, [r7, #12]
 80012bc:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	687e      	ldr	r6, [r7, #4]
 80012c4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80012c8:	f7ff fc36 	bl	8000b38 <__aeabi_dcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <compare_double+0x34>
 80012d2:	68bc      	ldr	r4, [r7, #8]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012da:	e003      	b.n	80012e4 <compare_double+0x3c>
 80012dc:	683c      	ldr	r4, [r7, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012e4:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80012e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012f0:	f7fe ffda 	bl	80002a8 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4690      	mov	r8, r2
 80012fa:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <compare_double+0x8c>)
 8001304:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001308:	f7ff f986 	bl	8000618 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	2101      	movs	r1, #1
 8001312:	460c      	mov	r4, r1
 8001314:	4640      	mov	r0, r8
 8001316:	4649      	mov	r1, r9
 8001318:	f7ff fbfa 	bl	8000b10 <__aeabi_dcmple>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <compare_double+0x7e>
 8001322:	2300      	movs	r3, #0
 8001324:	461c      	mov	r4, r3
 8001326:	b2e3      	uxtb	r3, r4
}
 8001328:	4618      	mov	r0, r3
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001332:	bf00      	nop
 8001334:	3cb00000 	.word	0x3cb00000

08001338 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b093      	sub	sp, #76	@ 0x4c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800134c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800136e:	f7ff fed7 	bl	8001120 <get_decimal_point>
 8001372:	4603      	mov	r3, r0
 8001374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <print_number+0x56>
    {
        return false;
 800138a:	2300      	movs	r3, #0
 800138c:	e0b4      	b.n	80014f8 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800138e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001392:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001396:	f7ff fbd9 	bl	8000b4c <__aeabi_dcmpun>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d121      	bne.n	80013e4 <print_number+0xac>
 80013a0:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80013a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80013a8:	2301      	movs	r3, #1
 80013aa:	461e      	mov	r6, r3
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	4b53      	ldr	r3, [pc, #332]	@ (8001500 <print_number+0x1c8>)
 80013b2:	4620      	mov	r0, r4
 80013b4:	4629      	mov	r1, r5
 80013b6:	f7ff fbc9 	bl	8000b4c <__aeabi_dcmpun>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10b      	bne.n	80013d8 <print_number+0xa0>
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001500 <print_number+0x1c8>)
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7ff fba1 	bl	8000b10 <__aeabi_dcmple>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <print_number+0xa0>
 80013d4:	2300      	movs	r3, #0
 80013d6:	461e      	mov	r6, r3
 80013d8:	b2f3      	uxtb	r3, r6
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4946      	ldr	r1, [pc, #280]	@ (8001504 <print_number+0x1cc>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a fd2a 	bl	800be44 <siprintf>
 80013f0:	6478      	str	r0, [r7, #68]	@ 0x44
 80013f2:	e03f      	b.n	8001474 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8a3 	bl	8000544 <__aeabi_i2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001406:	f7ff fb6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	493b      	ldr	r1, [pc, #236]	@ (8001508 <print_number+0x1d0>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00a fd12 	bl	800be44 <siprintf>
 8001420:	6478      	str	r0, [r7, #68]	@ 0x44
 8001422:	e027      	b.n	8001474 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001424:	f107 0014 	add.w	r0, r7, #20
 8001428:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800142c:	4937      	ldr	r1, [pc, #220]	@ (800150c <print_number+0x1d4>)
 800142e:	f00a fd09 	bl	800be44 <siprintf>
 8001432:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001434:	f107 0208 	add.w	r2, r7, #8
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4934      	ldr	r1, [pc, #208]	@ (8001510 <print_number+0x1d8>)
 800143e:	4618      	mov	r0, r3
 8001440:	f00a fd20 	bl	800be84 <siscanf>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d10c      	bne.n	8001464 <print_number+0x12c>
 800144a:	ed97 7b02 	vldr	d7, [r7, #8]
 800144e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001452:	eeb0 0a47 	vmov.f32	s0, s14
 8001456:	eef0 0a67 	vmov.f32	s1, s15
 800145a:	f7ff ff25 	bl	80012a8 <compare_double>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d107      	bne.n	8001474 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001464:	f107 0014 	add.w	r0, r7, #20
 8001468:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800146c:	4929      	ldr	r1, [pc, #164]	@ (8001514 <print_number+0x1dc>)
 800146e:	f00a fce9 	bl	800be44 <siprintf>
 8001472:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001476:	2b00      	cmp	r3, #0
 8001478:	db02      	blt.n	8001480 <print_number+0x148>
 800147a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800147c:	2b19      	cmp	r3, #25
 800147e:	dd01      	ble.n	8001484 <print_number+0x14c>
    {
        return false;
 8001480:	2300      	movs	r3, #0
 8001482:	e039      	b.n	80014f8 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001486:	3301      	adds	r3, #1
 8001488:	4619      	mov	r1, r3
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f7ff fe50 	bl	8001130 <ensure>
 8001490:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8001492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <print_number+0x164>
    {
        return false;
 8001498:	2300      	movs	r3, #0
 800149a:	e02d      	b.n	80014f8 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800149c:	2300      	movs	r3, #0
 800149e:	643b      	str	r3, [r7, #64]	@ 0x40
 80014a0:	e01a      	b.n	80014d8 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 80014a2:	f107 0214 	add.w	r2, r7, #20
 80014a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d105      	bne.n	80014c0 <print_number+0x188>
        {
            output_pointer[i] = '.';
 80014b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b8:	4413      	add	r3, r2
 80014ba:	222e      	movs	r2, #46	@ 0x2e
 80014bc:	701a      	strb	r2, [r3, #0]
            continue;
 80014be:	e008      	b.n	80014d2 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 80014c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c4:	4413      	add	r3, r2
 80014c6:	f107 0114 	add.w	r1, r7, #20
 80014ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014cc:	440a      	add	r2, r1
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80014d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014d4:	3301      	adds	r3, #1
 80014d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80014d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3e0      	bcc.n	80014a2 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80014e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014e4:	4413      	add	r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014f0:	441a      	add	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	609a      	str	r2, [r3, #8]

    return true;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	374c      	adds	r7, #76	@ 0x4c
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001500:	7fefffff 	.word	0x7fefffff
 8001504:	0801016c 	.word	0x0801016c
 8001508:	08010174 	.word	0x08010174
 800150c:	08010178 	.word	0x08010178
 8001510:	08010180 	.word	0x08010180
 8001514:	08010184 	.word	0x08010184

08001518 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <print_string_ptr+0x28>
    {
        return false;
 800153c:	2300      	movs	r3, #0
 800153e:	e110      	b.n	8001762 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d111      	bne.n	800156a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001546:	2103      	movs	r1, #3
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f7ff fdf1 	bl	8001130 <ensure>
 800154e:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <print_string_ptr+0x42>
        {
            return false;
 8001556:	2300      	movs	r3, #0
 8001558:	e103      	b.n	8001762 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4a83      	ldr	r2, [pc, #524]	@ (800176c <print_string_ptr+0x254>)
 800155e:	8811      	ldrh	r1, [r2, #0]
 8001560:	7892      	ldrb	r2, [r2, #2]
 8001562:	8019      	strh	r1, [r3, #0]
 8001564:	709a      	strb	r2, [r3, #2]

        return true;
 8001566:	2301      	movs	r3, #1
 8001568:	e0fb      	b.n	8001762 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	e024      	b.n	80015ba <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b22      	cmp	r3, #34	@ 0x22
 8001576:	dc0f      	bgt.n	8001598 <print_string_ptr+0x80>
 8001578:	2b08      	cmp	r3, #8
 800157a:	db13      	blt.n	80015a4 <print_string_ptr+0x8c>
 800157c:	3b08      	subs	r3, #8
 800157e:	4a7c      	ldr	r2, [pc, #496]	@ (8001770 <print_string_ptr+0x258>)
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <print_string_ptr+0x84>
 8001596:	e005      	b.n	80015a4 <print_string_ptr+0x8c>
 8001598:	2b5c      	cmp	r3, #92	@ 0x5c
 800159a:	d103      	bne.n	80015a4 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
                break;
 80015a2:	e007      	b.n	80015b4 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b1f      	cmp	r3, #31
 80015aa:	d802      	bhi.n	80015b2 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3305      	adds	r3, #5
 80015b0:	617b      	str	r3, [r7, #20]
                }
                break;
 80015b2:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1d6      	bne.n	8001570 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3303      	adds	r3, #3
 80015d4:	4619      	mov	r1, r3
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f7ff fdaa 	bl	8001130 <ensure>
 80015dc:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <print_string_ptr+0xd0>
    {
        return false;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e0bc      	b.n	8001762 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d117      	bne.n	800161e <print_string_ptr+0x106>
    {
        output[0] = '\"';
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2222      	movs	r2, #34	@ 0x22
 80015f2:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	3301      	adds	r3, #1
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00a fd52 	bl	800c0a6 <memcpy>
        output[output_length + 1] = '\"';
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4413      	add	r3, r2
 800160a:	2222      	movs	r2, #34	@ 0x22
 800160c:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3302      	adds	r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]

        return true;
 800161a:	2301      	movs	r3, #1
 800161c:	e0a1      	b.n	8001762 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2222      	movs	r2, #34	@ 0x22
 8001622:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	3301      	adds	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e086      	b.n	800173e <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b1f      	cmp	r3, #31
 8001636:	d90c      	bls.n	8001652 <print_string_ptr+0x13a>
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b22      	cmp	r3, #34	@ 0x22
 800163e:	d008      	beq.n	8001652 <print_string_ptr+0x13a>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b5c      	cmp	r3, #92	@ 0x5c
 8001646:	d004      	beq.n	8001652 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e06f      	b.n	8001732 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	61ba      	str	r2, [r7, #24]
 8001658:	225c      	movs	r2, #92	@ 0x5c
 800165a:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b22      	cmp	r3, #34	@ 0x22
 8001662:	dc3d      	bgt.n	80016e0 <print_string_ptr+0x1c8>
 8001664:	2b08      	cmp	r3, #8
 8001666:	db59      	blt.n	800171c <print_string_ptr+0x204>
 8001668:	3b08      	subs	r3, #8
 800166a:	2b1a      	cmp	r3, #26
 800166c:	d856      	bhi.n	800171c <print_string_ptr+0x204>
 800166e:	a201      	add	r2, pc, #4	@ (adr r2, 8001674 <print_string_ptr+0x15c>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016f5 	.word	0x080016f5
 8001678:	08001715 	.word	0x08001715
 800167c:	08001705 	.word	0x08001705
 8001680:	0800171d 	.word	0x0800171d
 8001684:	080016fd 	.word	0x080016fd
 8001688:	0800170d 	.word	0x0800170d
 800168c:	0800171d 	.word	0x0800171d
 8001690:	0800171d 	.word	0x0800171d
 8001694:	0800171d 	.word	0x0800171d
 8001698:	0800171d 	.word	0x0800171d
 800169c:	0800171d 	.word	0x0800171d
 80016a0:	0800171d 	.word	0x0800171d
 80016a4:	0800171d 	.word	0x0800171d
 80016a8:	0800171d 	.word	0x0800171d
 80016ac:	0800171d 	.word	0x0800171d
 80016b0:	0800171d 	.word	0x0800171d
 80016b4:	0800171d 	.word	0x0800171d
 80016b8:	0800171d 	.word	0x0800171d
 80016bc:	0800171d 	.word	0x0800171d
 80016c0:	0800171d 	.word	0x0800171d
 80016c4:	0800171d 	.word	0x0800171d
 80016c8:	0800171d 	.word	0x0800171d
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800171d 	.word	0x0800171d
 80016d4:	0800171d 	.word	0x0800171d
 80016d8:	0800171d 	.word	0x0800171d
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80016e2:	d11b      	bne.n	800171c <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	225c      	movs	r2, #92	@ 0x5c
 80016e8:	701a      	strb	r2, [r3, #0]
                    break;
 80016ea:	e022      	b.n	8001732 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2222      	movs	r2, #34	@ 0x22
 80016f0:	701a      	strb	r2, [r3, #0]
                    break;
 80016f2:	e01e      	b.n	8001732 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2262      	movs	r2, #98	@ 0x62
 80016f8:	701a      	strb	r2, [r3, #0]
                    break;
 80016fa:	e01a      	b.n	8001732 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2266      	movs	r2, #102	@ 0x66
 8001700:	701a      	strb	r2, [r3, #0]
                    break;
 8001702:	e016      	b.n	8001732 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	226e      	movs	r2, #110	@ 0x6e
 8001708:	701a      	strb	r2, [r3, #0]
                    break;
 800170a:	e012      	b.n	8001732 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2272      	movs	r2, #114	@ 0x72
 8001710:	701a      	strb	r2, [r3, #0]
                    break;
 8001712:	e00e      	b.n	8001732 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2274      	movs	r2, #116	@ 0x74
 8001718:	701a      	strb	r2, [r3, #0]
                    break;
 800171a:	e00a      	b.n	8001732 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4914      	ldr	r1, [pc, #80]	@ (8001774 <print_string_ptr+0x25c>)
 8001724:	69b8      	ldr	r0, [r7, #24]
 8001726:	f00a fb8d 	bl	800be44 <siprintf>
                    output_pointer += 4;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3304      	adds	r3, #4
 800172e:	61bb      	str	r3, [r7, #24]
                    break;
 8001730:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3301      	adds	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3301      	adds	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f af74 	bne.w	8001630 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	2222      	movs	r2, #34	@ 0x22
 8001752:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3302      	adds	r3, #2
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]

    return true;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	0801018c 	.word	0x0801018c
 8001770:	04000037 	.word	0x04000037
 8001774:	08010190 	.word	0x08010190

08001778 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fec5 	bl	8001518 <print_string_ptr>
 800178e:	4603      	mov	r3, r0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	@ 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2224      	movs	r2, #36	@ 0x24
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00a fbd6 	bl	800bf62 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a3b      	ldr	r2, [pc, #236]	@ (80018a8 <print+0x110>)
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	4610      	mov	r0, r2
 80017c0:	4798      	blx	r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80017c6:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <print+0x110>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d042      	beq.n	8001868 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f86f 	bl	80018cc <print_value>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03b      	beq.n	800186c <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd33 	bl	8001264 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	6938      	ldr	r0, [r7, #16]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	3201      	adds	r2, #1
 8001810:	4611      	mov	r1, r2
 8001812:	4798      	blx	r3
 8001814:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8001816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001818:	2b00      	cmp	r3, #0
 800181a:	d029      	beq.n	8001870 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	e020      	b.n	8001864 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	3201      	adds	r2, #1
 800182a:	4610      	mov	r0, r2
 800182c:	4798      	blx	r3
 800182e:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8001830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01e      	beq.n	8001874 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4293      	cmp	r3, r2
 8001840:	bf28      	it	cs
 8001842:	4613      	movcs	r3, r2
 8001844:	461a      	mov	r2, r3
 8001846:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001848:	f00a fc2d 	bl	800c0a6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001850:	4413      	add	r3, r2
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4610      	mov	r0, r2
 800185e:	4798      	blx	r3
        buffer->buffer = NULL;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
    }

    return printed;
 8001864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001866:	e01a      	b.n	800189e <print+0x106>
        goto fail;
 8001868:	bf00      	nop
 800186a:	e004      	b.n	8001876 <print+0xde>
        goto fail;
 800186c:	bf00      	nop
 800186e:	e002      	b.n	8001876 <print+0xde>
            goto fail;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <print+0xde>
            goto fail;
 8001874:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4610      	mov	r0, r2
 8001884:	4798      	blx	r3
        buffer->buffer = NULL;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800188a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <print+0x104>
    {
        hooks->deallocate(printed);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001896:	4798      	blx	r3
        printed = NULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3738      	adds	r7, #56	@ 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	08010238 	.word	0x08010238

080018ac <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <cJSON_PrintUnformatted+0x1c>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff6d 	bl	8001798 <print>
 80018be:	4603      	mov	r3, r0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000000 	.word	0x20000000

080018cc <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <print_value+0x1a>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <print_value+0x1e>
    {
        return false;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e0c9      	b.n	8001a7e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b80      	cmp	r3, #128	@ 0x80
 80018f2:	f000 808e 	beq.w	8001a12 <print_value+0x146>
 80018f6:	2b80      	cmp	r3, #128	@ 0x80
 80018f8:	f300 80c0 	bgt.w	8001a7c <print_value+0x1b0>
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	dc49      	bgt.n	8001994 <print_value+0xc8>
 8001900:	2b00      	cmp	r3, #0
 8001902:	f340 80bb 	ble.w	8001a7c <print_value+0x1b0>
 8001906:	3b01      	subs	r3, #1
 8001908:	2b1f      	cmp	r3, #31
 800190a:	f200 80b7 	bhi.w	8001a7c <print_value+0x1b0>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <print_value+0x48>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	080019bf 	.word	0x080019bf
 8001918:	080019e3 	.word	0x080019e3
 800191c:	08001a7d 	.word	0x08001a7d
 8001920:	0800199b 	.word	0x0800199b
 8001924:	08001a7d 	.word	0x08001a7d
 8001928:	08001a7d 	.word	0x08001a7d
 800192c:	08001a7d 	.word	0x08001a7d
 8001930:	08001a07 	.word	0x08001a07
 8001934:	08001a7d 	.word	0x08001a7d
 8001938:	08001a7d 	.word	0x08001a7d
 800193c:	08001a7d 	.word	0x08001a7d
 8001940:	08001a7d 	.word	0x08001a7d
 8001944:	08001a7d 	.word	0x08001a7d
 8001948:	08001a7d 	.word	0x08001a7d
 800194c:	08001a7d 	.word	0x08001a7d
 8001950:	08001a59 	.word	0x08001a59
 8001954:	08001a7d 	.word	0x08001a7d
 8001958:	08001a7d 	.word	0x08001a7d
 800195c:	08001a7d 	.word	0x08001a7d
 8001960:	08001a7d 	.word	0x08001a7d
 8001964:	08001a7d 	.word	0x08001a7d
 8001968:	08001a7d 	.word	0x08001a7d
 800196c:	08001a7d 	.word	0x08001a7d
 8001970:	08001a7d 	.word	0x08001a7d
 8001974:	08001a7d 	.word	0x08001a7d
 8001978:	08001a7d 	.word	0x08001a7d
 800197c:	08001a7d 	.word	0x08001a7d
 8001980:	08001a7d 	.word	0x08001a7d
 8001984:	08001a7d 	.word	0x08001a7d
 8001988:	08001a7d 	.word	0x08001a7d
 800198c:	08001a7d 	.word	0x08001a7d
 8001990:	08001a65 	.word	0x08001a65
 8001994:	2b40      	cmp	r3, #64	@ 0x40
 8001996:	d06b      	beq.n	8001a70 <print_value+0x1a4>
 8001998:	e070      	b.n	8001a7c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800199a:	2105      	movs	r1, #5
 800199c:	6838      	ldr	r0, [r7, #0]
 800199e:	f7ff fbc7 	bl	8001130 <ensure>
 80019a2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <print_value+0xe2>
            {
                return false;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e067      	b.n	8001a7e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a35      	ldr	r2, [pc, #212]	@ (8001a88 <print_value+0x1bc>)
 80019b2:	6810      	ldr	r0, [r2, #0]
 80019b4:	6018      	str	r0, [r3, #0]
 80019b6:	7912      	ldrb	r2, [r2, #4]
 80019b8:	711a      	strb	r2, [r3, #4]
            return true;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e05f      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80019be:	2106      	movs	r1, #6
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f7ff fbb5 	bl	8001130 <ensure>
 80019c6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <print_value+0x106>
            {
                return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e055      	b.n	8001a7e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a8c <print_value+0x1c0>)
 80019d6:	6810      	ldr	r0, [r2, #0]
 80019d8:	6018      	str	r0, [r3, #0]
 80019da:	8892      	ldrh	r2, [r2, #4]
 80019dc:	809a      	strh	r2, [r3, #4]
            return true;
 80019de:	2301      	movs	r3, #1
 80019e0:	e04d      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80019e2:	2105      	movs	r1, #5
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff fba3 	bl	8001130 <ensure>
 80019ea:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <print_value+0x12a>
            {
                return false;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e043      	b.n	8001a7e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a25      	ldr	r2, [pc, #148]	@ (8001a90 <print_value+0x1c4>)
 80019fa:	6810      	ldr	r0, [r2, #0]
 80019fc:	6018      	str	r0, [r3, #0]
 80019fe:	7912      	ldrb	r2, [r2, #4]
 8001a00:	711a      	strb	r2, [r3, #4]
            return true;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e03b      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fc95 	bl	8001338 <print_number>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	e035      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <print_value+0x156>
            {
                return false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e02d      	b.n	8001a7e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fc32 	bl	8000290 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f7ff fb7b 	bl	8001130 <ensure>
 8001a3a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <print_value+0x17a>
            {
                return false;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e01b      	b.n	8001a7e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f00a fb29 	bl	800c0a6 <memcpy>
            return true;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e012      	b.n	8001a7e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fe8c 	bl	8001778 <print_string>
 8001a60:	4603      	mov	r3, r0
 8001a62:	e00c      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f814 	bl	8001a94 <print_array>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e006      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f894 	bl	8001ba0 <print_object>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	e000      	b.n	8001a7e <print_value+0x1b2>

        default:
            return false;
 8001a7c:	2300      	movs	r3, #0
    }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0801016c 	.word	0x0801016c
 8001a8c:	0801019c 	.word	0x0801019c
 8001a90:	080101a4 	.word	0x080101a4

08001a94 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <print_array+0x22>
    {
        return false;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e070      	b.n	8001b98 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f7ff fb39 	bl	8001130 <ensure>
 8001abe:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <print_array+0x36>
    {
        return false;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e066      	b.n	8001b98 <print_array+0x104>
    }

    *output_pointer = '[';
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	225b      	movs	r2, #91	@ 0x5b
 8001ace:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001ae4:	e03d      	b.n	8001b62 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff feef 	bl	80018cc <print_value>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <print_array+0x64>
        {
            return false;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e04f      	b.n	8001b98 <print_array+0x104>
        }
        update_offset(output_buffer);
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f7ff fbb3 	bl	8001264 <update_offset>
        if (current_element->next)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d02a      	beq.n	8001b5c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <print_array+0x7e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e000      	b.n	8001b14 <print_array+0x80>
 8001b12:	2301      	movs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7ff fb07 	bl	8001130 <ensure>
 8001b22:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <print_array+0x9a>
            {
                return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e034      	b.n	8001b98 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	617a      	str	r2, [r7, #20]
 8001b34:	222c      	movs	r2, #44	@ 0x2c
 8001b36:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	617a      	str	r2, [r7, #20]
 8001b46:	2220      	movs	r2, #32
 8001b48:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	441a      	add	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1be      	bne.n	8001ae6 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001b68:	2102      	movs	r1, #2
 8001b6a:	6838      	ldr	r0, [r7, #0]
 8001b6c:	f7ff fae0 	bl	8001130 <ensure>
 8001b70:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <print_array+0xe8>
    {
        return false;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e00d      	b.n	8001b98 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	617a      	str	r2, [r7, #20]
 8001b82:	225d      	movs	r2, #93	@ 0x5d
 8001b84:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	60da      	str	r2, [r3, #12]

    return true;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <print_object+0x22>
    {
        return false;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e108      	b.n	8001dd4 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <print_object+0x2e>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e000      	b.n	8001bd0 <print_object+0x30>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f7ff faa9 	bl	8001130 <ensure>
 8001bde:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <print_object+0x4a>
    {
        return false;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e0f4      	b.n	8001dd4 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	61fa      	str	r2, [r7, #28]
 8001bf0:	227b      	movs	r2, #123	@ 0x7b
 8001bf2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	61fa      	str	r2, [r7, #28]
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	441a      	add	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001c1c:	e0a0      	b.n	8001d60 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d022      	beq.n	8001c6c <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f7ff fa7f 	bl	8001130 <ensure>
 8001c32:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <print_object+0x9e>
            {
                return false;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e0ca      	b.n	8001dd4 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e007      	b.n	8001c54 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	61fa      	str	r2, [r7, #28]
 8001c4a:	2209      	movs	r2, #9
 8001c4c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3f2      	bcc.n	8001c44 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	441a      	add	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc50 	bl	8001518 <print_string_ptr>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <print_object+0xe2>
        {
            return false;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e0a8      	b.n	8001dd4 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f7ff faee 	bl	8001264 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <print_object+0xf4>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e000      	b.n	8001c96 <print_object+0xf6>
 8001c94:	2301      	movs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001c98:	68f9      	ldr	r1, [r7, #12]
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f7ff fa48 	bl	8001130 <ensure>
 8001ca0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <print_object+0x10c>
        {
            return false;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e093      	b.n	8001dd4 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	61fa      	str	r2, [r7, #28]
 8001cb2:	223a      	movs	r2, #58	@ 0x3a
 8001cb4:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	61fa      	str	r2, [r7, #28]
 8001cc4:	2209      	movs	r2, #9
 8001cc6:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	441a      	add	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	69b8      	ldr	r0, [r7, #24]
 8001cd8:	f7ff fdf8 	bl	80018cc <print_value>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <print_object+0x146>
        {
            return false;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e076      	b.n	8001dd4 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f7ff fabc 	bl	8001264 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <print_object+0x158>
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	e000      	b.n	8001cfa <print_object+0x15a>
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <print_object+0x166>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <print_object+0x168>
 8001d06:	2300      	movs	r3, #0
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	f7ff fa0c 	bl	8001130 <ensure>
 8001d18:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <print_object+0x184>
        {
            return false;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e057      	b.n	8001dd4 <print_object+0x234>
        }
        if (current_item->next)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	61fa      	str	r2, [r7, #28]
 8001d32:	222c      	movs	r2, #44	@ 0x2c
 8001d34:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	61fa      	str	r2, [r7, #28]
 8001d44:	220a      	movs	r2, #10
 8001d46:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	441a      	add	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f47f af5b 	bne.w	8001c1e <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <print_object+0x1d8>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	e000      	b.n	8001d7a <print_object+0x1da>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff f9d7 	bl	8001130 <ensure>
 8001d82:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <print_object+0x1ee>
    {
        return false;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e022      	b.n	8001dd4 <print_object+0x234>
    }
    if (output_buffer->format)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d010      	beq.n	8001db8 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e007      	b.n	8001dac <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	61fa      	str	r2, [r7, #28]
 8001da2:	2209      	movs	r2, #9
 8001da4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	3301      	adds	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3f1      	bcc.n	8001d9c <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	61fa      	str	r2, [r7, #28]
 8001dbe:	227d      	movs	r2, #125	@ 0x7d
 8001dc0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	60da      	str	r2, [r3, #12]

    return true;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	605a      	str	r2, [r3, #4]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <add_item_to_array+0x22>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <add_item_to_array+0x22>
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d101      	bne.n	8001e24 <add_item_to_array+0x26>
    {
        return false;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e01e      	b.n	8001e62 <add_item_to_array+0x64>
    }

    child = array->child;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00d      	b.n	8001e60 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffc2 	bl	8001ddc <suffix_object>
            array->child->prev = item;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001e72:	687b      	ldr	r3, [r7, #4]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <add_item_to_object+0x30>
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <add_item_to_object+0x30>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <add_item_to_object+0x30>
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d101      	bne.n	8001eb4 <add_item_to_object+0x34>
    {
        return false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e036      	b.n	8001f22 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	f7ff ffd5 	bl	8001e6a <cast_away_const>
 8001ec0:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e00e      	b.n	8001eec <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	68b8      	ldr	r0, [r7, #8]
 8001ed2:	f7ff f897 	bl	8001004 <cJSON_strdup>
 8001ed6:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <add_item_to_object+0x62>
        {
            return false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e01f      	b.n	8001f22 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001eea:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <add_item_to_object+0x8c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6a12      	ldr	r2, [r2, #32]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4798      	blx	r3
    }

    item->string = new_key;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff ff6f 	bl	8001dfe <add_item_to_array>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8001f3a:	ed97 0b00 	vldr	d0, [r7]
 8001f3e:	f000 f81b 	bl	8001f78 <cJSON_CreateNumber>
 8001f42:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <cJSON_AddNumberToObject+0x44>)
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff ff96 	bl	8001e80 <add_item_to_object>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	e003      	b.n	8001f66 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff f88e 	bl	8001080 <cJSON_Delete>
    return NULL;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	00000000 	.word	0x00000000

08001f78 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001f82:	481f      	ldr	r0, [pc, #124]	@ (8002000 <cJSON_CreateNumber+0x88>)
 8001f84:	f7ff f866 	bl	8001054 <cJSON_New_Item>
 8001f88:	60f8      	str	r0, [r7, #12]
    if(item)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d02c      	beq.n	8001fea <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2208      	movs	r2, #8
 8001f94:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f9c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001fa0:	a315      	add	r3, pc, #84	@ (adr r3, 8001ff8 <cJSON_CreateNumber+0x80>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001faa:	f7fe fdbb 	bl	8000b24 <__aeabi_dcmpge>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	e015      	b.n	8001fea <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <cJSON_CreateNumber+0x8c>)
 8001fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fc8:	f7fe fda2 	bl	8000b10 <__aeabi_dcmple>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001fd8:	615a      	str	r2, [r3, #20]
 8001fda:	e006      	b.n	8001fea <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8001fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe0:	f7fe fdca 	bl	8000b78 <__aeabi_d2iz>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	ffc00000 	.word	0xffc00000
 8001ffc:	41dfffff 	.word	0x41dfffff
 8002000:	20000000 	.word	0x20000000
 8002004:	c1e00000 	.word	0xc1e00000

08002008 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800200e:	4807      	ldr	r0, [pc, #28]	@ (800202c <cJSON_CreateObject+0x24>)
 8002010:	f7ff f820 	bl	8001054 <cJSON_New_Item>
 8002014:	6078      	str	r0, [r7, #4]
    if (item)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	60da      	str	r2, [r3, #12]
    }

    return item;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000000 	.word	0x20000000

08002030 <setMovmentSpeed>:
//    float xPos;
//    float yPos;
//    float theta;
//} RobotData;

void setMovmentSpeed(int motorA,int motorB) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	uint8_t motorAOutput = motorA;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	73fb      	strb	r3, [r7, #15]
	uint8_t motorBOutput = motorB;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	73bb      	strb	r3, [r7, #14]
	if(motorA<=100)HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b64      	cmp	r3, #100	@ 0x64
 8002046:	dc05      	bgt.n	8002054 <setMovmentSpeed+0x24>
 8002048:	2200      	movs	r2, #0
 800204a:	2120      	movs	r1, #32
 800204c:	481e      	ldr	r0, [pc, #120]	@ (80020c8 <setMovmentSpeed+0x98>)
 800204e:	f003 fb75 	bl	800573c <HAL_GPIO_WritePin>
 8002052:	e007      	b.n	8002064 <setMovmentSpeed+0x34>
	else
	{
		HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	2120      	movs	r1, #32
 8002058:	481b      	ldr	r0, [pc, #108]	@ (80020c8 <setMovmentSpeed+0x98>)
 800205a:	f003 fb6f 	bl	800573c <HAL_GPIO_WritePin>
		motorAOutput = motorAOutput - 100;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3b64      	subs	r3, #100	@ 0x64
 8002062:	73fb      	strb	r3, [r7, #15]
	}

	if(motorB<=100)HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	dc07      	bgt.n	800207a <setMovmentSpeed+0x4a>
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002074:	f003 fb62 	bl	800573c <HAL_GPIO_WritePin>
 8002078:	e009      	b.n	800208e <setMovmentSpeed+0x5e>
	else
	{
		HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002084:	f003 fb5a 	bl	800573c <HAL_GPIO_WritePin>
		motorBOutput = motorBOutput - 100;
 8002088:	7bbb      	ldrb	r3, [r7, #14]
 800208a:	3b64      	subs	r3, #100	@ 0x64
 800208c:	73bb      	strb	r3, [r7, #14]
	}

	if(motorA!=0){
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <setMovmentSpeed+0x6e>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,motorAOutput);
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <setMovmentSpeed+0x9c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	635a      	str	r2, [r3, #52]	@ 0x34
 800209c:	e003      	b.n	80020a6 <setMovmentSpeed+0x76>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <setMovmentSpeed+0x9c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(motorB!=0){
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <setMovmentSpeed+0x86>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,motorBOutput);
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <setMovmentSpeed+0xa0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	7bba      	ldrb	r2, [r7, #14]
 80020b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	}




}
 80020b4:	e003      	b.n	80020be <setMovmentSpeed+0x8e>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <setMovmentSpeed+0xa0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	48000400 	.word	0x48000400
 80020cc:	20000354 	.word	0x20000354
 80020d0:	20000308 	.word	0x20000308

080020d4 <emergencyStop>:
void emergencyStop() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	2120      	movs	r1, #32
 80020dc:	4809      	ldr	r0, [pc, #36]	@ (8002104 <emergencyStop+0x30>)
 80020de:	f003 fb2d 	bl	800573c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ec:	f003 fb26 	bl	800573c <HAL_GPIO_WritePin>


	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <emergencyStop+0x34>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <emergencyStop+0x38>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	48000400 	.word	0x48000400
 8002108:	20000308 	.word	0x20000308
 800210c:	20000354 	.word	0x20000354

08002110 <moveForward>:

void moveForward() {
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	2120      	movs	r1, #32
 8002118:	4809      	ldr	r0, [pc, #36]	@ (8002140 <moveForward+0x30>)
 800211a:	f003 fb0f 	bl	800573c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002128:	f003 fb08 	bl	800573c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <moveForward+0x34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2264      	movs	r2, #100	@ 0x64
 8002132:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <moveForward+0x38>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2264      	movs	r2, #100	@ 0x64
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	48000400 	.word	0x48000400
 8002144:	20000308 	.word	0x20000308
 8002148:	20000354 	.word	0x20000354

0800214c <moveReverse>:

void moveReverse() {
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	2120      	movs	r1, #32
 8002154:	4809      	ldr	r0, [pc, #36]	@ (800217c <moveReverse+0x30>)
 8002156:	f003 faf1 	bl	800573c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002164:	f003 faea 	bl	800573c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <moveReverse+0x34>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2264      	movs	r2, #100	@ 0x64
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <moveReverse+0x38>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2264      	movs	r2, #100	@ 0x64
 8002176:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	48000400 	.word	0x48000400
 8002180:	20000308 	.word	0x20000308
 8002184:	20000354 	.word	0x20000354

08002188 <turnRight>:

void turnRight() {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2120      	movs	r1, #32
 8002190:	4809      	ldr	r0, [pc, #36]	@ (80021b8 <turnRight+0x30>)
 8002192:	f003 fad3 	bl	800573c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a0:	f003 facc 	bl	800573c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <turnRight+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2264      	movs	r2, #100	@ 0x64
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <turnRight+0x38>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2264      	movs	r2, #100	@ 0x64
 80021b2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	48000400 	.word	0x48000400
 80021bc:	20000308 	.word	0x20000308
 80021c0:	20000354 	.word	0x20000354

080021c4 <turnLeft>:
void turnLeft() {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 80021c8:	2201      	movs	r2, #1
 80021ca:	2120      	movs	r1, #32
 80021cc:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <turnLeft+0x30>)
 80021ce:	f003 fab5 	bl	800573c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f003 faae 	bl	800573c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <turnLeft+0x34>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2264      	movs	r2, #100	@ 0x64
 80021e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <turnLeft+0x38>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2264      	movs	r2, #100	@ 0x64
 80021ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	48000400 	.word	0x48000400
 80021f8:	20000308 	.word	0x20000308
 80021fc:	20000354 	.word	0x20000354

08002200 <getEncoderValue>:
void getEncoderValue(){
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c3, AS5600_I2C_ADDR, 0x0D, 1, &low_bytes_angle_data, sizeof(low_bytes_angle_data), HAL_MAX_DELAY);
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	2301      	movs	r3, #1
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <getEncoderValue+0xb0>)
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2301      	movs	r3, #1
 8002216:	220d      	movs	r2, #13
 8002218:	216c      	movs	r1, #108	@ 0x6c
 800221a:	4826      	ldr	r0, [pc, #152]	@ (80022b4 <getEncoderValue+0xb4>)
 800221c:	f003 fb42 	bl	80058a4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c3, AS5600_I2C_ADDR, 0x0C, 1, &high_bytes_angle_data, sizeof(high_bytes_angle_data), HAL_MAX_DELAY);
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <getEncoderValue+0xb8>)
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	220c      	movs	r2, #12
 8002232:	216c      	movs	r1, #108	@ 0x6c
 8002234:	481f      	ldr	r0, [pc, #124]	@ (80022b4 <getEncoderValue+0xb4>)
 8002236:	f003 fb35 	bl	80058a4 <HAL_I2C_Mem_Read>
	raw_angle = ((high_bytes_angle_data<< 8) | low_bytes_angle_data) & 0x0FFF;
 800223a:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <getEncoderValue+0xb8>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	b21a      	sxth	r2, r3
 8002242:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <getEncoderValue+0xb0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b21b      	sxth	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b21b      	sxth	r3, r3
 800224c:	b29b      	uxth	r3, r3
 800224e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <getEncoderValue+0xbc>)
 8002256:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, AS5600_I2C_ADDR, 0x0D, 1, &low_bytes_angle_data_2, sizeof(low_bytes_angle_data_2), HAL_MAX_DELAY);
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2301      	movs	r3, #1
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <getEncoderValue+0xc0>)
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2301      	movs	r3, #1
 8002268:	220d      	movs	r2, #13
 800226a:	216c      	movs	r1, #108	@ 0x6c
 800226c:	4815      	ldr	r0, [pc, #84]	@ (80022c4 <getEncoderValue+0xc4>)
 800226e:	f003 fb19 	bl	80058a4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, AS5600_I2C_ADDR, 0x0C, 1, &high_bytes_angle_data_2, sizeof(high_bytes_angle_data_2), HAL_MAX_DELAY);
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	2301      	movs	r3, #1
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <getEncoderValue+0xc8>)
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	220c      	movs	r2, #12
 8002284:	216c      	movs	r1, #108	@ 0x6c
 8002286:	480f      	ldr	r0, [pc, #60]	@ (80022c4 <getEncoderValue+0xc4>)
 8002288:	f003 fb0c 	bl	80058a4 <HAL_I2C_Mem_Read>
	raw_angle_2 = ((high_bytes_angle_data_2<< 8) | low_bytes_angle_data_2) & 0x0FFF;
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <getEncoderValue+0xc8>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <getEncoderValue+0xc0>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21b      	sxth	r3, r3
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <getEncoderValue+0xcc>)
 80022a8:	801a      	strh	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000474 	.word	0x20000474
 80022b4:	200002b4 	.word	0x200002b4
 80022b8:	20000475 	.word	0x20000475
 80022bc:	20000476 	.word	0x20000476
 80022c0:	20000478 	.word	0x20000478
 80022c4:	20000260 	.word	0x20000260
 80022c8:	20000479 	.word	0x20000479
 80022cc:	2000047a 	.word	0x2000047a

080022d0 <getSensorValues>:

void getSensorValues(){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80022d4:	4825      	ldr	r0, [pc, #148]	@ (800236c <getSensorValues+0x9c>)
 80022d6:	f001 ff1d 	bl	8004114 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80022da:	2164      	movs	r1, #100	@ 0x64
 80022dc:	4823      	ldr	r0, [pc, #140]	@ (800236c <getSensorValues+0x9c>)
 80022de:	f001 ffd3 	bl	8004288 <HAL_ADC_PollForConversion>
	sensorsValues[0] = HAL_ADC_GetValue(&hadc1);
 80022e2:	4822      	ldr	r0, [pc, #136]	@ (800236c <getSensorValues+0x9c>)
 80022e4:	f002 f8a8 	bl	8004438 <HAL_ADC_GetValue>
 80022e8:	ee07 0a90 	vmov	s15, r0
 80022ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <getSensorValues+0xa0>)
 80022f2:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_PollForConversion(&hadc1, 100);
 80022f6:	2164      	movs	r1, #100	@ 0x64
 80022f8:	481c      	ldr	r0, [pc, #112]	@ (800236c <getSensorValues+0x9c>)
 80022fa:	f001 ffc5 	bl	8004288 <HAL_ADC_PollForConversion>
	sensorsValues[1] = HAL_ADC_GetValue(&hadc1);
 80022fe:	481b      	ldr	r0, [pc, #108]	@ (800236c <getSensorValues+0x9c>)
 8002300:	f002 f89a 	bl	8004438 <HAL_ADC_GetValue>
 8002304:	ee07 0a90 	vmov	s15, r0
 8002308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <getSensorValues+0xa0>)
 800230e:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002312:	2164      	movs	r1, #100	@ 0x64
 8002314:	4815      	ldr	r0, [pc, #84]	@ (800236c <getSensorValues+0x9c>)
 8002316:	f001 ffb7 	bl	8004288 <HAL_ADC_PollForConversion>
	sensorsValues[2] = HAL_ADC_GetValue(&hadc1);
 800231a:	4814      	ldr	r0, [pc, #80]	@ (800236c <getSensorValues+0x9c>)
 800231c:	f002 f88c 	bl	8004438 <HAL_ADC_GetValue>
 8002320:	ee07 0a90 	vmov	s15, r0
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <getSensorValues+0xa0>)
 800232a:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_ADC_PollForConversion(&hadc1, 100);
 800232e:	2164      	movs	r1, #100	@ 0x64
 8002330:	480e      	ldr	r0, [pc, #56]	@ (800236c <getSensorValues+0x9c>)
 8002332:	f001 ffa9 	bl	8004288 <HAL_ADC_PollForConversion>
	sensorsValues[3] = HAL_ADC_GetValue(&hadc1);
 8002336:	480d      	ldr	r0, [pc, #52]	@ (800236c <getSensorValues+0x9c>)
 8002338:	f002 f87e 	bl	8004438 <HAL_ADC_GetValue>
 800233c:	ee07 0a90 	vmov	s15, r0
 8002340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002344:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <getSensorValues+0xa0>)
 8002346:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_ADC_PollForConversion(&hadc1, 100);
 800234a:	2164      	movs	r1, #100	@ 0x64
 800234c:	4807      	ldr	r0, [pc, #28]	@ (800236c <getSensorValues+0x9c>)
 800234e:	f001 ff9b 	bl	8004288 <HAL_ADC_PollForConversion>
	sensorsValues[4] = HAL_ADC_GetValue(&hadc1);
 8002352:	4806      	ldr	r0, [pc, #24]	@ (800236c <getSensorValues+0x9c>)
 8002354:	f002 f870 	bl	8004438 <HAL_ADC_GetValue>
 8002358:	ee07 0a90 	vmov	s15, r0
 800235c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <getSensorValues+0xa0>)
 8002362:	edc3 7a04 	vstr	s15, [r3, #16]
//	sprintf(msg, "%f,%f,%f,%f,%f\r\n",sensorsValues[0], sensorsValues[1], sensorsValues[2], sensorsValues[3], sensorsValues[4]);
//	HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg , strlen(msg));

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200001fc 	.word	0x200001fc
 8002370:	20000508 	.word	0x20000508

08002374 <setLedBrightness>:
void setLedBrightness(int brightness) {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,brightness);
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <setLedBrightness+0x1c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	200003a0 	.word	0x200003a0
 8002394:	00000000 	.word	0x00000000

08002398 <computeDeltaAngle>:

float computeDeltaAngle(uint16_t new_angle, uint16_t prev_angle) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	80fb      	strh	r3, [r7, #6]
 80023a4:	4613      	mov	r3, r2
 80023a6:	80bb      	strh	r3, [r7, #4]
    int16_t delta = new_angle - prev_angle;
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	88bb      	ldrh	r3, [r7, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	81fb      	strh	r3, [r7, #14]

    // Handle encoder overflow (angle wrapping)
    if (delta > (TICKS_PER_REV / 2)) {
 80023b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023ba:	dd05      	ble.n	80023c8 <computeDeltaAngle+0x30>
        delta -= TICKS_PER_REV;  // Counterclockwise overflow
 80023bc:	89fb      	ldrh	r3, [r7, #14]
 80023be:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	81fb      	strh	r3, [r7, #14]
 80023c6:	e009      	b.n	80023dc <computeDeltaAngle+0x44>
    } else if (delta < -(TICKS_PER_REV / 2)) {
 80023c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023cc:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80023d0:	da04      	bge.n	80023dc <computeDeltaAngle+0x44>
        delta += TICKS_PER_REV;  // Clockwise overflow
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d8:	b29b      	uxth	r3, r3
 80023da:	81fb      	strh	r3, [r7, #14]
    }

    // Convert to radians
    return (delta * 2.0f * M_PI) / TICKS_PER_REV;
 80023dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ec:	ee17 0a90 	vmov	r0, s15
 80023f0:	f7fe f8ba 	bl	8000568 <__aeabi_f2d>
 80023f4:	a30f      	add	r3, pc, #60	@ (adr r3, 8002434 <computeDeltaAngle+0x9c>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	f7fe f90d 	bl	8000618 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <computeDeltaAngle+0x98>)
 800240c:	f7fe fa2e 	bl	800086c <__aeabi_ddiv>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fbf6 	bl	8000c08 <__aeabi_d2f>
 800241c:	4603      	mov	r3, r0
 800241e:	ee07 3a90 	vmov	s15, r3
}
 8002422:	eeb0 0a67 	vmov.f32	s0, s15
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	f3af 8000 	nop.w
 8002430:	40b00000 	.word	0x40b00000
 8002434:	54442d18 	.word	0x54442d18
 8002438:	400921fb 	.word	0x400921fb
 800243c:	00000000 	.word	0x00000000

08002440 <updateRobotPosition>:

void updateRobotPosition() {
 8002440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
    // Read new encoder values
    getEncoderValue();
 8002448:	f7ff feda 	bl	8002200 <getEncoderValue>

    // Compute angle changes
    float delta_angle_L = computeDeltaAngle(raw_angle, prev_angle_L);
 800244c:	4b90      	ldr	r3, [pc, #576]	@ (8002690 <updateRobotPosition+0x250>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	4a90      	ldr	r2, [pc, #576]	@ (8002694 <updateRobotPosition+0x254>)
 8002454:	8812      	ldrh	r2, [r2, #0]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff9d 	bl	8002398 <computeDeltaAngle>
 800245e:	ed87 0a05 	vstr	s0, [r7, #20]
    float delta_angle_R = computeDeltaAngle(raw_angle_2, prev_angle_R);
 8002462:	4b8d      	ldr	r3, [pc, #564]	@ (8002698 <updateRobotPosition+0x258>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4a8c      	ldr	r2, [pc, #560]	@ (800269c <updateRobotPosition+0x25c>)
 800246a:	8812      	ldrh	r2, [r2, #0]
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff92 	bl	8002398 <computeDeltaAngle>
 8002474:	ed87 0a04 	vstr	s0, [r7, #16]

    // Convert to linear displacement
    float d_L = delta_angle_L * WHEEL_RADIUS;
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f7fe f875 	bl	8000568 <__aeabi_f2d>
 800247e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002668 <updateRobotPosition+0x228>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f8c8 	bl	8000618 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fbba 	bl	8000c08 <__aeabi_d2f>
 8002494:	4603      	mov	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
    float d_R = delta_angle_R * WHEEL_RADIUS;
 8002498:	6938      	ldr	r0, [r7, #16]
 800249a:	f7fe f865 	bl	8000568 <__aeabi_f2d>
 800249e:	a372      	add	r3, pc, #456	@ (adr r3, 8002668 <updateRobotPosition+0x228>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f8b8 	bl	8000618 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fbaa 	bl	8000c08 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	60bb      	str	r3, [r7, #8]
    float d_C = (d_L + d_R) / 2.0;  // Center displacement
 80024b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80024bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80024c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024cc:	edc7 7a01 	vstr	s15, [r7, #4]
    float d_theta = (d_R - d_L) / WHEEL_BASE;  // Change in orientation
 80024d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80024d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024dc:	ee17 0a90 	vmov	r0, s15
 80024e0:	f7fe f842 	bl	8000568 <__aeabi_f2d>
 80024e4:	a362      	add	r3, pc, #392	@ (adr r3, 8002670 <updateRobotPosition+0x230>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	f7fe f9bf 	bl	800086c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7fe fb87 	bl	8000c08 <__aeabi_d2f>
 80024fa:	4603      	mov	r3, r0
 80024fc:	603b      	str	r3, [r7, #0]

    // Update position
    x_pos += d_C * cos(theta);
 80024fe:	4b68      	ldr	r3, [pc, #416]	@ (80026a0 <updateRobotPosition+0x260>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f830 	bl	8000568 <__aeabi_f2d>
 8002508:	4604      	mov	r4, r0
 800250a:	460d      	mov	r5, r1
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7fe f82b 	bl	8000568 <__aeabi_f2d>
 8002512:	4680      	mov	r8, r0
 8002514:	4689      	mov	r9, r1
 8002516:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <updateRobotPosition+0x264>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f824 	bl	8000568 <__aeabi_f2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	ec43 2b10 	vmov	d0, r2, r3
 8002528:	f00c fd8a 	bl	800f040 <cos>
 800252c:	ec53 2b10 	vmov	r2, r3, d0
 8002530:	4640      	mov	r0, r8
 8002532:	4649      	mov	r1, r9
 8002534:	f7fe f870 	bl	8000618 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4620      	mov	r0, r4
 800253e:	4629      	mov	r1, r5
 8002540:	f7fd feb4 	bl	80002ac <__adddf3>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fb5c 	bl	8000c08 <__aeabi_d2f>
 8002550:	4603      	mov	r3, r0
 8002552:	4a53      	ldr	r2, [pc, #332]	@ (80026a0 <updateRobotPosition+0x260>)
 8002554:	6013      	str	r3, [r2, #0]
    y_pos += d_C * sin(theta);
 8002556:	4b54      	ldr	r3, [pc, #336]	@ (80026a8 <updateRobotPosition+0x268>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe f804 	bl	8000568 <__aeabi_f2d>
 8002560:	4604      	mov	r4, r0
 8002562:	460d      	mov	r5, r1
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7fd ffff 	bl	8000568 <__aeabi_f2d>
 800256a:	4680      	mov	r8, r0
 800256c:	4689      	mov	r9, r1
 800256e:	4b4d      	ldr	r3, [pc, #308]	@ (80026a4 <updateRobotPosition+0x264>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fff8 	bl	8000568 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	ec43 2b10 	vmov	d0, r2, r3
 8002580:	f00c fdb2 	bl	800f0e8 <sin>
 8002584:	ec53 2b10 	vmov	r2, r3, d0
 8002588:	4640      	mov	r0, r8
 800258a:	4649      	mov	r1, r9
 800258c:	f7fe f844 	bl	8000618 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4620      	mov	r0, r4
 8002596:	4629      	mov	r1, r5
 8002598:	f7fd fe88 	bl	80002ac <__adddf3>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe fb30 	bl	8000c08 <__aeabi_d2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a3f      	ldr	r2, [pc, #252]	@ (80026a8 <updateRobotPosition+0x268>)
 80025ac:	6013      	str	r3, [r2, #0]
    theta += d_theta;
 80025ae:	4b3d      	ldr	r3, [pc, #244]	@ (80026a4 <updateRobotPosition+0x264>)
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	edd7 7a00 	vldr	s15, [r7]
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <updateRobotPosition+0x264>)
 80025be:	edc3 7a00 	vstr	s15, [r3]

    // Keep theta in range [-π, π]
    if (theta > M_PI) {
 80025c2:	4b38      	ldr	r3, [pc, #224]	@ (80026a4 <updateRobotPosition+0x264>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffce 	bl	8000568 <__aeabi_f2d>
 80025cc:	a32a      	add	r3, pc, #168	@ (adr r3, 8002678 <updateRobotPosition+0x238>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fe fab1 	bl	8000b38 <__aeabi_dcmpgt>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <updateRobotPosition+0x1c4>
        theta -= 2.0 * M_PI;
 80025dc:	4b31      	ldr	r3, [pc, #196]	@ (80026a4 <updateRobotPosition+0x264>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffc1 	bl	8000568 <__aeabi_f2d>
 80025e6:	a326      	add	r3, pc, #152	@ (adr r3, 8002680 <updateRobotPosition+0x240>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fd fe5c 	bl	80002a8 <__aeabi_dsub>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe fb06 	bl	8000c08 <__aeabi_d2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4a29      	ldr	r2, [pc, #164]	@ (80026a4 <updateRobotPosition+0x264>)
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01f      	b.n	8002644 <updateRobotPosition+0x204>
    } else if (theta < -M_PI) {
 8002604:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <updateRobotPosition+0x264>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffad 	bl	8000568 <__aeabi_f2d>
 800260e:	a31e      	add	r3, pc, #120	@ (adr r3, 8002688 <updateRobotPosition+0x248>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f7fe fa72 	bl	8000afc <__aeabi_dcmplt>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <updateRobotPosition+0x204>
        theta += 2.0 * M_PI;
 800261e:	4b21      	ldr	r3, [pc, #132]	@ (80026a4 <updateRobotPosition+0x264>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ffa0 	bl	8000568 <__aeabi_f2d>
 8002628:	a315      	add	r3, pc, #84	@ (adr r3, 8002680 <updateRobotPosition+0x240>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	f7fd fe3d 	bl	80002ac <__adddf3>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe fae5 	bl	8000c08 <__aeabi_d2f>
 800263e:	4603      	mov	r3, r0
 8002640:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <updateRobotPosition+0x264>)
 8002642:	6013      	str	r3, [r2, #0]
    }

    // Store previous angles
    prev_angle_L = raw_angle;
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <updateRobotPosition+0x250>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29a      	uxth	r2, r3
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <updateRobotPosition+0x254>)
 800264c:	801a      	strh	r2, [r3, #0]
    prev_angle_R = raw_angle_2;
 800264e:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <updateRobotPosition+0x258>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29a      	uxth	r2, r3
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <updateRobotPosition+0x25c>)
 8002656:	801a      	strh	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002662:	bf00      	nop
 8002664:	f3af 8000 	nop.w
 8002668:	eb851eb8 	.word	0xeb851eb8
 800266c:	3f9eb851 	.word	0x3f9eb851
 8002670:	66666666 	.word	0x66666666
 8002674:	3fc66666 	.word	0x3fc66666
 8002678:	54442d18 	.word	0x54442d18
 800267c:	400921fb 	.word	0x400921fb
 8002680:	54442d18 	.word	0x54442d18
 8002684:	401921fb 	.word	0x401921fb
 8002688:	54442d18 	.word	0x54442d18
 800268c:	c00921fb 	.word	0xc00921fb
 8002690:	20000476 	.word	0x20000476
 8002694:	20000528 	.word	0x20000528
 8002698:	2000047a 	.word	0x2000047a
 800269c:	2000052a 	.word	0x2000052a
 80026a0:	2000051c 	.word	0x2000051c
 80026a4:	20000524 	.word	0x20000524
 80026a8:	20000520 	.word	0x20000520

080026ac <sendRobotData>:

void sendRobotData() {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
	cJSON *jsonObj = cJSON_CreateObject();
 80026b2:	f7ff fca9 	bl	8002008 <cJSON_CreateObject>
 80026b6:	6078      	str	r0, [r7, #4]

	cJSON_AddNumberToObject(jsonObj, "sensorValue1", sensorsValues[0]);
 80026b8:	4b4c      	ldr	r3, [pc, #304]	@ (80027ec <sendRobotData+0x140>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff53 	bl	8000568 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ec43 2b10 	vmov	d0, r2, r3
 80026ca:	4949      	ldr	r1, [pc, #292]	@ (80027f0 <sendRobotData+0x144>)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fc2d 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue2", sensorsValues[1]);
 80026d2:	4b46      	ldr	r3, [pc, #280]	@ (80027ec <sendRobotData+0x140>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff46 	bl	8000568 <__aeabi_f2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	ec43 2b10 	vmov	d0, r2, r3
 80026e4:	4943      	ldr	r1, [pc, #268]	@ (80027f4 <sendRobotData+0x148>)
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fc20 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue3", sensorsValues[2]);
 80026ec:	4b3f      	ldr	r3, [pc, #252]	@ (80027ec <sendRobotData+0x140>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff39 	bl	8000568 <__aeabi_f2d>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	ec43 2b10 	vmov	d0, r2, r3
 80026fe:	493e      	ldr	r1, [pc, #248]	@ (80027f8 <sendRobotData+0x14c>)
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fc13 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue4", sensorsValues[3]);
 8002706:	4b39      	ldr	r3, [pc, #228]	@ (80027ec <sendRobotData+0x140>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff2c 	bl	8000568 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	ec43 2b10 	vmov	d0, r2, r3
 8002718:	4938      	ldr	r1, [pc, #224]	@ (80027fc <sendRobotData+0x150>)
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fc06 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue5", sensorsValues[4]);
 8002720:	4b32      	ldr	r3, [pc, #200]	@ (80027ec <sendRobotData+0x140>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff1f 	bl	8000568 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	ec43 2b10 	vmov	d0, r2, r3
 8002732:	4933      	ldr	r1, [pc, #204]	@ (8002800 <sendRobotData+0x154>)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fbf9 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "xPos", x_pos);
 800273a:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <sendRobotData+0x158>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ff12 	bl	8000568 <__aeabi_f2d>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	ec43 2b10 	vmov	d0, r2, r3
 800274c:	492e      	ldr	r1, [pc, #184]	@ (8002808 <sendRobotData+0x15c>)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fbec 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "yPos", y_pos);
 8002754:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <sendRobotData+0x160>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd ff05 	bl	8000568 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ec43 2b10 	vmov	d0, r2, r3
 8002766:	492a      	ldr	r1, [pc, #168]	@ (8002810 <sendRobotData+0x164>)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fbdf 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "theta", theta);
 800276e:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <sendRobotData+0x168>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fef8 	bl	8000568 <__aeabi_f2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	ec43 2b10 	vmov	d0, r2, r3
 8002780:	4925      	ldr	r1, [pc, #148]	@ (8002818 <sendRobotData+0x16c>)
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fbd2 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "rawAngle1", raw_angle);
 8002788:	4b24      	ldr	r3, [pc, #144]	@ (800281c <sendRobotData+0x170>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd fec8 	bl	8000524 <__aeabi_ui2d>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	ec43 2b10 	vmov	d0, r2, r3
 800279c:	4920      	ldr	r1, [pc, #128]	@ (8002820 <sendRobotData+0x174>)
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fbc4 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "rawAngle2", raw_angle_2);
 80027a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002824 <sendRobotData+0x178>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd feba 	bl	8000524 <__aeabi_ui2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	ec43 2b10 	vmov	d0, r2, r3
 80027b8:	491b      	ldr	r1, [pc, #108]	@ (8002828 <sendRobotData+0x17c>)
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fbb6 	bl	8001f2c <cJSON_AddNumberToObject>

	    // Convert JSON object to string
	char *jsonString = cJSON_PrintUnformatted(jsonObj);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff f873 	bl	80018ac <cJSON_PrintUnformatted>
 80027c6:	6038      	str	r0, [r7, #0]

	// Send JSON string via UART (or any other communication interface)
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)jsonString, strlen(jsonString));
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	f7fd fd61 	bl	8000290 <strlen>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	4815      	ldr	r0, [pc, #84]	@ (800282c <sendRobotData+0x180>)
 80027d8:	f006 f852 	bl	8008880 <HAL_UART_Transmit_IT>

	// Free the JSON object after use
	cJSON_Delete(jsonObj);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe fc4f 	bl	8001080 <cJSON_Delete>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000508 	.word	0x20000508
 80027f0:	080101ac 	.word	0x080101ac
 80027f4:	080101bc 	.word	0x080101bc
 80027f8:	080101cc 	.word	0x080101cc
 80027fc:	080101dc 	.word	0x080101dc
 8002800:	080101ec 	.word	0x080101ec
 8002804:	2000051c 	.word	0x2000051c
 8002808:	080101fc 	.word	0x080101fc
 800280c:	20000520 	.word	0x20000520
 8002810:	08010204 	.word	0x08010204
 8002814:	20000524 	.word	0x20000524
 8002818:	0801020c 	.word	0x0801020c
 800281c:	20000476 	.word	0x20000476
 8002820:	08010214 	.word	0x08010214
 8002824:	2000047a 	.word	0x2000047a
 8002828:	08010220 	.word	0x08010220
 800282c:	200003ec 	.word	0x200003ec

08002830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002834:	f001 f898 	bl	8003968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002838:	f000 f838 	bl	80028ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800283c:	f000 fb52 	bl	8002ee4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002840:	f000 fb20 	bl	8002e84 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002844:	f000 f9bc 	bl	8002bc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002848:	f000 fa30 	bl	8002cac <MX_TIM3_Init>
  MX_TIM4_Init();
 800284c:	f000 faa4 	bl	8002d98 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002850:	f000 f87e 	bl	8002950 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002854:	f000 f934 	bl	8002ac0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002858:	f000 f972 	bl	8002b40 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 800285c:	2201      	movs	r2, #1
 800285e:	490d      	ldr	r1, [pc, #52]	@ (8002894 <main+0x64>)
 8002860:	480d      	ldr	r0, [pc, #52]	@ (8002898 <main+0x68>)
 8002862:	f006 f86b 	bl	800893c <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002866:	2108      	movs	r1, #8
 8002868:	480c      	ldr	r0, [pc, #48]	@ (800289c <main+0x6c>)
 800286a:	f005 f813 	bl	8007894 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800286e:	2100      	movs	r1, #0
 8002870:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <main+0x70>)
 8002872:	f005 f80f 	bl	8007894 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002876:	2100      	movs	r1, #0
 8002878:	480a      	ldr	r0, [pc, #40]	@ (80028a4 <main+0x74>)
 800287a:	f005 f80b 	bl	8007894 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800287e:	217f      	movs	r1, #127	@ 0x7f
 8002880:	4809      	ldr	r0, [pc, #36]	@ (80028a8 <main+0x78>)
 8002882:	f002 fb11 	bl	8004ea8 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  updateRobotPosition();
 8002886:	f7ff fddb 	bl	8002440 <updateRobotPosition>
	  getSensorValues();
 800288a:	f7ff fd21 	bl	80022d0 <getSensorValues>
	  updateRobotPosition();
 800288e:	bf00      	nop
 8002890:	e7f9      	b.n	8002886 <main+0x56>
 8002892:	bf00      	nop
 8002894:	2000047c 	.word	0x2000047c
 8002898:	200003ec 	.word	0x200003ec
 800289c:	20000308 	.word	0x20000308
 80028a0:	20000354 	.word	0x20000354
 80028a4:	200003a0 	.word	0x200003a0
 80028a8:	200001fc 	.word	0x200001fc

080028ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b096      	sub	sp, #88	@ 0x58
 80028b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	2244      	movs	r2, #68	@ 0x44
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f009 fb51 	bl	800bf62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c0:	463b      	mov	r3, r7
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80028d2:	f003 fc15 	bl	8006100 <HAL_PWREx_ControlVoltageScaling>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80028dc:	f000 fc70 	bl	80031c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e0:	2302      	movs	r3, #2
 80028e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ea:	2310      	movs	r3, #16
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ee:	2302      	movs	r3, #2
 80028f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028f2:	2302      	movs	r3, #2
 80028f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80028fa:	230a      	movs	r3, #10
 80028fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028fe:	2307      	movs	r3, #7
 8002900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002902:	2302      	movs	r3, #2
 8002904:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002906:	2302      	movs	r3, #2
 8002908:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fc4c 	bl	80061ac <HAL_RCC_OscConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800291a:	f000 fc51 	bl	80031c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291e:	230f      	movs	r3, #15
 8002920:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002922:	2303      	movs	r3, #3
 8002924:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002932:	463b      	mov	r3, r7
 8002934:	2104      	movs	r1, #4
 8002936:	4618      	mov	r0, r3
 8002938:	f004 f814 	bl	8006964 <HAL_RCC_ClockConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002942:	f000 fc3d 	bl	80031c0 <Error_Handler>
  }
}
 8002946:	bf00      	nop
 8002948:	3758      	adds	r7, #88	@ 0x58
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002972:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002974:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa8 <MX_ADC1_Init+0x158>)
 8002976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002978:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 800297a:	2200      	movs	r2, #0
 800297c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800297e:	4b49      	ldr	r3, [pc, #292]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002984:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800298a:	4b46      	ldr	r3, [pc, #280]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 800298c:	2201      	movs	r2, #1
 800298e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002990:	4b44      	ldr	r3, [pc, #272]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002992:	2204      	movs	r2, #4
 8002994:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002996:	4b43      	ldr	r3, [pc, #268]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002998:	2200      	movs	r2, #0
 800299a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800299c:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 800299e:	2200      	movs	r2, #0
 80029a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80029a2:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029a4:	2205      	movs	r2, #5
 80029a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029a8:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029b0:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029b6:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029c4:	4b37      	ldr	r3, [pc, #220]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80029ca:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029d2:	4834      	ldr	r0, [pc, #208]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029d4:	f001 fa4e 	bl	8003e74 <HAL_ADC_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80029de:	f000 fbef 	bl	80031c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	482d      	ldr	r0, [pc, #180]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 80029ee:	f002 fabb 	bl	8004f68 <HAL_ADCEx_MultiModeConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80029f8:	f000 fbe2 	bl	80031c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029fc:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <MX_ADC1_Init+0x15c>)
 80029fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a00:	2306      	movs	r3, #6
 8002a02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002a04:	2307      	movs	r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a08:	237f      	movs	r3, #127	@ 0x7f
 8002a0a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4822      	ldr	r0, [pc, #136]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002a1a:	f001 fd1b 	bl	8004454 <HAL_ADC_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002a24:	f000 fbcc 	bl	80031c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a28:	4b21      	ldr	r3, [pc, #132]	@ (8002ab0 <MX_ADC1_Init+0x160>)
 8002a2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	4619      	mov	r1, r3
 8002a34:	481b      	ldr	r0, [pc, #108]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002a36:	f001 fd0d 	bl	8004454 <HAL_ADC_ConfigChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8002a40:	f000 fbbe 	bl	80031c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <MX_ADC1_Init+0x164>)
 8002a46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a48:	2312      	movs	r3, #18
 8002a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4814      	ldr	r0, [pc, #80]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002a52:	f001 fcff 	bl	8004454 <HAL_ADC_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8002a5c:	f000 fbb0 	bl	80031c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002a60:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <MX_ADC1_Init+0x168>)
 8002a62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a64:	2318      	movs	r3, #24
 8002a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480d      	ldr	r0, [pc, #52]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002a6e:	f001 fcf1 	bl	8004454 <HAL_ADC_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8002a78:	f000 fba2 	bl	80031c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <MX_ADC1_Init+0x16c>)
 8002a7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4806      	ldr	r0, [pc, #24]	@ (8002aa4 <MX_ADC1_Init+0x154>)
 8002a8c:	f001 fce2 	bl	8004454 <HAL_ADC_ConfigChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8002a96:	f000 fb93 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	@ 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200001fc 	.word	0x200001fc
 8002aa8:	50040000 	.word	0x50040000
 8002aac:	10c00010 	.word	0x10c00010
 8002ab0:	14f00020 	.word	0x14f00020
 8002ab4:	19200040 	.word	0x19200040
 8002ab8:	25b00200 	.word	0x25b00200
 8002abc:	3ef08000 	.word	0x3ef08000

08002ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <MX_I2C1_Init+0x78>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002acc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b3c <MX_I2C1_Init+0x7c>)
 8002ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002adc:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002afa:	480e      	ldr	r0, [pc, #56]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002afc:	f002 fe36 	bl	800576c <HAL_I2C_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b06:	f000 fb5b 	bl	80031c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002b0e:	f003 fa51 	bl	8005fb4 <HAL_I2CEx_ConfigAnalogFilter>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b18:	f000 fb52 	bl	80031c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4805      	ldr	r0, [pc, #20]	@ (8002b34 <MX_I2C1_Init+0x74>)
 8002b20:	f003 fa93 	bl	800604a <HAL_I2CEx_ConfigDigitalFilter>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b2a:	f000 fb49 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000260 	.word	0x20000260
 8002b38:	40005400 	.word	0x40005400
 8002b3c:	10d19ce4 	.word	0x10d19ce4

08002b40 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b46:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <MX_I2C3_Init+0x78>)
 8002b48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <MX_I2C3_Init+0x7c>)
 8002b4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002b50:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b56:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b5c:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b6e:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b74:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b7a:	480e      	ldr	r0, [pc, #56]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b7c:	f002 fdf6 	bl	800576c <HAL_I2C_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002b86:	f000 fb1b 	bl	80031c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4809      	ldr	r0, [pc, #36]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002b8e:	f003 fa11 	bl	8005fb4 <HAL_I2CEx_ConfigAnalogFilter>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002b98:	f000 fb12 	bl	80031c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4805      	ldr	r0, [pc, #20]	@ (8002bb4 <MX_I2C3_Init+0x74>)
 8002ba0:	f003 fa53 	bl	800604a <HAL_I2CEx_ConfigDigitalFilter>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002baa:	f000 fb09 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200002b4 	.word	0x200002b4
 8002bb8:	40005c00 	.word	0x40005c00
 8002bbc:	10d19ce4 	.word	0x10d19ce4

08002bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	@ 0x38
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be0:	463b      	mov	r3, r7
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002bf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002bfc:	2227      	movs	r2, #39	@ 0x27
 8002bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c00:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002c06:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c08:	2263      	movs	r2, #99	@ 0x63
 8002c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c12:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c18:	4823      	ldr	r0, [pc, #140]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c1a:	f004 fd83 	bl	8007724 <HAL_TIM_Base_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002c24:	f000 facc 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c32:	4619      	mov	r1, r3
 8002c34:	481c      	ldr	r0, [pc, #112]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c36:	f005 f847 	bl	8007cc8 <HAL_TIM_ConfigClockSource>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002c40:	f000 fabe 	bl	80031c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c44:	4818      	ldr	r0, [pc, #96]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c46:	f004 fdc4 	bl	80077d2 <HAL_TIM_PWM_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002c50:	f000 fab6 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	4619      	mov	r1, r3
 8002c62:	4811      	ldr	r0, [pc, #68]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c64:	f005 fd36 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002c6e:	f000 faa7 	bl	80031c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c72:	2360      	movs	r3, #96	@ 0x60
 8002c74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c82:	463b      	mov	r3, r7
 8002c84:	2208      	movs	r2, #8
 8002c86:	4619      	mov	r1, r3
 8002c88:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c8a:	f004 ff09 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c94:	f000 fa94 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c98:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <MX_TIM2_Init+0xe8>)
 8002c9a:	f000 fc47 	bl	800352c <HAL_TIM_MspPostInit>

}
 8002c9e:	bf00      	nop
 8002ca0:	3738      	adds	r7, #56	@ 0x38
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000308 	.word	0x20000308

08002cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	@ 0x38
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ccc:	463b      	mov	r3, r7
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	615a      	str	r2, [r3, #20]
 8002cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cde:	4b2c      	ldr	r3, [pc, #176]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d94 <MX_TIM3_Init+0xe8>)
 8002ce2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002ce6:	2227      	movs	r2, #39	@ 0x27
 8002ce8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cea:	4b29      	ldr	r3, [pc, #164]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002cf0:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002cf2:	2263      	movs	r2, #99	@ 0x63
 8002cf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf6:	4b26      	ldr	r3, [pc, #152]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cfc:	4b24      	ldr	r3, [pc, #144]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002cfe:	2280      	movs	r2, #128	@ 0x80
 8002d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d02:	4823      	ldr	r0, [pc, #140]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002d04:	f004 fd0e 	bl	8007724 <HAL_TIM_Base_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d0e:	f000 fa57 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	481c      	ldr	r0, [pc, #112]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002d20:	f004 ffd2 	bl	8007cc8 <HAL_TIM_ConfigClockSource>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d2a:	f000 fa49 	bl	80031c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d2e:	4818      	ldr	r0, [pc, #96]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002d30:	f004 fd4f 	bl	80077d2 <HAL_TIM_PWM_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d3a:	f000 fa41 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4810      	ldr	r0, [pc, #64]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002d4e:	f005 fcc1 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002d58:	f000 fa32 	bl	80031c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d5c:	2360      	movs	r3, #96	@ 0x60
 8002d5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4619      	mov	r1, r3
 8002d72:	4807      	ldr	r0, [pc, #28]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002d74:	f004 fe94 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002d7e:	f000 fa1f 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d82:	4803      	ldr	r0, [pc, #12]	@ (8002d90 <MX_TIM3_Init+0xe4>)
 8002d84:	f000 fbd2 	bl	800352c <HAL_TIM_MspPostInit>

}
 8002d88:	bf00      	nop
 8002d8a:	3738      	adds	r7, #56	@ 0x38
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000354 	.word	0x20000354
 8002d94:	40000400 	.word	0x40000400

08002d98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	@ 0x38
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db8:	463b      	mov	r3, r7
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dca:	4b2c      	ldr	r3, [pc, #176]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002e80 <MX_TIM4_Init+0xe8>)
 8002dce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8002dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002dd2:	2227      	movs	r2, #39	@ 0x27
 8002dd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	4b29      	ldr	r3, [pc, #164]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002ddc:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002dde:	2263      	movs	r2, #99	@ 0x63
 8002de0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002de8:	4b24      	ldr	r3, [pc, #144]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002dea:	2280      	movs	r2, #128	@ 0x80
 8002dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dee:	4823      	ldr	r0, [pc, #140]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002df0:	f004 fc98 	bl	8007724 <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002dfa:	f000 f9e1 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	481c      	ldr	r0, [pc, #112]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002e0c:	f004 ff5c 	bl	8007cc8 <HAL_TIM_ConfigClockSource>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002e16:	f000 f9d3 	bl	80031c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e1a:	4818      	ldr	r0, [pc, #96]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002e1c:	f004 fcd9 	bl	80077d2 <HAL_TIM_PWM_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002e26:	f000 f9cb 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	4810      	ldr	r0, [pc, #64]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002e3a:	f005 fc4b 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002e44:	f000 f9bc 	bl	80031c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e48:	2360      	movs	r3, #96	@ 0x60
 8002e4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e58:	463b      	mov	r3, r7
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4807      	ldr	r0, [pc, #28]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002e60:	f004 fe1e 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002e6a:	f000 f9a9 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e6e:	4803      	ldr	r0, [pc, #12]	@ (8002e7c <MX_TIM4_Init+0xe4>)
 8002e70:	f000 fb5c 	bl	800352c <HAL_TIM_MspPostInit>

}
 8002e74:	bf00      	nop
 8002e76:	3738      	adds	r7, #56	@ 0x38
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200003a0 	.word	0x200003a0
 8002e80:	40000800 	.word	0x40000800

08002e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e88:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002e8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <MX_USART2_UART_Init+0x5c>)
 8002e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_USART2_UART_Init+0x58>)
 8002ec8:	f005 fc8c 	bl	80087e4 <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ed2:	f000 f975 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200003ec 	.word	0x200003ec
 8002ee0:	40004400 	.word	0x40004400

08002ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	4a35      	ldr	r2, [pc, #212]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f06:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f12:	4b30      	ldr	r3, [pc, #192]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f16:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	4a29      	ldr	r2, [pc, #164]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f36:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f46:	4a23      	ldr	r2, [pc, #140]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f4e:	4b21      	ldr	r3, [pc, #132]	@ (8002fd4 <MX_GPIO_Init+0xf0>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_B_DIRECTION_Pin, GPIO_PIN_RESET);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f64:	f002 fbea 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port, MOTOR_A_DIRECTION_Pin, GPIO_PIN_RESET);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2120      	movs	r1, #32
 8002f6c:	481a      	ldr	r0, [pc, #104]	@ (8002fd8 <MX_GPIO_Init+0xf4>)
 8002f6e:	f002 fbe5 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4619      	mov	r1, r3
 8002f88:	4814      	ldr	r0, [pc, #80]	@ (8002fdc <MX_GPIO_Init+0xf8>)
 8002f8a:	f002 fa2d 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_B_DIRECTION_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_B_DIRECTION_Pin;
 8002f8e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	2301      	movs	r3, #1
 8002f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002faa:	f002 fa1d 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_A_DIRECTION_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIRECTION_Pin;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_A_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4804      	ldr	r0, [pc, #16]	@ (8002fd8 <MX_GPIO_Init+0xf4>)
 8002fc6:	f002 fa0f 	bl	80053e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	@ 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	48000400 	.word	0x48000400
 8002fdc:	48000800 	.word	0x48000800

08002fe0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6d      	ldr	r2, [pc, #436]	@ (80031a4 <HAL_UART_RxCpltCallback+0x1c4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	f040 80d1 	bne.w	8003198 <HAL_UART_RxCpltCallback+0x1b8>
		if(receivedSign == '\n'){
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80031a8 <HAL_UART_RxCpltCallback+0x1c8>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b0a      	cmp	r3, #10
 8002ffc:	f040 809d 	bne.w	800313a <HAL_UART_RxCpltCallback+0x15a>
			frameReceived[frameCursor] = atoi(messageReceived);
 8003000:	486a      	ldr	r0, [pc, #424]	@ (80031ac <HAL_UART_RxCpltCallback+0x1cc>)
 8003002:	f007 f869 	bl	800a0d8 <atoi>
 8003006:	4603      	mov	r3, r0
 8003008:	4a69      	ldr	r2, [pc, #420]	@ (80031b0 <HAL_UART_RxCpltCallback+0x1d0>)
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	4611      	mov	r1, r2
 800300e:	17da      	asrs	r2, r3, #31
 8003010:	4698      	mov	r8, r3
 8003012:	4691      	mov	r9, r2
 8003014:	4a67      	ldr	r2, [pc, #412]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 8003016:	00cb      	lsls	r3, r1, #3
 8003018:	4413      	add	r3, r2
 800301a:	e9c3 8900 	strd	r8, r9, [r3]
			if(strcmp(frameReceived[0], EMERGENCY_STOP ) == 0) emergencyStop();
 800301e:	4b65      	ldr	r3, [pc, #404]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	4613      	mov	r3, r2
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd f8d1 	bl	80001d0 <strcmp>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <HAL_UART_RxCpltCallback+0x5a>
 8003034:	f7ff f84e 	bl	80020d4 <emergencyStop>
 8003038:	e06e      	b.n	8003118 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_FORWARD) == 0)moveForward();
 800303a:	4b5e      	ldr	r3, [pc, #376]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	4613      	mov	r3, r2
 8003042:	2101      	movs	r1, #1
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd f8c3 	bl	80001d0 <strcmp>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_UART_RxCpltCallback+0x76>
 8003050:	f7ff f85e 	bl	8002110 <moveForward>
 8003054:	e060      	b.n	8003118 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_REVERSE) == 0)moveReverse();
 8003056:	4b57      	ldr	r3, [pc, #348]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	4613      	mov	r3, r2
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd f8b5 	bl	80001d0 <strcmp>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <HAL_UART_RxCpltCallback+0x92>
 800306c:	f7ff f86e 	bl	800214c <moveReverse>
 8003070:	e052      	b.n	8003118 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_LEFT) == 0)turnLeft();
 8003072:	4b50      	ldr	r3, [pc, #320]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	4613      	mov	r3, r2
 800307a:	2103      	movs	r1, #3
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd f8a7 	bl	80001d0 <strcmp>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <HAL_UART_RxCpltCallback+0xae>
 8003088:	f7ff f89c 	bl	80021c4 <turnLeft>
 800308c:	e044      	b.n	8003118 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_RIGHT) == 0)turnRight();
 800308e:	4b49      	ldr	r3, [pc, #292]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	4613      	mov	r3, r2
 8003096:	2104      	movs	r1, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd f899 	bl	80001d0 <strcmp>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_UART_RxCpltCallback+0xca>
 80030a4:	f7ff f870 	bl	8002188 <turnRight>
 80030a8:	e036      	b.n	8003118 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_MOVMENT_SPEED) == 0)setMovmentSpeed(frameReceived[1], frameReceived[2]);
 80030aa:	4b42      	ldr	r3, [pc, #264]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	4613      	mov	r3, r2
 80030b2:	2105      	movs	r1, #5
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd f88b 	bl	80001d0 <strcmp>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <HAL_UART_RxCpltCallback+0xf8>
 80030c0:	4b3c      	ldr	r3, [pc, #240]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 80030c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030c6:	4610      	mov	r0, r2
 80030c8:	4b3a      	ldr	r3, [pc, #232]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 80030ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030ce:	4613      	mov	r3, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f7fe ffad 	bl	8002030 <setMovmentSpeed>
 80030d6:	e01f      	b.n	8003118 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_LED_BRIGHTNESS) == 0)setLedBrightness(frameReceived[1]);
 80030d8:	4b36      	ldr	r3, [pc, #216]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	4613      	mov	r3, r2
 80030e0:	2108      	movs	r1, #8
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd f874 	bl	80001d0 <strcmp>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d107      	bne.n	80030fe <HAL_UART_RxCpltCallback+0x11e>
 80030ee:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 80030f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030f4:	4613      	mov	r3, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f93c 	bl	8002374 <setLedBrightness>
 80030fc:	e00c      	b.n	8003118 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], GET_ROBOT_DATA) == 0){sendRobotData();}
 80030fe:	4b2d      	ldr	r3, [pc, #180]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	4613      	mov	r3, r2
 8003106:	2107      	movs	r1, #7
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd f861 	bl	80001d0 <strcmp>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_RxCpltCallback+0x138>
 8003114:	f7ff faca 	bl	80026ac <sendRobotData>
			memset(messageReceived, 0, 50);
 8003118:	2232      	movs	r2, #50	@ 0x32
 800311a:	2100      	movs	r1, #0
 800311c:	4823      	ldr	r0, [pc, #140]	@ (80031ac <HAL_UART_RxCpltCallback+0x1cc>)
 800311e:	f008 ff20 	bl	800bf62 <memset>
			memset(frameReceived, 0, 10);
 8003122:	220a      	movs	r2, #10
 8003124:	2100      	movs	r1, #0
 8003126:	4823      	ldr	r0, [pc, #140]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 8003128:	f008 ff1b 	bl	800bf62 <memset>
			messageCursor = 0;
 800312c:	4b22      	ldr	r3, [pc, #136]	@ (80031b8 <HAL_UART_RxCpltCallback+0x1d8>)
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
			frameCursor = 0;
 8003132:	4b1f      	ldr	r3, [pc, #124]	@ (80031b0 <HAL_UART_RxCpltCallback+0x1d0>)
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e029      	b.n	800318e <HAL_UART_RxCpltCallback+0x1ae>
		}
		else if(receivedSign == ' '){
 800313a:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_UART_RxCpltCallback+0x1c8>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d11a      	bne.n	8003178 <HAL_UART_RxCpltCallback+0x198>
			frameReceived[frameCursor++] = atoi(messageReceived);
 8003142:	481a      	ldr	r0, [pc, #104]	@ (80031ac <HAL_UART_RxCpltCallback+0x1cc>)
 8003144:	f006 ffc8 	bl	800a0d8 <atoi>
 8003148:	4602      	mov	r2, r0
 800314a:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_UART_RxCpltCallback+0x1d0>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	b2c8      	uxtb	r0, r1
 8003152:	4917      	ldr	r1, [pc, #92]	@ (80031b0 <HAL_UART_RxCpltCallback+0x1d0>)
 8003154:	7008      	strb	r0, [r1, #0]
 8003156:	17d1      	asrs	r1, r2, #31
 8003158:	4614      	mov	r4, r2
 800315a:	460d      	mov	r5, r1
 800315c:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <HAL_UART_RxCpltCallback+0x1d4>)
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	e9c3 4500 	strd	r4, r5, [r3]
			messageCursor = 0;
 8003166:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_UART_RxCpltCallback+0x1d8>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
			memset(messageReceived, 0, 50);
 800316c:	2232      	movs	r2, #50	@ 0x32
 800316e:	2100      	movs	r1, #0
 8003170:	480e      	ldr	r0, [pc, #56]	@ (80031ac <HAL_UART_RxCpltCallback+0x1cc>)
 8003172:	f008 fef6 	bl	800bf62 <memset>
 8003176:	e00a      	b.n	800318e <HAL_UART_RxCpltCallback+0x1ae>
		}
		else messageReceived[messageCursor++] = (char)receivedSign;
 8003178:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <HAL_UART_RxCpltCallback+0x1d8>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	b2d1      	uxtb	r1, r2
 8003180:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <HAL_UART_RxCpltCallback+0x1d8>)
 8003182:	7011      	strb	r1, [r2, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_UART_RxCpltCallback+0x1c8>)
 8003188:	7819      	ldrb	r1, [r3, #0]
 800318a:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <HAL_UART_RxCpltCallback+0x1cc>)
 800318c:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 800318e:	2201      	movs	r2, #1
 8003190:	4905      	ldr	r1, [pc, #20]	@ (80031a8 <HAL_UART_RxCpltCallback+0x1c8>)
 8003192:	480a      	ldr	r0, [pc, #40]	@ (80031bc <HAL_UART_RxCpltCallback+0x1dc>)
 8003194:	f005 fbd2 	bl	800893c <HAL_UART_Receive_IT>
	}
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031a2:	bf00      	nop
 80031a4:	40004400 	.word	0x40004400
 80031a8:	2000047c 	.word	0x2000047c
 80031ac:	20000480 	.word	0x20000480
 80031b0:	2000047e 	.word	0x2000047e
 80031b4:	200004b8 	.word	0x200004b8
 80031b8:	2000047d 	.word	0x2000047d
 80031bc:	200003ec 	.word	0x200003ec

080031c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c4:	b672      	cpsid	i
}
 80031c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <Error_Handler+0x8>

080031cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <HAL_MspInit+0x44>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003210 <HAL_MspInit+0x44>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031de:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <HAL_MspInit+0x44>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_MspInit+0x44>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ee:	4a08      	ldr	r2, [pc, #32]	@ (8003210 <HAL_MspInit+0x44>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_MspInit+0x44>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0ae      	sub	sp, #184	@ 0xb8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	2288      	movs	r2, #136	@ 0x88
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f008 fe94 	bl	800bf62 <memset>
  if(hadc->Instance==ADC1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a42      	ldr	r2, [pc, #264]	@ (8003348 <HAL_ADC_MspInit+0x134>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d17d      	bne.n	8003340 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003244:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003248:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800324a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800324e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8003252:	2302      	movs	r3, #2
 8003254:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800325a:	2308      	movs	r3, #8
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800325e:	2307      	movs	r3, #7
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003262:	2302      	movs	r3, #2
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003266:	2302      	movs	r3, #2
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800326a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003270:	f107 031c 	add.w	r3, r7, #28
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fd99 	bl	8006dac <HAL_RCCEx_PeriphCLKConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003280:	f7ff ff9e 	bl	80031c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003284:	4b31      	ldr	r3, [pc, #196]	@ (800334c <HAL_ADC_MspInit+0x138>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003288:	4a30      	ldr	r2, [pc, #192]	@ (800334c <HAL_ADC_MspInit+0x138>)
 800328a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800328e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003290:	4b2e      	ldr	r3, [pc, #184]	@ (800334c <HAL_ADC_MspInit+0x138>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800329c:	4b2b      	ldr	r3, [pc, #172]	@ (800334c <HAL_ADC_MspInit+0x138>)
 800329e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a0:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a8:	4b28      	ldr	r3, [pc, #160]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b8:	4a24      	ldr	r2, [pc, #144]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c0:	4b22      	ldr	r3, [pc, #136]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032cc:	4b1f      	ldr	r3, [pc, #124]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032d8:	4b1c      	ldr	r3, [pc, #112]	@ (800334c <HAL_ADC_MspInit+0x138>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032e4:	2308      	movs	r3, #8
 80032e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80032ea:	230b      	movs	r3, #11
 80032ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032fa:	4619      	mov	r1, r3
 80032fc:	4814      	ldr	r0, [pc, #80]	@ (8003350 <HAL_ADC_MspInit+0x13c>)
 80032fe:	f002 f873 	bl	80053e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003302:	2313      	movs	r3, #19
 8003304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003308:	230b      	movs	r3, #11
 800330a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003314:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800331e:	f002 f863 	bl	80053e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003322:	2301      	movs	r3, #1
 8003324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003328:	230b      	movs	r3, #11
 800332a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003334:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003338:	4619      	mov	r1, r3
 800333a:	4806      	ldr	r0, [pc, #24]	@ (8003354 <HAL_ADC_MspInit+0x140>)
 800333c:	f002 f854 	bl	80053e8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003340:	bf00      	nop
 8003342:	37b8      	adds	r7, #184	@ 0xb8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	50040000 	.word	0x50040000
 800334c:	40021000 	.word	0x40021000
 8003350:	48000800 	.word	0x48000800
 8003354:	48000400 	.word	0x48000400

08003358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b0ae      	sub	sp, #184	@ 0xb8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	2288      	movs	r2, #136	@ 0x88
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f008 fdf2 	bl	800bf62 <memset>
  if(hi2c->Instance==I2C1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a42      	ldr	r2, [pc, #264]	@ (800348c <HAL_I2C_MspInit+0x134>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d13c      	bne.n	8003402 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003388:	2340      	movs	r3, #64	@ 0x40
 800338a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800338c:	2300      	movs	r3, #0
 800338e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fd09 	bl	8006dac <HAL_RCCEx_PeriphCLKConfig>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80033a0:	f7ff ff0e 	bl	80031c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 80033a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a8:	4a39      	ldr	r2, [pc, #228]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b0:	4b37      	ldr	r3, [pc, #220]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033c4:	2312      	movs	r3, #18
 80033c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033d6:	2304      	movs	r3, #4
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033e0:	4619      	mov	r1, r3
 80033e2:	482c      	ldr	r0, [pc, #176]	@ (8003494 <HAL_I2C_MspInit+0x13c>)
 80033e4:	f002 f800 	bl	80053e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033e8:	4b29      	ldr	r3, [pc, #164]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	4a28      	ldr	r2, [pc, #160]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 80033ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f4:	4b26      	ldr	r3, [pc, #152]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003400:	e040      	b.n	8003484 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a24      	ldr	r2, [pc, #144]	@ (8003498 <HAL_I2C_MspInit+0x140>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d13b      	bne.n	8003484 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800340c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003410:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003412:	2300      	movs	r3, #0
 8003414:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	4618      	mov	r0, r3
 800341c:	f003 fcc6 	bl	8006dac <HAL_RCCEx_PeriphCLKConfig>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8003426:	f7ff fecb 	bl	80031c0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003436:	4b16      	ldr	r3, [pc, #88]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003442:	2303      	movs	r3, #3
 8003444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003448:	2312      	movs	r3, #18
 800344a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800345a:	2304      	movs	r3, #4
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003460:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003464:	4619      	mov	r1, r3
 8003466:	480d      	ldr	r0, [pc, #52]	@ (800349c <HAL_I2C_MspInit+0x144>)
 8003468:	f001 ffbe 	bl	80053e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800346c:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	4a07      	ldr	r2, [pc, #28]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 8003472:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003476:	6593      	str	r3, [r2, #88]	@ 0x58
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_I2C_MspInit+0x138>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	bf00      	nop
 8003486:	37b8      	adds	r7, #184	@ 0xb8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40005400 	.word	0x40005400
 8003490:	40021000 	.word	0x40021000
 8003494:	48000400 	.word	0x48000400
 8003498:	40005c00 	.word	0x40005c00
 800349c:	48000800 	.word	0x48000800

080034a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b0:	d10c      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034be:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034ca:	e022      	b.n	8003512 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <HAL_TIM_Base_MspInit+0x84>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10c      	bne.n	80034f0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
}
 80034ee:	e010      	b.n	8003512 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <HAL_TIM_Base_MspInit+0x88>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10b      	bne.n	8003512 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034fa:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fe:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6593      	str	r3, [r2, #88]	@ 0x58
 8003506:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <HAL_TIM_Base_MspInit+0x80>)
 8003508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800

0800352c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354c:	d11d      	bne.n	800358a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	4b32      	ldr	r3, [pc, #200]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003552:	4a31      	ldr	r2, [pc, #196]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355a:	4b2f      	ldr	r3, [pc, #188]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_B_SPEED_Pin;
 8003566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800356a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	2300      	movs	r3, #0
 8003576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003578:	2301      	movs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEED_GPIO_Port, &GPIO_InitStruct);
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	4619      	mov	r1, r3
 8003582:	4826      	ldr	r0, [pc, #152]	@ (800361c <HAL_TIM_MspPostInit+0xf0>)
 8003584:	f001 ff30 	bl	80053e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003588:	e042      	b.n	8003610 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a24      	ldr	r2, [pc, #144]	@ (8003620 <HAL_TIM_MspPostInit+0xf4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d11c      	bne.n	80035ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003594:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003598:	4a1f      	ldr	r2, [pc, #124]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_B_SPEEDB4_Pin;
 80035ac:	2310      	movs	r3, #16
 80035ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035bc:	2302      	movs	r3, #2
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEEDB4_GPIO_Port, &GPIO_InitStruct);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	4815      	ldr	r0, [pc, #84]	@ (800361c <HAL_TIM_MspPostInit+0xf0>)
 80035c8:	f001 ff0e 	bl	80053e8 <HAL_GPIO_Init>
}
 80035cc:	e020      	b.n	8003610 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <HAL_TIM_MspPostInit+0xf8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <HAL_TIM_MspPostInit+0xec>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80035f0:	2340      	movs	r3, #64	@ 0x40
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003600:	2302      	movs	r3, #2
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4804      	ldr	r0, [pc, #16]	@ (800361c <HAL_TIM_MspPostInit+0xf0>)
 800360c:	f001 feec 	bl	80053e8 <HAL_GPIO_Init>
}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	@ 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	48000400 	.word	0x48000400
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b0ac      	sub	sp, #176	@ 0xb0
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	2288      	movs	r2, #136	@ 0x88
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f008 fc8a 	bl	800bf62 <memset>
  if(huart->Instance==USART2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a25      	ldr	r2, [pc, #148]	@ (80036e8 <HAL_UART_MspInit+0xc0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d143      	bne.n	80036e0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003658:	2302      	movs	r3, #2
 800365a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800365c:	2300      	movs	r3, #0
 800365e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4618      	mov	r0, r3
 8003666:	f003 fba1 	bl	8006dac <HAL_RCCEx_PeriphCLKConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003670:	f7ff fda6 	bl	80031c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003674:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_UART_MspInit+0xc4>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <HAL_UART_MspInit+0xc4>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003680:	4b1a      	ldr	r3, [pc, #104]	@ (80036ec <HAL_UART_MspInit+0xc4>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <HAL_UART_MspInit+0xc4>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003690:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <HAL_UART_MspInit+0xc4>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003698:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <HAL_UART_MspInit+0xc4>)
 800369a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036a4:	230c      	movs	r3, #12
 80036a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b6:	2303      	movs	r3, #3
 80036b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036bc:	2307      	movs	r3, #7
 80036be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036c6:	4619      	mov	r1, r3
 80036c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036cc:	f001 fe8c 	bl	80053e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2101      	movs	r1, #1
 80036d4:	2026      	movs	r0, #38	@ 0x26
 80036d6:	f001 fdd2 	bl	800527e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036da:	2026      	movs	r0, #38	@ 0x26
 80036dc:	f001 fdeb 	bl	80052b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80036e0:	bf00      	nop
 80036e2:	37b0      	adds	r7, #176	@ 0xb0
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40004400 	.word	0x40004400
 80036ec:	40021000 	.word	0x40021000

080036f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036f4:	bf00      	nop
 80036f6:	e7fd      	b.n	80036f4 <NMI_Handler+0x4>

080036f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <HardFault_Handler+0x4>

08003700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <MemManage_Handler+0x4>

08003708 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <BusFault_Handler+0x4>

08003710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <UsageFault_Handler+0x4>

08003718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003746:	f000 f96b 	bl	8003a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003754:	4802      	ldr	r0, [pc, #8]	@ (8003760 <USART2_IRQHandler+0x10>)
 8003756:	f005 f93d 	bl	80089d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200003ec 	.word	0x200003ec

08003764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return 1;
 8003768:	2301      	movs	r3, #1
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <_kill>:

int _kill(int pid, int sig)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800377e:	f008 fc65 	bl	800c04c <__errno>
 8003782:	4603      	mov	r3, r0
 8003784:	2216      	movs	r2, #22
 8003786:	601a      	str	r2, [r3, #0]
  return -1;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_exit>:

void _exit (int status)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800379c:	f04f 31ff 	mov.w	r1, #4294967295
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ffe7 	bl	8003774 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <_exit+0x12>

080037aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e00a      	b.n	80037d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037bc:	f3af 8000 	nop.w
 80037c0:	4601      	mov	r1, r0
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	60ba      	str	r2, [r7, #8]
 80037c8:	b2ca      	uxtb	r2, r1
 80037ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3301      	adds	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	dbf0      	blt.n	80037bc <_read+0x12>
  }

  return len;
 80037da:	687b      	ldr	r3, [r7, #4]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e009      	b.n	800380a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	60ba      	str	r2, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	dbf1      	blt.n	80037f6 <_write+0x12>
  }
  return len;
 8003812:	687b      	ldr	r3, [r7, #4]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_close>:

int _close(int file)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003844:	605a      	str	r2, [r3, #4]
  return 0;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_isatty>:

int _isatty(int file)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800388c:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <_sbrk+0x5c>)
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <_sbrk+0x60>)
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <_sbrk+0x64>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a0:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <_sbrk+0x64>)
 80038a2:	4a12      	ldr	r2, [pc, #72]	@ (80038ec <_sbrk+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <_sbrk+0x64>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d207      	bcs.n	80038c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038b4:	f008 fbca 	bl	800c04c <__errno>
 80038b8:	4603      	mov	r3, r0
 80038ba:	220c      	movs	r2, #12
 80038bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	e009      	b.n	80038d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <_sbrk+0x64>)
 80038d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20018000 	.word	0x20018000
 80038e4:	00000400 	.word	0x00000400
 80038e8:	2000052c 	.word	0x2000052c
 80038ec:	20000680 	.word	0x20000680

080038f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <SystemInit+0x20>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <SystemInit+0x20>)
 80038fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <Reset_Handler>:
 8003914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800394c <LoopForever+0x2>
 8003918:	f7ff ffea 	bl	80038f0 <SystemInit>
 800391c:	480c      	ldr	r0, [pc, #48]	@ (8003950 <LoopForever+0x6>)
 800391e:	490d      	ldr	r1, [pc, #52]	@ (8003954 <LoopForever+0xa>)
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <LoopForever+0xe>)
 8003922:	2300      	movs	r3, #0
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:
 8003926:	58d4      	ldr	r4, [r2, r3]
 8003928:	50c4      	str	r4, [r0, r3]
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:
 800392c:	18c4      	adds	r4, r0, r3
 800392e:	428c      	cmp	r4, r1
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <LoopForever+0x12>)
 8003934:	4c0a      	ldr	r4, [pc, #40]	@ (8003960 <LoopForever+0x16>)
 8003936:	2300      	movs	r3, #0
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:
 800393e:	42a2      	cmp	r2, r4
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>
 8003942:	f008 fb89 	bl	800c058 <__libc_init_array>
 8003946:	f7fe ff73 	bl	8002830 <main>

0800394a <LoopForever>:
 800394a:	e7fe      	b.n	800394a <LoopForever>
 800394c:	20018000 	.word	0x20018000
 8003950:	20000000 	.word	0x20000000
 8003954:	200001e0 	.word	0x200001e0
 8003958:	080108b0 	.word	0x080108b0
 800395c:	200001e0 	.word	0x200001e0
 8003960:	20000680 	.word	0x20000680

08003964 <ADC1_2_IRQHandler>:
 8003964:	e7fe      	b.n	8003964 <ADC1_2_IRQHandler>
	...

08003968 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003972:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <HAL_Init+0x3c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a0b      	ldr	r2, [pc, #44]	@ (80039a4 <HAL_Init+0x3c>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800397c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800397e:	2003      	movs	r0, #3
 8003980:	f001 fc72 	bl	8005268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003984:	2000      	movs	r0, #0
 8003986:	f000 f80f 	bl	80039a8 <HAL_InitTick>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	71fb      	strb	r3, [r7, #7]
 8003994:	e001      	b.n	800399a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003996:	f7ff fc19 	bl	80031cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800399a:	79fb      	ldrb	r3, [r7, #7]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40022000 	.word	0x40022000

080039a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039b4:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <HAL_InitTick+0x6c>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d023      	beq.n	8003a04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039bc:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <HAL_InitTick+0x70>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <HAL_InitTick+0x6c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	4619      	mov	r1, r3
 80039c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fc7d 	bl	80052d2 <HAL_SYSTICK_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d809      	bhi.n	80039f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e4:	2200      	movs	r2, #0
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f001 fc47 	bl	800527e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039f0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <HAL_InitTick+0x74>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e007      	b.n	8003a08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e004      	b.n	8003a08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e001      	b.n	8003a08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000014 	.word	0x20000014
 8003a18:	2000000c 	.word	0x2000000c
 8003a1c:	20000010 	.word	0x20000010

08003a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a24:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_IncTick+0x20>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_IncTick+0x24>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4413      	add	r3, r2
 8003a30:	4a04      	ldr	r2, [pc, #16]	@ (8003a44 <HAL_IncTick+0x24>)
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000014 	.word	0x20000014
 8003a44:	20000530 	.word	0x20000530

08003a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <HAL_GetTick+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000530 	.word	0x20000530

08003a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3360      	adds	r3, #96	@ 0x60
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <LL_ADC_SetOffset+0x44>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	03fff000 	.word	0x03fff000

08003b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3360      	adds	r3, #96	@ 0x60
 8003b1e:	461a      	mov	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3360      	adds	r3, #96	@ 0x60
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3330      	adds	r3, #48	@ 0x30
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	4413      	add	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	211f      	movs	r1, #31
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0e9b      	lsrs	r3, r3, #26
 8003bd0:	f003 011f 	and.w	r1, r3, #31
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	431a      	orrs	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	461a      	mov	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0e5b      	lsrs	r3, r3, #25
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	0d1b      	lsrs	r3, r3, #20
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2107      	movs	r1, #7
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	401a      	ands	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	0d1b      	lsrs	r3, r3, #20
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	43db      	mvns	r3, r3
 8003c62:	401a      	ands	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0318 	and.w	r3, r3, #24
 8003c6a:	4908      	ldr	r1, [pc, #32]	@ (8003c8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c6c:	40d9      	lsrs	r1, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	400b      	ands	r3, r1
 8003c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	0007ffff 	.word	0x0007ffff

08003c90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6093      	str	r3, [r2, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d00:	d101      	bne.n	8003d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d50:	d101      	bne.n	8003d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003da0:	f043 0202 	orr.w	r2, r3, #2
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <LL_ADC_IsEnabled+0x18>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <LL_ADC_IsEnabled+0x1a>
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d101      	bne.n	8003df2 <LL_ADC_IsDisableOngoing+0x18>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <LL_ADC_IsDisableOngoing+0x1a>
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e14:	f043 0204 	orr.w	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d101      	bne.n	8003e40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b089      	sub	sp, #36	@ 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e130      	b.n	80040f0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff f9b9 	bl	8003214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff19 	bl	8003cec <LL_ADC_IsDeepPowerDownEnabled>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff feff 	bl	8003cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff34 	bl	8003d3c <LL_ADC_IsInternalRegulatorEnabled>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d115      	bne.n	8003f06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff ff18 	bl	8003d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ee4:	4b84      	ldr	r3, [pc, #528]	@ (80040f8 <HAL_ADC_Init+0x284>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	4a84      	ldr	r2, [pc, #528]	@ (80040fc <HAL_ADC_Init+0x288>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f9      	bne.n	8003efa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff16 	bl	8003d3c <LL_ADC_IsInternalRegulatorEnabled>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	f043 0210 	orr.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff ff76 	bl	8003e28 <LL_ADC_REG_IsConversionOngoing>
 8003f3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 80c9 	bne.w	80040de <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 80c5 	bne.w	80040de <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003f5c:	f043 0202 	orr.w	r2, r3, #2
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff23 	bl	8003db4 <LL_ADC_IsEnabled>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d115      	bne.n	8003fa0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f74:	4862      	ldr	r0, [pc, #392]	@ (8004100 <HAL_ADC_Init+0x28c>)
 8003f76:	f7ff ff1d 	bl	8003db4 <LL_ADC_IsEnabled>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	4861      	ldr	r0, [pc, #388]	@ (8004104 <HAL_ADC_Init+0x290>)
 8003f7e:	f7ff ff19 	bl	8003db4 <LL_ADC_IsEnabled>
 8003f82:	4603      	mov	r3, r0
 8003f84:	431c      	orrs	r4, r3
 8003f86:	4860      	ldr	r0, [pc, #384]	@ (8004108 <HAL_ADC_Init+0x294>)
 8003f88:	f7ff ff14 	bl	8003db4 <LL_ADC_IsEnabled>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4323      	orrs	r3, r4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	485c      	ldr	r0, [pc, #368]	@ (800410c <HAL_ADC_Init+0x298>)
 8003f9c:	f7ff fd60 	bl	8003a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e5b      	ldrb	r3, [r3, #25]
 8003fa4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003faa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003fb0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003fb6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fbe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d106      	bne.n	8003fdc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	045b      	lsls	r3, r3, #17
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	4b44      	ldr	r3, [pc, #272]	@ (8004110 <HAL_ADC_Init+0x29c>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	430b      	orrs	r3, r1
 800400a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff1c 	bl	8003e4e <LL_ADC_INJ_IsConversionOngoing>
 8004016:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d13d      	bne.n	800409a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d13a      	bne.n	800409a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004028:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004030:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004040:	f023 0302 	bic.w	r3, r3, #2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	430b      	orrs	r3, r1
 800404c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004054:	2b01      	cmp	r3, #1
 8004056:	d118      	bne.n	800408a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004062:	f023 0304 	bic.w	r3, r3, #4
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800406e:	4311      	orrs	r1, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004074:	4311      	orrs	r1, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800407a:	430a      	orrs	r2, r1
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	611a      	str	r2, [r3, #16]
 8004088:	e007      	b.n	800409a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10c      	bne.n	80040bc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	f023 010f 	bic.w	r1, r3, #15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	1e5a      	subs	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040ba:	e007      	b.n	80040cc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 020f 	bic.w	r2, r2, #15
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d0:	f023 0303 	bic.w	r3, r3, #3
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54
 80040dc:	e007      	b.n	80040ee <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	f043 0210 	orr.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3724      	adds	r7, #36	@ 0x24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}
 80040f8:	2000000c 	.word	0x2000000c
 80040fc:	053e2d63 	.word	0x053e2d63
 8004100:	50040000 	.word	0x50040000
 8004104:	50040100 	.word	0x50040100
 8004108:	50040200 	.word	0x50040200
 800410c:	50040300 	.word	0x50040300
 8004110:	fff0c007 	.word	0xfff0c007

08004114 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800411c:	4857      	ldr	r0, [pc, #348]	@ (800427c <HAL_ADC_Start+0x168>)
 800411e:	f7ff fdb7 	bl	8003c90 <LL_ADC_GetMultimode>
 8004122:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fe7d 	bl	8003e28 <LL_ADC_REG_IsConversionOngoing>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 809c 	bne.w	800426e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_ADC_Start+0x30>
 8004140:	2302      	movs	r3, #2
 8004142:	e097      	b.n	8004274 <HAL_ADC_Start+0x160>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fd73 	bl	8004c38 <ADC_Enable>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f040 8083 	bne.w	8004264 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004162:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a42      	ldr	r2, [pc, #264]	@ (8004280 <HAL_ADC_Start+0x16c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d002      	beq.n	8004182 <HAL_ADC_Start+0x6e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	e000      	b.n	8004184 <HAL_ADC_Start+0x70>
 8004182:	4b40      	ldr	r3, [pc, #256]	@ (8004284 <HAL_ADC_Start+0x170>)
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	4293      	cmp	r3, r2
 800418a:	d002      	beq.n	8004192 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004196:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041aa:	d106      	bne.n	80041ba <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b0:	f023 0206 	bic.w	r2, r3, #6
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80041b8:	e002      	b.n	80041c0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	221c      	movs	r2, #28
 80041c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004280 <HAL_ADC_Start+0x16c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d002      	beq.n	80041e0 <HAL_ADC_Start+0xcc>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e000      	b.n	80041e2 <HAL_ADC_Start+0xce>
 80041e0:	4b28      	ldr	r3, [pc, #160]	@ (8004284 <HAL_ADC_Start+0x170>)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d008      	beq.n	80041fc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d002      	beq.n	80041fc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b09      	cmp	r3, #9
 80041fa:	d114      	bne.n	8004226 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004212:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fdee 	bl	8003e00 <LL_ADC_REG_StartConversion>
 8004224:	e025      	b.n	8004272 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <HAL_ADC_Start+0x16c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d002      	beq.n	8004242 <HAL_ADC_Start+0x12e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	e000      	b.n	8004244 <HAL_ADC_Start+0x130>
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <HAL_ADC_Start+0x170>)
 8004244:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00f      	beq.n	8004272 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004256:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800425a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
 8004262:	e006      	b.n	8004272 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800426c:	e001      	b.n	8004272 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004272:	7dfb      	ldrb	r3, [r7, #23]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	50040300 	.word	0x50040300
 8004280:	50040100 	.word	0x50040100
 8004284:	50040000 	.word	0x50040000

08004288 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004292:	4866      	ldr	r0, [pc, #408]	@ (800442c <HAL_ADC_PollForConversion+0x1a4>)
 8004294:	f7ff fcfc 	bl	8003c90 <LL_ADC_GetMultimode>
 8004298:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d102      	bne.n	80042a8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80042a2:	2308      	movs	r3, #8
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e02a      	b.n	80042fe <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d002      	beq.n	80042ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b09      	cmp	r3, #9
 80042b8:	d111      	bne.n	80042de <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0a4      	b.n	8004422 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80042d8:	2304      	movs	r3, #4
 80042da:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80042dc:	e00f      	b.n	80042fe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80042de:	4853      	ldr	r0, [pc, #332]	@ (800442c <HAL_ADC_PollForConversion+0x1a4>)
 80042e0:	f7ff fce4 	bl	8003cac <LL_ADC_GetMultiDMATransfer>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e093      	b.n	8004422 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80042fa:	2304      	movs	r3, #4
 80042fc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80042fe:	f7ff fba3 	bl	8003a48 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004304:	e021      	b.n	800434a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d01d      	beq.n	800434a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800430e:	f7ff fb9b 	bl	8003a48 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <HAL_ADC_PollForConversion+0x9c>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d112      	bne.n	800434a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e06b      	b.n	8004422 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0d6      	beq.n	8004306 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fc02 	bl	8003b72 <LL_ADC_REG_IsTriggerSourceSWStart>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01c      	beq.n	80043ae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7e5b      	ldrb	r3, [r3, #25]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d118      	bne.n	80043ae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b08      	cmp	r3, #8
 8004388:	d111      	bne.n	80043ae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <HAL_ADC_PollForConversion+0x1a8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d002      	beq.n	80043be <HAL_ADC_PollForConversion+0x136>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	e000      	b.n	80043c0 <HAL_ADC_PollForConversion+0x138>
 80043be:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <HAL_ADC_PollForConversion+0x1ac>)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d008      	beq.n	80043da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d002      	beq.n	80043da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	d104      	bne.n	80043e4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e00c      	b.n	80043fe <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <HAL_ADC_PollForConversion+0x1a8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d002      	beq.n	80043f4 <HAL_ADC_PollForConversion+0x16c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	e000      	b.n	80043f6 <HAL_ADC_PollForConversion+0x16e>
 80043f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <HAL_ADC_PollForConversion+0x1ac>)
 80043f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d104      	bne.n	800440e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e008      	b.n	8004420 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	220c      	movs	r2, #12
 800441e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	50040300 	.word	0x50040300
 8004430:	50040100 	.word	0x50040100
 8004434:	50040000 	.word	0x50040000

08004438 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b0b6      	sub	sp, #216	@ 0xd8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x22>
 8004472:	2302      	movs	r3, #2
 8004474:	e3c9      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x7b6>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fcd0 	bl	8003e28 <LL_ADC_REG_IsConversionOngoing>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 83aa 	bne.w	8004be4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d824      	bhi.n	80044ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	3b02      	subs	r3, #2
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d81b      	bhi.n	80044e2 <HAL_ADC_ConfigChannel+0x8e>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <HAL_ADC_ConfigChannel+0x5c>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044c9 	.word	0x080044c9
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044d9 	.word	0x080044d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80044c0:	230c      	movs	r3, #12
 80044c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80044c6:	e010      	b.n	80044ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80044c8:	2312      	movs	r3, #18
 80044ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80044ce:	e00c      	b.n	80044ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80044d0:	2318      	movs	r3, #24
 80044d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80044d6:	e008      	b.n	80044ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80044d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80044e0:	e003      	b.n	80044ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80044e2:	2306      	movs	r3, #6
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80044e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80044f8:	f7ff fb4e 	bl	8003b98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fc91 	bl	8003e28 <LL_ADC_REG_IsConversionOngoing>
 8004506:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fc9d 	bl	8003e4e <LL_ADC_INJ_IsConversionOngoing>
 8004514:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 81a4 	bne.w	800486a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 819f 	bne.w	800486a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	461a      	mov	r2, r3
 800453a:	f7ff fb59 	bl	8003bf0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d00a      	beq.n	8004576 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6919      	ldr	r1, [r3, #16]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004570:	f7ff faaa 	bl	8003ac8 <LL_ADC_SetOffset>
 8004574:	e179      	b.n	800486a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fac7 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x14e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fabc 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	0e9b      	lsrs	r3, r3, #26
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	e01e      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x18c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fab1 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80045d0:	2320      	movs	r3, #32
 80045d2:	e004      	b.n	80045de <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80045d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x1a4>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	e018      	b.n	800462a <HAL_ADC_ConfigChannel+0x1d6>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800460c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e004      	b.n	800462a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800462a:	429a      	cmp	r2, r3
 800462c:	d106      	bne.n	800463c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fa80 	bl	8003b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2101      	movs	r1, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fa64 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x214>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2101      	movs	r1, #1
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fa59 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	0e9b      	lsrs	r3, r3, #26
 8004662:	f003 021f 	and.w	r2, r3, #31
 8004666:	e01e      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x252>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fa4e 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004674:	4603      	mov	r3, r0
 8004676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800467e:	fa93 f3a3 	rbit	r3, r3
 8004682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004686:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800468e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004696:	2320      	movs	r3, #32
 8004698:	e004      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800469a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_ADC_ConfigChannel+0x26a>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0e9b      	lsrs	r3, r3, #26
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	e018      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x29c>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80046d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80046da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e004      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80046e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d106      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fa1d 	bl	8003b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fa01 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 800470e:	4603      	mov	r3, r0
 8004710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <HAL_ADC_ConfigChannel+0x2da>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff f9f6 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 8004724:	4603      	mov	r3, r0
 8004726:	0e9b      	lsrs	r3, r3, #26
 8004728:	f003 021f 	and.w	r2, r3, #31
 800472c:	e01e      	b.n	800476c <HAL_ADC_ConfigChannel+0x318>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2102      	movs	r1, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f9eb 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 800473a:	4603      	mov	r3, r0
 800473c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004744:	fa93 f3a3 	rbit	r3, r3
 8004748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800474c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800475c:	2320      	movs	r3, #32
 800475e:	e004      	b.n	800476a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004760:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x330>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	0e9b      	lsrs	r3, r3, #26
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	e014      	b.n	80047ae <HAL_ADC_ConfigChannel+0x35a>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004798:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e004      	b.n	80047ae <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80047a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d106      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f9be 	bl	8003b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2103      	movs	r1, #3
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff f9a2 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x398>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2103      	movs	r1, #3
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff f997 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80047e2:	4603      	mov	r3, r0
 80047e4:	0e9b      	lsrs	r3, r3, #26
 80047e6:	f003 021f 	and.w	r2, r3, #31
 80047ea:	e017      	b.n	800481c <HAL_ADC_ConfigChannel+0x3c8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2103      	movs	r1, #3
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff f98c 	bl	8003b10 <LL_ADC_GetOffsetChannel>
 80047f8:	4603      	mov	r3, r0
 80047fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004806:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800480e:	2320      	movs	r3, #32
 8004810:	e003      	b.n	800481a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x3e0>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	e011      	b.n	8004858 <HAL_ADC_ConfigChannel+0x404>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004844:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e003      	b.n	8004858 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004858:	429a      	cmp	r2, r3
 800485a:	d106      	bne.n	800486a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	2103      	movs	r1, #3
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff f969 	bl	8003b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff faa0 	bl	8003db4 <LL_ADC_IsEnabled>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 8140 	bne.w	8004afc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	461a      	mov	r2, r3
 800488a:	f7ff f9dd 	bl	8003c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4a8f      	ldr	r2, [pc, #572]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x67c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	f040 8131 	bne.w	8004afc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x46e>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	0e9b      	lsrs	r3, r3, #26
 80048b0:	3301      	adds	r3, #1
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2b09      	cmp	r3, #9
 80048b8:	bf94      	ite	ls
 80048ba:	2301      	movls	r3, #1
 80048bc:	2300      	movhi	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e019      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4a2>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80048d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80048d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80048da:	2320      	movs	r3, #32
 80048dc:	e003      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80048de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	bf94      	ite	ls
 80048f0:	2301      	movls	r3, #1
 80048f2:	2300      	movhi	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d079      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x4c2>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	3301      	adds	r3, #1
 800490e:	069b      	lsls	r3, r3, #26
 8004910:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004914:	e015      	b.n	8004942 <HAL_ADC_ConfigChannel+0x4ee>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004926:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800492e:	2320      	movs	r3, #32
 8004930:	e003      	b.n	800493a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004934:	fab3 f383 	clz	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	3301      	adds	r3, #1
 800493c:	069b      	lsls	r3, r3, #26
 800493e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x50e>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	0e9b      	lsrs	r3, r3, #26
 8004954:	3301      	adds	r3, #1
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	e017      	b.n	8004992 <HAL_ADC_ConfigChannel+0x53e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004972:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800497a:	2320      	movs	r3, #32
 800497c:	e003      	b.n	8004986 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800497e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	3301      	adds	r3, #1
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	ea42 0103 	orr.w	r1, r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x564>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	0e9b      	lsrs	r3, r3, #26
 80049a8:	3301      	adds	r3, #1
 80049aa:	f003 021f 	and.w	r2, r3, #31
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	051b      	lsls	r3, r3, #20
 80049b6:	e018      	b.n	80049ea <HAL_ADC_ConfigChannel+0x596>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80049d0:	2320      	movs	r3, #32
 80049d2:	e003      	b.n	80049dc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f003 021f 	and.w	r2, r3, #31
 80049e2:	4613      	mov	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4413      	add	r3, r2
 80049e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049ea:	430b      	orrs	r3, r1
 80049ec:	e081      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x5b6>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	3301      	adds	r3, #1
 8004a02:	069b      	lsls	r3, r3, #26
 8004a04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a08:	e015      	b.n	8004a36 <HAL_ADC_ConfigChannel+0x5e2>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004a22:	2320      	movs	r3, #32
 8004a24:	e003      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a28:	fab3 f383 	clz	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	069b      	lsls	r3, r3, #26
 8004a32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x602>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	0e9b      	lsrs	r3, r3, #26
 8004a48:	3301      	adds	r3, #1
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	e017      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x632>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	61bb      	str	r3, [r7, #24]
  return result;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004a6e:	2320      	movs	r3, #32
 8004a70:	e003      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	fab3 f383 	clz	r3, r3
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2101      	movs	r1, #1
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	ea42 0103 	orr.w	r1, r2, r3
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10d      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x65e>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f003 021f 	and.w	r2, r3, #31
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b1e      	subs	r3, #30
 8004aaa:	051b      	lsls	r3, r3, #20
 8004aac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ab0:	e01e      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x69c>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	60fb      	str	r3, [r7, #12]
  return result;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004aca:	2320      	movs	r3, #32
 8004acc:	e006      	b.n	8004adc <HAL_ADC_ConfigChannel+0x688>
 8004ace:	bf00      	nop
 8004ad0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f003 021f 	and.w	r2, r3, #31
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3b1e      	subs	r3, #30
 8004aea:	051b      	lsls	r3, r3, #20
 8004aec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af6:	4619      	mov	r1, r3
 8004af8:	f7ff f87a 	bl	8003bf0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b44      	ldr	r3, [pc, #272]	@ (8004c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d07a      	beq.n	8004bfe <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b08:	4843      	ldr	r0, [pc, #268]	@ (8004c18 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b0a:	f7fe ffcf 	bl	8003aac <LL_ADC_GetCommonPathInternalCh>
 8004b0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a41      	ldr	r2, [pc, #260]	@ (8004c1c <HAL_ADC_ConfigChannel+0x7c8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d12c      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d126      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c20 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x6e8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	@ (8004c24 <HAL_ADC_ConfigChannel+0x7d0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d15d      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b44:	4619      	mov	r1, r3
 8004b46:	4834      	ldr	r0, [pc, #208]	@ (8004c18 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b48:	f7fe ff9d 	bl	8003a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b4c:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_ADC_ConfigChannel+0x7d4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	4a36      	ldr	r2, [pc, #216]	@ (8004c2c <HAL_ADC_ConfigChannel+0x7d8>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	099b      	lsrs	r3, r3, #6
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004b66:	e002      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f9      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b74:	e040      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c30 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d118      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d112      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a23      	ldr	r2, [pc, #140]	@ (8004c20 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_ADC_ConfigChannel+0x74c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a22      	ldr	r2, [pc, #136]	@ (8004c24 <HAL_ADC_ConfigChannel+0x7d0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d12d      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ba4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba8:	4619      	mov	r1, r3
 8004baa:	481b      	ldr	r0, [pc, #108]	@ (8004c18 <HAL_ADC_ConfigChannel+0x7c4>)
 8004bac:	f7fe ff6b 	bl	8003a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bb0:	e024      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c34 <HAL_ADC_ConfigChannel+0x7e0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d120      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11a      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	@ (8004c20 <HAL_ADC_ConfigChannel+0x7cc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d115      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bda:	4619      	mov	r1, r3
 8004bdc:	480e      	ldr	r0, [pc, #56]	@ (8004c18 <HAL_ADC_ConfigChannel+0x7c4>)
 8004bde:	f7fe ff52 	bl	8003a86 <LL_ADC_SetCommonPathInternalCh>
 8004be2:	e00c      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004bf6:	e002      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c06:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	37d8      	adds	r7, #216	@ 0xd8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	80080000 	.word	0x80080000
 8004c18:	50040300 	.word	0x50040300
 8004c1c:	c7520000 	.word	0xc7520000
 8004c20:	50040000 	.word	0x50040000
 8004c24:	50040200 	.word	0x50040200
 8004c28:	2000000c 	.word	0x2000000c
 8004c2c:	053e2d63 	.word	0x053e2d63
 8004c30:	cb840000 	.word	0xcb840000
 8004c34:	80000001 	.word	0x80000001

08004c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff f8b3 	bl	8003db4 <LL_ADC_IsEnabled>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d169      	bne.n	8004d28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <ADC_Enable+0xfc>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	f043 0210 	orr.w	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e055      	b.n	8004d2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff f86e 	bl	8003d64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c88:	482b      	ldr	r0, [pc, #172]	@ (8004d38 <ADC_Enable+0x100>)
 8004c8a:	f7fe ff0f 	bl	8003aac <LL_ADC_GetCommonPathInternalCh>
 8004c8e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c98:	4b28      	ldr	r3, [pc, #160]	@ (8004d3c <ADC_Enable+0x104>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	099b      	lsrs	r3, r3, #6
 8004c9e:	4a28      	ldr	r2, [pc, #160]	@ (8004d40 <ADC_Enable+0x108>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	099b      	lsrs	r3, r3, #6
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cb2:	e002      	b.n	8004cba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f9      	bne.n	8004cb4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004cc0:	f7fe fec2 	bl	8003a48 <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cc6:	e028      	b.n	8004d1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff f871 	bl	8003db4 <LL_ADC_IsEnabled>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff f841 	bl	8003d64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ce2:	f7fe feb1 	bl	8003a48 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d914      	bls.n	8004d1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d00d      	beq.n	8004d1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d02:	f043 0210 	orr.w	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e007      	b.n	8004d2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d1cf      	bne.n	8004cc8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	8000003f 	.word	0x8000003f
 8004d38:	50040300 	.word	0x50040300
 8004d3c:	2000000c 	.word	0x2000000c
 8004d40:	053e2d63 	.word	0x053e2d63

08004d44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff f842 	bl	8003dda <LL_ADC_IsDisableOngoing>
 8004d56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff f829 	bl	8003db4 <LL_ADC_IsEnabled>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d047      	beq.n	8004df8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d144      	bne.n	8004df8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030d 	and.w	r3, r3, #13
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff f803 	bl	8003d8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d8e:	f7fe fe5b 	bl	8003a48 <HAL_GetTick>
 8004d92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d94:	e029      	b.n	8004dea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d9a:	f043 0210 	orr.w	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	f043 0201 	orr.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e023      	b.n	8004dfa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004db2:	f7fe fe49 	bl	8003a48 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d914      	bls.n	8004dea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	f043 0210 	orr.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e007      	b.n	8004dfa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1dc      	bne.n	8004db2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <LL_ADC_IsEnabled>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <LL_ADC_IsEnabled+0x18>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <LL_ADC_IsEnabled+0x1a>
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <LL_ADC_StartCalibration>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_ADC_IsCalibrationOnGoing>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e6e:	d101      	bne.n	8004e74 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <LL_ADC_REG_IsConversionOngoing>:
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d101      	bne.n	8004e9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_ADCEx_Calibration_Start+0x1c>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e04d      	b.n	8004f60 <HAL_ADCEx_Calibration_Start+0xb8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff39 	bl	8004d44 <ADC_Disable>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d136      	bne.n	8004f4a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ee4:	f023 0302 	bic.w	r3, r3, #2
 8004ee8:	f043 0202 	orr.w	r2, r3, #2
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ff96 	bl	8004e28 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004efc:	e014      	b.n	8004f28 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8004f0a:	d30d      	bcc.n	8004f28 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	f023 0312 	bic.w	r3, r3, #18
 8004f14:	f043 0210 	orr.w	r2, r3, #16
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e01b      	b.n	8004f60 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ff94 	bl	8004e5a <LL_ADC_IsCalibrationOnGoing>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e2      	bne.n	8004efe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3c:	f023 0303 	bic.w	r3, r3, #3
 8004f40:	f043 0201 	orr.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f48:	e005      	b.n	8004f56 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4e:	f043 0210 	orr.w	r2, r3, #16
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b09f      	sub	sp, #124	@ 0x7c
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e093      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f92:	2300      	movs	r3, #0
 8004f94:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a47      	ldr	r2, [pc, #284]	@ (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d102      	bne.n	8004fa6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fa0:	4b46      	ldr	r3, [pc, #280]	@ (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	e001      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e072      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ff59 	bl	8004e82 <LL_ADC_REG_IsConversionOngoing>
 8004fd0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff ff53 	bl	8004e82 <LL_ADC_REG_IsConversionOngoing>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d154      	bne.n	800508c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004fe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d151      	bne.n	800508c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fe8:	4b35      	ldr	r3, [pc, #212]	@ (80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004fea:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02c      	beq.n	800504e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	6859      	ldr	r1, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005006:	035b      	lsls	r3, r3, #13
 8005008:	430b      	orrs	r3, r1
 800500a:	431a      	orrs	r2, r3
 800500c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800500e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005010:	4829      	ldr	r0, [pc, #164]	@ (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005012:	f7ff fef6 	bl	8004e02 <LL_ADC_IsEnabled>
 8005016:	4604      	mov	r4, r0
 8005018:	4828      	ldr	r0, [pc, #160]	@ (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800501a:	f7ff fef2 	bl	8004e02 <LL_ADC_IsEnabled>
 800501e:	4603      	mov	r3, r0
 8005020:	431c      	orrs	r4, r3
 8005022:	4828      	ldr	r0, [pc, #160]	@ (80050c4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005024:	f7ff feed 	bl	8004e02 <LL_ADC_IsEnabled>
 8005028:	4603      	mov	r3, r0
 800502a:	4323      	orrs	r3, r4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d137      	bne.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005038:	f023 030f 	bic.w	r3, r3, #15
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	6811      	ldr	r1, [r2, #0]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	6892      	ldr	r2, [r2, #8]
 8005044:	430a      	orrs	r2, r1
 8005046:	431a      	orrs	r2, r3
 8005048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800504a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800504c:	e028      	b.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800504e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005058:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800505a:	4817      	ldr	r0, [pc, #92]	@ (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800505c:	f7ff fed1 	bl	8004e02 <LL_ADC_IsEnabled>
 8005060:	4604      	mov	r4, r0
 8005062:	4816      	ldr	r0, [pc, #88]	@ (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005064:	f7ff fecd 	bl	8004e02 <LL_ADC_IsEnabled>
 8005068:	4603      	mov	r3, r0
 800506a:	431c      	orrs	r4, r3
 800506c:	4815      	ldr	r0, [pc, #84]	@ (80050c4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800506e:	f7ff fec8 	bl	8004e02 <LL_ADC_IsEnabled>
 8005072:	4603      	mov	r3, r0
 8005074:	4323      	orrs	r3, r4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d112      	bne.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800507a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005082:	f023 030f 	bic.w	r3, r3, #15
 8005086:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005088:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800508a:	e009      	b.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800509e:	e000      	b.n	80050a2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80050aa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	377c      	adds	r7, #124	@ 0x7c
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd90      	pop	{r4, r7, pc}
 80050b6:	bf00      	nop
 80050b8:	50040000 	.word	0x50040000
 80050bc:	50040100 	.word	0x50040100
 80050c0:	50040300 	.word	0x50040300
 80050c4:	50040200 	.word	0x50040200

080050c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d8:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <__NVIC_SetPriorityGrouping+0x44>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050e4:	4013      	ands	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050fa:	4a04      	ldr	r2, [pc, #16]	@ (800510c <__NVIC_SetPriorityGrouping+0x44>)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	60d3      	str	r3, [r2, #12]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000ed00 	.word	0xe000ed00

08005110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <__NVIC_GetPriorityGrouping+0x18>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	f003 0307 	and.w	r3, r3, #7
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	2b00      	cmp	r3, #0
 800513c:	db0b      	blt.n	8005156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	f003 021f 	and.w	r2, r3, #31
 8005144:	4907      	ldr	r1, [pc, #28]	@ (8005164 <__NVIC_EnableIRQ+0x38>)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	2001      	movs	r0, #1
 800514e:	fa00 f202 	lsl.w	r2, r0, r2
 8005152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	e000e100 	.word	0xe000e100

08005168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	6039      	str	r1, [r7, #0]
 8005172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005178:	2b00      	cmp	r3, #0
 800517a:	db0a      	blt.n	8005192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	490c      	ldr	r1, [pc, #48]	@ (80051b4 <__NVIC_SetPriority+0x4c>)
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	0112      	lsls	r2, r2, #4
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	440b      	add	r3, r1
 800518c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005190:	e00a      	b.n	80051a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	4908      	ldr	r1, [pc, #32]	@ (80051b8 <__NVIC_SetPriority+0x50>)
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	3b04      	subs	r3, #4
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	440b      	add	r3, r1
 80051a6:	761a      	strb	r2, [r3, #24]
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	e000e100 	.word	0xe000e100
 80051b8:	e000ed00 	.word	0xe000ed00

080051bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051bc:	b480      	push	{r7}
 80051be:	b089      	sub	sp, #36	@ 0x24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f1c3 0307 	rsb	r3, r3, #7
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	bf28      	it	cs
 80051da:	2304      	movcs	r3, #4
 80051dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3304      	adds	r3, #4
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d902      	bls.n	80051ec <NVIC_EncodePriority+0x30>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3b03      	subs	r3, #3
 80051ea:	e000      	b.n	80051ee <NVIC_EncodePriority+0x32>
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f0:	f04f 32ff 	mov.w	r2, #4294967295
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43da      	mvns	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	401a      	ands	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005204:	f04f 31ff 	mov.w	r1, #4294967295
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	43d9      	mvns	r1, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005214:	4313      	orrs	r3, r2
         );
}
 8005216:	4618      	mov	r0, r3
 8005218:	3724      	adds	r7, #36	@ 0x24
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3b01      	subs	r3, #1
 8005230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005234:	d301      	bcc.n	800523a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005236:	2301      	movs	r3, #1
 8005238:	e00f      	b.n	800525a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800523a:	4a0a      	ldr	r2, [pc, #40]	@ (8005264 <SysTick_Config+0x40>)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005242:	210f      	movs	r1, #15
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	f7ff ff8e 	bl	8005168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <SysTick_Config+0x40>)
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005252:	4b04      	ldr	r3, [pc, #16]	@ (8005264 <SysTick_Config+0x40>)
 8005254:	2207      	movs	r2, #7
 8005256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000e010 	.word	0xe000e010

08005268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff29 	bl	80050c8 <__NVIC_SetPriorityGrouping>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	4603      	mov	r3, r0
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005290:	f7ff ff3e 	bl	8005110 <__NVIC_GetPriorityGrouping>
 8005294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	6978      	ldr	r0, [r7, #20]
 800529c:	f7ff ff8e 	bl	80051bc <NVIC_EncodePriority>
 80052a0:	4602      	mov	r2, r0
 80052a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ff5d 	bl	8005168 <__NVIC_SetPriority>
}
 80052ae:	bf00      	nop
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	4603      	mov	r3, r0
 80052be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff31 	bl	800512c <__NVIC_EnableIRQ>
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ffa2 	bl	8005224 <SysTick_Config>
 80052e0:	4603      	mov	r3, r0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d008      	beq.n	8005314 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e022      	b.n	800535a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 020e 	bic.w	r2, r2, #14
 8005322:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005338:	f003 021c 	and.w	r2, r3, #28
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f202 	lsl.w	r2, r1, r2
 8005346:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d005      	beq.n	800538a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e029      	b.n	80053de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 020e 	bic.w	r2, r2, #14
 8005398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	f003 021c 	and.w	r2, r3, #28
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f202 	lsl.w	r2, r1, r2
 80053bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
    }
  }
  return status;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053f6:	e17f      	b.n	80056f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2101      	movs	r1, #1
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8171 	beq.w	80056f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d005      	beq.n	8005428 <HAL_GPIO_Init+0x40>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d130      	bne.n	800548a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2203      	movs	r2, #3
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800545e:	2201      	movs	r2, #1
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 0201 	and.w	r2, r3, #1
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b03      	cmp	r3, #3
 8005494:	d118      	bne.n	80054c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800549c:	2201      	movs	r2, #1
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	43db      	mvns	r3, r3
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4013      	ands	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	08db      	lsrs	r3, r3, #3
 80054b2:	f003 0201 	and.w	r2, r3, #1
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d017      	beq.n	8005504 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	2203      	movs	r2, #3
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4013      	ands	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d123      	bne.n	8005558 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	08da      	lsrs	r2, r3, #3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3208      	adds	r2, #8
 8005518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	220f      	movs	r2, #15
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4013      	ands	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	08da      	lsrs	r2, r3, #3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3208      	adds	r2, #8
 8005552:	6939      	ldr	r1, [r7, #16]
 8005554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	2203      	movs	r2, #3
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4013      	ands	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0203 	and.w	r2, r3, #3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80ac 	beq.w	80056f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559a:	4b5f      	ldr	r3, [pc, #380]	@ (8005718 <HAL_GPIO_Init+0x330>)
 800559c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559e:	4a5e      	ldr	r2, [pc, #376]	@ (8005718 <HAL_GPIO_Init+0x330>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80055a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005718 <HAL_GPIO_Init+0x330>)
 80055a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055b2:	4a5a      	ldr	r2, [pc, #360]	@ (800571c <HAL_GPIO_Init+0x334>)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	3302      	adds	r3, #2
 80055ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	220f      	movs	r2, #15
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80055dc:	d025      	beq.n	800562a <HAL_GPIO_Init+0x242>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005720 <HAL_GPIO_Init+0x338>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01f      	beq.n	8005626 <HAL_GPIO_Init+0x23e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005724 <HAL_GPIO_Init+0x33c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d019      	beq.n	8005622 <HAL_GPIO_Init+0x23a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005728 <HAL_GPIO_Init+0x340>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <HAL_GPIO_Init+0x236>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a4c      	ldr	r2, [pc, #304]	@ (800572c <HAL_GPIO_Init+0x344>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00d      	beq.n	800561a <HAL_GPIO_Init+0x232>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4b      	ldr	r2, [pc, #300]	@ (8005730 <HAL_GPIO_Init+0x348>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <HAL_GPIO_Init+0x22e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a4a      	ldr	r2, [pc, #296]	@ (8005734 <HAL_GPIO_Init+0x34c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_GPIO_Init+0x22a>
 800560e:	2306      	movs	r3, #6
 8005610:	e00c      	b.n	800562c <HAL_GPIO_Init+0x244>
 8005612:	2307      	movs	r3, #7
 8005614:	e00a      	b.n	800562c <HAL_GPIO_Init+0x244>
 8005616:	2305      	movs	r3, #5
 8005618:	e008      	b.n	800562c <HAL_GPIO_Init+0x244>
 800561a:	2304      	movs	r3, #4
 800561c:	e006      	b.n	800562c <HAL_GPIO_Init+0x244>
 800561e:	2303      	movs	r3, #3
 8005620:	e004      	b.n	800562c <HAL_GPIO_Init+0x244>
 8005622:	2302      	movs	r3, #2
 8005624:	e002      	b.n	800562c <HAL_GPIO_Init+0x244>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <HAL_GPIO_Init+0x244>
 800562a:	2300      	movs	r3, #0
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	f002 0203 	and.w	r2, r2, #3
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	4093      	lsls	r3, r2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800563c:	4937      	ldr	r1, [pc, #220]	@ (800571c <HAL_GPIO_Init+0x334>)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	3302      	adds	r3, #2
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800564a:	4b3b      	ldr	r3, [pc, #236]	@ (8005738 <HAL_GPIO_Init+0x350>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	43db      	mvns	r3, r3
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4013      	ands	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800566e:	4a32      	ldr	r2, [pc, #200]	@ (8005738 <HAL_GPIO_Init+0x350>)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005674:	4b30      	ldr	r3, [pc, #192]	@ (8005738 <HAL_GPIO_Init+0x350>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	43db      	mvns	r3, r3
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005698:	4a27      	ldr	r2, [pc, #156]	@ (8005738 <HAL_GPIO_Init+0x350>)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800569e:	4b26      	ldr	r3, [pc, #152]	@ (8005738 <HAL_GPIO_Init+0x350>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	43db      	mvns	r3, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4013      	ands	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005738 <HAL_GPIO_Init+0x350>)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <HAL_GPIO_Init+0x350>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4013      	ands	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056ec:	4a12      	ldr	r2, [pc, #72]	@ (8005738 <HAL_GPIO_Init+0x350>)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	3301      	adds	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	f47f ae78 	bne.w	80053f8 <HAL_GPIO_Init+0x10>
  }
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000
 800571c:	40010000 	.word	0x40010000
 8005720:	48000400 	.word	0x48000400
 8005724:	48000800 	.word	0x48000800
 8005728:	48000c00 	.word	0x48000c00
 800572c:	48001000 	.word	0x48001000
 8005730:	48001400 	.word	0x48001400
 8005734:	48001800 	.word	0x48001800
 8005738:	40010400 	.word	0x40010400

0800573c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	807b      	strh	r3, [r7, #2]
 8005748:	4613      	mov	r3, r2
 800574a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800574c:	787b      	ldrb	r3, [r7, #1]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005752:	887a      	ldrh	r2, [r7, #2]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005758:	e002      	b.n	8005760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800575a:	887a      	ldrh	r2, [r7, #2]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e08d      	b.n	800589a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fd fde0 	bl	8003358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	@ 0x24
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0201 	bic.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80057bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d107      	bne.n	80057e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	e006      	b.n	80057f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d108      	bne.n	800580e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	e007      	b.n	800581e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800581c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005830:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005840:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69d9      	ldr	r1, [r3, #28]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	461a      	mov	r2, r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	817b      	strh	r3, [r7, #10]
 80058b6:	460b      	mov	r3, r1
 80058b8:	813b      	strh	r3, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	f040 80fd 	bne.w	8005ac6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_I2C_Mem_Read+0x34>
 80058d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0f1      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_I2C_Mem_Read+0x4e>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e0ea      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058fa:	f7fe f8a5 	bl	8003a48 <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	2319      	movs	r3, #25
 8005906:	2201      	movs	r2, #1
 8005908:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f95b 	bl	8005bc8 <I2C_WaitOnFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0d5      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2222      	movs	r2, #34	@ 0x22
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2240      	movs	r2, #64	@ 0x40
 8005928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800593c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005944:	88f8      	ldrh	r0, [r7, #6]
 8005946:	893a      	ldrh	r2, [r7, #8]
 8005948:	8979      	ldrh	r1, [r7, #10]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	4603      	mov	r3, r0
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f8bf 	bl	8005ad8 <I2C_RequestMemoryRead>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0ad      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2bff      	cmp	r3, #255	@ 0xff
 8005974:	d90e      	bls.n	8005994 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005980:	b2da      	uxtb	r2, r3
 8005982:	8979      	ldrh	r1, [r7, #10]
 8005984:	4b52      	ldr	r3, [pc, #328]	@ (8005ad0 <HAL_I2C_Mem_Read+0x22c>)
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fadf 	bl	8005f50 <I2C_TransferConfig>
 8005992:	e00f      	b.n	80059b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	8979      	ldrh	r1, [r7, #10]
 80059a6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad0 <HAL_I2C_Mem_Read+0x22c>)
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 face 	bl	8005f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	2200      	movs	r2, #0
 80059bc:	2104      	movs	r1, #4
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f902 	bl	8005bc8 <I2C_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e07c      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d034      	beq.n	8005a74 <HAL_I2C_Mem_Read+0x1d0>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d130      	bne.n	8005a74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2180      	movs	r1, #128	@ 0x80
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f8d3 	bl	8005bc8 <I2C_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e04d      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2bff      	cmp	r3, #255	@ 0xff
 8005a34:	d90e      	bls.n	8005a54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	8979      	ldrh	r1, [r7, #10]
 8005a44:	2300      	movs	r3, #0
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fa7f 	bl	8005f50 <I2C_TransferConfig>
 8005a52:	e00f      	b.n	8005a74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	8979      	ldrh	r1, [r7, #10]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fa6e 	bl	8005f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d19a      	bne.n	80059b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f940 	bl	8005d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e01a      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2220      	movs	r2, #32
 8005a98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6859      	ldr	r1, [r3, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <HAL_I2C_Mem_Read+0x230>)
 8005aa6:	400b      	ands	r3, r1
 8005aa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e000      	b.n	8005ac8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ac6:	2302      	movs	r3, #2
  }
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	80002400 	.word	0x80002400
 8005ad4:	fe00e800 	.word	0xfe00e800

08005ad8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	817b      	strh	r3, [r7, #10]
 8005aea:	460b      	mov	r3, r1
 8005aec:	813b      	strh	r3, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	8979      	ldrh	r1, [r7, #10]
 8005af8:	4b20      	ldr	r3, [pc, #128]	@ (8005b7c <I2C_RequestMemoryRead+0xa4>)
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	2300      	movs	r3, #0
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fa26 	bl	8005f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f8b6 	bl	8005c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e02c      	b.n	8005b72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b1e:	893b      	ldrh	r3, [r7, #8]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b28:	e015      	b.n	8005b56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b2a:	893b      	ldrh	r3, [r7, #8]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	69b9      	ldr	r1, [r7, #24]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f89c 	bl	8005c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e012      	b.n	8005b72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b4c:	893b      	ldrh	r3, [r7, #8]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2140      	movs	r1, #64	@ 0x40
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f831 	bl	8005bc8 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	80002000 	.word	0x80002000

08005b80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d103      	bne.n	8005b9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d007      	beq.n	8005bbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	619a      	str	r2, [r3, #24]
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bd8:	e03b      	b.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f8d6 	bl	8005d90 <I2C_IsErrorOccurred>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e041      	b.n	8005c72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d02d      	beq.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf6:	f7fd ff27 	bl	8003a48 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d122      	bne.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d113      	bne.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e00f      	b.n	8005c72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	bf0c      	ite	eq
 8005c62:	2301      	moveq	r3, #1
 8005c64:	2300      	movne	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d0b4      	beq.n	8005bda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c86:	e033      	b.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f87f 	bl	8005d90 <I2C_IsErrorOccurred>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e031      	b.n	8005d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d025      	beq.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fd fed0 	bl	8003a48 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d11a      	bne.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d013      	beq.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e007      	b.n	8005d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d1c4      	bne.n	8005c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d14:	e02f      	b.n	8005d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f838 	bl	8005d90 <I2C_IsErrorOccurred>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e02d      	b.n	8005d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2a:	f7fd fe8d 	bl	8003a48 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d302      	bcc.n	8005d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11a      	bne.n	8005d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d013      	beq.n	8005d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e007      	b.n	8005d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d1c8      	bne.n	8005d16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	@ 0x28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d068      	beq.n	8005e8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005dc4:	e049      	b.n	8005e5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d045      	beq.n	8005e5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fd fe3b 	bl	8003a48 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <I2C_IsErrorOccurred+0x54>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d13a      	bne.n	8005e5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005df6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e06:	d121      	bne.n	8005e4c <I2C_IsErrorOccurred+0xbc>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e0e:	d01d      	beq.n	8005e4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e10:	7cfb      	ldrb	r3, [r7, #19]
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d01a      	beq.n	8005e4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e26:	f7fd fe0f 	bl	8003a48 <HAL_GetTick>
 8005e2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e2c:	e00e      	b.n	8005e4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e2e:	f7fd fe0b 	bl	8003a48 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b19      	cmp	r3, #25
 8005e3a:	d907      	bls.n	8005e4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	f043 0320 	orr.w	r3, r3, #32
 8005e42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005e4a:	e006      	b.n	8005e5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d1e9      	bne.n	8005e2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d003      	beq.n	8005e70 <I2C_IsErrorOccurred+0xe0>
 8005e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0aa      	beq.n	8005dc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d103      	bne.n	8005e80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	f043 0304 	orr.w	r3, r3, #4
 8005e86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f043 0308 	orr.w	r3, r3, #8
 8005ec8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	f043 0302 	orr.w	r3, r3, #2
 8005eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01c      	beq.n	8005f3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff fe3b 	bl	8005b80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <I2C_IsErrorOccurred+0x1bc>)
 8005f16:	400b      	ands	r3, r1
 8005f18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3728      	adds	r7, #40	@ 0x28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	fe00e800 	.word	0xfe00e800

08005f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	607b      	str	r3, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	817b      	strh	r3, [r7, #10]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f62:	897b      	ldrh	r3, [r7, #10]
 8005f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f68:	7a7b      	ldrb	r3, [r7, #9]
 8005f6a:	041b      	lsls	r3, r3, #16
 8005f6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	0d5b      	lsrs	r3, r3, #21
 8005f8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005f8e:	4b08      	ldr	r3, [pc, #32]	@ (8005fb0 <I2C_TransferConfig+0x60>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	43db      	mvns	r3, r3
 8005f94:	ea02 0103 	and.w	r1, r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	03ff63ff 	.word	0x03ff63ff

08005fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d138      	bne.n	800603c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e032      	b.n	800603e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	@ 0x24
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b20      	cmp	r3, #32
 800605e:	d139      	bne.n	80060d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800606a:	2302      	movs	r3, #2
 800606c:	e033      	b.n	80060d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2224      	movs	r2, #36	@ 0x24
 800607a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800609c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e000      	b.n	80060d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060d4:	2302      	movs	r3, #2
  }
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80060e8:	4b04      	ldr	r3, [pc, #16]	@ (80060fc <HAL_PWREx_GetVoltageRange+0x18>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40007000 	.word	0x40007000

08006100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800610e:	d130      	bne.n	8006172 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006110:	4b23      	ldr	r3, [pc, #140]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611c:	d038      	beq.n	8006190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800611e:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006126:	4a1e      	ldr	r2, [pc, #120]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006128:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800612c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800612e:	4b1d      	ldr	r3, [pc, #116]	@ (80061a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2232      	movs	r2, #50	@ 0x32
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	4a1b      	ldr	r2, [pc, #108]	@ (80061a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	0c9b      	lsrs	r3, r3, #18
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006144:	e002      	b.n	800614c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b01      	subs	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800614c:	4b14      	ldr	r3, [pc, #80]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006158:	d102      	bne.n	8006160 <HAL_PWREx_ControlVoltageScaling+0x60>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f2      	bne.n	8006146 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006160:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616c:	d110      	bne.n	8006190 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e00f      	b.n	8006192 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006172:	4b0b      	ldr	r3, [pc, #44]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800617e:	d007      	beq.n	8006190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006188:	4a05      	ldr	r2, [pc, #20]	@ (80061a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800618a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800618e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40007000 	.word	0x40007000
 80061a4:	2000000c 	.word	0x2000000c
 80061a8:	431bde83 	.word	0x431bde83

080061ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e3ca      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061be:	4b97      	ldr	r3, [pc, #604]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061c8:	4b94      	ldr	r3, [pc, #592]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0310 	and.w	r3, r3, #16
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80e4 	beq.w	80063a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_RCC_OscConfig+0x4a>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	f040 808b 	bne.w	8006304 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	f040 8087 	bne.w	8006304 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061f6:	4b89      	ldr	r3, [pc, #548]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_RCC_OscConfig+0x62>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e3a2      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1a      	ldr	r2, [r3, #32]
 8006212:	4b82      	ldr	r3, [pc, #520]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <HAL_RCC_OscConfig+0x7c>
 800621e:	4b7f      	ldr	r3, [pc, #508]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006226:	e005      	b.n	8006234 <HAL_RCC_OscConfig+0x88>
 8006228:	4b7c      	ldr	r3, [pc, #496]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800622a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006234:	4293      	cmp	r3, r2
 8006236:	d223      	bcs.n	8006280 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fd55 	bl	8006cec <RCC_SetFlashLatencyFromMSIRange>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e383      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800624c:	4b73      	ldr	r3, [pc, #460]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a72      	ldr	r2, [pc, #456]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006252:	f043 0308 	orr.w	r3, r3, #8
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	4b70      	ldr	r3, [pc, #448]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	496d      	ldr	r1, [pc, #436]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800626a:	4b6c      	ldr	r3, [pc, #432]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	4968      	ldr	r1, [pc, #416]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800627a:	4313      	orrs	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
 800627e:	e025      	b.n	80062cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006280:	4b66      	ldr	r3, [pc, #408]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a65      	ldr	r2, [pc, #404]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006286:	f043 0308 	orr.w	r3, r3, #8
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	4b63      	ldr	r3, [pc, #396]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	4960      	ldr	r1, [pc, #384]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800629a:	4313      	orrs	r3, r2
 800629c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800629e:	4b5f      	ldr	r3, [pc, #380]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	495b      	ldr	r1, [pc, #364]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fd15 	bl	8006cec <RCC_SetFlashLatencyFromMSIRange>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e343      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062cc:	f000 fc4a 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 80062d0:	4602      	mov	r2, r0
 80062d2:	4b52      	ldr	r3, [pc, #328]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	4950      	ldr	r1, [pc, #320]	@ (8006420 <HAL_RCC_OscConfig+0x274>)
 80062de:	5ccb      	ldrb	r3, [r1, r3]
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
 80062e8:	4a4e      	ldr	r2, [pc, #312]	@ (8006424 <HAL_RCC_OscConfig+0x278>)
 80062ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006428 <HAL_RCC_OscConfig+0x27c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fd fb59 	bl	80039a8 <HAL_InitTick>
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d052      	beq.n	80063a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	e327      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d032      	beq.n	8006372 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800630c:	4b43      	ldr	r3, [pc, #268]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a42      	ldr	r2, [pc, #264]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006318:	f7fd fb96 	bl	8003a48 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006320:	f7fd fb92 	bl	8003a48 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e310      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006332:	4b3a      	ldr	r3, [pc, #232]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800633e:	4b37      	ldr	r3, [pc, #220]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a36      	ldr	r2, [pc, #216]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006344:	f043 0308 	orr.w	r3, r3, #8
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	4b34      	ldr	r3, [pc, #208]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	4931      	ldr	r1, [pc, #196]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800635c:	4b2f      	ldr	r3, [pc, #188]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	492c      	ldr	r1, [pc, #176]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
 8006370:	e01a      	b.n	80063a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006372:	4b2a      	ldr	r3, [pc, #168]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a29      	ldr	r2, [pc, #164]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800637e:	f7fd fb63 	bl	8003a48 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006386:	f7fd fb5f 	bl	8003a48 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e2dd      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006398:	4b20      	ldr	r3, [pc, #128]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x1da>
 80063a4:	e000      	b.n	80063a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d074      	beq.n	800649e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d005      	beq.n	80063c6 <HAL_RCC_OscConfig+0x21a>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	d10e      	bne.n	80063de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d10b      	bne.n	80063de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c6:	4b15      	ldr	r3, [pc, #84]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d064      	beq.n	800649c <HAL_RCC_OscConfig+0x2f0>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d160      	bne.n	800649c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e2ba      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e6:	d106      	bne.n	80063f6 <HAL_RCC_OscConfig+0x24a>
 80063e8:	4b0c      	ldr	r3, [pc, #48]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a0b      	ldr	r2, [pc, #44]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 80063ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e026      	b.n	8006444 <HAL_RCC_OscConfig+0x298>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063fe:	d115      	bne.n	800642c <HAL_RCC_OscConfig+0x280>
 8006400:	4b06      	ldr	r3, [pc, #24]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a05      	ldr	r2, [pc, #20]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	4b03      	ldr	r3, [pc, #12]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a02      	ldr	r2, [pc, #8]	@ (800641c <HAL_RCC_OscConfig+0x270>)
 8006412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e014      	b.n	8006444 <HAL_RCC_OscConfig+0x298>
 800641a:	bf00      	nop
 800641c:	40021000 	.word	0x40021000
 8006420:	0801023c 	.word	0x0801023c
 8006424:	2000000c 	.word	0x2000000c
 8006428:	20000010 	.word	0x20000010
 800642c:	4ba0      	ldr	r3, [pc, #640]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a9f      	ldr	r2, [pc, #636]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	4b9d      	ldr	r3, [pc, #628]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a9c      	ldr	r2, [pc, #624]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800643e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d013      	beq.n	8006474 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fd fafc 	bl	8003a48 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006454:	f7fd faf8 	bl	8003a48 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b64      	cmp	r3, #100	@ 0x64
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e276      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006466:	4b92      	ldr	r3, [pc, #584]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x2a8>
 8006472:	e014      	b.n	800649e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fd fae8 	bl	8003a48 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800647c:	f7fd fae4 	bl	8003a48 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b64      	cmp	r3, #100	@ 0x64
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e262      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800648e:	4b88      	ldr	r3, [pc, #544]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0x2d0>
 800649a:	e000      	b.n	800649e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800649c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d060      	beq.n	800656c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d005      	beq.n	80064bc <HAL_RCC_OscConfig+0x310>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d119      	bne.n	80064ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d116      	bne.n	80064ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064bc:	4b7c      	ldr	r3, [pc, #496]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_RCC_OscConfig+0x328>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e23f      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d4:	4b76      	ldr	r3, [pc, #472]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	061b      	lsls	r3, r3, #24
 80064e2:	4973      	ldr	r1, [pc, #460]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064e8:	e040      	b.n	800656c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d023      	beq.n	800653a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f2:	4b6f      	ldr	r3, [pc, #444]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a6e      	ldr	r2, [pc, #440]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80064f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fd faa3 	bl	8003a48 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006506:	f7fd fa9f 	bl	8003a48 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e21d      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006518:	4b65      	ldr	r3, [pc, #404]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006524:	4b62      	ldr	r3, [pc, #392]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	061b      	lsls	r3, r3, #24
 8006532:	495f      	ldr	r1, [pc, #380]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006534:	4313      	orrs	r3, r2
 8006536:	604b      	str	r3, [r1, #4]
 8006538:	e018      	b.n	800656c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800653a:	4b5d      	ldr	r3, [pc, #372]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a5c      	ldr	r2, [pc, #368]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006546:	f7fd fa7f 	bl	8003a48 <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654e:	f7fd fa7b 	bl	8003a48 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e1f9      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006560:	4b53      	ldr	r3, [pc, #332]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1f0      	bne.n	800654e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d03c      	beq.n	80065f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01c      	beq.n	80065ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006580:	4b4b      	ldr	r3, [pc, #300]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006586:	4a4a      	ldr	r2, [pc, #296]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006590:	f7fd fa5a 	bl	8003a48 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006598:	f7fd fa56 	bl	8003a48 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e1d4      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065aa:	4b41      	ldr	r3, [pc, #260]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80065ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0ef      	beq.n	8006598 <HAL_RCC_OscConfig+0x3ec>
 80065b8:	e01b      	b.n	80065f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ba:	4b3d      	ldr	r3, [pc, #244]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80065bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c0:	4a3b      	ldr	r2, [pc, #236]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fd fa3d 	bl	8003a48 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d2:	f7fd fa39 	bl	8003a48 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e1b7      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065e4:	4b32      	ldr	r3, [pc, #200]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80065e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1ef      	bne.n	80065d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a6 	beq.w	800674c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006600:	2300      	movs	r3, #0
 8006602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006604:	4b2a      	ldr	r3, [pc, #168]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10d      	bne.n	800662c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006610:	4b27      	ldr	r3, [pc, #156]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006614:	4a26      	ldr	r2, [pc, #152]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661a:	6593      	str	r3, [r2, #88]	@ 0x58
 800661c:	4b24      	ldr	r3, [pc, #144]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006628:	2301      	movs	r3, #1
 800662a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800662c:	4b21      	ldr	r3, [pc, #132]	@ (80066b4 <HAL_RCC_OscConfig+0x508>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d118      	bne.n	800666a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006638:	4b1e      	ldr	r3, [pc, #120]	@ (80066b4 <HAL_RCC_OscConfig+0x508>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <HAL_RCC_OscConfig+0x508>)
 800663e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006642:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006644:	f7fd fa00 	bl	8003a48 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800664c:	f7fd f9fc 	bl	8003a48 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e17a      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800665e:	4b15      	ldr	r3, [pc, #84]	@ (80066b4 <HAL_RCC_OscConfig+0x508>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d108      	bne.n	8006684 <HAL_RCC_OscConfig+0x4d8>
 8006672:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006678:	4a0d      	ldr	r2, [pc, #52]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006682:	e029      	b.n	80066d8 <HAL_RCC_OscConfig+0x52c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b05      	cmp	r3, #5
 800668a:	d115      	bne.n	80066b8 <HAL_RCC_OscConfig+0x50c>
 800668c:	4b08      	ldr	r3, [pc, #32]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006692:	4a07      	ldr	r2, [pc, #28]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 8006694:	f043 0304 	orr.w	r3, r3, #4
 8006698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800669c:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a2:	4a03      	ldr	r2, [pc, #12]	@ (80066b0 <HAL_RCC_OscConfig+0x504>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066ac:	e014      	b.n	80066d8 <HAL_RCC_OscConfig+0x52c>
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000
 80066b4:	40007000 	.word	0x40007000
 80066b8:	4b9c      	ldr	r3, [pc, #624]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066be:	4a9b      	ldr	r2, [pc, #620]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066c8:	4b98      	ldr	r3, [pc, #608]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ce:	4a97      	ldr	r2, [pc, #604]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80066d0:	f023 0304 	bic.w	r3, r3, #4
 80066d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d016      	beq.n	800670e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fd f9b2 	bl	8003a48 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fd f9ae 	bl	8003a48 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e12a      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066fe:	4b8b      	ldr	r3, [pc, #556]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0ed      	beq.n	80066e8 <HAL_RCC_OscConfig+0x53c>
 800670c:	e015      	b.n	800673a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670e:	f7fd f99b 	bl	8003a48 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006714:	e00a      	b.n	800672c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f7fd f997 	bl	8003a48 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006724:	4293      	cmp	r3, r2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e113      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800672c:	4b7f      	ldr	r3, [pc, #508]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ed      	bne.n	8006716 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800673a:	7ffb      	ldrb	r3, [r7, #31]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d105      	bne.n	800674c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006740:	4b7a      	ldr	r3, [pc, #488]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006744:	4a79      	ldr	r2, [pc, #484]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800674a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80fe 	beq.w	8006952 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675a:	2b02      	cmp	r3, #2
 800675c:	f040 80d0 	bne.w	8006900 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006760:	4b72      	ldr	r3, [pc, #456]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f003 0203 	and.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	429a      	cmp	r2, r3
 8006772:	d130      	bne.n	80067d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677e:	3b01      	subs	r3, #1
 8006780:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d127      	bne.n	80067d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006790:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d11f      	bne.n	80067d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80067a0:	2a07      	cmp	r2, #7
 80067a2:	bf14      	ite	ne
 80067a4:	2201      	movne	r2, #1
 80067a6:	2200      	moveq	r2, #0
 80067a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d113      	bne.n	80067d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	3b01      	subs	r3, #1
 80067bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80067be:	429a      	cmp	r2, r3
 80067c0:	d109      	bne.n	80067d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	3b01      	subs	r3, #1
 80067d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d06e      	beq.n	80068b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b0c      	cmp	r3, #12
 80067da:	d069      	beq.n	80068b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067dc:	4b53      	ldr	r3, [pc, #332]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d105      	bne.n	80067f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80067e8:	4b50      	ldr	r3, [pc, #320]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0ad      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067f8:	4b4c      	ldr	r3, [pc, #304]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a4b      	ldr	r2, [pc, #300]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80067fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006802:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006804:	f7fd f920 	bl	8003a48 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800680c:	f7fd f91c 	bl	8003a48 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e09a      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800681e:	4b43      	ldr	r3, [pc, #268]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800682a:	4b40      	ldr	r3, [pc, #256]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	4b40      	ldr	r3, [pc, #256]	@ (8006930 <HAL_RCC_OscConfig+0x784>)
 8006830:	4013      	ands	r3, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800683a:	3a01      	subs	r2, #1
 800683c:	0112      	lsls	r2, r2, #4
 800683e:	4311      	orrs	r1, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006844:	0212      	lsls	r2, r2, #8
 8006846:	4311      	orrs	r1, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800684c:	0852      	lsrs	r2, r2, #1
 800684e:	3a01      	subs	r2, #1
 8006850:	0552      	lsls	r2, r2, #21
 8006852:	4311      	orrs	r1, r2
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006858:	0852      	lsrs	r2, r2, #1
 800685a:	3a01      	subs	r2, #1
 800685c:	0652      	lsls	r2, r2, #25
 800685e:	4311      	orrs	r1, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006864:	0912      	lsrs	r2, r2, #4
 8006866:	0452      	lsls	r2, r2, #17
 8006868:	430a      	orrs	r2, r1
 800686a:	4930      	ldr	r1, [pc, #192]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 800686c:	4313      	orrs	r3, r2
 800686e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006870:	4b2e      	ldr	r3, [pc, #184]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2d      	ldr	r2, [pc, #180]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800687a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800687c:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	4a2a      	ldr	r2, [pc, #168]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006886:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006888:	f7fd f8de 	bl	8003a48 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006890:	f7fd f8da 	bl	8003a48 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e058      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068a2:	4b22      	ldr	r3, [pc, #136]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068ae:	e050      	b.n	8006952 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e04f      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068b4:	4b1d      	ldr	r3, [pc, #116]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d148      	bne.n	8006952 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068c0:	4b1a      	ldr	r3, [pc, #104]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a19      	ldr	r2, [pc, #100]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80068c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068cc:	4b17      	ldr	r3, [pc, #92]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4a16      	ldr	r2, [pc, #88]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80068d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068d8:	f7fd f8b6 	bl	8003a48 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e0:	f7fd f8b2 	bl	8003a48 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e030      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068f2:	4b0e      	ldr	r3, [pc, #56]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0x734>
 80068fe:	e028      	b.n	8006952 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b0c      	cmp	r3, #12
 8006904:	d023      	beq.n	800694e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006906:	4b09      	ldr	r3, [pc, #36]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a08      	ldr	r2, [pc, #32]	@ (800692c <HAL_RCC_OscConfig+0x780>)
 800690c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006912:	f7fd f899 	bl	8003a48 <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006918:	e00c      	b.n	8006934 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800691a:	f7fd f895 	bl	8003a48 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d905      	bls.n	8006934 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e013      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
 800692c:	40021000 	.word	0x40021000
 8006930:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006934:	4b09      	ldr	r3, [pc, #36]	@ (800695c <HAL_RCC_OscConfig+0x7b0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1ec      	bne.n	800691a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006940:	4b06      	ldr	r3, [pc, #24]	@ (800695c <HAL_RCC_OscConfig+0x7b0>)
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	4905      	ldr	r1, [pc, #20]	@ (800695c <HAL_RCC_OscConfig+0x7b0>)
 8006946:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <HAL_RCC_OscConfig+0x7b4>)
 8006948:	4013      	ands	r3, r2
 800694a:	60cb      	str	r3, [r1, #12]
 800694c:	e001      	b.n	8006952 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40021000 	.word	0x40021000
 8006960:	feeefffc 	.word	0xfeeefffc

08006964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e0e7      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006978:	4b75      	ldr	r3, [pc, #468]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d910      	bls.n	80069a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006986:	4b72      	ldr	r3, [pc, #456]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f023 0207 	bic.w	r2, r3, #7
 800698e:	4970      	ldr	r1, [pc, #448]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	4313      	orrs	r3, r2
 8006994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006996:	4b6e      	ldr	r3, [pc, #440]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0cf      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	4b66      	ldr	r3, [pc, #408]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d908      	bls.n	80069d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c4:	4b63      	ldr	r3, [pc, #396]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4960      	ldr	r1, [pc, #384]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04c      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d107      	bne.n	80069fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d121      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e0a6      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d107      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a02:	4b54      	ldr	r3, [pc, #336]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d115      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e09a      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d107      	bne.n	8006a2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e08e      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e086      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a3a:	4b46      	ldr	r3, [pc, #280]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f023 0203 	bic.w	r2, r3, #3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4943      	ldr	r1, [pc, #268]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4c:	f7fc fffc 	bl	8003a48 <HAL_GetTick>
 8006a50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a52:	e00a      	b.n	8006a6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a54:	f7fc fff8 	bl	8003a48 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e06e      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 020c 	and.w	r2, r3, #12
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d1eb      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d010      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	4b31      	ldr	r3, [pc, #196]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d208      	bcs.n	8006aaa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a98:	4b2e      	ldr	r3, [pc, #184]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	492b      	ldr	r1, [pc, #172]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006aaa:	4b29      	ldr	r3, [pc, #164]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d210      	bcs.n	8006ada <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab8:	4b25      	ldr	r3, [pc, #148]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f023 0207 	bic.w	r2, r3, #7
 8006ac0:	4923      	ldr	r1, [pc, #140]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac8:	4b21      	ldr	r3, [pc, #132]	@ (8006b50 <HAL_RCC_ClockConfig+0x1ec>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d001      	beq.n	8006ada <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e036      	b.n	8006b48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	4918      	ldr	r1, [pc, #96]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b04:	4b13      	ldr	r3, [pc, #76]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4910      	ldr	r1, [pc, #64]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b18:	f000 f824 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <HAL_RCC_ClockConfig+0x1f0>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	490b      	ldr	r1, [pc, #44]	@ (8006b58 <HAL_RCC_ClockConfig+0x1f4>)
 8006b2a:	5ccb      	ldrb	r3, [r1, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
 8006b34:	4a09      	ldr	r2, [pc, #36]	@ (8006b5c <HAL_RCC_ClockConfig+0x1f8>)
 8006b36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b38:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <HAL_RCC_ClockConfig+0x1fc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fc ff33 	bl	80039a8 <HAL_InitTick>
 8006b42:	4603      	mov	r3, r0
 8006b44:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40022000 	.word	0x40022000
 8006b54:	40021000 	.word	0x40021000
 8006b58:	0801023c 	.word	0x0801023c
 8006b5c:	2000000c 	.word	0x2000000c
 8006b60:	20000010 	.word	0x20000010

08006b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	@ 0x24
 8006b68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b72:	4b3e      	ldr	r3, [pc, #248]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_GetSysClockFreq+0x34>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d121      	bne.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d11e      	bne.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b98:	4b34      	ldr	r3, [pc, #208]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ba4:	4b31      	ldr	r3, [pc, #196]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e005      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10d      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d102      	bne.n	8006be2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bdc:	4b25      	ldr	r3, [pc, #148]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	e004      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d101      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006be8:	4b23      	ldr	r3, [pc, #140]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x114>)
 8006bea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b0c      	cmp	r3, #12
 8006bf0:	d134      	bne.n	8006c5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d003      	beq.n	8006c0a <HAL_RCC_GetSysClockFreq+0xa6>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d003      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0xac>
 8006c08:	e005      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c0c:	617b      	str	r3, [r7, #20]
      break;
 8006c0e:	e005      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c10:	4b19      	ldr	r3, [pc, #100]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c12:	617b      	str	r3, [r7, #20]
      break;
 8006c14:	e002      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	617b      	str	r3, [r7, #20]
      break;
 8006c1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c1c:	4b13      	ldr	r3, [pc, #76]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	3301      	adds	r3, #1
 8006c28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c2a:	4b10      	ldr	r3, [pc, #64]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	0a1b      	lsrs	r3, r3, #8
 8006c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	fb03 f202 	mul.w	r2, r3, r2
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c42:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	0e5b      	lsrs	r3, r3, #25
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	@ 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	08010254 	.word	0x08010254
 8006c74:	00f42400 	.word	0x00f42400
 8006c78:	007a1200 	.word	0x007a1200

08006c7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c80:	4b03      	ldr	r3, [pc, #12]	@ (8006c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	2000000c 	.word	0x2000000c

08006c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c98:	f7ff fff0 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4904      	ldr	r1, [pc, #16]	@ (8006cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	0801024c 	.word	0x0801024c

08006cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006cc4:	f7ff ffda 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	0adb      	lsrs	r3, r3, #11
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4904      	ldr	r1, [pc, #16]	@ (8006ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	0801024c 	.word	0x0801024c

08006cec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d04:	f7ff f9ee 	bl	80060e4 <HAL_PWREx_GetVoltageRange>
 8006d08:	6178      	str	r0, [r7, #20]
 8006d0a:	e014      	b.n	8006d36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d0c:	4b25      	ldr	r3, [pc, #148]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d10:	4a24      	ldr	r2, [pc, #144]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d18:	4b22      	ldr	r3, [pc, #136]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d24:	f7ff f9de 	bl	80060e4 <HAL_PWREx_GetVoltageRange>
 8006d28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3c:	d10b      	bne.n	8006d56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b80      	cmp	r3, #128	@ 0x80
 8006d42:	d919      	bls.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2ba0      	cmp	r3, #160	@ 0xa0
 8006d48:	d902      	bls.n	8006d50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	e013      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d50:	2301      	movs	r3, #1
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	e010      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b80      	cmp	r3, #128	@ 0x80
 8006d5a:	d902      	bls.n	8006d62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	e00a      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b80      	cmp	r3, #128	@ 0x80
 8006d66:	d102      	bne.n	8006d6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d68:	2302      	movs	r3, #2
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e004      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b70      	cmp	r3, #112	@ 0x70
 8006d72:	d101      	bne.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d74:	2301      	movs	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d78:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f023 0207 	bic.w	r2, r3, #7
 8006d80:	4909      	ldr	r1, [pc, #36]	@ (8006da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d88:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d001      	beq.n	8006d9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40021000 	.word	0x40021000
 8006da8:	40022000 	.word	0x40022000

08006dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006db4:	2300      	movs	r3, #0
 8006db6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006db8:	2300      	movs	r3, #0
 8006dba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d041      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006dd0:	d02a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006dd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006dd6:	d824      	bhi.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ddc:	d008      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006dde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006de2:	d81e      	bhi.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006de8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dec:	d010      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006dee:	e018      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006df0:	4b86      	ldr	r3, [pc, #536]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	4a85      	ldr	r2, [pc, #532]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dfa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006dfc:	e015      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fabb 	bl	8007380 <RCCEx_PLLSAI1_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e0e:	e00c      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3320      	adds	r3, #32
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fba6 	bl	8007568 <RCCEx_PLLSAI2_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e20:	e003      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	74fb      	strb	r3, [r7, #19]
      break;
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e2a:	7cfb      	ldrb	r3, [r7, #19]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e30:	4b76      	ldr	r3, [pc, #472]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e3e:	4973      	ldr	r1, [pc, #460]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006e46:	e001      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	7cfb      	ldrb	r3, [r7, #19]
 8006e4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d041      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e60:	d02a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006e62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e66:	d824      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e6c:	d008      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e72:	d81e      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e7c:	d010      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e7e:	e018      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e80:	4b62      	ldr	r3, [pc, #392]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	4a61      	ldr	r2, [pc, #388]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e8c:	e015      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3304      	adds	r3, #4
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fa73 	bl	8007380 <RCCEx_PLLSAI1_Config>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e9e:	e00c      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3320      	adds	r3, #32
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fb5e 	bl	8007568 <RCCEx_PLLSAI2_Config>
 8006eac:	4603      	mov	r3, r0
 8006eae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006eb0:	e003      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	74fb      	strb	r3, [r7, #19]
      break;
 8006eb6:	e000      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eba:	7cfb      	ldrb	r3, [r7, #19]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ec0:	4b52      	ldr	r3, [pc, #328]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ece:	494f      	ldr	r1, [pc, #316]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006ed6:	e001      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	7cfb      	ldrb	r3, [r7, #19]
 8006eda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80a0 	beq.w	800702a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eea:	2300      	movs	r3, #0
 8006eec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006eee:	4b47      	ldr	r3, [pc, #284]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00d      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f04:	4b41      	ldr	r3, [pc, #260]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f08:	4a40      	ldr	r2, [pc, #256]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f10:	4b3e      	ldr	r3, [pc, #248]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f20:	4b3b      	ldr	r3, [pc, #236]	@ (8007010 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a3a      	ldr	r2, [pc, #232]	@ (8007010 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f2c:	f7fc fd8c 	bl	8003a48 <HAL_GetTick>
 8006f30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f32:	e009      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f34:	f7fc fd88 	bl	8003a48 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d902      	bls.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	74fb      	strb	r3, [r7, #19]
        break;
 8006f46:	e005      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f48:	4b31      	ldr	r3, [pc, #196]	@ (8007010 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0ef      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006f54:	7cfb      	ldrb	r3, [r7, #19]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d15c      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01f      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d019      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f78:	4b24      	ldr	r3, [pc, #144]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f84:	4b21      	ldr	r3, [pc, #132]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8a:	4a20      	ldr	r2, [pc, #128]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f94:	4b1d      	ldr	r3, [pc, #116]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fa4:	4a19      	ldr	r2, [pc, #100]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d016      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb6:	f7fc fd47 	bl	8003a48 <HAL_GetTick>
 8006fba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fbc:	e00b      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fbe:	f7fc fd43 	bl	8003a48 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d902      	bls.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	74fb      	strb	r3, [r7, #19]
            break;
 8006fd4:	e006      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0ec      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006fe4:	7cfb      	ldrb	r3, [r7, #19]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10c      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fea:	4b08      	ldr	r3, [pc, #32]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ffa:	4904      	ldr	r1, [pc, #16]	@ (800700c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007002:	e009      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007004:	7cfb      	ldrb	r3, [r7, #19]
 8007006:	74bb      	strb	r3, [r7, #18]
 8007008:	e006      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800700a:	bf00      	nop
 800700c:	40021000 	.word	0x40021000
 8007010:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007018:	7c7b      	ldrb	r3, [r7, #17]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701e:	4b9e      	ldr	r3, [pc, #632]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007022:	4a9d      	ldr	r2, [pc, #628]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007028:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007036:	4b98      	ldr	r3, [pc, #608]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703c:	f023 0203 	bic.w	r2, r3, #3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	4994      	ldr	r1, [pc, #592]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007058:	4b8f      	ldr	r3, [pc, #572]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705e:	f023 020c 	bic.w	r2, r3, #12
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007066:	498c      	ldr	r1, [pc, #560]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800707a:	4b87      	ldr	r3, [pc, #540]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800707c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007080:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	4983      	ldr	r1, [pc, #524]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800709c:	4b7e      	ldr	r3, [pc, #504]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070aa:	497b      	ldr	r1, [pc, #492]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070be:	4b76      	ldr	r3, [pc, #472]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070cc:	4972      	ldr	r1, [pc, #456]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070e0:	4b6d      	ldr	r3, [pc, #436]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ee:	496a      	ldr	r1, [pc, #424]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007102:	4b65      	ldr	r3, [pc, #404]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007108:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007110:	4961      	ldr	r1, [pc, #388]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007124:	4b5c      	ldr	r3, [pc, #368]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007132:	4959      	ldr	r1, [pc, #356]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007146:	4b54      	ldr	r3, [pc, #336]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800714c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007154:	4950      	ldr	r1, [pc, #320]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007168:	4b4b      	ldr	r3, [pc, #300]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007176:	4948      	ldr	r1, [pc, #288]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007178:	4313      	orrs	r3, r2
 800717a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800718a:	4b43      	ldr	r3, [pc, #268]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007190:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007198:	493f      	ldr	r1, [pc, #252]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d028      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071ac:	4b3a      	ldr	r3, [pc, #232]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ba:	4937      	ldr	r1, [pc, #220]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ca:	d106      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071cc:	4b32      	ldr	r3, [pc, #200]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4a31      	ldr	r2, [pc, #196]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071d6:	60d3      	str	r3, [r2, #12]
 80071d8:	e011      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071e2:	d10c      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3304      	adds	r3, #4
 80071e8:	2101      	movs	r1, #1
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f8c8 	bl	8007380 <RCCEx_PLLSAI1_Config>
 80071f0:	4603      	mov	r3, r0
 80071f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80071f4:	7cfb      	ldrb	r3, [r7, #19]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80071fa:	7cfb      	ldrb	r3, [r7, #19]
 80071fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d028      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800720a:	4b23      	ldr	r3, [pc, #140]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007210:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007218:	491f      	ldr	r1, [pc, #124]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007228:	d106      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800722a:	4b1b      	ldr	r3, [pc, #108]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	4a1a      	ldr	r2, [pc, #104]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007234:	60d3      	str	r3, [r2, #12]
 8007236:	e011      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007240:	d10c      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3304      	adds	r3, #4
 8007246:	2101      	movs	r1, #1
 8007248:	4618      	mov	r0, r3
 800724a:	f000 f899 	bl	8007380 <RCCEx_PLLSAI1_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007252:	7cfb      	ldrb	r3, [r7, #19]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007258:	7cfb      	ldrb	r3, [r7, #19]
 800725a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d02b      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007268:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007276:	4908      	ldr	r1, [pc, #32]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007286:	d109      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007288:	4b03      	ldr	r3, [pc, #12]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	4a02      	ldr	r2, [pc, #8]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800728e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007292:	60d3      	str	r3, [r2, #12]
 8007294:	e014      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007296:	bf00      	nop
 8007298:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072a4:	d10c      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3304      	adds	r3, #4
 80072aa:	2101      	movs	r1, #1
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f867 	bl	8007380 <RCCEx_PLLSAI1_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072b6:	7cfb      	ldrb	r3, [r7, #19]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80072bc:	7cfb      	ldrb	r3, [r7, #19]
 80072be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d02f      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072cc:	4b2b      	ldr	r3, [pc, #172]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072da:	4928      	ldr	r1, [pc, #160]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ea:	d10d      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	2102      	movs	r1, #2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f844 	bl	8007380 <RCCEx_PLLSAI1_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072fc:	7cfb      	ldrb	r3, [r7, #19]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d014      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007302:	7cfb      	ldrb	r3, [r7, #19]
 8007304:	74bb      	strb	r3, [r7, #18]
 8007306:	e011      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800730c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007310:	d10c      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3320      	adds	r3, #32
 8007316:	2102      	movs	r1, #2
 8007318:	4618      	mov	r0, r3
 800731a:	f000 f925 	bl	8007568 <RCCEx_PLLSAI2_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007322:	7cfb      	ldrb	r3, [r7, #19]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007328:	7cfb      	ldrb	r3, [r7, #19]
 800732a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007338:	4b10      	ldr	r3, [pc, #64]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007346:	490d      	ldr	r1, [pc, #52]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800735a:	4b08      	ldr	r3, [pc, #32]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007360:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800736a:	4904      	ldr	r1, [pc, #16]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007372:	7cbb      	ldrb	r3, [r7, #18]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40021000 	.word	0x40021000

08007380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800738e:	4b75      	ldr	r3, [pc, #468]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d018      	beq.n	80073cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800739a:	4b72      	ldr	r3, [pc, #456]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f003 0203 	and.w	r2, r3, #3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d10d      	bne.n	80073c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
       ||
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80073b2:	4b6c      	ldr	r3, [pc, #432]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
       ||
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d047      	beq.n	8007456 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	e044      	b.n	8007456 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d018      	beq.n	8007406 <RCCEx_PLLSAI1_Config+0x86>
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d825      	bhi.n	8007424 <RCCEx_PLLSAI1_Config+0xa4>
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d002      	beq.n	80073e2 <RCCEx_PLLSAI1_Config+0x62>
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d009      	beq.n	80073f4 <RCCEx_PLLSAI1_Config+0x74>
 80073e0:	e020      	b.n	8007424 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073e2:	4b60      	ldr	r3, [pc, #384]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d11d      	bne.n	800742a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f2:	e01a      	b.n	800742a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d116      	bne.n	800742e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007404:	e013      	b.n	800742e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007406:	4b57      	ldr	r3, [pc, #348]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10f      	bne.n	8007432 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007412:	4b54      	ldr	r3, [pc, #336]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007422:	e006      	b.n	8007432 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	e004      	b.n	8007434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800742a:	bf00      	nop
 800742c:	e002      	b.n	8007434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007432:	bf00      	nop
    }

    if(status == HAL_OK)
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10d      	bne.n	8007456 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800743a:	4b4a      	ldr	r3, [pc, #296]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	3b01      	subs	r3, #1
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	430b      	orrs	r3, r1
 8007450:	4944      	ldr	r1, [pc, #272]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007452:	4313      	orrs	r3, r2
 8007454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d17d      	bne.n	8007558 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800745c:	4b41      	ldr	r3, [pc, #260]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a40      	ldr	r2, [pc, #256]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007462:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007468:	f7fc faee 	bl	8003a48 <HAL_GetTick>
 800746c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800746e:	e009      	b.n	8007484 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007470:	f7fc faea 	bl	8003a48 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d902      	bls.n	8007484 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	73fb      	strb	r3, [r7, #15]
        break;
 8007482:	e005      	b.n	8007490 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007484:	4b37      	ldr	r3, [pc, #220]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1ef      	bne.n	8007470 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d160      	bne.n	8007558 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d111      	bne.n	80074c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800749c:	4b31      	ldr	r3, [pc, #196]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80074a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6892      	ldr	r2, [r2, #8]
 80074ac:	0211      	lsls	r1, r2, #8
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68d2      	ldr	r2, [r2, #12]
 80074b2:	0912      	lsrs	r2, r2, #4
 80074b4:	0452      	lsls	r2, r2, #17
 80074b6:	430a      	orrs	r2, r1
 80074b8:	492a      	ldr	r1, [pc, #168]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	610b      	str	r3, [r1, #16]
 80074be:	e027      	b.n	8007510 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d112      	bne.n	80074ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074c6:	4b27      	ldr	r3, [pc, #156]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80074ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6892      	ldr	r2, [r2, #8]
 80074d6:	0211      	lsls	r1, r2, #8
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6912      	ldr	r2, [r2, #16]
 80074dc:	0852      	lsrs	r2, r2, #1
 80074de:	3a01      	subs	r2, #1
 80074e0:	0552      	lsls	r2, r2, #21
 80074e2:	430a      	orrs	r2, r1
 80074e4:	491f      	ldr	r1, [pc, #124]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	610b      	str	r3, [r1, #16]
 80074ea:	e011      	b.n	8007510 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80074f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6892      	ldr	r2, [r2, #8]
 80074fc:	0211      	lsls	r1, r2, #8
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6952      	ldr	r2, [r2, #20]
 8007502:	0852      	lsrs	r2, r2, #1
 8007504:	3a01      	subs	r2, #1
 8007506:	0652      	lsls	r2, r2, #25
 8007508:	430a      	orrs	r2, r1
 800750a:	4916      	ldr	r1, [pc, #88]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800750c:	4313      	orrs	r3, r2
 800750e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007510:	4b14      	ldr	r3, [pc, #80]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a13      	ldr	r2, [pc, #76]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007516:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800751a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751c:	f7fc fa94 	bl	8003a48 <HAL_GetTick>
 8007520:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007522:	e009      	b.n	8007538 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007524:	f7fc fa90 	bl	8003a48 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d902      	bls.n	8007538 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
          break;
 8007536:	e005      	b.n	8007544 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007538:	4b0a      	ldr	r3, [pc, #40]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0ef      	beq.n	8007524 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800754a:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	4904      	ldr	r1, [pc, #16]	@ (8007564 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007554:	4313      	orrs	r3, r2
 8007556:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40021000 	.word	0x40021000

08007568 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007576:	4b6a      	ldr	r3, [pc, #424]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d018      	beq.n	80075b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007582:	4b67      	ldr	r3, [pc, #412]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0203 	and.w	r2, r3, #3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d10d      	bne.n	80075ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
       ||
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800759a:	4b61      	ldr	r3, [pc, #388]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	091b      	lsrs	r3, r3, #4
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
       ||
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d047      	beq.n	800763e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
 80075b2:	e044      	b.n	800763e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d018      	beq.n	80075ee <RCCEx_PLLSAI2_Config+0x86>
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d825      	bhi.n	800760c <RCCEx_PLLSAI2_Config+0xa4>
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d002      	beq.n	80075ca <RCCEx_PLLSAI2_Config+0x62>
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d009      	beq.n	80075dc <RCCEx_PLLSAI2_Config+0x74>
 80075c8:	e020      	b.n	800760c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075ca:	4b55      	ldr	r3, [pc, #340]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d11d      	bne.n	8007612 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075da:	e01a      	b.n	8007612 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075dc:	4b50      	ldr	r3, [pc, #320]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d116      	bne.n	8007616 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ec:	e013      	b.n	8007616 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075ee:	4b4c      	ldr	r3, [pc, #304]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10f      	bne.n	800761a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075fa:	4b49      	ldr	r3, [pc, #292]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800760a:	e006      	b.n	800761a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
      break;
 8007610:	e004      	b.n	800761c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007612:	bf00      	nop
 8007614:	e002      	b.n	800761c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007616:	bf00      	nop
 8007618:	e000      	b.n	800761c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800761a:	bf00      	nop
    }

    if(status == HAL_OK)
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10d      	bne.n	800763e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007622:	4b3f      	ldr	r3, [pc, #252]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6819      	ldr	r1, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	3b01      	subs	r3, #1
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	430b      	orrs	r3, r1
 8007638:	4939      	ldr	r1, [pc, #228]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800763a:	4313      	orrs	r3, r2
 800763c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d167      	bne.n	8007714 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007644:	4b36      	ldr	r3, [pc, #216]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a35      	ldr	r2, [pc, #212]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800764a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800764e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007650:	f7fc f9fa 	bl	8003a48 <HAL_GetTick>
 8007654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007656:	e009      	b.n	800766c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007658:	f7fc f9f6 	bl	8003a48 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d902      	bls.n	800766c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	73fb      	strb	r3, [r7, #15]
        break;
 800766a:	e005      	b.n	8007678 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800766c:	4b2c      	ldr	r3, [pc, #176]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1ef      	bne.n	8007658 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d14a      	bne.n	8007714 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d111      	bne.n	80076a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007684:	4b26      	ldr	r3, [pc, #152]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800768c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6892      	ldr	r2, [r2, #8]
 8007694:	0211      	lsls	r1, r2, #8
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	68d2      	ldr	r2, [r2, #12]
 800769a:	0912      	lsrs	r2, r2, #4
 800769c:	0452      	lsls	r2, r2, #17
 800769e:	430a      	orrs	r2, r1
 80076a0:	491f      	ldr	r1, [pc, #124]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	614b      	str	r3, [r1, #20]
 80076a6:	e011      	b.n	80076cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80076b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6892      	ldr	r2, [r2, #8]
 80076b8:	0211      	lsls	r1, r2, #8
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6912      	ldr	r2, [r2, #16]
 80076be:	0852      	lsrs	r2, r2, #1
 80076c0:	3a01      	subs	r2, #1
 80076c2:	0652      	lsls	r2, r2, #25
 80076c4:	430a      	orrs	r2, r1
 80076c6:	4916      	ldr	r1, [pc, #88]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80076cc:	4b14      	ldr	r3, [pc, #80]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a13      	ldr	r2, [pc, #76]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d8:	f7fc f9b6 	bl	8003a48 <HAL_GetTick>
 80076dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076de:	e009      	b.n	80076f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076e0:	f7fc f9b2 	bl	8003a48 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d902      	bls.n	80076f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	73fb      	strb	r3, [r7, #15]
          break;
 80076f2:	e005      	b.n	8007700 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0ef      	beq.n	80076e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007706:	4b06      	ldr	r3, [pc, #24]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007708:	695a      	ldr	r2, [r3, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	4904      	ldr	r1, [pc, #16]	@ (8007720 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007710:	4313      	orrs	r3, r2
 8007712:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40021000 	.word	0x40021000

08007724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e049      	b.n	80077ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fb fea8 	bl	80034a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f000 fb7a 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e049      	b.n	8007878 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f841 	bl	8007880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f000 fb23 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <HAL_TIM_PWM_Start+0x24>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	bf14      	ite	ne
 80078b0:	2301      	movne	r3, #1
 80078b2:	2300      	moveq	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	e03c      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d109      	bne.n	80078d2 <HAL_TIM_PWM_Start+0x3e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	bf14      	ite	ne
 80078ca:	2301      	movne	r3, #1
 80078cc:	2300      	moveq	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	e02f      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d109      	bne.n	80078ec <HAL_TIM_PWM_Start+0x58>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	bf14      	ite	ne
 80078e4:	2301      	movne	r3, #1
 80078e6:	2300      	moveq	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	e022      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b0c      	cmp	r3, #12
 80078f0:	d109      	bne.n	8007906 <HAL_TIM_PWM_Start+0x72>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	bf14      	ite	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	2300      	moveq	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	e015      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b10      	cmp	r3, #16
 800790a:	d109      	bne.n	8007920 <HAL_TIM_PWM_Start+0x8c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	bf14      	ite	ne
 8007918:	2301      	movne	r3, #1
 800791a:	2300      	moveq	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	e008      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	bf14      	ite	ne
 800792c:	2301      	movne	r3, #1
 800792e:	2300      	moveq	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e09c      	b.n	8007a74 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <HAL_TIM_PWM_Start+0xb6>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007948:	e023      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d104      	bne.n	800795a <HAL_TIM_PWM_Start+0xc6>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007958:	e01b      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d104      	bne.n	800796a <HAL_TIM_PWM_Start+0xd6>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007968:	e013      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d104      	bne.n	800797a <HAL_TIM_PWM_Start+0xe6>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007978:	e00b      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b10      	cmp	r3, #16
 800797e:	d104      	bne.n	800798a <HAL_TIM_PWM_Start+0xf6>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007988:	e003      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2201      	movs	r2, #1
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fe74 	bl	8008688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a35      	ldr	r2, [pc, #212]	@ (8007a7c <HAL_TIM_PWM_Start+0x1e8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d013      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a34      	ldr	r2, [pc, #208]	@ (8007a80 <HAL_TIM_PWM_Start+0x1ec>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00e      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a32      	ldr	r2, [pc, #200]	@ (8007a84 <HAL_TIM_PWM_Start+0x1f0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d009      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a31      	ldr	r2, [pc, #196]	@ (8007a88 <HAL_TIM_PWM_Start+0x1f4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d004      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a2f      	ldr	r2, [pc, #188]	@ (8007a8c <HAL_TIM_PWM_Start+0x1f8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_PWM_Start+0x142>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <HAL_TIM_PWM_Start+0x144>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a22      	ldr	r2, [pc, #136]	@ (8007a7c <HAL_TIM_PWM_Start+0x1e8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01d      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x19e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079fe:	d018      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x19e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a22      	ldr	r2, [pc, #136]	@ (8007a90 <HAL_TIM_PWM_Start+0x1fc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d013      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x19e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a21      	ldr	r2, [pc, #132]	@ (8007a94 <HAL_TIM_PWM_Start+0x200>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d00e      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x19e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1f      	ldr	r2, [pc, #124]	@ (8007a98 <HAL_TIM_PWM_Start+0x204>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d009      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x19e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a17      	ldr	r2, [pc, #92]	@ (8007a80 <HAL_TIM_PWM_Start+0x1ec>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d004      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x19e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a15      	ldr	r2, [pc, #84]	@ (8007a84 <HAL_TIM_PWM_Start+0x1f0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d115      	bne.n	8007a5e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	4b18      	ldr	r3, [pc, #96]	@ (8007a9c <HAL_TIM_PWM_Start+0x208>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b06      	cmp	r3, #6
 8007a42:	d015      	beq.n	8007a70 <HAL_TIM_PWM_Start+0x1dc>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a4a:	d011      	beq.n	8007a70 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5c:	e008      	b.n	8007a70 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e000      	b.n	8007a72 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40013400 	.word	0x40013400
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800
 8007a90:	40000400 	.word	0x40000400
 8007a94:	40000800 	.word	0x40000800
 8007a98:	40000c00 	.word	0x40000c00
 8007a9c:	00010007 	.word	0x00010007

08007aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e0ff      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b14      	cmp	r3, #20
 8007aca:	f200 80f0 	bhi.w	8007cae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ace:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007caf 	.word	0x08007caf
 8007adc:	08007caf 	.word	0x08007caf
 8007ae0:	08007caf 	.word	0x08007caf
 8007ae4:	08007b69 	.word	0x08007b69
 8007ae8:	08007caf 	.word	0x08007caf
 8007aec:	08007caf 	.word	0x08007caf
 8007af0:	08007caf 	.word	0x08007caf
 8007af4:	08007bab 	.word	0x08007bab
 8007af8:	08007caf 	.word	0x08007caf
 8007afc:	08007caf 	.word	0x08007caf
 8007b00:	08007caf 	.word	0x08007caf
 8007b04:	08007beb 	.word	0x08007beb
 8007b08:	08007caf 	.word	0x08007caf
 8007b0c:	08007caf 	.word	0x08007caf
 8007b10:	08007caf 	.word	0x08007caf
 8007b14:	08007c2d 	.word	0x08007c2d
 8007b18:	08007caf 	.word	0x08007caf
 8007b1c:	08007caf 	.word	0x08007caf
 8007b20:	08007caf 	.word	0x08007caf
 8007b24:	08007c6d 	.word	0x08007c6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fa3a 	bl	8007fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0208 	orr.w	r2, r2, #8
 8007b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699a      	ldr	r2, [r3, #24]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0204 	bic.w	r2, r2, #4
 8007b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6999      	ldr	r1, [r3, #24]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	619a      	str	r2, [r3, #24]
      break;
 8007b66:	e0a5      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 faaa 	bl	80080c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6999      	ldr	r1, [r3, #24]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	021a      	lsls	r2, r3, #8
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	619a      	str	r2, [r3, #24]
      break;
 8007ba8:	e084      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fb13 	bl	80081dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69da      	ldr	r2, [r3, #28]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0208 	orr.w	r2, r2, #8
 8007bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69da      	ldr	r2, [r3, #28]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0204 	bic.w	r2, r2, #4
 8007bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69d9      	ldr	r1, [r3, #28]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	61da      	str	r2, [r3, #28]
      break;
 8007be8:	e064      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fb7b 	bl	80082ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69da      	ldr	r2, [r3, #28]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69d9      	ldr	r1, [r3, #28]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	021a      	lsls	r2, r3, #8
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	61da      	str	r2, [r3, #28]
      break;
 8007c2a:	e043      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fbc4 	bl	80083c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0208 	orr.w	r2, r2, #8
 8007c46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0204 	bic.w	r2, r2, #4
 8007c56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007c6a:	e023      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fc08 	bl	8008488 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	021a      	lsls	r2, r3, #8
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007cac:	e002      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop

08007cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e0b6      	b.n	8007e52 <HAL_TIM_ConfigClockSource+0x18a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d20:	d03e      	beq.n	8007da0 <HAL_TIM_ConfigClockSource+0xd8>
 8007d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d26:	f200 8087 	bhi.w	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2e:	f000 8086 	beq.w	8007e3e <HAL_TIM_ConfigClockSource+0x176>
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d36:	d87f      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d38:	2b70      	cmp	r3, #112	@ 0x70
 8007d3a:	d01a      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0xaa>
 8007d3c:	2b70      	cmp	r3, #112	@ 0x70
 8007d3e:	d87b      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d40:	2b60      	cmp	r3, #96	@ 0x60
 8007d42:	d050      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x11e>
 8007d44:	2b60      	cmp	r3, #96	@ 0x60
 8007d46:	d877      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d48:	2b50      	cmp	r3, #80	@ 0x50
 8007d4a:	d03c      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0xfe>
 8007d4c:	2b50      	cmp	r3, #80	@ 0x50
 8007d4e:	d873      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d50:	2b40      	cmp	r3, #64	@ 0x40
 8007d52:	d058      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x13e>
 8007d54:	2b40      	cmp	r3, #64	@ 0x40
 8007d56:	d86f      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d58:	2b30      	cmp	r3, #48	@ 0x30
 8007d5a:	d064      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15e>
 8007d5c:	2b30      	cmp	r3, #48	@ 0x30
 8007d5e:	d86b      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d060      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15e>
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d867      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05c      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15e>
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d05a      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x15e>
 8007d70:	e062      	b.n	8007e38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d82:	f000 fc61 	bl	8008648 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	609a      	str	r2, [r3, #8]
      break;
 8007d9e:	e04f      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007db0:	f000 fc4a 	bl	8008648 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dc2:	609a      	str	r2, [r3, #8]
      break;
 8007dc4:	e03c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f000 fbbe 	bl	8008554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2150      	movs	r1, #80	@ 0x50
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fc17 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007de4:	e02c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007df2:	461a      	mov	r2, r3
 8007df4:	f000 fbdd 	bl	80085b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2160      	movs	r1, #96	@ 0x60
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fc07 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007e04:	e01c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e12:	461a      	mov	r2, r3
 8007e14:	f000 fb9e 	bl	8008554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2140      	movs	r1, #64	@ 0x40
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fbf7 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007e24:	e00c      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f000 fbee 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007e36:	e003      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	e000      	b.n	8007e40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a46      	ldr	r2, [pc, #280]	@ (8007f88 <TIM_Base_SetConfig+0x12c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7a:	d00f      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a43      	ldr	r2, [pc, #268]	@ (8007f8c <TIM_Base_SetConfig+0x130>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a42      	ldr	r2, [pc, #264]	@ (8007f90 <TIM_Base_SetConfig+0x134>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d007      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a41      	ldr	r2, [pc, #260]	@ (8007f94 <TIM_Base_SetConfig+0x138>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a40      	ldr	r2, [pc, #256]	@ (8007f98 <TIM_Base_SetConfig+0x13c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d108      	bne.n	8007eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a35      	ldr	r2, [pc, #212]	@ (8007f88 <TIM_Base_SetConfig+0x12c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01f      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ebc:	d01b      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a32      	ldr	r2, [pc, #200]	@ (8007f8c <TIM_Base_SetConfig+0x130>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d017      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a31      	ldr	r2, [pc, #196]	@ (8007f90 <TIM_Base_SetConfig+0x134>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d013      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a30      	ldr	r2, [pc, #192]	@ (8007f94 <TIM_Base_SetConfig+0x138>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00f      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8007f98 <TIM_Base_SetConfig+0x13c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00b      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8007f9c <TIM_Base_SetConfig+0x140>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d007      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8007fa0 <TIM_Base_SetConfig+0x144>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d003      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa4 <TIM_Base_SetConfig+0x148>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d108      	bne.n	8007f08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a16      	ldr	r2, [pc, #88]	@ (8007f88 <TIM_Base_SetConfig+0x12c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00f      	beq.n	8007f54 <TIM_Base_SetConfig+0xf8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a18      	ldr	r2, [pc, #96]	@ (8007f98 <TIM_Base_SetConfig+0x13c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00b      	beq.n	8007f54 <TIM_Base_SetConfig+0xf8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a17      	ldr	r2, [pc, #92]	@ (8007f9c <TIM_Base_SetConfig+0x140>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d007      	beq.n	8007f54 <TIM_Base_SetConfig+0xf8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a16      	ldr	r2, [pc, #88]	@ (8007fa0 <TIM_Base_SetConfig+0x144>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_Base_SetConfig+0xf8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a15      	ldr	r2, [pc, #84]	@ (8007fa4 <TIM_Base_SetConfig+0x148>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d103      	bne.n	8007f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d105      	bne.n	8007f7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f023 0201 	bic.w	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00
 8007f98:	40013400 	.word	0x40013400
 8007f9c:	40014000 	.word	0x40014000
 8007fa0:	40014400 	.word	0x40014400
 8007fa4:	40014800 	.word	0x40014800

08007fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f023 0201 	bic.w	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0303 	bic.w	r3, r3, #3
 8007fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f023 0302 	bic.w	r3, r3, #2
 8007ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a2c      	ldr	r2, [pc, #176]	@ (80080b4 <TIM_OC1_SetConfig+0x10c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00f      	beq.n	8008028 <TIM_OC1_SetConfig+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a2b      	ldr	r2, [pc, #172]	@ (80080b8 <TIM_OC1_SetConfig+0x110>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00b      	beq.n	8008028 <TIM_OC1_SetConfig+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a2a      	ldr	r2, [pc, #168]	@ (80080bc <TIM_OC1_SetConfig+0x114>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d007      	beq.n	8008028 <TIM_OC1_SetConfig+0x80>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a29      	ldr	r2, [pc, #164]	@ (80080c0 <TIM_OC1_SetConfig+0x118>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d003      	beq.n	8008028 <TIM_OC1_SetConfig+0x80>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a28      	ldr	r2, [pc, #160]	@ (80080c4 <TIM_OC1_SetConfig+0x11c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d10c      	bne.n	8008042 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0308 	bic.w	r3, r3, #8
 800802e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f023 0304 	bic.w	r3, r3, #4
 8008040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1b      	ldr	r2, [pc, #108]	@ (80080b4 <TIM_OC1_SetConfig+0x10c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00f      	beq.n	800806a <TIM_OC1_SetConfig+0xc2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a1a      	ldr	r2, [pc, #104]	@ (80080b8 <TIM_OC1_SetConfig+0x110>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00b      	beq.n	800806a <TIM_OC1_SetConfig+0xc2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a19      	ldr	r2, [pc, #100]	@ (80080bc <TIM_OC1_SetConfig+0x114>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d007      	beq.n	800806a <TIM_OC1_SetConfig+0xc2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a18      	ldr	r2, [pc, #96]	@ (80080c0 <TIM_OC1_SetConfig+0x118>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d003      	beq.n	800806a <TIM_OC1_SetConfig+0xc2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a17      	ldr	r2, [pc, #92]	@ (80080c4 <TIM_OC1_SetConfig+0x11c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d111      	bne.n	800808e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	621a      	str	r2, [r3, #32]
}
 80080a8:	bf00      	nop
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	40012c00 	.word	0x40012c00
 80080b8:	40013400 	.word	0x40013400
 80080bc:	40014000 	.word	0x40014000
 80080c0:	40014400 	.word	0x40014400
 80080c4:	40014800 	.word	0x40014800

080080c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f023 0210 	bic.w	r2, r3, #16
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0320 	bic.w	r3, r3, #32
 8008116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a28      	ldr	r2, [pc, #160]	@ (80081c8 <TIM_OC2_SetConfig+0x100>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d003      	beq.n	8008134 <TIM_OC2_SetConfig+0x6c>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a27      	ldr	r2, [pc, #156]	@ (80081cc <TIM_OC2_SetConfig+0x104>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d10d      	bne.n	8008150 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800813a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800814e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a1d      	ldr	r2, [pc, #116]	@ (80081c8 <TIM_OC2_SetConfig+0x100>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00f      	beq.n	8008178 <TIM_OC2_SetConfig+0xb0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a1c      	ldr	r2, [pc, #112]	@ (80081cc <TIM_OC2_SetConfig+0x104>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d00b      	beq.n	8008178 <TIM_OC2_SetConfig+0xb0>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a1b      	ldr	r2, [pc, #108]	@ (80081d0 <TIM_OC2_SetConfig+0x108>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d007      	beq.n	8008178 <TIM_OC2_SetConfig+0xb0>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a1a      	ldr	r2, [pc, #104]	@ (80081d4 <TIM_OC2_SetConfig+0x10c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d003      	beq.n	8008178 <TIM_OC2_SetConfig+0xb0>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a19      	ldr	r2, [pc, #100]	@ (80081d8 <TIM_OC2_SetConfig+0x110>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d113      	bne.n	80081a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800817e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	621a      	str	r2, [r3, #32]
}
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40013400 	.word	0x40013400
 80081d0:	40014000 	.word	0x40014000
 80081d4:	40014400 	.word	0x40014400
 80081d8:	40014800 	.word	0x40014800

080081dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800820a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800820e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a27      	ldr	r2, [pc, #156]	@ (80082d8 <TIM_OC3_SetConfig+0xfc>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d003      	beq.n	8008246 <TIM_OC3_SetConfig+0x6a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a26      	ldr	r2, [pc, #152]	@ (80082dc <TIM_OC3_SetConfig+0x100>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d10d      	bne.n	8008262 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800824c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	021b      	lsls	r3, r3, #8
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <TIM_OC3_SetConfig+0xfc>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00f      	beq.n	800828a <TIM_OC3_SetConfig+0xae>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1b      	ldr	r2, [pc, #108]	@ (80082dc <TIM_OC3_SetConfig+0x100>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00b      	beq.n	800828a <TIM_OC3_SetConfig+0xae>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1a      	ldr	r2, [pc, #104]	@ (80082e0 <TIM_OC3_SetConfig+0x104>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d007      	beq.n	800828a <TIM_OC3_SetConfig+0xae>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a19      	ldr	r2, [pc, #100]	@ (80082e4 <TIM_OC3_SetConfig+0x108>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d003      	beq.n	800828a <TIM_OC3_SetConfig+0xae>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a18      	ldr	r2, [pc, #96]	@ (80082e8 <TIM_OC3_SetConfig+0x10c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d113      	bne.n	80082b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	011b      	lsls	r3, r3, #4
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	621a      	str	r2, [r3, #32]
}
 80082cc:	bf00      	nop
 80082ce:	371c      	adds	r7, #28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	40012c00 	.word	0x40012c00
 80082dc:	40013400 	.word	0x40013400
 80082e0:	40014000 	.word	0x40014000
 80082e4:	40014400 	.word	0x40014400
 80082e8:	40014800 	.word	0x40014800

080082ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800831a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800831e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800833a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	031b      	lsls	r3, r3, #12
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a18      	ldr	r2, [pc, #96]	@ (80083ac <TIM_OC4_SetConfig+0xc0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00f      	beq.n	8008370 <TIM_OC4_SetConfig+0x84>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a17      	ldr	r2, [pc, #92]	@ (80083b0 <TIM_OC4_SetConfig+0xc4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00b      	beq.n	8008370 <TIM_OC4_SetConfig+0x84>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a16      	ldr	r2, [pc, #88]	@ (80083b4 <TIM_OC4_SetConfig+0xc8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d007      	beq.n	8008370 <TIM_OC4_SetConfig+0x84>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a15      	ldr	r2, [pc, #84]	@ (80083b8 <TIM_OC4_SetConfig+0xcc>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d003      	beq.n	8008370 <TIM_OC4_SetConfig+0x84>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a14      	ldr	r2, [pc, #80]	@ (80083bc <TIM_OC4_SetConfig+0xd0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d109      	bne.n	8008384 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	019b      	lsls	r3, r3, #6
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4313      	orrs	r3, r2
 8008382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	40012c00 	.word	0x40012c00
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40014400 	.word	0x40014400
 80083bc:	40014800 	.word	0x40014800

080083c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008404:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a17      	ldr	r2, [pc, #92]	@ (8008474 <TIM_OC5_SetConfig+0xb4>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00f      	beq.n	800843a <TIM_OC5_SetConfig+0x7a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a16      	ldr	r2, [pc, #88]	@ (8008478 <TIM_OC5_SetConfig+0xb8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00b      	beq.n	800843a <TIM_OC5_SetConfig+0x7a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a15      	ldr	r2, [pc, #84]	@ (800847c <TIM_OC5_SetConfig+0xbc>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d007      	beq.n	800843a <TIM_OC5_SetConfig+0x7a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a14      	ldr	r2, [pc, #80]	@ (8008480 <TIM_OC5_SetConfig+0xc0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d003      	beq.n	800843a <TIM_OC5_SetConfig+0x7a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a13      	ldr	r2, [pc, #76]	@ (8008484 <TIM_OC5_SetConfig+0xc4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d109      	bne.n	800844e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008440:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	621a      	str	r2, [r3, #32]
}
 8008468:	bf00      	nop
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	40012c00 	.word	0x40012c00
 8008478:	40013400 	.word	0x40013400
 800847c:	40014000 	.word	0x40014000
 8008480:	40014400 	.word	0x40014400
 8008484:	40014800 	.word	0x40014800

08008488 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	021b      	lsls	r3, r3, #8
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	051b      	lsls	r3, r3, #20
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4313      	orrs	r3, r2
 80084da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a18      	ldr	r2, [pc, #96]	@ (8008540 <TIM_OC6_SetConfig+0xb8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00f      	beq.n	8008504 <TIM_OC6_SetConfig+0x7c>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a17      	ldr	r2, [pc, #92]	@ (8008544 <TIM_OC6_SetConfig+0xbc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00b      	beq.n	8008504 <TIM_OC6_SetConfig+0x7c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a16      	ldr	r2, [pc, #88]	@ (8008548 <TIM_OC6_SetConfig+0xc0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d007      	beq.n	8008504 <TIM_OC6_SetConfig+0x7c>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a15      	ldr	r2, [pc, #84]	@ (800854c <TIM_OC6_SetConfig+0xc4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_OC6_SetConfig+0x7c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a14      	ldr	r2, [pc, #80]	@ (8008550 <TIM_OC6_SetConfig+0xc8>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d109      	bne.n	8008518 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800850a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	029b      	lsls	r3, r3, #10
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40012c00 	.word	0x40012c00
 8008544:	40013400 	.word	0x40013400
 8008548:	40014000 	.word	0x40014000
 800854c:	40014400 	.word	0x40014400
 8008550:	40014800 	.word	0x40014800

08008554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	f023 0201 	bic.w	r2, r3, #1
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800857e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f023 030a 	bic.w	r3, r3, #10
 8008590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4313      	orrs	r3, r2
 8008598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	621a      	str	r2, [r3, #32]
}
 80085a6:	bf00      	nop
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b087      	sub	sp, #28
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f023 0210 	bic.w	r2, r3, #16
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	031b      	lsls	r3, r3, #12
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4313      	orrs	r3, r2
 8008630:	f043 0307 	orr.w	r3, r3, #7
 8008634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	609a      	str	r2, [r3, #8]
}
 800863c:	bf00      	nop
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	021a      	lsls	r2, r3, #8
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	431a      	orrs	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4313      	orrs	r3, r2
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	609a      	str	r2, [r3, #8]
}
 800867c:	bf00      	nop
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	2201      	movs	r2, #1
 800869c:	fa02 f303 	lsl.w	r3, r2, r3
 80086a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1a      	ldr	r2, [r3, #32]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	43db      	mvns	r3, r3
 80086aa:	401a      	ands	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1a      	ldr	r2, [r3, #32]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	fa01 f303 	lsl.w	r3, r1, r3
 80086c0:	431a      	orrs	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e068      	b.n	80087be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a2e      	ldr	r2, [pc, #184]	@ (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d004      	beq.n	8008720 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a2d      	ldr	r2, [pc, #180]	@ (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d108      	bne.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008726:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1e      	ldr	r2, [pc, #120]	@ (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d01d      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875e:	d018      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1b      	ldr	r2, [pc, #108]	@ (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1a      	ldr	r2, [pc, #104]	@ (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00e      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a18      	ldr	r2, [pc, #96]	@ (80087dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d009      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a13      	ldr	r2, [pc, #76]	@ (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a14      	ldr	r2, [pc, #80]	@ (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d10c      	bne.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40012c00 	.word	0x40012c00
 80087d0:	40013400 	.word	0x40013400
 80087d4:	40000400 	.word	0x40000400
 80087d8:	40000800 	.word	0x40000800
 80087dc:	40000c00 	.word	0x40000c00
 80087e0:	40014000 	.word	0x40014000

080087e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e040      	b.n	8008878 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fa ff0e 	bl	8003628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2224      	movs	r2, #36	@ 0x24
 8008810:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 feb0 	bl	8009590 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fbf5 	bl	8009020 <UART_SetConfig>
 8008836:	4603      	mov	r3, r0
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e01b      	b.n	8008878 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800884e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800885e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 ff2f 	bl	80096d4 <UART_CheckIdleState>
 8008876:	4603      	mov	r3, r0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008880:	b480      	push	{r7}
 8008882:	b08b      	sub	sp, #44	@ 0x2c
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008892:	2b20      	cmp	r3, #32
 8008894:	d147      	bne.n	8008926 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_UART_Transmit_IT+0x22>
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e040      	b.n	8008928 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	88fa      	ldrh	r2, [r7, #6]
 80088b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	88fa      	ldrh	r2, [r7, #6]
 80088b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2221      	movs	r2, #33	@ 0x21
 80088ce:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d8:	d107      	bne.n	80088ea <HAL_UART_Transmit_IT+0x6a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4a13      	ldr	r2, [pc, #76]	@ (8008934 <HAL_UART_Transmit_IT+0xb4>)
 80088e6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80088e8:	e002      	b.n	80088f0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4a12      	ldr	r2, [pc, #72]	@ (8008938 <HAL_UART_Transmit_IT+0xb8>)
 80088ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	613b      	str	r3, [r7, #16]
   return(result);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890e:	623b      	str	r3, [r7, #32]
 8008910:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	69f9      	ldr	r1, [r7, #28]
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	61bb      	str	r3, [r7, #24]
   return(result);
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e6      	bne.n	80088f0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	e000      	b.n	8008928 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008926:	2302      	movs	r3, #2
  }
}
 8008928:	4618      	mov	r0, r3
 800892a:	372c      	adds	r7, #44	@ 0x2c
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	08009c37 	.word	0x08009c37
 8008938:	08009b81 	.word	0x08009b81

0800893c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08a      	sub	sp, #40	@ 0x28
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008950:	2b20      	cmp	r3, #32
 8008952:	d137      	bne.n	80089c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_UART_Receive_IT+0x24>
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e030      	b.n	80089c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a18      	ldr	r2, [pc, #96]	@ (80089d0 <HAL_UART_Receive_IT+0x94>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d01f      	beq.n	80089b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d018      	beq.n	80089b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	613b      	str	r3, [r7, #16]
   return(result);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	623b      	str	r3, [r7, #32]
 80089a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	69f9      	ldr	r1, [r7, #28]
 80089a6:	6a3a      	ldr	r2, [r7, #32]
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e6      	bne.n	8008982 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	461a      	mov	r2, r3
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 ffa0 	bl	8009900 <UART_Start_Receive_IT>
 80089c0:	4603      	mov	r3, r0
 80089c2:	e000      	b.n	80089c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089c4:	2302      	movs	r3, #2
  }
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3728      	adds	r7, #40	@ 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40008000 	.word	0x40008000

080089d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b0ba      	sub	sp, #232	@ 0xe8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80089fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a02:	4013      	ands	r3, r2
 8008a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d115      	bne.n	8008a3c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00f      	beq.n	8008a3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d009      	beq.n	8008a3c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 82ca 	beq.w	8008fc6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	4798      	blx	r3
      }
      return;
 8008a3a:	e2c4      	b.n	8008fc6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8117 	beq.w	8008c74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a56:	4b85      	ldr	r3, [pc, #532]	@ (8008c6c <HAL_UART_IRQHandler+0x298>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 810a 	beq.w	8008c74 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d011      	beq.n	8008a90 <HAL_UART_IRQHandler+0xbc>
 8008a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a86:	f043 0201 	orr.w	r2, r3, #1
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d011      	beq.n	8008ac0 <HAL_UART_IRQHandler+0xec>
 8008a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2202      	movs	r2, #2
 8008aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ab6:	f043 0204 	orr.w	r2, r3, #4
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d011      	beq.n	8008af0 <HAL_UART_IRQHandler+0x11c>
 8008acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2204      	movs	r2, #4
 8008ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ae6:	f043 0202 	orr.w	r2, r3, #2
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d017      	beq.n	8008b2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d105      	bne.n	8008b14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2208      	movs	r2, #8
 8008b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b22:	f043 0208 	orr.w	r2, r3, #8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d012      	beq.n	8008b5e <HAL_UART_IRQHandler+0x18a>
 8008b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b54:	f043 0220 	orr.w	r2, r3, #32
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 8230 	beq.w	8008fca <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00d      	beq.n	8008b92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d007      	beq.n	8008b92 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba6:	2b40      	cmp	r3, #64	@ 0x40
 8008ba8:	d005      	beq.n	8008bb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d04f      	beq.n	8008c56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 ff68 	bl	8009a8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc6:	2b40      	cmp	r3, #64	@ 0x40
 8008bc8:	d141      	bne.n	8008c4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1d9      	bne.n	8008bca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d013      	beq.n	8008c46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c22:	4a13      	ldr	r2, [pc, #76]	@ (8008c70 <HAL_UART_IRQHandler+0x29c>)
 8008c24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fc fb9b 	bl	8005366 <HAL_DMA_Abort_IT>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d017      	beq.n	8008c66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c44:	e00f      	b.n	8008c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f9d4 	bl	8008ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4c:	e00b      	b.n	8008c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f9d0 	bl	8008ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c54:	e007      	b.n	8008c66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f9cc 	bl	8008ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008c64:	e1b1      	b.n	8008fca <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c66:	bf00      	nop
    return;
 8008c68:	e1af      	b.n	8008fca <HAL_UART_IRQHandler+0x5f6>
 8008c6a:	bf00      	nop
 8008c6c:	04000120 	.word	0x04000120
 8008c70:	08009b55 	.word	0x08009b55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	f040 816a 	bne.w	8008f52 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8163 	beq.w	8008f52 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 815c 	beq.w	8008f52 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2210      	movs	r2, #16
 8008ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cac:	2b40      	cmp	r3, #64	@ 0x40
 8008cae:	f040 80d4 	bne.w	8008e5a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 80ad 	beq.w	8008e22 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	f080 80a5 	bcs.w	8008e22 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0320 	and.w	r3, r3, #32
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f040 8086 	bne.w	8008e00 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1da      	bne.n	8008cf4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3308      	adds	r3, #8
 8008d44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d50:	f023 0301 	bic.w	r3, r3, #1
 8008d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e1      	bne.n	8008d3e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3308      	adds	r3, #8
 8008d80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3308      	adds	r3, #8
 8008d9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008da0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008da4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008dac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e3      	bne.n	8008d7a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dd0:	f023 0310 	bic.w	r3, r3, #16
 8008dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008de2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008de4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008de8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e4      	bne.n	8008dc0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fc fa75 	bl	80052ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8f4 	bl	8009008 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008e20:	e0d5      	b.n	8008fce <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	f040 80ce 	bne.w	8008fce <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	f040 80c5 	bne.w	8008fce <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f8d8 	bl	8009008 <HAL_UARTEx_RxEventCallback>
      return;
 8008e58:	e0b9      	b.n	8008fce <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 80ab 	beq.w	8008fd2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80a6 	beq.w	8008fd2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e4      	bne.n	8008e86 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	623b      	str	r3, [r7, #32]
   return(result);
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	f023 0301 	bic.w	r3, r3, #1
 8008ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ee0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e3      	bne.n	8008ebc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f2a:	61fb      	str	r3, [r7, #28]
 8008f2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	69b9      	ldr	r1, [r7, #24]
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	617b      	str	r3, [r7, #20]
   return(result);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e4      	bne.n	8008f08 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2202      	movs	r2, #2
 8008f42:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f85c 	bl	8009008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f50:	e03f      	b.n	8008fd2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00e      	beq.n	8008f7c <HAL_UART_IRQHandler+0x5a8>
 8008f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008f72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f8a5 	bl	800a0c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f7a:	e02d      	b.n	8008fd8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00e      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d008      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01c      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
    }
    return;
 8008fa4:	e017      	b.n	8008fd6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d012      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x604>
 8008fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00c      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fe99 	bl	8009cf6 <UART_EndTransmit_IT>
    return;
 8008fc4:	e008      	b.n	8008fd8 <HAL_UART_IRQHandler+0x604>
      return;
 8008fc6:	bf00      	nop
 8008fc8:	e006      	b.n	8008fd8 <HAL_UART_IRQHandler+0x604>
    return;
 8008fca:	bf00      	nop
 8008fcc:	e004      	b.n	8008fd8 <HAL_UART_IRQHandler+0x604>
      return;
 8008fce:	bf00      	nop
 8008fd0:	e002      	b.n	8008fd8 <HAL_UART_IRQHandler+0x604>
      return;
 8008fd2:	bf00      	nop
 8008fd4:	e000      	b.n	8008fd8 <HAL_UART_IRQHandler+0x604>
    return;
 8008fd6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008fd8:	37e8      	adds	r7, #232	@ 0xe8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop

08008fe0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009024:	b08a      	sub	sp, #40	@ 0x28
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	431a      	orrs	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	431a      	orrs	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	4313      	orrs	r3, r2
 8009046:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4ba4      	ldr	r3, [pc, #656]	@ (80092e0 <UART_SetConfig+0x2c0>)
 8009050:	4013      	ands	r3, r2
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009058:	430b      	orrs	r3, r1
 800905a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a99      	ldr	r2, [pc, #612]	@ (80092e4 <UART_SetConfig+0x2c4>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d004      	beq.n	800908c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009088:	4313      	orrs	r3, r2
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800909c:	430a      	orrs	r2, r1
 800909e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a90      	ldr	r2, [pc, #576]	@ (80092e8 <UART_SetConfig+0x2c8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d126      	bne.n	80090f8 <UART_SetConfig+0xd8>
 80090aa:	4b90      	ldr	r3, [pc, #576]	@ (80092ec <UART_SetConfig+0x2cc>)
 80090ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d81b      	bhi.n	80090f0 <UART_SetConfig+0xd0>
 80090b8:	a201      	add	r2, pc, #4	@ (adr r2, 80090c0 <UART_SetConfig+0xa0>)
 80090ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090be:	bf00      	nop
 80090c0:	080090d1 	.word	0x080090d1
 80090c4:	080090e1 	.word	0x080090e1
 80090c8:	080090d9 	.word	0x080090d9
 80090cc:	080090e9 	.word	0x080090e9
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090d6:	e116      	b.n	8009306 <UART_SetConfig+0x2e6>
 80090d8:	2302      	movs	r3, #2
 80090da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090de:	e112      	b.n	8009306 <UART_SetConfig+0x2e6>
 80090e0:	2304      	movs	r3, #4
 80090e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090e6:	e10e      	b.n	8009306 <UART_SetConfig+0x2e6>
 80090e8:	2308      	movs	r3, #8
 80090ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090ee:	e10a      	b.n	8009306 <UART_SetConfig+0x2e6>
 80090f0:	2310      	movs	r3, #16
 80090f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80090f6:	e106      	b.n	8009306 <UART_SetConfig+0x2e6>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a7c      	ldr	r2, [pc, #496]	@ (80092f0 <UART_SetConfig+0x2d0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d138      	bne.n	8009174 <UART_SetConfig+0x154>
 8009102:	4b7a      	ldr	r3, [pc, #488]	@ (80092ec <UART_SetConfig+0x2cc>)
 8009104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009108:	f003 030c 	and.w	r3, r3, #12
 800910c:	2b0c      	cmp	r3, #12
 800910e:	d82d      	bhi.n	800916c <UART_SetConfig+0x14c>
 8009110:	a201      	add	r2, pc, #4	@ (adr r2, 8009118 <UART_SetConfig+0xf8>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	0800914d 	.word	0x0800914d
 800911c:	0800916d 	.word	0x0800916d
 8009120:	0800916d 	.word	0x0800916d
 8009124:	0800916d 	.word	0x0800916d
 8009128:	0800915d 	.word	0x0800915d
 800912c:	0800916d 	.word	0x0800916d
 8009130:	0800916d 	.word	0x0800916d
 8009134:	0800916d 	.word	0x0800916d
 8009138:	08009155 	.word	0x08009155
 800913c:	0800916d 	.word	0x0800916d
 8009140:	0800916d 	.word	0x0800916d
 8009144:	0800916d 	.word	0x0800916d
 8009148:	08009165 	.word	0x08009165
 800914c:	2300      	movs	r3, #0
 800914e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009152:	e0d8      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009154:	2302      	movs	r3, #2
 8009156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800915a:	e0d4      	b.n	8009306 <UART_SetConfig+0x2e6>
 800915c:	2304      	movs	r3, #4
 800915e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009162:	e0d0      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009164:	2308      	movs	r3, #8
 8009166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800916a:	e0cc      	b.n	8009306 <UART_SetConfig+0x2e6>
 800916c:	2310      	movs	r3, #16
 800916e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009172:	e0c8      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a5e      	ldr	r2, [pc, #376]	@ (80092f4 <UART_SetConfig+0x2d4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d125      	bne.n	80091ca <UART_SetConfig+0x1aa>
 800917e:	4b5b      	ldr	r3, [pc, #364]	@ (80092ec <UART_SetConfig+0x2cc>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009184:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009188:	2b30      	cmp	r3, #48	@ 0x30
 800918a:	d016      	beq.n	80091ba <UART_SetConfig+0x19a>
 800918c:	2b30      	cmp	r3, #48	@ 0x30
 800918e:	d818      	bhi.n	80091c2 <UART_SetConfig+0x1a2>
 8009190:	2b20      	cmp	r3, #32
 8009192:	d00a      	beq.n	80091aa <UART_SetConfig+0x18a>
 8009194:	2b20      	cmp	r3, #32
 8009196:	d814      	bhi.n	80091c2 <UART_SetConfig+0x1a2>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <UART_SetConfig+0x182>
 800919c:	2b10      	cmp	r3, #16
 800919e:	d008      	beq.n	80091b2 <UART_SetConfig+0x192>
 80091a0:	e00f      	b.n	80091c2 <UART_SetConfig+0x1a2>
 80091a2:	2300      	movs	r3, #0
 80091a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091a8:	e0ad      	b.n	8009306 <UART_SetConfig+0x2e6>
 80091aa:	2302      	movs	r3, #2
 80091ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091b0:	e0a9      	b.n	8009306 <UART_SetConfig+0x2e6>
 80091b2:	2304      	movs	r3, #4
 80091b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091b8:	e0a5      	b.n	8009306 <UART_SetConfig+0x2e6>
 80091ba:	2308      	movs	r3, #8
 80091bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091c0:	e0a1      	b.n	8009306 <UART_SetConfig+0x2e6>
 80091c2:	2310      	movs	r3, #16
 80091c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091c8:	e09d      	b.n	8009306 <UART_SetConfig+0x2e6>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a4a      	ldr	r2, [pc, #296]	@ (80092f8 <UART_SetConfig+0x2d8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d125      	bne.n	8009220 <UART_SetConfig+0x200>
 80091d4:	4b45      	ldr	r3, [pc, #276]	@ (80092ec <UART_SetConfig+0x2cc>)
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091de:	2bc0      	cmp	r3, #192	@ 0xc0
 80091e0:	d016      	beq.n	8009210 <UART_SetConfig+0x1f0>
 80091e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80091e4:	d818      	bhi.n	8009218 <UART_SetConfig+0x1f8>
 80091e6:	2b80      	cmp	r3, #128	@ 0x80
 80091e8:	d00a      	beq.n	8009200 <UART_SetConfig+0x1e0>
 80091ea:	2b80      	cmp	r3, #128	@ 0x80
 80091ec:	d814      	bhi.n	8009218 <UART_SetConfig+0x1f8>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <UART_SetConfig+0x1d8>
 80091f2:	2b40      	cmp	r3, #64	@ 0x40
 80091f4:	d008      	beq.n	8009208 <UART_SetConfig+0x1e8>
 80091f6:	e00f      	b.n	8009218 <UART_SetConfig+0x1f8>
 80091f8:	2300      	movs	r3, #0
 80091fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091fe:	e082      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009200:	2302      	movs	r3, #2
 8009202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009206:	e07e      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009208:	2304      	movs	r3, #4
 800920a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800920e:	e07a      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009210:	2308      	movs	r3, #8
 8009212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009216:	e076      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009218:	2310      	movs	r3, #16
 800921a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800921e:	e072      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a35      	ldr	r2, [pc, #212]	@ (80092fc <UART_SetConfig+0x2dc>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d12a      	bne.n	8009280 <UART_SetConfig+0x260>
 800922a:	4b30      	ldr	r3, [pc, #192]	@ (80092ec <UART_SetConfig+0x2cc>)
 800922c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009230:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009238:	d01a      	beq.n	8009270 <UART_SetConfig+0x250>
 800923a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800923e:	d81b      	bhi.n	8009278 <UART_SetConfig+0x258>
 8009240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009244:	d00c      	beq.n	8009260 <UART_SetConfig+0x240>
 8009246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800924a:	d815      	bhi.n	8009278 <UART_SetConfig+0x258>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <UART_SetConfig+0x238>
 8009250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009254:	d008      	beq.n	8009268 <UART_SetConfig+0x248>
 8009256:	e00f      	b.n	8009278 <UART_SetConfig+0x258>
 8009258:	2300      	movs	r3, #0
 800925a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800925e:	e052      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009260:	2302      	movs	r3, #2
 8009262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009266:	e04e      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009268:	2304      	movs	r3, #4
 800926a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800926e:	e04a      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009270:	2308      	movs	r3, #8
 8009272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009276:	e046      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009278:	2310      	movs	r3, #16
 800927a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800927e:	e042      	b.n	8009306 <UART_SetConfig+0x2e6>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a17      	ldr	r2, [pc, #92]	@ (80092e4 <UART_SetConfig+0x2c4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d13a      	bne.n	8009300 <UART_SetConfig+0x2e0>
 800928a:	4b18      	ldr	r3, [pc, #96]	@ (80092ec <UART_SetConfig+0x2cc>)
 800928c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009290:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009298:	d01a      	beq.n	80092d0 <UART_SetConfig+0x2b0>
 800929a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800929e:	d81b      	bhi.n	80092d8 <UART_SetConfig+0x2b8>
 80092a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092a4:	d00c      	beq.n	80092c0 <UART_SetConfig+0x2a0>
 80092a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092aa:	d815      	bhi.n	80092d8 <UART_SetConfig+0x2b8>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <UART_SetConfig+0x298>
 80092b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092b4:	d008      	beq.n	80092c8 <UART_SetConfig+0x2a8>
 80092b6:	e00f      	b.n	80092d8 <UART_SetConfig+0x2b8>
 80092b8:	2300      	movs	r3, #0
 80092ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092be:	e022      	b.n	8009306 <UART_SetConfig+0x2e6>
 80092c0:	2302      	movs	r3, #2
 80092c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092c6:	e01e      	b.n	8009306 <UART_SetConfig+0x2e6>
 80092c8:	2304      	movs	r3, #4
 80092ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092ce:	e01a      	b.n	8009306 <UART_SetConfig+0x2e6>
 80092d0:	2308      	movs	r3, #8
 80092d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092d6:	e016      	b.n	8009306 <UART_SetConfig+0x2e6>
 80092d8:	2310      	movs	r3, #16
 80092da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092de:	e012      	b.n	8009306 <UART_SetConfig+0x2e6>
 80092e0:	efff69f3 	.word	0xefff69f3
 80092e4:	40008000 	.word	0x40008000
 80092e8:	40013800 	.word	0x40013800
 80092ec:	40021000 	.word	0x40021000
 80092f0:	40004400 	.word	0x40004400
 80092f4:	40004800 	.word	0x40004800
 80092f8:	40004c00 	.word	0x40004c00
 80092fc:	40005000 	.word	0x40005000
 8009300:	2310      	movs	r3, #16
 8009302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a9f      	ldr	r2, [pc, #636]	@ (8009588 <UART_SetConfig+0x568>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d17a      	bne.n	8009406 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009310:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009314:	2b08      	cmp	r3, #8
 8009316:	d824      	bhi.n	8009362 <UART_SetConfig+0x342>
 8009318:	a201      	add	r2, pc, #4	@ (adr r2, 8009320 <UART_SetConfig+0x300>)
 800931a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931e:	bf00      	nop
 8009320:	08009345 	.word	0x08009345
 8009324:	08009363 	.word	0x08009363
 8009328:	0800934d 	.word	0x0800934d
 800932c:	08009363 	.word	0x08009363
 8009330:	08009353 	.word	0x08009353
 8009334:	08009363 	.word	0x08009363
 8009338:	08009363 	.word	0x08009363
 800933c:	08009363 	.word	0x08009363
 8009340:	0800935b 	.word	0x0800935b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009344:	f7fd fca6 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 8009348:	61f8      	str	r0, [r7, #28]
        break;
 800934a:	e010      	b.n	800936e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800934c:	4b8f      	ldr	r3, [pc, #572]	@ (800958c <UART_SetConfig+0x56c>)
 800934e:	61fb      	str	r3, [r7, #28]
        break;
 8009350:	e00d      	b.n	800936e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009352:	f7fd fc07 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8009356:	61f8      	str	r0, [r7, #28]
        break;
 8009358:	e009      	b.n	800936e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800935a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800935e:	61fb      	str	r3, [r7, #28]
        break;
 8009360:	e005      	b.n	800936e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800936c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 80fb 	beq.w	800956c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	4413      	add	r3, r2
 8009380:	69fa      	ldr	r2, [r7, #28]
 8009382:	429a      	cmp	r2, r3
 8009384:	d305      	bcc.n	8009392 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	429a      	cmp	r2, r3
 8009390:	d903      	bls.n	800939a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009398:	e0e8      	b.n	800956c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	2200      	movs	r2, #0
 800939e:	461c      	mov	r4, r3
 80093a0:	4615      	mov	r5, r2
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	f04f 0300 	mov.w	r3, #0
 80093aa:	022b      	lsls	r3, r5, #8
 80093ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80093b0:	0222      	lsls	r2, r4, #8
 80093b2:	68f9      	ldr	r1, [r7, #12]
 80093b4:	6849      	ldr	r1, [r1, #4]
 80093b6:	0849      	lsrs	r1, r1, #1
 80093b8:	2000      	movs	r0, #0
 80093ba:	4688      	mov	r8, r1
 80093bc:	4681      	mov	r9, r0
 80093be:	eb12 0a08 	adds.w	sl, r2, r8
 80093c2:	eb43 0b09 	adc.w	fp, r3, r9
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	603b      	str	r3, [r7, #0]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d4:	4650      	mov	r0, sl
 80093d6:	4659      	mov	r1, fp
 80093d8:	f7f7 fc66 	bl	8000ca8 <__aeabi_uldivmod>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4613      	mov	r3, r2
 80093e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093ea:	d308      	bcc.n	80093fe <UART_SetConfig+0x3de>
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093f2:	d204      	bcs.n	80093fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	60da      	str	r2, [r3, #12]
 80093fc:	e0b6      	b.n	800956c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009404:	e0b2      	b.n	800956c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800940e:	d15e      	bne.n	80094ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009410:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009414:	2b08      	cmp	r3, #8
 8009416:	d828      	bhi.n	800946a <UART_SetConfig+0x44a>
 8009418:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <UART_SetConfig+0x400>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	08009445 	.word	0x08009445
 8009424:	0800944d 	.word	0x0800944d
 8009428:	08009455 	.word	0x08009455
 800942c:	0800946b 	.word	0x0800946b
 8009430:	0800945b 	.word	0x0800945b
 8009434:	0800946b 	.word	0x0800946b
 8009438:	0800946b 	.word	0x0800946b
 800943c:	0800946b 	.word	0x0800946b
 8009440:	08009463 	.word	0x08009463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009444:	f7fd fc26 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 8009448:	61f8      	str	r0, [r7, #28]
        break;
 800944a:	e014      	b.n	8009476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800944c:	f7fd fc38 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 8009450:	61f8      	str	r0, [r7, #28]
        break;
 8009452:	e010      	b.n	8009476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009454:	4b4d      	ldr	r3, [pc, #308]	@ (800958c <UART_SetConfig+0x56c>)
 8009456:	61fb      	str	r3, [r7, #28]
        break;
 8009458:	e00d      	b.n	8009476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800945a:	f7fd fb83 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800945e:	61f8      	str	r0, [r7, #28]
        break;
 8009460:	e009      	b.n	8009476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009466:	61fb      	str	r3, [r7, #28]
        break;
 8009468:	e005      	b.n	8009476 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800946a:	2300      	movs	r3, #0
 800946c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d077      	beq.n	800956c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	005a      	lsls	r2, r3, #1
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	085b      	lsrs	r3, r3, #1
 8009486:	441a      	add	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009490:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b0f      	cmp	r3, #15
 8009496:	d916      	bls.n	80094c6 <UART_SetConfig+0x4a6>
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800949e:	d212      	bcs.n	80094c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f023 030f 	bic.w	r3, r3, #15
 80094a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	085b      	lsrs	r3, r3, #1
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	8afb      	ldrh	r3, [r7, #22]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	8afa      	ldrh	r2, [r7, #22]
 80094c2:	60da      	str	r2, [r3, #12]
 80094c4:	e052      	b.n	800956c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80094cc:	e04e      	b.n	800956c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80094d2:	2b08      	cmp	r3, #8
 80094d4:	d827      	bhi.n	8009526 <UART_SetConfig+0x506>
 80094d6:	a201      	add	r2, pc, #4	@ (adr r2, 80094dc <UART_SetConfig+0x4bc>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	08009501 	.word	0x08009501
 80094e0:	08009509 	.word	0x08009509
 80094e4:	08009511 	.word	0x08009511
 80094e8:	08009527 	.word	0x08009527
 80094ec:	08009517 	.word	0x08009517
 80094f0:	08009527 	.word	0x08009527
 80094f4:	08009527 	.word	0x08009527
 80094f8:	08009527 	.word	0x08009527
 80094fc:	0800951f 	.word	0x0800951f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009500:	f7fd fbc8 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 8009504:	61f8      	str	r0, [r7, #28]
        break;
 8009506:	e014      	b.n	8009532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009508:	f7fd fbda 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 800950c:	61f8      	str	r0, [r7, #28]
        break;
 800950e:	e010      	b.n	8009532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009510:	4b1e      	ldr	r3, [pc, #120]	@ (800958c <UART_SetConfig+0x56c>)
 8009512:	61fb      	str	r3, [r7, #28]
        break;
 8009514:	e00d      	b.n	8009532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009516:	f7fd fb25 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800951a:	61f8      	str	r0, [r7, #28]
        break;
 800951c:	e009      	b.n	8009532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800951e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009522:	61fb      	str	r3, [r7, #28]
        break;
 8009524:	e005      	b.n	8009532 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009530:	bf00      	nop
    }

    if (pclk != 0U)
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d019      	beq.n	800956c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	085a      	lsrs	r2, r3, #1
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	441a      	add	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	fbb2 f3f3 	udiv	r3, r2, r3
 800954a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	2b0f      	cmp	r3, #15
 8009550:	d909      	bls.n	8009566 <UART_SetConfig+0x546>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009558:	d205      	bcs.n	8009566 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	60da      	str	r2, [r3, #12]
 8009564:	e002      	b.n	800956c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009578:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800957c:	4618      	mov	r0, r3
 800957e:	3728      	adds	r7, #40	@ 0x28
 8009580:	46bd      	mov	sp, r7
 8009582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009586:	bf00      	nop
 8009588:	40008000 	.word	0x40008000
 800958c:	00f42400 	.word	0x00f42400

08009590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959c:	f003 0308 	and.w	r3, r3, #8
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00a      	beq.n	80095ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00a      	beq.n	80095fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00a      	beq.n	8009642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01a      	beq.n	80096a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800968e:	d10a      	bne.n	80096a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	605a      	str	r2, [r3, #4]
  }
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b098      	sub	sp, #96	@ 0x60
 80096d8:	af02      	add	r7, sp, #8
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096e4:	f7fa f9b0 	bl	8003a48 <HAL_GetTick>
 80096e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d12e      	bne.n	8009756 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009700:	2200      	movs	r2, #0
 8009702:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f88c 	bl	8009824 <UART_WaitOnFlagUntilTimeout>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d021      	beq.n	8009756 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009726:	653b      	str	r3, [r7, #80]	@ 0x50
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009730:	647b      	str	r3, [r7, #68]	@ 0x44
 8009732:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009734:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009738:	e841 2300 	strex	r3, r2, [r1]
 800973c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800973e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e6      	bne.n	8009712 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2220      	movs	r2, #32
 8009748:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e062      	b.n	800981c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b04      	cmp	r3, #4
 8009762:	d149      	bne.n	80097f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009764:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800976c:	2200      	movs	r2, #0
 800976e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f856 	bl	8009824 <UART_WaitOnFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d03c      	beq.n	80097f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	623b      	str	r3, [r7, #32]
   return(result);
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800979c:	633b      	str	r3, [r7, #48]	@ 0x30
 800979e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e6      	bne.n	800977e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	60fb      	str	r3, [r7, #12]
   return(result);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0301 	bic.w	r3, r3, #1
 80097c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097d0:	61fa      	str	r2, [r7, #28]
 80097d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	69b9      	ldr	r1, [r7, #24]
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	617b      	str	r3, [r7, #20]
   return(result);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e5      	bne.n	80097b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e011      	b.n	800981c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2220      	movs	r2, #32
 8009802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3758      	adds	r7, #88	@ 0x58
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	4613      	mov	r3, r2
 8009832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009834:	e04f      	b.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983c:	d04b      	beq.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800983e:	f7fa f903 	bl	8003a48 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	429a      	cmp	r2, r3
 800984c:	d302      	bcc.n	8009854 <UART_WaitOnFlagUntilTimeout+0x30>
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e04e      	b.n	80098f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0304 	and.w	r3, r3, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	d037      	beq.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b80      	cmp	r3, #128	@ 0x80
 800986a:	d034      	beq.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b40      	cmp	r3, #64	@ 0x40
 8009870:	d031      	beq.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	f003 0308 	and.w	r3, r3, #8
 800987c:	2b08      	cmp	r3, #8
 800987e:	d110      	bne.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2208      	movs	r2, #8
 8009886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f8ff 	bl	8009a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2208      	movs	r2, #8
 8009892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e029      	b.n	80098f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098b0:	d111      	bne.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 f8e5 	bl	8009a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e00f      	b.n	80098f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69da      	ldr	r2, [r3, #28]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	4013      	ands	r3, r2
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	bf0c      	ite	eq
 80098e6:	2301      	moveq	r3, #1
 80098e8:	2300      	movne	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d0a0      	beq.n	8009836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009900:	b480      	push	{r7}
 8009902:	b097      	sub	sp, #92	@ 0x5c
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4613      	mov	r3, r2
 800990c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	88fa      	ldrh	r2, [r7, #6]
 8009918:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	88fa      	ldrh	r2, [r7, #6]
 8009920:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009932:	d10e      	bne.n	8009952 <UART_Start_Receive_IT+0x52>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d105      	bne.n	8009948 <UART_Start_Receive_IT+0x48>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009942:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009946:	e02d      	b.n	80099a4 <UART_Start_Receive_IT+0xa4>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	22ff      	movs	r2, #255	@ 0xff
 800994c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009950:	e028      	b.n	80099a4 <UART_Start_Receive_IT+0xa4>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10d      	bne.n	8009976 <UART_Start_Receive_IT+0x76>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d104      	bne.n	800996c <UART_Start_Receive_IT+0x6c>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	22ff      	movs	r2, #255	@ 0xff
 8009966:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800996a:	e01b      	b.n	80099a4 <UART_Start_Receive_IT+0xa4>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	227f      	movs	r2, #127	@ 0x7f
 8009970:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009974:	e016      	b.n	80099a4 <UART_Start_Receive_IT+0xa4>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800997e:	d10d      	bne.n	800999c <UART_Start_Receive_IT+0x9c>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <UART_Start_Receive_IT+0x92>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	227f      	movs	r2, #127	@ 0x7f
 800998c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009990:	e008      	b.n	80099a4 <UART_Start_Receive_IT+0xa4>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	223f      	movs	r2, #63	@ 0x3f
 8009996:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800999a:	e003      	b.n	80099a4 <UART_Start_Receive_IT+0xa4>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2222      	movs	r2, #34	@ 0x22
 80099b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3308      	adds	r3, #8
 80099ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3308      	adds	r3, #8
 80099d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80099d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80099da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80099e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e5      	bne.n	80099b4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099f0:	d107      	bne.n	8009a02 <UART_Start_Receive_IT+0x102>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4a21      	ldr	r2, [pc, #132]	@ (8009a84 <UART_Start_Receive_IT+0x184>)
 80099fe:	669a      	str	r2, [r3, #104]	@ 0x68
 8009a00:	e002      	b.n	8009a08 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4a20      	ldr	r2, [pc, #128]	@ (8009a88 <UART_Start_Receive_IT+0x188>)
 8009a06:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d019      	beq.n	8009a44 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a30:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e6      	bne.n	8009a10 <UART_Start_Receive_IT+0x110>
 8009a42:	e018      	b.n	8009a76 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	e853 3f00 	ldrex	r3, [r3]
 8009a50:	613b      	str	r3, [r7, #16]
   return(result);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f043 0320 	orr.w	r3, r3, #32
 8009a58:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a62:	623b      	str	r3, [r7, #32]
 8009a64:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a66:	69f9      	ldr	r1, [r7, #28]
 8009a68:	6a3a      	ldr	r2, [r7, #32]
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e6      	bne.n	8009a44 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	375c      	adds	r7, #92	@ 0x5c
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	08009f09 	.word	0x08009f09
 8009a88:	08009d4d 	.word	0x08009d4d

08009a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b095      	sub	sp, #84	@ 0x54
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e6      	bne.n	8009a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f023 0301 	bic.w	r3, r3, #1
 8009adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ae6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d118      	bne.n	8009b34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f023 0310 	bic.w	r3, r3, #16
 8009b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b20:	61bb      	str	r3, [r7, #24]
 8009b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6979      	ldr	r1, [r7, #20]
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	e841 2300 	strex	r3, r2, [r1]
 8009b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e6      	bne.n	8009b02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2220      	movs	r2, #32
 8009b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009b48:	bf00      	nop
 8009b4a:	3754      	adds	r7, #84	@ 0x54
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff fa3e 	bl	8008ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b08f      	sub	sp, #60	@ 0x3c
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b8c:	2b21      	cmp	r3, #33	@ 0x21
 8009b8e:	d14c      	bne.n	8009c2a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d132      	bne.n	8009c02 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bbc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e6      	bne.n	8009b9c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	e853 3f00 	ldrex	r3, [r3]
 8009bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bec:	61bb      	str	r3, [r7, #24]
 8009bee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf0:	6979      	ldr	r1, [r7, #20]
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	e841 2300 	strex	r3, r2, [r1]
 8009bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e6      	bne.n	8009bce <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009c00:	e013      	b.n	8009c2a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	3b01      	subs	r3, #1
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8009c2a:	bf00      	nop
 8009c2c:	373c      	adds	r7, #60	@ 0x3c
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b091      	sub	sp, #68	@ 0x44
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c42:	2b21      	cmp	r3, #33	@ 0x21
 8009c44:	d151      	bne.n	8009cea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d132      	bne.n	8009cb8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5a:	e853 3f00 	ldrex	r3, [r3]
 8009c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e6      	bne.n	8009c52 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	69b9      	ldr	r1, [r7, #24]
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	617b      	str	r3, [r7, #20]
   return(result);
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e6      	bne.n	8009c84 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009cb6:	e018      	b.n	8009cea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc0:	881a      	ldrh	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cca:	b292      	uxth	r2, r2
 8009ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd2:	1c9a      	adds	r2, r3, #2
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8009cea:	bf00      	nop
 8009cec:	3744      	adds	r7, #68	@ 0x44
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b088      	sub	sp, #32
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d12:	61fb      	str	r3, [r7, #28]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	61bb      	str	r3, [r7, #24]
 8009d1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	6979      	ldr	r1, [r7, #20]
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	e841 2300 	strex	r3, r2, [r1]
 8009d28:	613b      	str	r3, [r7, #16]
   return(result);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e6      	bne.n	8009cfe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff f94f 	bl	8008fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d42:	bf00      	nop
 8009d44:	3720      	adds	r7, #32
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b09c      	sub	sp, #112	@ 0x70
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	2b22      	cmp	r3, #34	@ 0x22
 8009d66:	f040 80be 	bne.w	8009ee6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009d70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009d78:	b2d9      	uxtb	r1, r3
 8009d7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d84:	400a      	ands	r2, r1
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f040 80a3 	bne.w	8009efa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009dd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009dd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e6      	bne.n	8009db4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3308      	adds	r3, #8
 8009dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df8:	f023 0301 	bic.w	r3, r3, #1
 8009dfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3308      	adds	r3, #8
 8009e04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e06:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e5      	bne.n	8009de6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a34      	ldr	r2, [pc, #208]	@ (8009f04 <UART_RxISR_8BIT+0x1b8>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d01f      	beq.n	8009e78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d018      	beq.n	8009e78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	623b      	str	r3, [r7, #32]
   return(result);
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e6      	bne.n	8009e46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d12e      	bne.n	8009ede <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0310 	bic.w	r3, r3, #16
 8009e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ea4:	61fb      	str	r3, [r7, #28]
 8009ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	69b9      	ldr	r1, [r7, #24]
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e6      	bne.n	8009e86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b10      	cmp	r3, #16
 8009ec4:	d103      	bne.n	8009ece <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2210      	movs	r2, #16
 8009ecc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff f896 	bl	8009008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009edc:	e00d      	b.n	8009efa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7f9 f87e 	bl	8002fe0 <HAL_UART_RxCpltCallback>
}
 8009ee4:	e009      	b.n	8009efa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	8b1b      	ldrh	r3, [r3, #24]
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f042 0208 	orr.w	r2, r2, #8
 8009ef6:	b292      	uxth	r2, r2
 8009ef8:	831a      	strh	r2, [r3, #24]
}
 8009efa:	bf00      	nop
 8009efc:	3770      	adds	r7, #112	@ 0x70
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	40008000 	.word	0x40008000

08009f08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b09c      	sub	sp, #112	@ 0x70
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f20:	2b22      	cmp	r3, #34	@ 0x22
 8009f22:	f040 80be 	bne.w	800a0a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009f2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009f3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009f3e:	4013      	ands	r3, r2
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f4a:	1c9a      	adds	r2, r3, #2
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f040 80a3 	bne.w	800a0b6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f84:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f96:	e841 2300 	strex	r3, r2, [r1]
 8009f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1e6      	bne.n	8009f70 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb4:	f023 0301 	bic.w	r3, r3, #1
 8009fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3308      	adds	r3, #8
 8009fc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009fc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e5      	bne.n	8009fa2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a34      	ldr	r2, [pc, #208]	@ (800a0c0 <UART_RxISR_16BIT+0x1b8>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d01f      	beq.n	800a034 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d018      	beq.n	800a034 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	e853 3f00 	ldrex	r3, [r3]
 800a00e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a016:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	461a      	mov	r2, r3
 800a01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a022:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e6      	bne.n	800a002 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d12e      	bne.n	800a09a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	e853 3f00 	ldrex	r3, [r3]
 800a04e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f023 0310 	bic.w	r3, r3, #16
 800a056:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a060:	61bb      	str	r3, [r7, #24]
 800a062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a064:	6979      	ldr	r1, [r7, #20]
 800a066:	69ba      	ldr	r2, [r7, #24]
 800a068:	e841 2300 	strex	r3, r2, [r1]
 800a06c:	613b      	str	r3, [r7, #16]
   return(result);
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e6      	bne.n	800a042 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	f003 0310 	and.w	r3, r3, #16
 800a07e:	2b10      	cmp	r3, #16
 800a080:	d103      	bne.n	800a08a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2210      	movs	r2, #16
 800a088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fe ffb8 	bl	8009008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a098:	e00d      	b.n	800a0b6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f8 ffa0 	bl	8002fe0 <HAL_UART_RxCpltCallback>
}
 800a0a0:	e009      	b.n	800a0b6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	8b1b      	ldrh	r3, [r3, #24]
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0208 	orr.w	r2, r2, #8
 800a0b2:	b292      	uxth	r2, r2
 800a0b4:	831a      	strh	r2, [r3, #24]
}
 800a0b6:	bf00      	nop
 800a0b8:	3770      	adds	r7, #112	@ 0x70
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	40008000 	.word	0x40008000

0800a0c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <atoi>:
 800a0d8:	220a      	movs	r2, #10
 800a0da:	2100      	movs	r1, #0
 800a0dc:	f000 bf7a 	b.w	800afd4 <strtol>

0800a0e0 <malloc>:
 800a0e0:	4b02      	ldr	r3, [pc, #8]	@ (800a0ec <malloc+0xc>)
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	f000 b82d 	b.w	800a144 <_malloc_r>
 800a0ea:	bf00      	nop
 800a0ec:	20000190 	.word	0x20000190

0800a0f0 <free>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	@ (800a0fc <free+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f002 be43 	b.w	800cd80 <_free_r>
 800a0fa:	bf00      	nop
 800a0fc:	20000190 	.word	0x20000190

0800a100 <sbrk_aligned>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	4e0f      	ldr	r6, [pc, #60]	@ (800a140 <sbrk_aligned+0x40>)
 800a104:	460c      	mov	r4, r1
 800a106:	6831      	ldr	r1, [r6, #0]
 800a108:	4605      	mov	r5, r0
 800a10a:	b911      	cbnz	r1, 800a112 <sbrk_aligned+0x12>
 800a10c:	f001 ff7c 	bl	800c008 <_sbrk_r>
 800a110:	6030      	str	r0, [r6, #0]
 800a112:	4621      	mov	r1, r4
 800a114:	4628      	mov	r0, r5
 800a116:	f001 ff77 	bl	800c008 <_sbrk_r>
 800a11a:	1c43      	adds	r3, r0, #1
 800a11c:	d103      	bne.n	800a126 <sbrk_aligned+0x26>
 800a11e:	f04f 34ff 	mov.w	r4, #4294967295
 800a122:	4620      	mov	r0, r4
 800a124:	bd70      	pop	{r4, r5, r6, pc}
 800a126:	1cc4      	adds	r4, r0, #3
 800a128:	f024 0403 	bic.w	r4, r4, #3
 800a12c:	42a0      	cmp	r0, r4
 800a12e:	d0f8      	beq.n	800a122 <sbrk_aligned+0x22>
 800a130:	1a21      	subs	r1, r4, r0
 800a132:	4628      	mov	r0, r5
 800a134:	f001 ff68 	bl	800c008 <_sbrk_r>
 800a138:	3001      	adds	r0, #1
 800a13a:	d1f2      	bne.n	800a122 <sbrk_aligned+0x22>
 800a13c:	e7ef      	b.n	800a11e <sbrk_aligned+0x1e>
 800a13e:	bf00      	nop
 800a140:	20000534 	.word	0x20000534

0800a144 <_malloc_r>:
 800a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a148:	1ccd      	adds	r5, r1, #3
 800a14a:	f025 0503 	bic.w	r5, r5, #3
 800a14e:	3508      	adds	r5, #8
 800a150:	2d0c      	cmp	r5, #12
 800a152:	bf38      	it	cc
 800a154:	250c      	movcc	r5, #12
 800a156:	2d00      	cmp	r5, #0
 800a158:	4606      	mov	r6, r0
 800a15a:	db01      	blt.n	800a160 <_malloc_r+0x1c>
 800a15c:	42a9      	cmp	r1, r5
 800a15e:	d904      	bls.n	800a16a <_malloc_r+0x26>
 800a160:	230c      	movs	r3, #12
 800a162:	6033      	str	r3, [r6, #0]
 800a164:	2000      	movs	r0, #0
 800a166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a240 <_malloc_r+0xfc>
 800a16e:	f000 f869 	bl	800a244 <__malloc_lock>
 800a172:	f8d8 3000 	ldr.w	r3, [r8]
 800a176:	461c      	mov	r4, r3
 800a178:	bb44      	cbnz	r4, 800a1cc <_malloc_r+0x88>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7ff ffbf 	bl	800a100 <sbrk_aligned>
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	4604      	mov	r4, r0
 800a186:	d158      	bne.n	800a23a <_malloc_r+0xf6>
 800a188:	f8d8 4000 	ldr.w	r4, [r8]
 800a18c:	4627      	mov	r7, r4
 800a18e:	2f00      	cmp	r7, #0
 800a190:	d143      	bne.n	800a21a <_malloc_r+0xd6>
 800a192:	2c00      	cmp	r4, #0
 800a194:	d04b      	beq.n	800a22e <_malloc_r+0xea>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	4639      	mov	r1, r7
 800a19a:	4630      	mov	r0, r6
 800a19c:	eb04 0903 	add.w	r9, r4, r3
 800a1a0:	f001 ff32 	bl	800c008 <_sbrk_r>
 800a1a4:	4581      	cmp	r9, r0
 800a1a6:	d142      	bne.n	800a22e <_malloc_r+0xea>
 800a1a8:	6821      	ldr	r1, [r4, #0]
 800a1aa:	1a6d      	subs	r5, r5, r1
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7ff ffa6 	bl	800a100 <sbrk_aligned>
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d03a      	beq.n	800a22e <_malloc_r+0xea>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	442b      	add	r3, r5
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	f8d8 3000 	ldr.w	r3, [r8]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	bb62      	cbnz	r2, 800a220 <_malloc_r+0xdc>
 800a1c6:	f8c8 7000 	str.w	r7, [r8]
 800a1ca:	e00f      	b.n	800a1ec <_malloc_r+0xa8>
 800a1cc:	6822      	ldr	r2, [r4, #0]
 800a1ce:	1b52      	subs	r2, r2, r5
 800a1d0:	d420      	bmi.n	800a214 <_malloc_r+0xd0>
 800a1d2:	2a0b      	cmp	r2, #11
 800a1d4:	d917      	bls.n	800a206 <_malloc_r+0xc2>
 800a1d6:	1961      	adds	r1, r4, r5
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	6025      	str	r5, [r4, #0]
 800a1dc:	bf18      	it	ne
 800a1de:	6059      	strne	r1, [r3, #4]
 800a1e0:	6863      	ldr	r3, [r4, #4]
 800a1e2:	bf08      	it	eq
 800a1e4:	f8c8 1000 	streq.w	r1, [r8]
 800a1e8:	5162      	str	r2, [r4, r5]
 800a1ea:	604b      	str	r3, [r1, #4]
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f000 f82f 	bl	800a250 <__malloc_unlock>
 800a1f2:	f104 000b 	add.w	r0, r4, #11
 800a1f6:	1d23      	adds	r3, r4, #4
 800a1f8:	f020 0007 	bic.w	r0, r0, #7
 800a1fc:	1ac2      	subs	r2, r0, r3
 800a1fe:	bf1c      	itt	ne
 800a200:	1a1b      	subne	r3, r3, r0
 800a202:	50a3      	strne	r3, [r4, r2]
 800a204:	e7af      	b.n	800a166 <_malloc_r+0x22>
 800a206:	6862      	ldr	r2, [r4, #4]
 800a208:	42a3      	cmp	r3, r4
 800a20a:	bf0c      	ite	eq
 800a20c:	f8c8 2000 	streq.w	r2, [r8]
 800a210:	605a      	strne	r2, [r3, #4]
 800a212:	e7eb      	b.n	800a1ec <_malloc_r+0xa8>
 800a214:	4623      	mov	r3, r4
 800a216:	6864      	ldr	r4, [r4, #4]
 800a218:	e7ae      	b.n	800a178 <_malloc_r+0x34>
 800a21a:	463c      	mov	r4, r7
 800a21c:	687f      	ldr	r7, [r7, #4]
 800a21e:	e7b6      	b.n	800a18e <_malloc_r+0x4a>
 800a220:	461a      	mov	r2, r3
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	42a3      	cmp	r3, r4
 800a226:	d1fb      	bne.n	800a220 <_malloc_r+0xdc>
 800a228:	2300      	movs	r3, #0
 800a22a:	6053      	str	r3, [r2, #4]
 800a22c:	e7de      	b.n	800a1ec <_malloc_r+0xa8>
 800a22e:	230c      	movs	r3, #12
 800a230:	6033      	str	r3, [r6, #0]
 800a232:	4630      	mov	r0, r6
 800a234:	f000 f80c 	bl	800a250 <__malloc_unlock>
 800a238:	e794      	b.n	800a164 <_malloc_r+0x20>
 800a23a:	6005      	str	r5, [r0, #0]
 800a23c:	e7d6      	b.n	800a1ec <_malloc_r+0xa8>
 800a23e:	bf00      	nop
 800a240:	20000538 	.word	0x20000538

0800a244 <__malloc_lock>:
 800a244:	4801      	ldr	r0, [pc, #4]	@ (800a24c <__malloc_lock+0x8>)
 800a246:	f001 bf2c 	b.w	800c0a2 <__retarget_lock_acquire_recursive>
 800a24a:	bf00      	nop
 800a24c:	2000067c 	.word	0x2000067c

0800a250 <__malloc_unlock>:
 800a250:	4801      	ldr	r0, [pc, #4]	@ (800a258 <__malloc_unlock+0x8>)
 800a252:	f001 bf27 	b.w	800c0a4 <__retarget_lock_release_recursive>
 800a256:	bf00      	nop
 800a258:	2000067c 	.word	0x2000067c

0800a25c <realloc>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <realloc+0xc>)
 800a25e:	460a      	mov	r2, r1
 800a260:	4601      	mov	r1, r0
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	f000 b802 	b.w	800a26c <_realloc_r>
 800a268:	20000190 	.word	0x20000190

0800a26c <_realloc_r>:
 800a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	4680      	mov	r8, r0
 800a272:	4615      	mov	r5, r2
 800a274:	460c      	mov	r4, r1
 800a276:	b921      	cbnz	r1, 800a282 <_realloc_r+0x16>
 800a278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	4611      	mov	r1, r2
 800a27e:	f7ff bf61 	b.w	800a144 <_malloc_r>
 800a282:	b92a      	cbnz	r2, 800a290 <_realloc_r+0x24>
 800a284:	f002 fd7c 	bl	800cd80 <_free_r>
 800a288:	2400      	movs	r4, #0
 800a28a:	4620      	mov	r0, r4
 800a28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a290:	f003 fdbe 	bl	800de10 <_malloc_usable_size_r>
 800a294:	4285      	cmp	r5, r0
 800a296:	4606      	mov	r6, r0
 800a298:	d802      	bhi.n	800a2a0 <_realloc_r+0x34>
 800a29a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a29e:	d8f4      	bhi.n	800a28a <_realloc_r+0x1e>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	f7ff ff4e 	bl	800a144 <_malloc_r>
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d0ec      	beq.n	800a288 <_realloc_r+0x1c>
 800a2ae:	42b5      	cmp	r5, r6
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	bf28      	it	cs
 800a2b6:	4632      	movcs	r2, r6
 800a2b8:	f001 fef5 	bl	800c0a6 <memcpy>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4640      	mov	r0, r8
 800a2c0:	f002 fd5e 	bl	800cd80 <_free_r>
 800a2c4:	463c      	mov	r4, r7
 800a2c6:	e7e0      	b.n	800a28a <_realloc_r+0x1e>

0800a2c8 <sulp>:
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	ec45 4b10 	vmov	d0, r4, r5
 800a2d2:	4616      	mov	r6, r2
 800a2d4:	f003 fc5e 	bl	800db94 <__ulp>
 800a2d8:	ec51 0b10 	vmov	r0, r1, d0
 800a2dc:	b17e      	cbz	r6, 800a2fe <sulp+0x36>
 800a2de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	dd09      	ble.n	800a2fe <sulp+0x36>
 800a2ea:	051b      	lsls	r3, r3, #20
 800a2ec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a2f0:	2400      	movs	r4, #0
 800a2f2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	462b      	mov	r3, r5
 800a2fa:	f7f6 f98d 	bl	8000618 <__aeabi_dmul>
 800a2fe:	ec41 0b10 	vmov	d0, r0, r1
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	0000      	movs	r0, r0
	...

0800a308 <_strtod_l>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	b09f      	sub	sp, #124	@ 0x7c
 800a30e:	460c      	mov	r4, r1
 800a310:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a312:	2200      	movs	r2, #0
 800a314:	921a      	str	r2, [sp, #104]	@ 0x68
 800a316:	9005      	str	r0, [sp, #20]
 800a318:	f04f 0a00 	mov.w	sl, #0
 800a31c:	f04f 0b00 	mov.w	fp, #0
 800a320:	460a      	mov	r2, r1
 800a322:	9219      	str	r2, [sp, #100]	@ 0x64
 800a324:	7811      	ldrb	r1, [r2, #0]
 800a326:	292b      	cmp	r1, #43	@ 0x2b
 800a328:	d04a      	beq.n	800a3c0 <_strtod_l+0xb8>
 800a32a:	d838      	bhi.n	800a39e <_strtod_l+0x96>
 800a32c:	290d      	cmp	r1, #13
 800a32e:	d832      	bhi.n	800a396 <_strtod_l+0x8e>
 800a330:	2908      	cmp	r1, #8
 800a332:	d832      	bhi.n	800a39a <_strtod_l+0x92>
 800a334:	2900      	cmp	r1, #0
 800a336:	d03b      	beq.n	800a3b0 <_strtod_l+0xa8>
 800a338:	2200      	movs	r2, #0
 800a33a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a33c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a33e:	782a      	ldrb	r2, [r5, #0]
 800a340:	2a30      	cmp	r2, #48	@ 0x30
 800a342:	f040 80b3 	bne.w	800a4ac <_strtod_l+0x1a4>
 800a346:	786a      	ldrb	r2, [r5, #1]
 800a348:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a34c:	2a58      	cmp	r2, #88	@ 0x58
 800a34e:	d16e      	bne.n	800a42e <_strtod_l+0x126>
 800a350:	9302      	str	r3, [sp, #8]
 800a352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	ab1a      	add	r3, sp, #104	@ 0x68
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	4a8e      	ldr	r2, [pc, #568]	@ (800a594 <_strtod_l+0x28c>)
 800a35c:	9805      	ldr	r0, [sp, #20]
 800a35e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a360:	a919      	add	r1, sp, #100	@ 0x64
 800a362:	f002 fdbf 	bl	800cee4 <__gethex>
 800a366:	f010 060f 	ands.w	r6, r0, #15
 800a36a:	4604      	mov	r4, r0
 800a36c:	d005      	beq.n	800a37a <_strtod_l+0x72>
 800a36e:	2e06      	cmp	r6, #6
 800a370:	d128      	bne.n	800a3c4 <_strtod_l+0xbc>
 800a372:	3501      	adds	r5, #1
 800a374:	2300      	movs	r3, #0
 800a376:	9519      	str	r5, [sp, #100]	@ 0x64
 800a378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a37a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 858e 	bne.w	800ae9e <_strtod_l+0xb96>
 800a382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a384:	b1cb      	cbz	r3, 800a3ba <_strtod_l+0xb2>
 800a386:	4652      	mov	r2, sl
 800a388:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a38c:	ec43 2b10 	vmov	d0, r2, r3
 800a390:	b01f      	add	sp, #124	@ 0x7c
 800a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a396:	2920      	cmp	r1, #32
 800a398:	d1ce      	bne.n	800a338 <_strtod_l+0x30>
 800a39a:	3201      	adds	r2, #1
 800a39c:	e7c1      	b.n	800a322 <_strtod_l+0x1a>
 800a39e:	292d      	cmp	r1, #45	@ 0x2d
 800a3a0:	d1ca      	bne.n	800a338 <_strtod_l+0x30>
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3a6:	1c51      	adds	r1, r2, #1
 800a3a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3aa:	7852      	ldrb	r2, [r2, #1]
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	d1c5      	bne.n	800a33c <_strtod_l+0x34>
 800a3b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f040 8570 	bne.w	800ae9a <_strtod_l+0xb92>
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	465b      	mov	r3, fp
 800a3be:	e7e5      	b.n	800a38c <_strtod_l+0x84>
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	e7ef      	b.n	800a3a4 <_strtod_l+0x9c>
 800a3c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3c6:	b13a      	cbz	r2, 800a3d8 <_strtod_l+0xd0>
 800a3c8:	2135      	movs	r1, #53	@ 0x35
 800a3ca:	a81c      	add	r0, sp, #112	@ 0x70
 800a3cc:	f003 fcdc 	bl	800dd88 <__copybits>
 800a3d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3d2:	9805      	ldr	r0, [sp, #20]
 800a3d4:	f003 f8aa 	bl	800d52c <_Bfree>
 800a3d8:	3e01      	subs	r6, #1
 800a3da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a3dc:	2e04      	cmp	r6, #4
 800a3de:	d806      	bhi.n	800a3ee <_strtod_l+0xe6>
 800a3e0:	e8df f006 	tbb	[pc, r6]
 800a3e4:	201d0314 	.word	0x201d0314
 800a3e8:	14          	.byte	0x14
 800a3e9:	00          	.byte	0x00
 800a3ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a3ee:	05e1      	lsls	r1, r4, #23
 800a3f0:	bf48      	it	mi
 800a3f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a3f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3fa:	0d1b      	lsrs	r3, r3, #20
 800a3fc:	051b      	lsls	r3, r3, #20
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1bb      	bne.n	800a37a <_strtod_l+0x72>
 800a402:	f001 fe23 	bl	800c04c <__errno>
 800a406:	2322      	movs	r3, #34	@ 0x22
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	e7b6      	b.n	800a37a <_strtod_l+0x72>
 800a40c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a410:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a414:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a418:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a41c:	e7e7      	b.n	800a3ee <_strtod_l+0xe6>
 800a41e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a59c <_strtod_l+0x294>
 800a422:	e7e4      	b.n	800a3ee <_strtod_l+0xe6>
 800a424:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a428:	f04f 3aff 	mov.w	sl, #4294967295
 800a42c:	e7df      	b.n	800a3ee <_strtod_l+0xe6>
 800a42e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	9219      	str	r2, [sp, #100]	@ 0x64
 800a434:	785b      	ldrb	r3, [r3, #1]
 800a436:	2b30      	cmp	r3, #48	@ 0x30
 800a438:	d0f9      	beq.n	800a42e <_strtod_l+0x126>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d09d      	beq.n	800a37a <_strtod_l+0x72>
 800a43e:	2301      	movs	r3, #1
 800a440:	9309      	str	r3, [sp, #36]	@ 0x24
 800a442:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a444:	930c      	str	r3, [sp, #48]	@ 0x30
 800a446:	2300      	movs	r3, #0
 800a448:	9308      	str	r3, [sp, #32]
 800a44a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a44c:	461f      	mov	r7, r3
 800a44e:	220a      	movs	r2, #10
 800a450:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a452:	7805      	ldrb	r5, [r0, #0]
 800a454:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a458:	b2d9      	uxtb	r1, r3
 800a45a:	2909      	cmp	r1, #9
 800a45c:	d928      	bls.n	800a4b0 <_strtod_l+0x1a8>
 800a45e:	494e      	ldr	r1, [pc, #312]	@ (800a598 <_strtod_l+0x290>)
 800a460:	2201      	movs	r2, #1
 800a462:	f001 fd86 	bl	800bf72 <strncmp>
 800a466:	2800      	cmp	r0, #0
 800a468:	d032      	beq.n	800a4d0 <_strtod_l+0x1c8>
 800a46a:	2000      	movs	r0, #0
 800a46c:	462a      	mov	r2, r5
 800a46e:	4681      	mov	r9, r0
 800a470:	463d      	mov	r5, r7
 800a472:	4603      	mov	r3, r0
 800a474:	2a65      	cmp	r2, #101	@ 0x65
 800a476:	d001      	beq.n	800a47c <_strtod_l+0x174>
 800a478:	2a45      	cmp	r2, #69	@ 0x45
 800a47a:	d114      	bne.n	800a4a6 <_strtod_l+0x19e>
 800a47c:	b91d      	cbnz	r5, 800a486 <_strtod_l+0x17e>
 800a47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a480:	4302      	orrs	r2, r0
 800a482:	d095      	beq.n	800a3b0 <_strtod_l+0xa8>
 800a484:	2500      	movs	r5, #0
 800a486:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a488:	1c62      	adds	r2, r4, #1
 800a48a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a48c:	7862      	ldrb	r2, [r4, #1]
 800a48e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a490:	d077      	beq.n	800a582 <_strtod_l+0x27a>
 800a492:	2a2d      	cmp	r2, #45	@ 0x2d
 800a494:	d07b      	beq.n	800a58e <_strtod_l+0x286>
 800a496:	f04f 0c00 	mov.w	ip, #0
 800a49a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a49e:	2909      	cmp	r1, #9
 800a4a0:	f240 8082 	bls.w	800a5a8 <_strtod_l+0x2a0>
 800a4a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4a6:	f04f 0800 	mov.w	r8, #0
 800a4aa:	e0a2      	b.n	800a5f2 <_strtod_l+0x2ea>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e7c7      	b.n	800a440 <_strtod_l+0x138>
 800a4b0:	2f08      	cmp	r7, #8
 800a4b2:	bfd5      	itete	le
 800a4b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a4b6:	9908      	ldrgt	r1, [sp, #32]
 800a4b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a4c0:	f100 0001 	add.w	r0, r0, #1
 800a4c4:	bfd4      	ite	le
 800a4c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a4c8:	9308      	strgt	r3, [sp, #32]
 800a4ca:	3701      	adds	r7, #1
 800a4cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800a4ce:	e7bf      	b.n	800a450 <_strtod_l+0x148>
 800a4d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4d6:	785a      	ldrb	r2, [r3, #1]
 800a4d8:	b37f      	cbz	r7, 800a53a <_strtod_l+0x232>
 800a4da:	4681      	mov	r9, r0
 800a4dc:	463d      	mov	r5, r7
 800a4de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a4e2:	2b09      	cmp	r3, #9
 800a4e4:	d912      	bls.n	800a50c <_strtod_l+0x204>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e7c4      	b.n	800a474 <_strtod_l+0x16c>
 800a4ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4f0:	785a      	ldrb	r2, [r3, #1]
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	2a30      	cmp	r2, #48	@ 0x30
 800a4f6:	d0f8      	beq.n	800a4ea <_strtod_l+0x1e2>
 800a4f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a4fc:	2b08      	cmp	r3, #8
 800a4fe:	f200 84d3 	bhi.w	800aea8 <_strtod_l+0xba0>
 800a502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a504:	930c      	str	r3, [sp, #48]	@ 0x30
 800a506:	4681      	mov	r9, r0
 800a508:	2000      	movs	r0, #0
 800a50a:	4605      	mov	r5, r0
 800a50c:	3a30      	subs	r2, #48	@ 0x30
 800a50e:	f100 0301 	add.w	r3, r0, #1
 800a512:	d02a      	beq.n	800a56a <_strtod_l+0x262>
 800a514:	4499      	add	r9, r3
 800a516:	eb00 0c05 	add.w	ip, r0, r5
 800a51a:	462b      	mov	r3, r5
 800a51c:	210a      	movs	r1, #10
 800a51e:	4563      	cmp	r3, ip
 800a520:	d10d      	bne.n	800a53e <_strtod_l+0x236>
 800a522:	1c69      	adds	r1, r5, #1
 800a524:	4401      	add	r1, r0
 800a526:	4428      	add	r0, r5
 800a528:	2808      	cmp	r0, #8
 800a52a:	dc16      	bgt.n	800a55a <_strtod_l+0x252>
 800a52c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a52e:	230a      	movs	r3, #10
 800a530:	fb03 2300 	mla	r3, r3, r0, r2
 800a534:	930a      	str	r3, [sp, #40]	@ 0x28
 800a536:	2300      	movs	r3, #0
 800a538:	e018      	b.n	800a56c <_strtod_l+0x264>
 800a53a:	4638      	mov	r0, r7
 800a53c:	e7da      	b.n	800a4f4 <_strtod_l+0x1ec>
 800a53e:	2b08      	cmp	r3, #8
 800a540:	f103 0301 	add.w	r3, r3, #1
 800a544:	dc03      	bgt.n	800a54e <_strtod_l+0x246>
 800a546:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a548:	434e      	muls	r6, r1
 800a54a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a54c:	e7e7      	b.n	800a51e <_strtod_l+0x216>
 800a54e:	2b10      	cmp	r3, #16
 800a550:	bfde      	ittt	le
 800a552:	9e08      	ldrle	r6, [sp, #32]
 800a554:	434e      	mulle	r6, r1
 800a556:	9608      	strle	r6, [sp, #32]
 800a558:	e7e1      	b.n	800a51e <_strtod_l+0x216>
 800a55a:	280f      	cmp	r0, #15
 800a55c:	dceb      	bgt.n	800a536 <_strtod_l+0x22e>
 800a55e:	9808      	ldr	r0, [sp, #32]
 800a560:	230a      	movs	r3, #10
 800a562:	fb03 2300 	mla	r3, r3, r0, r2
 800a566:	9308      	str	r3, [sp, #32]
 800a568:	e7e5      	b.n	800a536 <_strtod_l+0x22e>
 800a56a:	4629      	mov	r1, r5
 800a56c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a56e:	1c50      	adds	r0, r2, #1
 800a570:	9019      	str	r0, [sp, #100]	@ 0x64
 800a572:	7852      	ldrb	r2, [r2, #1]
 800a574:	4618      	mov	r0, r3
 800a576:	460d      	mov	r5, r1
 800a578:	e7b1      	b.n	800a4de <_strtod_l+0x1d6>
 800a57a:	f04f 0900 	mov.w	r9, #0
 800a57e:	2301      	movs	r3, #1
 800a580:	e77d      	b.n	800a47e <_strtod_l+0x176>
 800a582:	f04f 0c00 	mov.w	ip, #0
 800a586:	1ca2      	adds	r2, r4, #2
 800a588:	9219      	str	r2, [sp, #100]	@ 0x64
 800a58a:	78a2      	ldrb	r2, [r4, #2]
 800a58c:	e785      	b.n	800a49a <_strtod_l+0x192>
 800a58e:	f04f 0c01 	mov.w	ip, #1
 800a592:	e7f8      	b.n	800a586 <_strtod_l+0x27e>
 800a594:	0801029c 	.word	0x0801029c
 800a598:	08010284 	.word	0x08010284
 800a59c:	7ff00000 	.word	0x7ff00000
 800a5a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5a2:	1c51      	adds	r1, r2, #1
 800a5a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5a6:	7852      	ldrb	r2, [r2, #1]
 800a5a8:	2a30      	cmp	r2, #48	@ 0x30
 800a5aa:	d0f9      	beq.n	800a5a0 <_strtod_l+0x298>
 800a5ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a5b0:	2908      	cmp	r1, #8
 800a5b2:	f63f af78 	bhi.w	800a4a6 <_strtod_l+0x19e>
 800a5b6:	3a30      	subs	r2, #48	@ 0x30
 800a5b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a5be:	f04f 080a 	mov.w	r8, #10
 800a5c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5c4:	1c56      	adds	r6, r2, #1
 800a5c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a5c8:	7852      	ldrb	r2, [r2, #1]
 800a5ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a5ce:	f1be 0f09 	cmp.w	lr, #9
 800a5d2:	d939      	bls.n	800a648 <_strtod_l+0x340>
 800a5d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5d6:	1a76      	subs	r6, r6, r1
 800a5d8:	2e08      	cmp	r6, #8
 800a5da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a5de:	dc03      	bgt.n	800a5e8 <_strtod_l+0x2e0>
 800a5e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a5e2:	4588      	cmp	r8, r1
 800a5e4:	bfa8      	it	ge
 800a5e6:	4688      	movge	r8, r1
 800a5e8:	f1bc 0f00 	cmp.w	ip, #0
 800a5ec:	d001      	beq.n	800a5f2 <_strtod_l+0x2ea>
 800a5ee:	f1c8 0800 	rsb	r8, r8, #0
 800a5f2:	2d00      	cmp	r5, #0
 800a5f4:	d14e      	bne.n	800a694 <_strtod_l+0x38c>
 800a5f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5f8:	4308      	orrs	r0, r1
 800a5fa:	f47f aebe 	bne.w	800a37a <_strtod_l+0x72>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f47f aed6 	bne.w	800a3b0 <_strtod_l+0xa8>
 800a604:	2a69      	cmp	r2, #105	@ 0x69
 800a606:	d028      	beq.n	800a65a <_strtod_l+0x352>
 800a608:	dc25      	bgt.n	800a656 <_strtod_l+0x34e>
 800a60a:	2a49      	cmp	r2, #73	@ 0x49
 800a60c:	d025      	beq.n	800a65a <_strtod_l+0x352>
 800a60e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a610:	f47f aece 	bne.w	800a3b0 <_strtod_l+0xa8>
 800a614:	499b      	ldr	r1, [pc, #620]	@ (800a884 <_strtod_l+0x57c>)
 800a616:	a819      	add	r0, sp, #100	@ 0x64
 800a618:	f002 fe86 	bl	800d328 <__match>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f43f aec7 	beq.w	800a3b0 <_strtod_l+0xa8>
 800a622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b28      	cmp	r3, #40	@ 0x28
 800a628:	d12e      	bne.n	800a688 <_strtod_l+0x380>
 800a62a:	4997      	ldr	r1, [pc, #604]	@ (800a888 <_strtod_l+0x580>)
 800a62c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a62e:	a819      	add	r0, sp, #100	@ 0x64
 800a630:	f002 fe8e 	bl	800d350 <__hexnan>
 800a634:	2805      	cmp	r0, #5
 800a636:	d127      	bne.n	800a688 <_strtod_l+0x380>
 800a638:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a63a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a63e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a642:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a646:	e698      	b.n	800a37a <_strtod_l+0x72>
 800a648:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a64a:	fb08 2101 	mla	r1, r8, r1, r2
 800a64e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a652:	920e      	str	r2, [sp, #56]	@ 0x38
 800a654:	e7b5      	b.n	800a5c2 <_strtod_l+0x2ba>
 800a656:	2a6e      	cmp	r2, #110	@ 0x6e
 800a658:	e7da      	b.n	800a610 <_strtod_l+0x308>
 800a65a:	498c      	ldr	r1, [pc, #560]	@ (800a88c <_strtod_l+0x584>)
 800a65c:	a819      	add	r0, sp, #100	@ 0x64
 800a65e:	f002 fe63 	bl	800d328 <__match>
 800a662:	2800      	cmp	r0, #0
 800a664:	f43f aea4 	beq.w	800a3b0 <_strtod_l+0xa8>
 800a668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a66a:	4989      	ldr	r1, [pc, #548]	@ (800a890 <_strtod_l+0x588>)
 800a66c:	3b01      	subs	r3, #1
 800a66e:	a819      	add	r0, sp, #100	@ 0x64
 800a670:	9319      	str	r3, [sp, #100]	@ 0x64
 800a672:	f002 fe59 	bl	800d328 <__match>
 800a676:	b910      	cbnz	r0, 800a67e <_strtod_l+0x376>
 800a678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a67a:	3301      	adds	r3, #1
 800a67c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a67e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a8a0 <_strtod_l+0x598>
 800a682:	f04f 0a00 	mov.w	sl, #0
 800a686:	e678      	b.n	800a37a <_strtod_l+0x72>
 800a688:	4882      	ldr	r0, [pc, #520]	@ (800a894 <_strtod_l+0x58c>)
 800a68a:	f001 fd1d 	bl	800c0c8 <nan>
 800a68e:	ec5b ab10 	vmov	sl, fp, d0
 800a692:	e672      	b.n	800a37a <_strtod_l+0x72>
 800a694:	eba8 0309 	sub.w	r3, r8, r9
 800a698:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a69a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a69c:	2f00      	cmp	r7, #0
 800a69e:	bf08      	it	eq
 800a6a0:	462f      	moveq	r7, r5
 800a6a2:	2d10      	cmp	r5, #16
 800a6a4:	462c      	mov	r4, r5
 800a6a6:	bfa8      	it	ge
 800a6a8:	2410      	movge	r4, #16
 800a6aa:	f7f5 ff3b 	bl	8000524 <__aeabi_ui2d>
 800a6ae:	2d09      	cmp	r5, #9
 800a6b0:	4682      	mov	sl, r0
 800a6b2:	468b      	mov	fp, r1
 800a6b4:	dc13      	bgt.n	800a6de <_strtod_l+0x3d6>
 800a6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f43f ae5e 	beq.w	800a37a <_strtod_l+0x72>
 800a6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c0:	dd78      	ble.n	800a7b4 <_strtod_l+0x4ac>
 800a6c2:	2b16      	cmp	r3, #22
 800a6c4:	dc5f      	bgt.n	800a786 <_strtod_l+0x47e>
 800a6c6:	4974      	ldr	r1, [pc, #464]	@ (800a898 <_strtod_l+0x590>)
 800a6c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	465b      	mov	r3, fp
 800a6d4:	f7f5 ffa0 	bl	8000618 <__aeabi_dmul>
 800a6d8:	4682      	mov	sl, r0
 800a6da:	468b      	mov	fp, r1
 800a6dc:	e64d      	b.n	800a37a <_strtod_l+0x72>
 800a6de:	4b6e      	ldr	r3, [pc, #440]	@ (800a898 <_strtod_l+0x590>)
 800a6e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a6e8:	f7f5 ff96 	bl	8000618 <__aeabi_dmul>
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	9808      	ldr	r0, [sp, #32]
 800a6f0:	468b      	mov	fp, r1
 800a6f2:	f7f5 ff17 	bl	8000524 <__aeabi_ui2d>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4650      	mov	r0, sl
 800a6fc:	4659      	mov	r1, fp
 800a6fe:	f7f5 fdd5 	bl	80002ac <__adddf3>
 800a702:	2d0f      	cmp	r5, #15
 800a704:	4682      	mov	sl, r0
 800a706:	468b      	mov	fp, r1
 800a708:	ddd5      	ble.n	800a6b6 <_strtod_l+0x3ae>
 800a70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70c:	1b2c      	subs	r4, r5, r4
 800a70e:	441c      	add	r4, r3
 800a710:	2c00      	cmp	r4, #0
 800a712:	f340 8096 	ble.w	800a842 <_strtod_l+0x53a>
 800a716:	f014 030f 	ands.w	r3, r4, #15
 800a71a:	d00a      	beq.n	800a732 <_strtod_l+0x42a>
 800a71c:	495e      	ldr	r1, [pc, #376]	@ (800a898 <_strtod_l+0x590>)
 800a71e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a722:	4652      	mov	r2, sl
 800a724:	465b      	mov	r3, fp
 800a726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a72a:	f7f5 ff75 	bl	8000618 <__aeabi_dmul>
 800a72e:	4682      	mov	sl, r0
 800a730:	468b      	mov	fp, r1
 800a732:	f034 040f 	bics.w	r4, r4, #15
 800a736:	d073      	beq.n	800a820 <_strtod_l+0x518>
 800a738:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a73c:	dd48      	ble.n	800a7d0 <_strtod_l+0x4c8>
 800a73e:	2400      	movs	r4, #0
 800a740:	46a0      	mov	r8, r4
 800a742:	940a      	str	r4, [sp, #40]	@ 0x28
 800a744:	46a1      	mov	r9, r4
 800a746:	9a05      	ldr	r2, [sp, #20]
 800a748:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a8a0 <_strtod_l+0x598>
 800a74c:	2322      	movs	r3, #34	@ 0x22
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	f04f 0a00 	mov.w	sl, #0
 800a754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a756:	2b00      	cmp	r3, #0
 800a758:	f43f ae0f 	beq.w	800a37a <_strtod_l+0x72>
 800a75c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a75e:	9805      	ldr	r0, [sp, #20]
 800a760:	f002 fee4 	bl	800d52c <_Bfree>
 800a764:	9805      	ldr	r0, [sp, #20]
 800a766:	4649      	mov	r1, r9
 800a768:	f002 fee0 	bl	800d52c <_Bfree>
 800a76c:	9805      	ldr	r0, [sp, #20]
 800a76e:	4641      	mov	r1, r8
 800a770:	f002 fedc 	bl	800d52c <_Bfree>
 800a774:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a776:	9805      	ldr	r0, [sp, #20]
 800a778:	f002 fed8 	bl	800d52c <_Bfree>
 800a77c:	9805      	ldr	r0, [sp, #20]
 800a77e:	4621      	mov	r1, r4
 800a780:	f002 fed4 	bl	800d52c <_Bfree>
 800a784:	e5f9      	b.n	800a37a <_strtod_l+0x72>
 800a786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a788:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a78c:	4293      	cmp	r3, r2
 800a78e:	dbbc      	blt.n	800a70a <_strtod_l+0x402>
 800a790:	4c41      	ldr	r4, [pc, #260]	@ (800a898 <_strtod_l+0x590>)
 800a792:	f1c5 050f 	rsb	r5, r5, #15
 800a796:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a79a:	4652      	mov	r2, sl
 800a79c:	465b      	mov	r3, fp
 800a79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a2:	f7f5 ff39 	bl	8000618 <__aeabi_dmul>
 800a7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a8:	1b5d      	subs	r5, r3, r5
 800a7aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a7ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7b2:	e78f      	b.n	800a6d4 <_strtod_l+0x3cc>
 800a7b4:	3316      	adds	r3, #22
 800a7b6:	dba8      	blt.n	800a70a <_strtod_l+0x402>
 800a7b8:	4b37      	ldr	r3, [pc, #220]	@ (800a898 <_strtod_l+0x590>)
 800a7ba:	eba9 0808 	sub.w	r8, r9, r8
 800a7be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a7c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a7c6:	4650      	mov	r0, sl
 800a7c8:	4659      	mov	r1, fp
 800a7ca:	f7f6 f84f 	bl	800086c <__aeabi_ddiv>
 800a7ce:	e783      	b.n	800a6d8 <_strtod_l+0x3d0>
 800a7d0:	4b32      	ldr	r3, [pc, #200]	@ (800a89c <_strtod_l+0x594>)
 800a7d2:	9308      	str	r3, [sp, #32]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	1124      	asrs	r4, r4, #4
 800a7d8:	4650      	mov	r0, sl
 800a7da:	4659      	mov	r1, fp
 800a7dc:	461e      	mov	r6, r3
 800a7de:	2c01      	cmp	r4, #1
 800a7e0:	dc21      	bgt.n	800a826 <_strtod_l+0x51e>
 800a7e2:	b10b      	cbz	r3, 800a7e8 <_strtod_l+0x4e0>
 800a7e4:	4682      	mov	sl, r0
 800a7e6:	468b      	mov	fp, r1
 800a7e8:	492c      	ldr	r1, [pc, #176]	@ (800a89c <_strtod_l+0x594>)
 800a7ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a7ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	465b      	mov	r3, fp
 800a7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fa:	f7f5 ff0d 	bl	8000618 <__aeabi_dmul>
 800a7fe:	4b28      	ldr	r3, [pc, #160]	@ (800a8a0 <_strtod_l+0x598>)
 800a800:	460a      	mov	r2, r1
 800a802:	400b      	ands	r3, r1
 800a804:	4927      	ldr	r1, [pc, #156]	@ (800a8a4 <_strtod_l+0x59c>)
 800a806:	428b      	cmp	r3, r1
 800a808:	4682      	mov	sl, r0
 800a80a:	d898      	bhi.n	800a73e <_strtod_l+0x436>
 800a80c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a810:	428b      	cmp	r3, r1
 800a812:	bf86      	itte	hi
 800a814:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a8a8 <_strtod_l+0x5a0>
 800a818:	f04f 3aff 	movhi.w	sl, #4294967295
 800a81c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a820:	2300      	movs	r3, #0
 800a822:	9308      	str	r3, [sp, #32]
 800a824:	e07a      	b.n	800a91c <_strtod_l+0x614>
 800a826:	07e2      	lsls	r2, r4, #31
 800a828:	d505      	bpl.n	800a836 <_strtod_l+0x52e>
 800a82a:	9b08      	ldr	r3, [sp, #32]
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f7f5 fef2 	bl	8000618 <__aeabi_dmul>
 800a834:	2301      	movs	r3, #1
 800a836:	9a08      	ldr	r2, [sp, #32]
 800a838:	3208      	adds	r2, #8
 800a83a:	3601      	adds	r6, #1
 800a83c:	1064      	asrs	r4, r4, #1
 800a83e:	9208      	str	r2, [sp, #32]
 800a840:	e7cd      	b.n	800a7de <_strtod_l+0x4d6>
 800a842:	d0ed      	beq.n	800a820 <_strtod_l+0x518>
 800a844:	4264      	negs	r4, r4
 800a846:	f014 020f 	ands.w	r2, r4, #15
 800a84a:	d00a      	beq.n	800a862 <_strtod_l+0x55a>
 800a84c:	4b12      	ldr	r3, [pc, #72]	@ (800a898 <_strtod_l+0x590>)
 800a84e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a852:	4650      	mov	r0, sl
 800a854:	4659      	mov	r1, fp
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f7f6 f807 	bl	800086c <__aeabi_ddiv>
 800a85e:	4682      	mov	sl, r0
 800a860:	468b      	mov	fp, r1
 800a862:	1124      	asrs	r4, r4, #4
 800a864:	d0dc      	beq.n	800a820 <_strtod_l+0x518>
 800a866:	2c1f      	cmp	r4, #31
 800a868:	dd20      	ble.n	800a8ac <_strtod_l+0x5a4>
 800a86a:	2400      	movs	r4, #0
 800a86c:	46a0      	mov	r8, r4
 800a86e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a870:	46a1      	mov	r9, r4
 800a872:	9a05      	ldr	r2, [sp, #20]
 800a874:	2322      	movs	r3, #34	@ 0x22
 800a876:	f04f 0a00 	mov.w	sl, #0
 800a87a:	f04f 0b00 	mov.w	fp, #0
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	e768      	b.n	800a754 <_strtod_l+0x44c>
 800a882:	bf00      	nop
 800a884:	080103e6 	.word	0x080103e6
 800a888:	08010288 	.word	0x08010288
 800a88c:	080103de 	.word	0x080103de
 800a890:	0801041b 	.word	0x0801041b
 800a894:	080106c7 	.word	0x080106c7
 800a898:	08010598 	.word	0x08010598
 800a89c:	08010570 	.word	0x08010570
 800a8a0:	7ff00000 	.word	0x7ff00000
 800a8a4:	7ca00000 	.word	0x7ca00000
 800a8a8:	7fefffff 	.word	0x7fefffff
 800a8ac:	f014 0310 	ands.w	r3, r4, #16
 800a8b0:	bf18      	it	ne
 800a8b2:	236a      	movne	r3, #106	@ 0x6a
 800a8b4:	4ea9      	ldr	r6, [pc, #676]	@ (800ab5c <_strtod_l+0x854>)
 800a8b6:	9308      	str	r3, [sp, #32]
 800a8b8:	4650      	mov	r0, sl
 800a8ba:	4659      	mov	r1, fp
 800a8bc:	2300      	movs	r3, #0
 800a8be:	07e2      	lsls	r2, r4, #31
 800a8c0:	d504      	bpl.n	800a8cc <_strtod_l+0x5c4>
 800a8c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8c6:	f7f5 fea7 	bl	8000618 <__aeabi_dmul>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	1064      	asrs	r4, r4, #1
 800a8ce:	f106 0608 	add.w	r6, r6, #8
 800a8d2:	d1f4      	bne.n	800a8be <_strtod_l+0x5b6>
 800a8d4:	b10b      	cbz	r3, 800a8da <_strtod_l+0x5d2>
 800a8d6:	4682      	mov	sl, r0
 800a8d8:	468b      	mov	fp, r1
 800a8da:	9b08      	ldr	r3, [sp, #32]
 800a8dc:	b1b3      	cbz	r3, 800a90c <_strtod_l+0x604>
 800a8de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a8e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	4659      	mov	r1, fp
 800a8ea:	dd0f      	ble.n	800a90c <_strtod_l+0x604>
 800a8ec:	2b1f      	cmp	r3, #31
 800a8ee:	dd55      	ble.n	800a99c <_strtod_l+0x694>
 800a8f0:	2b34      	cmp	r3, #52	@ 0x34
 800a8f2:	bfde      	ittt	le
 800a8f4:	f04f 33ff 	movle.w	r3, #4294967295
 800a8f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a8fc:	4093      	lslle	r3, r2
 800a8fe:	f04f 0a00 	mov.w	sl, #0
 800a902:	bfcc      	ite	gt
 800a904:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a908:	ea03 0b01 	andle.w	fp, r3, r1
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
 800a910:	4650      	mov	r0, sl
 800a912:	4659      	mov	r1, fp
 800a914:	f7f6 f8e8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d1a6      	bne.n	800a86a <_strtod_l+0x562>
 800a91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a922:	9805      	ldr	r0, [sp, #20]
 800a924:	462b      	mov	r3, r5
 800a926:	463a      	mov	r2, r7
 800a928:	f002 fe68 	bl	800d5fc <__s2b>
 800a92c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f af05 	beq.w	800a73e <_strtod_l+0x436>
 800a934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a936:	2a00      	cmp	r2, #0
 800a938:	eba9 0308 	sub.w	r3, r9, r8
 800a93c:	bfa8      	it	ge
 800a93e:	2300      	movge	r3, #0
 800a940:	9312      	str	r3, [sp, #72]	@ 0x48
 800a942:	2400      	movs	r4, #0
 800a944:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a948:	9316      	str	r3, [sp, #88]	@ 0x58
 800a94a:	46a0      	mov	r8, r4
 800a94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a94e:	9805      	ldr	r0, [sp, #20]
 800a950:	6859      	ldr	r1, [r3, #4]
 800a952:	f002 fdab 	bl	800d4ac <_Balloc>
 800a956:	4681      	mov	r9, r0
 800a958:	2800      	cmp	r0, #0
 800a95a:	f43f aef4 	beq.w	800a746 <_strtod_l+0x43e>
 800a95e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a960:	691a      	ldr	r2, [r3, #16]
 800a962:	3202      	adds	r2, #2
 800a964:	f103 010c 	add.w	r1, r3, #12
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	300c      	adds	r0, #12
 800a96c:	f001 fb9b 	bl	800c0a6 <memcpy>
 800a970:	ec4b ab10 	vmov	d0, sl, fp
 800a974:	9805      	ldr	r0, [sp, #20]
 800a976:	aa1c      	add	r2, sp, #112	@ 0x70
 800a978:	a91b      	add	r1, sp, #108	@ 0x6c
 800a97a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a97e:	f003 f979 	bl	800dc74 <__d2b>
 800a982:	901a      	str	r0, [sp, #104]	@ 0x68
 800a984:	2800      	cmp	r0, #0
 800a986:	f43f aede 	beq.w	800a746 <_strtod_l+0x43e>
 800a98a:	9805      	ldr	r0, [sp, #20]
 800a98c:	2101      	movs	r1, #1
 800a98e:	f002 fecb 	bl	800d728 <__i2b>
 800a992:	4680      	mov	r8, r0
 800a994:	b948      	cbnz	r0, 800a9aa <_strtod_l+0x6a2>
 800a996:	f04f 0800 	mov.w	r8, #0
 800a99a:	e6d4      	b.n	800a746 <_strtod_l+0x43e>
 800a99c:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a4:	ea03 0a0a 	and.w	sl, r3, sl
 800a9a8:	e7b0      	b.n	800a90c <_strtod_l+0x604>
 800a9aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a9ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a9ae:	2d00      	cmp	r5, #0
 800a9b0:	bfab      	itete	ge
 800a9b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a9b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a9b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a9b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a9ba:	bfac      	ite	ge
 800a9bc:	18ef      	addge	r7, r5, r3
 800a9be:	1b5e      	sublt	r6, r3, r5
 800a9c0:	9b08      	ldr	r3, [sp, #32]
 800a9c2:	1aed      	subs	r5, r5, r3
 800a9c4:	4415      	add	r5, r2
 800a9c6:	4b66      	ldr	r3, [pc, #408]	@ (800ab60 <_strtod_l+0x858>)
 800a9c8:	3d01      	subs	r5, #1
 800a9ca:	429d      	cmp	r5, r3
 800a9cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a9d0:	da50      	bge.n	800aa74 <_strtod_l+0x76c>
 800a9d2:	1b5b      	subs	r3, r3, r5
 800a9d4:	2b1f      	cmp	r3, #31
 800a9d6:	eba2 0203 	sub.w	r2, r2, r3
 800a9da:	f04f 0101 	mov.w	r1, #1
 800a9de:	dc3d      	bgt.n	800aa5c <_strtod_l+0x754>
 800a9e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9ea:	18bd      	adds	r5, r7, r2
 800a9ec:	9b08      	ldr	r3, [sp, #32]
 800a9ee:	42af      	cmp	r7, r5
 800a9f0:	4416      	add	r6, r2
 800a9f2:	441e      	add	r6, r3
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	bfa8      	it	ge
 800a9f8:	462b      	movge	r3, r5
 800a9fa:	42b3      	cmp	r3, r6
 800a9fc:	bfa8      	it	ge
 800a9fe:	4633      	movge	r3, r6
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bfc2      	ittt	gt
 800aa04:	1aed      	subgt	r5, r5, r3
 800aa06:	1af6      	subgt	r6, r6, r3
 800aa08:	1aff      	subgt	r7, r7, r3
 800aa0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dd16      	ble.n	800aa3e <_strtod_l+0x736>
 800aa10:	4641      	mov	r1, r8
 800aa12:	9805      	ldr	r0, [sp, #20]
 800aa14:	461a      	mov	r2, r3
 800aa16:	f002 ff47 	bl	800d8a8 <__pow5mult>
 800aa1a:	4680      	mov	r8, r0
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d0ba      	beq.n	800a996 <_strtod_l+0x68e>
 800aa20:	4601      	mov	r1, r0
 800aa22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa24:	9805      	ldr	r0, [sp, #20]
 800aa26:	f002 fe95 	bl	800d754 <__multiply>
 800aa2a:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	f43f ae8a 	beq.w	800a746 <_strtod_l+0x43e>
 800aa32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa34:	9805      	ldr	r0, [sp, #20]
 800aa36:	f002 fd79 	bl	800d52c <_Bfree>
 800aa3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	dc1d      	bgt.n	800aa7e <_strtod_l+0x776>
 800aa42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd23      	ble.n	800aa90 <_strtod_l+0x788>
 800aa48:	4649      	mov	r1, r9
 800aa4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa4c:	9805      	ldr	r0, [sp, #20]
 800aa4e:	f002 ff2b 	bl	800d8a8 <__pow5mult>
 800aa52:	4681      	mov	r9, r0
 800aa54:	b9e0      	cbnz	r0, 800aa90 <_strtod_l+0x788>
 800aa56:	f04f 0900 	mov.w	r9, #0
 800aa5a:	e674      	b.n	800a746 <_strtod_l+0x43e>
 800aa5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aa60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aa64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aa68:	35e2      	adds	r5, #226	@ 0xe2
 800aa6a:	fa01 f305 	lsl.w	r3, r1, r5
 800aa6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa70:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aa72:	e7ba      	b.n	800a9ea <_strtod_l+0x6e2>
 800aa74:	2300      	movs	r3, #0
 800aa76:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa78:	2301      	movs	r3, #1
 800aa7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa7c:	e7b5      	b.n	800a9ea <_strtod_l+0x6e2>
 800aa7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa80:	9805      	ldr	r0, [sp, #20]
 800aa82:	462a      	mov	r2, r5
 800aa84:	f002 ff6a 	bl	800d95c <__lshift>
 800aa88:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d1d9      	bne.n	800aa42 <_strtod_l+0x73a>
 800aa8e:	e65a      	b.n	800a746 <_strtod_l+0x43e>
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	dd07      	ble.n	800aaa4 <_strtod_l+0x79c>
 800aa94:	4649      	mov	r1, r9
 800aa96:	9805      	ldr	r0, [sp, #20]
 800aa98:	4632      	mov	r2, r6
 800aa9a:	f002 ff5f 	bl	800d95c <__lshift>
 800aa9e:	4681      	mov	r9, r0
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d0d8      	beq.n	800aa56 <_strtod_l+0x74e>
 800aaa4:	2f00      	cmp	r7, #0
 800aaa6:	dd08      	ble.n	800aaba <_strtod_l+0x7b2>
 800aaa8:	4641      	mov	r1, r8
 800aaaa:	9805      	ldr	r0, [sp, #20]
 800aaac:	463a      	mov	r2, r7
 800aaae:	f002 ff55 	bl	800d95c <__lshift>
 800aab2:	4680      	mov	r8, r0
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f43f ae46 	beq.w	800a746 <_strtod_l+0x43e>
 800aaba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aabc:	9805      	ldr	r0, [sp, #20]
 800aabe:	464a      	mov	r2, r9
 800aac0:	f002 ffd4 	bl	800da6c <__mdiff>
 800aac4:	4604      	mov	r4, r0
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f ae3d 	beq.w	800a746 <_strtod_l+0x43e>
 800aacc:	68c3      	ldr	r3, [r0, #12]
 800aace:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aad0:	2300      	movs	r3, #0
 800aad2:	60c3      	str	r3, [r0, #12]
 800aad4:	4641      	mov	r1, r8
 800aad6:	f002 ffad 	bl	800da34 <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	da46      	bge.n	800ab6c <_strtod_l+0x864>
 800aade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aae0:	ea53 030a 	orrs.w	r3, r3, sl
 800aae4:	d16c      	bne.n	800abc0 <_strtod_l+0x8b8>
 800aae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d168      	bne.n	800abc0 <_strtod_l+0x8b8>
 800aaee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aaf2:	0d1b      	lsrs	r3, r3, #20
 800aaf4:	051b      	lsls	r3, r3, #20
 800aaf6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aafa:	d961      	bls.n	800abc0 <_strtod_l+0x8b8>
 800aafc:	6963      	ldr	r3, [r4, #20]
 800aafe:	b913      	cbnz	r3, 800ab06 <_strtod_l+0x7fe>
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	dd5c      	ble.n	800abc0 <_strtod_l+0x8b8>
 800ab06:	4621      	mov	r1, r4
 800ab08:	2201      	movs	r2, #1
 800ab0a:	9805      	ldr	r0, [sp, #20]
 800ab0c:	f002 ff26 	bl	800d95c <__lshift>
 800ab10:	4641      	mov	r1, r8
 800ab12:	4604      	mov	r4, r0
 800ab14:	f002 ff8e 	bl	800da34 <__mcmp>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	dd51      	ble.n	800abc0 <_strtod_l+0x8b8>
 800ab1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab20:	9a08      	ldr	r2, [sp, #32]
 800ab22:	0d1b      	lsrs	r3, r3, #20
 800ab24:	051b      	lsls	r3, r3, #20
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	d06b      	beq.n	800ac02 <_strtod_l+0x8fa>
 800ab2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab2e:	d868      	bhi.n	800ac02 <_strtod_l+0x8fa>
 800ab30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab34:	f67f ae9d 	bls.w	800a872 <_strtod_l+0x56a>
 800ab38:	4b0a      	ldr	r3, [pc, #40]	@ (800ab64 <_strtod_l+0x85c>)
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	4659      	mov	r1, fp
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f7f5 fd6a 	bl	8000618 <__aeabi_dmul>
 800ab44:	4b08      	ldr	r3, [pc, #32]	@ (800ab68 <_strtod_l+0x860>)
 800ab46:	400b      	ands	r3, r1
 800ab48:	4682      	mov	sl, r0
 800ab4a:	468b      	mov	fp, r1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f47f ae05 	bne.w	800a75c <_strtod_l+0x454>
 800ab52:	9a05      	ldr	r2, [sp, #20]
 800ab54:	2322      	movs	r3, #34	@ 0x22
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	e600      	b.n	800a75c <_strtod_l+0x454>
 800ab5a:	bf00      	nop
 800ab5c:	080102b0 	.word	0x080102b0
 800ab60:	fffffc02 	.word	0xfffffc02
 800ab64:	39500000 	.word	0x39500000
 800ab68:	7ff00000 	.word	0x7ff00000
 800ab6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab70:	d165      	bne.n	800ac3e <_strtod_l+0x936>
 800ab72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab78:	b35a      	cbz	r2, 800abd2 <_strtod_l+0x8ca>
 800ab7a:	4a9f      	ldr	r2, [pc, #636]	@ (800adf8 <_strtod_l+0xaf0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d12b      	bne.n	800abd8 <_strtod_l+0x8d0>
 800ab80:	9b08      	ldr	r3, [sp, #32]
 800ab82:	4651      	mov	r1, sl
 800ab84:	b303      	cbz	r3, 800abc8 <_strtod_l+0x8c0>
 800ab86:	4b9d      	ldr	r3, [pc, #628]	@ (800adfc <_strtod_l+0xaf4>)
 800ab88:	465a      	mov	r2, fp
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295
 800ab94:	d81b      	bhi.n	800abce <_strtod_l+0x8c6>
 800ab96:	0d1b      	lsrs	r3, r3, #20
 800ab98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aba0:	4299      	cmp	r1, r3
 800aba2:	d119      	bne.n	800abd8 <_strtod_l+0x8d0>
 800aba4:	4b96      	ldr	r3, [pc, #600]	@ (800ae00 <_strtod_l+0xaf8>)
 800aba6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d102      	bne.n	800abb2 <_strtod_l+0x8aa>
 800abac:	3101      	adds	r1, #1
 800abae:	f43f adca 	beq.w	800a746 <_strtod_l+0x43e>
 800abb2:	4b92      	ldr	r3, [pc, #584]	@ (800adfc <_strtod_l+0xaf4>)
 800abb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abb6:	401a      	ands	r2, r3
 800abb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800abbc:	f04f 0a00 	mov.w	sl, #0
 800abc0:	9b08      	ldr	r3, [sp, #32]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1b8      	bne.n	800ab38 <_strtod_l+0x830>
 800abc6:	e5c9      	b.n	800a75c <_strtod_l+0x454>
 800abc8:	f04f 33ff 	mov.w	r3, #4294967295
 800abcc:	e7e8      	b.n	800aba0 <_strtod_l+0x898>
 800abce:	4613      	mov	r3, r2
 800abd0:	e7e6      	b.n	800aba0 <_strtod_l+0x898>
 800abd2:	ea53 030a 	orrs.w	r3, r3, sl
 800abd6:	d0a1      	beq.n	800ab1c <_strtod_l+0x814>
 800abd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abda:	b1db      	cbz	r3, 800ac14 <_strtod_l+0x90c>
 800abdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abde:	4213      	tst	r3, r2
 800abe0:	d0ee      	beq.n	800abc0 <_strtod_l+0x8b8>
 800abe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abe4:	9a08      	ldr	r2, [sp, #32]
 800abe6:	4650      	mov	r0, sl
 800abe8:	4659      	mov	r1, fp
 800abea:	b1bb      	cbz	r3, 800ac1c <_strtod_l+0x914>
 800abec:	f7ff fb6c 	bl	800a2c8 <sulp>
 800abf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abf4:	ec53 2b10 	vmov	r2, r3, d0
 800abf8:	f7f5 fb58 	bl	80002ac <__adddf3>
 800abfc:	4682      	mov	sl, r0
 800abfe:	468b      	mov	fp, r1
 800ac00:	e7de      	b.n	800abc0 <_strtod_l+0x8b8>
 800ac02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac0e:	f04f 3aff 	mov.w	sl, #4294967295
 800ac12:	e7d5      	b.n	800abc0 <_strtod_l+0x8b8>
 800ac14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac16:	ea13 0f0a 	tst.w	r3, sl
 800ac1a:	e7e1      	b.n	800abe0 <_strtod_l+0x8d8>
 800ac1c:	f7ff fb54 	bl	800a2c8 <sulp>
 800ac20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac24:	ec53 2b10 	vmov	r2, r3, d0
 800ac28:	f7f5 fb3e 	bl	80002a8 <__aeabi_dsub>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4682      	mov	sl, r0
 800ac32:	468b      	mov	fp, r1
 800ac34:	f7f5 ff58 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d0c1      	beq.n	800abc0 <_strtod_l+0x8b8>
 800ac3c:	e619      	b.n	800a872 <_strtod_l+0x56a>
 800ac3e:	4641      	mov	r1, r8
 800ac40:	4620      	mov	r0, r4
 800ac42:	f003 f86f 	bl	800dd24 <__ratio>
 800ac46:	ec57 6b10 	vmov	r6, r7, d0
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac50:	4630      	mov	r0, r6
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7f5 ff5c 	bl	8000b10 <__aeabi_dcmple>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d06f      	beq.n	800ad3c <_strtod_l+0xa34>
 800ac5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d17a      	bne.n	800ad58 <_strtod_l+0xa50>
 800ac62:	f1ba 0f00 	cmp.w	sl, #0
 800ac66:	d158      	bne.n	800ad1a <_strtod_l+0xa12>
 800ac68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d15a      	bne.n	800ad28 <_strtod_l+0xa20>
 800ac72:	4b64      	ldr	r3, [pc, #400]	@ (800ae04 <_strtod_l+0xafc>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	4630      	mov	r0, r6
 800ac78:	4639      	mov	r1, r7
 800ac7a:	f7f5 ff3f 	bl	8000afc <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d159      	bne.n	800ad36 <_strtod_l+0xa2e>
 800ac82:	4630      	mov	r0, r6
 800ac84:	4639      	mov	r1, r7
 800ac86:	4b60      	ldr	r3, [pc, #384]	@ (800ae08 <_strtod_l+0xb00>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f7f5 fcc5 	bl	8000618 <__aeabi_dmul>
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460f      	mov	r7, r1
 800ac92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ac96:	9606      	str	r6, [sp, #24]
 800ac98:	9307      	str	r3, [sp, #28]
 800ac9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac9e:	4d57      	ldr	r5, [pc, #348]	@ (800adfc <_strtod_l+0xaf4>)
 800aca0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aca6:	401d      	ands	r5, r3
 800aca8:	4b58      	ldr	r3, [pc, #352]	@ (800ae0c <_strtod_l+0xb04>)
 800acaa:	429d      	cmp	r5, r3
 800acac:	f040 80b2 	bne.w	800ae14 <_strtod_l+0xb0c>
 800acb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800acb6:	ec4b ab10 	vmov	d0, sl, fp
 800acba:	f002 ff6b 	bl	800db94 <__ulp>
 800acbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acc2:	ec51 0b10 	vmov	r0, r1, d0
 800acc6:	f7f5 fca7 	bl	8000618 <__aeabi_dmul>
 800acca:	4652      	mov	r2, sl
 800accc:	465b      	mov	r3, fp
 800acce:	f7f5 faed 	bl	80002ac <__adddf3>
 800acd2:	460b      	mov	r3, r1
 800acd4:	4949      	ldr	r1, [pc, #292]	@ (800adfc <_strtod_l+0xaf4>)
 800acd6:	4a4e      	ldr	r2, [pc, #312]	@ (800ae10 <_strtod_l+0xb08>)
 800acd8:	4019      	ands	r1, r3
 800acda:	4291      	cmp	r1, r2
 800acdc:	4682      	mov	sl, r0
 800acde:	d942      	bls.n	800ad66 <_strtod_l+0xa5e>
 800ace0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ace2:	4b47      	ldr	r3, [pc, #284]	@ (800ae00 <_strtod_l+0xaf8>)
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d103      	bne.n	800acf0 <_strtod_l+0x9e8>
 800ace8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acea:	3301      	adds	r3, #1
 800acec:	f43f ad2b 	beq.w	800a746 <_strtod_l+0x43e>
 800acf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ae00 <_strtod_l+0xaf8>
 800acf4:	f04f 3aff 	mov.w	sl, #4294967295
 800acf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acfa:	9805      	ldr	r0, [sp, #20]
 800acfc:	f002 fc16 	bl	800d52c <_Bfree>
 800ad00:	9805      	ldr	r0, [sp, #20]
 800ad02:	4649      	mov	r1, r9
 800ad04:	f002 fc12 	bl	800d52c <_Bfree>
 800ad08:	9805      	ldr	r0, [sp, #20]
 800ad0a:	4641      	mov	r1, r8
 800ad0c:	f002 fc0e 	bl	800d52c <_Bfree>
 800ad10:	9805      	ldr	r0, [sp, #20]
 800ad12:	4621      	mov	r1, r4
 800ad14:	f002 fc0a 	bl	800d52c <_Bfree>
 800ad18:	e618      	b.n	800a94c <_strtod_l+0x644>
 800ad1a:	f1ba 0f01 	cmp.w	sl, #1
 800ad1e:	d103      	bne.n	800ad28 <_strtod_l+0xa20>
 800ad20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f43f ada5 	beq.w	800a872 <_strtod_l+0x56a>
 800ad28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800add8 <_strtod_l+0xad0>
 800ad2c:	4f35      	ldr	r7, [pc, #212]	@ (800ae04 <_strtod_l+0xafc>)
 800ad2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad32:	2600      	movs	r6, #0
 800ad34:	e7b1      	b.n	800ac9a <_strtod_l+0x992>
 800ad36:	4f34      	ldr	r7, [pc, #208]	@ (800ae08 <_strtod_l+0xb00>)
 800ad38:	2600      	movs	r6, #0
 800ad3a:	e7aa      	b.n	800ac92 <_strtod_l+0x98a>
 800ad3c:	4b32      	ldr	r3, [pc, #200]	@ (800ae08 <_strtod_l+0xb00>)
 800ad3e:	4630      	mov	r0, r6
 800ad40:	4639      	mov	r1, r7
 800ad42:	2200      	movs	r2, #0
 800ad44:	f7f5 fc68 	bl	8000618 <__aeabi_dmul>
 800ad48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d09f      	beq.n	800ac92 <_strtod_l+0x98a>
 800ad52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad56:	e7a0      	b.n	800ac9a <_strtod_l+0x992>
 800ad58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ade0 <_strtod_l+0xad8>
 800ad5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad60:	ec57 6b17 	vmov	r6, r7, d7
 800ad64:	e799      	b.n	800ac9a <_strtod_l+0x992>
 800ad66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ad6a:	9b08      	ldr	r3, [sp, #32]
 800ad6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1c1      	bne.n	800acf8 <_strtod_l+0x9f0>
 800ad74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad78:	0d1b      	lsrs	r3, r3, #20
 800ad7a:	051b      	lsls	r3, r3, #20
 800ad7c:	429d      	cmp	r5, r3
 800ad7e:	d1bb      	bne.n	800acf8 <_strtod_l+0x9f0>
 800ad80:	4630      	mov	r0, r6
 800ad82:	4639      	mov	r1, r7
 800ad84:	f7f5 ffa8 	bl	8000cd8 <__aeabi_d2lz>
 800ad88:	f7f5 fc18 	bl	80005bc <__aeabi_l2d>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 fa88 	bl	80002a8 <__aeabi_dsub>
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ada0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ada4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada6:	ea46 060a 	orr.w	r6, r6, sl
 800adaa:	431e      	orrs	r6, r3
 800adac:	d06f      	beq.n	800ae8e <_strtod_l+0xb86>
 800adae:	a30e      	add	r3, pc, #56	@ (adr r3, 800ade8 <_strtod_l+0xae0>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	f7f5 fea2 	bl	8000afc <__aeabi_dcmplt>
 800adb8:	2800      	cmp	r0, #0
 800adba:	f47f accf 	bne.w	800a75c <_strtod_l+0x454>
 800adbe:	a30c      	add	r3, pc, #48	@ (adr r3, 800adf0 <_strtod_l+0xae8>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adc8:	f7f5 feb6 	bl	8000b38 <__aeabi_dcmpgt>
 800adcc:	2800      	cmp	r0, #0
 800adce:	d093      	beq.n	800acf8 <_strtod_l+0x9f0>
 800add0:	e4c4      	b.n	800a75c <_strtod_l+0x454>
 800add2:	bf00      	nop
 800add4:	f3af 8000 	nop.w
 800add8:	00000000 	.word	0x00000000
 800addc:	bff00000 	.word	0xbff00000
 800ade0:	00000000 	.word	0x00000000
 800ade4:	3ff00000 	.word	0x3ff00000
 800ade8:	94a03595 	.word	0x94a03595
 800adec:	3fdfffff 	.word	0x3fdfffff
 800adf0:	35afe535 	.word	0x35afe535
 800adf4:	3fe00000 	.word	0x3fe00000
 800adf8:	000fffff 	.word	0x000fffff
 800adfc:	7ff00000 	.word	0x7ff00000
 800ae00:	7fefffff 	.word	0x7fefffff
 800ae04:	3ff00000 	.word	0x3ff00000
 800ae08:	3fe00000 	.word	0x3fe00000
 800ae0c:	7fe00000 	.word	0x7fe00000
 800ae10:	7c9fffff 	.word	0x7c9fffff
 800ae14:	9b08      	ldr	r3, [sp, #32]
 800ae16:	b323      	cbz	r3, 800ae62 <_strtod_l+0xb5a>
 800ae18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae1c:	d821      	bhi.n	800ae62 <_strtod_l+0xb5a>
 800ae1e:	a328      	add	r3, pc, #160	@ (adr r3, 800aec0 <_strtod_l+0xbb8>)
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	f7f5 fe72 	bl	8000b10 <__aeabi_dcmple>
 800ae2c:	b1a0      	cbz	r0, 800ae58 <_strtod_l+0xb50>
 800ae2e:	4639      	mov	r1, r7
 800ae30:	4630      	mov	r0, r6
 800ae32:	f7f5 fec9 	bl	8000bc8 <__aeabi_d2uiz>
 800ae36:	2801      	cmp	r0, #1
 800ae38:	bf38      	it	cc
 800ae3a:	2001      	movcc	r0, #1
 800ae3c:	f7f5 fb72 	bl	8000524 <__aeabi_ui2d>
 800ae40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae42:	4606      	mov	r6, r0
 800ae44:	460f      	mov	r7, r1
 800ae46:	b9fb      	cbnz	r3, 800ae88 <_strtod_l+0xb80>
 800ae48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae4c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae4e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ae54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ae5e:	1b5b      	subs	r3, r3, r5
 800ae60:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ae6a:	f002 fe93 	bl	800db94 <__ulp>
 800ae6e:	4650      	mov	r0, sl
 800ae70:	ec53 2b10 	vmov	r2, r3, d0
 800ae74:	4659      	mov	r1, fp
 800ae76:	f7f5 fbcf 	bl	8000618 <__aeabi_dmul>
 800ae7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ae7e:	f7f5 fa15 	bl	80002ac <__adddf3>
 800ae82:	4682      	mov	sl, r0
 800ae84:	468b      	mov	fp, r1
 800ae86:	e770      	b.n	800ad6a <_strtod_l+0xa62>
 800ae88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ae8c:	e7e0      	b.n	800ae50 <_strtod_l+0xb48>
 800ae8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800aec8 <_strtod_l+0xbc0>)
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	f7f5 fe32 	bl	8000afc <__aeabi_dcmplt>
 800ae98:	e798      	b.n	800adcc <_strtod_l+0xac4>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	f7ff ba6d 	b.w	800a382 <_strtod_l+0x7a>
 800aea8:	2a65      	cmp	r2, #101	@ 0x65
 800aeaa:	f43f ab66 	beq.w	800a57a <_strtod_l+0x272>
 800aeae:	2a45      	cmp	r2, #69	@ 0x45
 800aeb0:	f43f ab63 	beq.w	800a57a <_strtod_l+0x272>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f7ff bb9e 	b.w	800a5f6 <_strtod_l+0x2ee>
 800aeba:	bf00      	nop
 800aebc:	f3af 8000 	nop.w
 800aec0:	ffc00000 	.word	0xffc00000
 800aec4:	41dfffff 	.word	0x41dfffff
 800aec8:	94a03595 	.word	0x94a03595
 800aecc:	3fcfffff 	.word	0x3fcfffff

0800aed0 <_strtod_r>:
 800aed0:	4b01      	ldr	r3, [pc, #4]	@ (800aed8 <_strtod_r+0x8>)
 800aed2:	f7ff ba19 	b.w	800a308 <_strtod_l>
 800aed6:	bf00      	nop
 800aed8:	20000024 	.word	0x20000024

0800aedc <_strtol_l.constprop.0>:
 800aedc:	2b24      	cmp	r3, #36	@ 0x24
 800aede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee2:	4686      	mov	lr, r0
 800aee4:	4690      	mov	r8, r2
 800aee6:	d801      	bhi.n	800aeec <_strtol_l.constprop.0+0x10>
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d106      	bne.n	800aefa <_strtol_l.constprop.0+0x1e>
 800aeec:	f001 f8ae 	bl	800c04c <__errno>
 800aef0:	2316      	movs	r3, #22
 800aef2:	6003      	str	r3, [r0, #0]
 800aef4:	2000      	movs	r0, #0
 800aef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefa:	4834      	ldr	r0, [pc, #208]	@ (800afcc <_strtol_l.constprop.0+0xf0>)
 800aefc:	460d      	mov	r5, r1
 800aefe:	462a      	mov	r2, r5
 800af00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af04:	5d06      	ldrb	r6, [r0, r4]
 800af06:	f016 0608 	ands.w	r6, r6, #8
 800af0a:	d1f8      	bne.n	800aefe <_strtol_l.constprop.0+0x22>
 800af0c:	2c2d      	cmp	r4, #45	@ 0x2d
 800af0e:	d12d      	bne.n	800af6c <_strtol_l.constprop.0+0x90>
 800af10:	782c      	ldrb	r4, [r5, #0]
 800af12:	2601      	movs	r6, #1
 800af14:	1c95      	adds	r5, r2, #2
 800af16:	f033 0210 	bics.w	r2, r3, #16
 800af1a:	d109      	bne.n	800af30 <_strtol_l.constprop.0+0x54>
 800af1c:	2c30      	cmp	r4, #48	@ 0x30
 800af1e:	d12a      	bne.n	800af76 <_strtol_l.constprop.0+0x9a>
 800af20:	782a      	ldrb	r2, [r5, #0]
 800af22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af26:	2a58      	cmp	r2, #88	@ 0x58
 800af28:	d125      	bne.n	800af76 <_strtol_l.constprop.0+0x9a>
 800af2a:	786c      	ldrb	r4, [r5, #1]
 800af2c:	2310      	movs	r3, #16
 800af2e:	3502      	adds	r5, #2
 800af30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af34:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af38:	2200      	movs	r2, #0
 800af3a:	fbbc f9f3 	udiv	r9, ip, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	fb03 ca19 	mls	sl, r3, r9, ip
 800af44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af48:	2f09      	cmp	r7, #9
 800af4a:	d81b      	bhi.n	800af84 <_strtol_l.constprop.0+0xa8>
 800af4c:	463c      	mov	r4, r7
 800af4e:	42a3      	cmp	r3, r4
 800af50:	dd27      	ble.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af52:	1c57      	adds	r7, r2, #1
 800af54:	d007      	beq.n	800af66 <_strtol_l.constprop.0+0x8a>
 800af56:	4581      	cmp	r9, r0
 800af58:	d320      	bcc.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af5a:	d101      	bne.n	800af60 <_strtol_l.constprop.0+0x84>
 800af5c:	45a2      	cmp	sl, r4
 800af5e:	db1d      	blt.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af60:	fb00 4003 	mla	r0, r0, r3, r4
 800af64:	2201      	movs	r2, #1
 800af66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af6a:	e7eb      	b.n	800af44 <_strtol_l.constprop.0+0x68>
 800af6c:	2c2b      	cmp	r4, #43	@ 0x2b
 800af6e:	bf04      	itt	eq
 800af70:	782c      	ldrbeq	r4, [r5, #0]
 800af72:	1c95      	addeq	r5, r2, #2
 800af74:	e7cf      	b.n	800af16 <_strtol_l.constprop.0+0x3a>
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1da      	bne.n	800af30 <_strtol_l.constprop.0+0x54>
 800af7a:	2c30      	cmp	r4, #48	@ 0x30
 800af7c:	bf0c      	ite	eq
 800af7e:	2308      	moveq	r3, #8
 800af80:	230a      	movne	r3, #10
 800af82:	e7d5      	b.n	800af30 <_strtol_l.constprop.0+0x54>
 800af84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af88:	2f19      	cmp	r7, #25
 800af8a:	d801      	bhi.n	800af90 <_strtol_l.constprop.0+0xb4>
 800af8c:	3c37      	subs	r4, #55	@ 0x37
 800af8e:	e7de      	b.n	800af4e <_strtol_l.constprop.0+0x72>
 800af90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af94:	2f19      	cmp	r7, #25
 800af96:	d804      	bhi.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af98:	3c57      	subs	r4, #87	@ 0x57
 800af9a:	e7d8      	b.n	800af4e <_strtol_l.constprop.0+0x72>
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	e7e1      	b.n	800af66 <_strtol_l.constprop.0+0x8a>
 800afa2:	1c53      	adds	r3, r2, #1
 800afa4:	d108      	bne.n	800afb8 <_strtol_l.constprop.0+0xdc>
 800afa6:	2322      	movs	r3, #34	@ 0x22
 800afa8:	f8ce 3000 	str.w	r3, [lr]
 800afac:	4660      	mov	r0, ip
 800afae:	f1b8 0f00 	cmp.w	r8, #0
 800afb2:	d0a0      	beq.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800afb4:	1e69      	subs	r1, r5, #1
 800afb6:	e006      	b.n	800afc6 <_strtol_l.constprop.0+0xea>
 800afb8:	b106      	cbz	r6, 800afbc <_strtol_l.constprop.0+0xe0>
 800afba:	4240      	negs	r0, r0
 800afbc:	f1b8 0f00 	cmp.w	r8, #0
 800afc0:	d099      	beq.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	d1f6      	bne.n	800afb4 <_strtol_l.constprop.0+0xd8>
 800afc6:	f8c8 1000 	str.w	r1, [r8]
 800afca:	e794      	b.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800afcc:	080102d9 	.word	0x080102d9

0800afd0 <_strtol_r>:
 800afd0:	f7ff bf84 	b.w	800aedc <_strtol_l.constprop.0>

0800afd4 <strtol>:
 800afd4:	4613      	mov	r3, r2
 800afd6:	460a      	mov	r2, r1
 800afd8:	4601      	mov	r1, r0
 800afda:	4802      	ldr	r0, [pc, #8]	@ (800afe4 <strtol+0x10>)
 800afdc:	6800      	ldr	r0, [r0, #0]
 800afde:	f7ff bf7d 	b.w	800aedc <_strtol_l.constprop.0>
 800afe2:	bf00      	nop
 800afe4:	20000190 	.word	0x20000190

0800afe8 <__cvt>:
 800afe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afec:	ec57 6b10 	vmov	r6, r7, d0
 800aff0:	2f00      	cmp	r7, #0
 800aff2:	460c      	mov	r4, r1
 800aff4:	4619      	mov	r1, r3
 800aff6:	463b      	mov	r3, r7
 800aff8:	bfbb      	ittet	lt
 800affa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800affe:	461f      	movlt	r7, r3
 800b000:	2300      	movge	r3, #0
 800b002:	232d      	movlt	r3, #45	@ 0x2d
 800b004:	700b      	strb	r3, [r1, #0]
 800b006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b008:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b00c:	4691      	mov	r9, r2
 800b00e:	f023 0820 	bic.w	r8, r3, #32
 800b012:	bfbc      	itt	lt
 800b014:	4632      	movlt	r2, r6
 800b016:	4616      	movlt	r6, r2
 800b018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b01c:	d005      	beq.n	800b02a <__cvt+0x42>
 800b01e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b022:	d100      	bne.n	800b026 <__cvt+0x3e>
 800b024:	3401      	adds	r4, #1
 800b026:	2102      	movs	r1, #2
 800b028:	e000      	b.n	800b02c <__cvt+0x44>
 800b02a:	2103      	movs	r1, #3
 800b02c:	ab03      	add	r3, sp, #12
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	ab02      	add	r3, sp, #8
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	ec47 6b10 	vmov	d0, r6, r7
 800b038:	4653      	mov	r3, sl
 800b03a:	4622      	mov	r2, r4
 800b03c:	f001 f8dc 	bl	800c1f8 <_dtoa_r>
 800b040:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b044:	4605      	mov	r5, r0
 800b046:	d119      	bne.n	800b07c <__cvt+0x94>
 800b048:	f019 0f01 	tst.w	r9, #1
 800b04c:	d00e      	beq.n	800b06c <__cvt+0x84>
 800b04e:	eb00 0904 	add.w	r9, r0, r4
 800b052:	2200      	movs	r2, #0
 800b054:	2300      	movs	r3, #0
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7f5 fd45 	bl	8000ae8 <__aeabi_dcmpeq>
 800b05e:	b108      	cbz	r0, 800b064 <__cvt+0x7c>
 800b060:	f8cd 900c 	str.w	r9, [sp, #12]
 800b064:	2230      	movs	r2, #48	@ 0x30
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	454b      	cmp	r3, r9
 800b06a:	d31e      	bcc.n	800b0aa <__cvt+0xc2>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b070:	1b5b      	subs	r3, r3, r5
 800b072:	4628      	mov	r0, r5
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	b004      	add	sp, #16
 800b078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b080:	eb00 0904 	add.w	r9, r0, r4
 800b084:	d1e5      	bne.n	800b052 <__cvt+0x6a>
 800b086:	7803      	ldrb	r3, [r0, #0]
 800b088:	2b30      	cmp	r3, #48	@ 0x30
 800b08a:	d10a      	bne.n	800b0a2 <__cvt+0xba>
 800b08c:	2200      	movs	r2, #0
 800b08e:	2300      	movs	r3, #0
 800b090:	4630      	mov	r0, r6
 800b092:	4639      	mov	r1, r7
 800b094:	f7f5 fd28 	bl	8000ae8 <__aeabi_dcmpeq>
 800b098:	b918      	cbnz	r0, 800b0a2 <__cvt+0xba>
 800b09a:	f1c4 0401 	rsb	r4, r4, #1
 800b09e:	f8ca 4000 	str.w	r4, [sl]
 800b0a2:	f8da 3000 	ldr.w	r3, [sl]
 800b0a6:	4499      	add	r9, r3
 800b0a8:	e7d3      	b.n	800b052 <__cvt+0x6a>
 800b0aa:	1c59      	adds	r1, r3, #1
 800b0ac:	9103      	str	r1, [sp, #12]
 800b0ae:	701a      	strb	r2, [r3, #0]
 800b0b0:	e7d9      	b.n	800b066 <__cvt+0x7e>

0800b0b2 <__exponent>:
 800b0b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	bfba      	itte	lt
 800b0b8:	4249      	neglt	r1, r1
 800b0ba:	232d      	movlt	r3, #45	@ 0x2d
 800b0bc:	232b      	movge	r3, #43	@ 0x2b
 800b0be:	2909      	cmp	r1, #9
 800b0c0:	7002      	strb	r2, [r0, #0]
 800b0c2:	7043      	strb	r3, [r0, #1]
 800b0c4:	dd29      	ble.n	800b11a <__exponent+0x68>
 800b0c6:	f10d 0307 	add.w	r3, sp, #7
 800b0ca:	461d      	mov	r5, r3
 800b0cc:	270a      	movs	r7, #10
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0d4:	fb07 1416 	mls	r4, r7, r6, r1
 800b0d8:	3430      	adds	r4, #48	@ 0x30
 800b0da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0de:	460c      	mov	r4, r1
 800b0e0:	2c63      	cmp	r4, #99	@ 0x63
 800b0e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	dcf1      	bgt.n	800b0ce <__exponent+0x1c>
 800b0ea:	3130      	adds	r1, #48	@ 0x30
 800b0ec:	1e94      	subs	r4, r2, #2
 800b0ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b0f2:	1c41      	adds	r1, r0, #1
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	42ab      	cmp	r3, r5
 800b0f8:	d30a      	bcc.n	800b110 <__exponent+0x5e>
 800b0fa:	f10d 0309 	add.w	r3, sp, #9
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	42ac      	cmp	r4, r5
 800b102:	bf88      	it	hi
 800b104:	2300      	movhi	r3, #0
 800b106:	3302      	adds	r3, #2
 800b108:	4403      	add	r3, r0
 800b10a:	1a18      	subs	r0, r3, r0
 800b10c:	b003      	add	sp, #12
 800b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b110:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b114:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b118:	e7ed      	b.n	800b0f6 <__exponent+0x44>
 800b11a:	2330      	movs	r3, #48	@ 0x30
 800b11c:	3130      	adds	r1, #48	@ 0x30
 800b11e:	7083      	strb	r3, [r0, #2]
 800b120:	70c1      	strb	r1, [r0, #3]
 800b122:	1d03      	adds	r3, r0, #4
 800b124:	e7f1      	b.n	800b10a <__exponent+0x58>
	...

0800b128 <_printf_float>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	b08d      	sub	sp, #52	@ 0x34
 800b12e:	460c      	mov	r4, r1
 800b130:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b134:	4616      	mov	r6, r2
 800b136:	461f      	mov	r7, r3
 800b138:	4605      	mov	r5, r0
 800b13a:	f000 ff2d 	bl	800bf98 <_localeconv_r>
 800b13e:	6803      	ldr	r3, [r0, #0]
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	4618      	mov	r0, r3
 800b144:	f7f5 f8a4 	bl	8000290 <strlen>
 800b148:	2300      	movs	r3, #0
 800b14a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b14c:	f8d8 3000 	ldr.w	r3, [r8]
 800b150:	9005      	str	r0, [sp, #20]
 800b152:	3307      	adds	r3, #7
 800b154:	f023 0307 	bic.w	r3, r3, #7
 800b158:	f103 0208 	add.w	r2, r3, #8
 800b15c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b160:	f8d4 b000 	ldr.w	fp, [r4]
 800b164:	f8c8 2000 	str.w	r2, [r8]
 800b168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b16c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b170:	9307      	str	r3, [sp, #28]
 800b172:	f8cd 8018 	str.w	r8, [sp, #24]
 800b176:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b17a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b17e:	4b9c      	ldr	r3, [pc, #624]	@ (800b3f0 <_printf_float+0x2c8>)
 800b180:	f04f 32ff 	mov.w	r2, #4294967295
 800b184:	f7f5 fce2 	bl	8000b4c <__aeabi_dcmpun>
 800b188:	bb70      	cbnz	r0, 800b1e8 <_printf_float+0xc0>
 800b18a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b18e:	4b98      	ldr	r3, [pc, #608]	@ (800b3f0 <_printf_float+0x2c8>)
 800b190:	f04f 32ff 	mov.w	r2, #4294967295
 800b194:	f7f5 fcbc 	bl	8000b10 <__aeabi_dcmple>
 800b198:	bb30      	cbnz	r0, 800b1e8 <_printf_float+0xc0>
 800b19a:	2200      	movs	r2, #0
 800b19c:	2300      	movs	r3, #0
 800b19e:	4640      	mov	r0, r8
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	f7f5 fcab 	bl	8000afc <__aeabi_dcmplt>
 800b1a6:	b110      	cbz	r0, 800b1ae <_printf_float+0x86>
 800b1a8:	232d      	movs	r3, #45	@ 0x2d
 800b1aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1ae:	4a91      	ldr	r2, [pc, #580]	@ (800b3f4 <_printf_float+0x2cc>)
 800b1b0:	4b91      	ldr	r3, [pc, #580]	@ (800b3f8 <_printf_float+0x2d0>)
 800b1b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1b6:	bf94      	ite	ls
 800b1b8:	4690      	movls	r8, r2
 800b1ba:	4698      	movhi	r8, r3
 800b1bc:	2303      	movs	r3, #3
 800b1be:	6123      	str	r3, [r4, #16]
 800b1c0:	f02b 0304 	bic.w	r3, fp, #4
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	9700      	str	r7, [sp, #0]
 800b1cc:	4633      	mov	r3, r6
 800b1ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f000 f9d2 	bl	800b57c <_printf_common>
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f040 808d 	bne.w	800b2f8 <_printf_float+0x1d0>
 800b1de:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e2:	b00d      	add	sp, #52	@ 0x34
 800b1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	f7f5 fcac 	bl	8000b4c <__aeabi_dcmpun>
 800b1f4:	b140      	cbz	r0, 800b208 <_printf_float+0xe0>
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bfbc      	itt	lt
 800b1fc:	232d      	movlt	r3, #45	@ 0x2d
 800b1fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b202:	4a7e      	ldr	r2, [pc, #504]	@ (800b3fc <_printf_float+0x2d4>)
 800b204:	4b7e      	ldr	r3, [pc, #504]	@ (800b400 <_printf_float+0x2d8>)
 800b206:	e7d4      	b.n	800b1b2 <_printf_float+0x8a>
 800b208:	6863      	ldr	r3, [r4, #4]
 800b20a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b20e:	9206      	str	r2, [sp, #24]
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	d13b      	bne.n	800b28c <_printf_float+0x164>
 800b214:	2306      	movs	r3, #6
 800b216:	6063      	str	r3, [r4, #4]
 800b218:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b21c:	2300      	movs	r3, #0
 800b21e:	6022      	str	r2, [r4, #0]
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	ab0a      	add	r3, sp, #40	@ 0x28
 800b224:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b228:	ab09      	add	r3, sp, #36	@ 0x24
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	ec49 8b10 	vmov	d0, r8, r9
 800b232:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b236:	4628      	mov	r0, r5
 800b238:	f7ff fed6 	bl	800afe8 <__cvt>
 800b23c:	9b06      	ldr	r3, [sp, #24]
 800b23e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b240:	2b47      	cmp	r3, #71	@ 0x47
 800b242:	4680      	mov	r8, r0
 800b244:	d129      	bne.n	800b29a <_printf_float+0x172>
 800b246:	1cc8      	adds	r0, r1, #3
 800b248:	db02      	blt.n	800b250 <_printf_float+0x128>
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	4299      	cmp	r1, r3
 800b24e:	dd41      	ble.n	800b2d4 <_printf_float+0x1ac>
 800b250:	f1aa 0a02 	sub.w	sl, sl, #2
 800b254:	fa5f fa8a 	uxtb.w	sl, sl
 800b258:	3901      	subs	r1, #1
 800b25a:	4652      	mov	r2, sl
 800b25c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b260:	9109      	str	r1, [sp, #36]	@ 0x24
 800b262:	f7ff ff26 	bl	800b0b2 <__exponent>
 800b266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b268:	1813      	adds	r3, r2, r0
 800b26a:	2a01      	cmp	r2, #1
 800b26c:	4681      	mov	r9, r0
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	dc02      	bgt.n	800b278 <_printf_float+0x150>
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	07d2      	lsls	r2, r2, #31
 800b276:	d501      	bpl.n	800b27c <_printf_float+0x154>
 800b278:	3301      	adds	r3, #1
 800b27a:	6123      	str	r3, [r4, #16]
 800b27c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b280:	2b00      	cmp	r3, #0
 800b282:	d0a2      	beq.n	800b1ca <_printf_float+0xa2>
 800b284:	232d      	movs	r3, #45	@ 0x2d
 800b286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b28a:	e79e      	b.n	800b1ca <_printf_float+0xa2>
 800b28c:	9a06      	ldr	r2, [sp, #24]
 800b28e:	2a47      	cmp	r2, #71	@ 0x47
 800b290:	d1c2      	bne.n	800b218 <_printf_float+0xf0>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1c0      	bne.n	800b218 <_printf_float+0xf0>
 800b296:	2301      	movs	r3, #1
 800b298:	e7bd      	b.n	800b216 <_printf_float+0xee>
 800b29a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b29e:	d9db      	bls.n	800b258 <_printf_float+0x130>
 800b2a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2a4:	d118      	bne.n	800b2d8 <_printf_float+0x1b0>
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	6863      	ldr	r3, [r4, #4]
 800b2aa:	dd0b      	ble.n	800b2c4 <_printf_float+0x19c>
 800b2ac:	6121      	str	r1, [r4, #16]
 800b2ae:	b913      	cbnz	r3, 800b2b6 <_printf_float+0x18e>
 800b2b0:	6822      	ldr	r2, [r4, #0]
 800b2b2:	07d0      	lsls	r0, r2, #31
 800b2b4:	d502      	bpl.n	800b2bc <_printf_float+0x194>
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	440b      	add	r3, r1
 800b2ba:	6123      	str	r3, [r4, #16]
 800b2bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2be:	f04f 0900 	mov.w	r9, #0
 800b2c2:	e7db      	b.n	800b27c <_printf_float+0x154>
 800b2c4:	b913      	cbnz	r3, 800b2cc <_printf_float+0x1a4>
 800b2c6:	6822      	ldr	r2, [r4, #0]
 800b2c8:	07d2      	lsls	r2, r2, #31
 800b2ca:	d501      	bpl.n	800b2d0 <_printf_float+0x1a8>
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	e7f4      	b.n	800b2ba <_printf_float+0x192>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e7f2      	b.n	800b2ba <_printf_float+0x192>
 800b2d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	db05      	blt.n	800b2ea <_printf_float+0x1c2>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	6121      	str	r1, [r4, #16]
 800b2e2:	07d8      	lsls	r0, r3, #31
 800b2e4:	d5ea      	bpl.n	800b2bc <_printf_float+0x194>
 800b2e6:	1c4b      	adds	r3, r1, #1
 800b2e8:	e7e7      	b.n	800b2ba <_printf_float+0x192>
 800b2ea:	2900      	cmp	r1, #0
 800b2ec:	bfd4      	ite	le
 800b2ee:	f1c1 0202 	rsble	r2, r1, #2
 800b2f2:	2201      	movgt	r2, #1
 800b2f4:	4413      	add	r3, r2
 800b2f6:	e7e0      	b.n	800b2ba <_printf_float+0x192>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	055a      	lsls	r2, r3, #21
 800b2fc:	d407      	bmi.n	800b30e <_printf_float+0x1e6>
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	4642      	mov	r2, r8
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	47b8      	blx	r7
 800b308:	3001      	adds	r0, #1
 800b30a:	d12b      	bne.n	800b364 <_printf_float+0x23c>
 800b30c:	e767      	b.n	800b1de <_printf_float+0xb6>
 800b30e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b312:	f240 80dd 	bls.w	800b4d0 <_printf_float+0x3a8>
 800b316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b31a:	2200      	movs	r2, #0
 800b31c:	2300      	movs	r3, #0
 800b31e:	f7f5 fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b322:	2800      	cmp	r0, #0
 800b324:	d033      	beq.n	800b38e <_printf_float+0x266>
 800b326:	4a37      	ldr	r2, [pc, #220]	@ (800b404 <_printf_float+0x2dc>)
 800b328:	2301      	movs	r3, #1
 800b32a:	4631      	mov	r1, r6
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	f43f af54 	beq.w	800b1de <_printf_float+0xb6>
 800b336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b33a:	4543      	cmp	r3, r8
 800b33c:	db02      	blt.n	800b344 <_printf_float+0x21c>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	07d8      	lsls	r0, r3, #31
 800b342:	d50f      	bpl.n	800b364 <_printf_float+0x23c>
 800b344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b348:	4631      	mov	r1, r6
 800b34a:	4628      	mov	r0, r5
 800b34c:	47b8      	blx	r7
 800b34e:	3001      	adds	r0, #1
 800b350:	f43f af45 	beq.w	800b1de <_printf_float+0xb6>
 800b354:	f04f 0900 	mov.w	r9, #0
 800b358:	f108 38ff 	add.w	r8, r8, #4294967295
 800b35c:	f104 0a1a 	add.w	sl, r4, #26
 800b360:	45c8      	cmp	r8, r9
 800b362:	dc09      	bgt.n	800b378 <_printf_float+0x250>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	079b      	lsls	r3, r3, #30
 800b368:	f100 8103 	bmi.w	800b572 <_printf_float+0x44a>
 800b36c:	68e0      	ldr	r0, [r4, #12]
 800b36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b370:	4298      	cmp	r0, r3
 800b372:	bfb8      	it	lt
 800b374:	4618      	movlt	r0, r3
 800b376:	e734      	b.n	800b1e2 <_printf_float+0xba>
 800b378:	2301      	movs	r3, #1
 800b37a:	4652      	mov	r2, sl
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	47b8      	blx	r7
 800b382:	3001      	adds	r0, #1
 800b384:	f43f af2b 	beq.w	800b1de <_printf_float+0xb6>
 800b388:	f109 0901 	add.w	r9, r9, #1
 800b38c:	e7e8      	b.n	800b360 <_printf_float+0x238>
 800b38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	dc39      	bgt.n	800b408 <_printf_float+0x2e0>
 800b394:	4a1b      	ldr	r2, [pc, #108]	@ (800b404 <_printf_float+0x2dc>)
 800b396:	2301      	movs	r3, #1
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f af1d 	beq.w	800b1de <_printf_float+0xb6>
 800b3a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3a8:	ea59 0303 	orrs.w	r3, r9, r3
 800b3ac:	d102      	bne.n	800b3b4 <_printf_float+0x28c>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	07d9      	lsls	r1, r3, #31
 800b3b2:	d5d7      	bpl.n	800b364 <_printf_float+0x23c>
 800b3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f af0d 	beq.w	800b1de <_printf_float+0xb6>
 800b3c4:	f04f 0a00 	mov.w	sl, #0
 800b3c8:	f104 0b1a 	add.w	fp, r4, #26
 800b3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ce:	425b      	negs	r3, r3
 800b3d0:	4553      	cmp	r3, sl
 800b3d2:	dc01      	bgt.n	800b3d8 <_printf_float+0x2b0>
 800b3d4:	464b      	mov	r3, r9
 800b3d6:	e793      	b.n	800b300 <_printf_float+0x1d8>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	465a      	mov	r2, fp
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4628      	mov	r0, r5
 800b3e0:	47b8      	blx	r7
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	f43f aefb 	beq.w	800b1de <_printf_float+0xb6>
 800b3e8:	f10a 0a01 	add.w	sl, sl, #1
 800b3ec:	e7ee      	b.n	800b3cc <_printf_float+0x2a4>
 800b3ee:	bf00      	nop
 800b3f0:	7fefffff 	.word	0x7fefffff
 800b3f4:	080103d9 	.word	0x080103d9
 800b3f8:	080103dd 	.word	0x080103dd
 800b3fc:	080103e1 	.word	0x080103e1
 800b400:	080103e5 	.word	0x080103e5
 800b404:	08010687 	.word	0x08010687
 800b408:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b40a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b40e:	4553      	cmp	r3, sl
 800b410:	bfa8      	it	ge
 800b412:	4653      	movge	r3, sl
 800b414:	2b00      	cmp	r3, #0
 800b416:	4699      	mov	r9, r3
 800b418:	dc36      	bgt.n	800b488 <_printf_float+0x360>
 800b41a:	f04f 0b00 	mov.w	fp, #0
 800b41e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b422:	f104 021a 	add.w	r2, r4, #26
 800b426:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b428:	9306      	str	r3, [sp, #24]
 800b42a:	eba3 0309 	sub.w	r3, r3, r9
 800b42e:	455b      	cmp	r3, fp
 800b430:	dc31      	bgt.n	800b496 <_printf_float+0x36e>
 800b432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b434:	459a      	cmp	sl, r3
 800b436:	dc3a      	bgt.n	800b4ae <_printf_float+0x386>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	07da      	lsls	r2, r3, #31
 800b43c:	d437      	bmi.n	800b4ae <_printf_float+0x386>
 800b43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b440:	ebaa 0903 	sub.w	r9, sl, r3
 800b444:	9b06      	ldr	r3, [sp, #24]
 800b446:	ebaa 0303 	sub.w	r3, sl, r3
 800b44a:	4599      	cmp	r9, r3
 800b44c:	bfa8      	it	ge
 800b44e:	4699      	movge	r9, r3
 800b450:	f1b9 0f00 	cmp.w	r9, #0
 800b454:	dc33      	bgt.n	800b4be <_printf_float+0x396>
 800b456:	f04f 0800 	mov.w	r8, #0
 800b45a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b45e:	f104 0b1a 	add.w	fp, r4, #26
 800b462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b464:	ebaa 0303 	sub.w	r3, sl, r3
 800b468:	eba3 0309 	sub.w	r3, r3, r9
 800b46c:	4543      	cmp	r3, r8
 800b46e:	f77f af79 	ble.w	800b364 <_printf_float+0x23c>
 800b472:	2301      	movs	r3, #1
 800b474:	465a      	mov	r2, fp
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	f43f aeae 	beq.w	800b1de <_printf_float+0xb6>
 800b482:	f108 0801 	add.w	r8, r8, #1
 800b486:	e7ec      	b.n	800b462 <_printf_float+0x33a>
 800b488:	4642      	mov	r2, r8
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	d1c2      	bne.n	800b41a <_printf_float+0x2f2>
 800b494:	e6a3      	b.n	800b1de <_printf_float+0xb6>
 800b496:	2301      	movs	r3, #1
 800b498:	4631      	mov	r1, r6
 800b49a:	4628      	mov	r0, r5
 800b49c:	9206      	str	r2, [sp, #24]
 800b49e:	47b8      	blx	r7
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	f43f ae9c 	beq.w	800b1de <_printf_float+0xb6>
 800b4a6:	9a06      	ldr	r2, [sp, #24]
 800b4a8:	f10b 0b01 	add.w	fp, fp, #1
 800b4ac:	e7bb      	b.n	800b426 <_printf_float+0x2fe>
 800b4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	47b8      	blx	r7
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	d1c0      	bne.n	800b43e <_printf_float+0x316>
 800b4bc:	e68f      	b.n	800b1de <_printf_float+0xb6>
 800b4be:	9a06      	ldr	r2, [sp, #24]
 800b4c0:	464b      	mov	r3, r9
 800b4c2:	4442      	add	r2, r8
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b8      	blx	r7
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d1c3      	bne.n	800b456 <_printf_float+0x32e>
 800b4ce:	e686      	b.n	800b1de <_printf_float+0xb6>
 800b4d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4d4:	f1ba 0f01 	cmp.w	sl, #1
 800b4d8:	dc01      	bgt.n	800b4de <_printf_float+0x3b6>
 800b4da:	07db      	lsls	r3, r3, #31
 800b4dc:	d536      	bpl.n	800b54c <_printf_float+0x424>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	47b8      	blx	r7
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	f43f ae78 	beq.w	800b1de <_printf_float+0xb6>
 800b4ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f ae70 	beq.w	800b1de <_printf_float+0xb6>
 800b4fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b50a:	f7f5 faed 	bl	8000ae8 <__aeabi_dcmpeq>
 800b50e:	b9c0      	cbnz	r0, 800b542 <_printf_float+0x41a>
 800b510:	4653      	mov	r3, sl
 800b512:	f108 0201 	add.w	r2, r8, #1
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	47b8      	blx	r7
 800b51c:	3001      	adds	r0, #1
 800b51e:	d10c      	bne.n	800b53a <_printf_float+0x412>
 800b520:	e65d      	b.n	800b1de <_printf_float+0xb6>
 800b522:	2301      	movs	r3, #1
 800b524:	465a      	mov	r2, fp
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	f43f ae56 	beq.w	800b1de <_printf_float+0xb6>
 800b532:	f108 0801 	add.w	r8, r8, #1
 800b536:	45d0      	cmp	r8, sl
 800b538:	dbf3      	blt.n	800b522 <_printf_float+0x3fa>
 800b53a:	464b      	mov	r3, r9
 800b53c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b540:	e6df      	b.n	800b302 <_printf_float+0x1da>
 800b542:	f04f 0800 	mov.w	r8, #0
 800b546:	f104 0b1a 	add.w	fp, r4, #26
 800b54a:	e7f4      	b.n	800b536 <_printf_float+0x40e>
 800b54c:	2301      	movs	r3, #1
 800b54e:	4642      	mov	r2, r8
 800b550:	e7e1      	b.n	800b516 <_printf_float+0x3ee>
 800b552:	2301      	movs	r3, #1
 800b554:	464a      	mov	r2, r9
 800b556:	4631      	mov	r1, r6
 800b558:	4628      	mov	r0, r5
 800b55a:	47b8      	blx	r7
 800b55c:	3001      	adds	r0, #1
 800b55e:	f43f ae3e 	beq.w	800b1de <_printf_float+0xb6>
 800b562:	f108 0801 	add.w	r8, r8, #1
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b56a:	1a5b      	subs	r3, r3, r1
 800b56c:	4543      	cmp	r3, r8
 800b56e:	dcf0      	bgt.n	800b552 <_printf_float+0x42a>
 800b570:	e6fc      	b.n	800b36c <_printf_float+0x244>
 800b572:	f04f 0800 	mov.w	r8, #0
 800b576:	f104 0919 	add.w	r9, r4, #25
 800b57a:	e7f4      	b.n	800b566 <_printf_float+0x43e>

0800b57c <_printf_common>:
 800b57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b580:	4616      	mov	r6, r2
 800b582:	4698      	mov	r8, r3
 800b584:	688a      	ldr	r2, [r1, #8]
 800b586:	690b      	ldr	r3, [r1, #16]
 800b588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b58c:	4293      	cmp	r3, r2
 800b58e:	bfb8      	it	lt
 800b590:	4613      	movlt	r3, r2
 800b592:	6033      	str	r3, [r6, #0]
 800b594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b598:	4607      	mov	r7, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	b10a      	cbz	r2, 800b5a2 <_printf_common+0x26>
 800b59e:	3301      	adds	r3, #1
 800b5a0:	6033      	str	r3, [r6, #0]
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	0699      	lsls	r1, r3, #26
 800b5a6:	bf42      	ittt	mi
 800b5a8:	6833      	ldrmi	r3, [r6, #0]
 800b5aa:	3302      	addmi	r3, #2
 800b5ac:	6033      	strmi	r3, [r6, #0]
 800b5ae:	6825      	ldr	r5, [r4, #0]
 800b5b0:	f015 0506 	ands.w	r5, r5, #6
 800b5b4:	d106      	bne.n	800b5c4 <_printf_common+0x48>
 800b5b6:	f104 0a19 	add.w	sl, r4, #25
 800b5ba:	68e3      	ldr	r3, [r4, #12]
 800b5bc:	6832      	ldr	r2, [r6, #0]
 800b5be:	1a9b      	subs	r3, r3, r2
 800b5c0:	42ab      	cmp	r3, r5
 800b5c2:	dc26      	bgt.n	800b612 <_printf_common+0x96>
 800b5c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5c8:	6822      	ldr	r2, [r4, #0]
 800b5ca:	3b00      	subs	r3, #0
 800b5cc:	bf18      	it	ne
 800b5ce:	2301      	movne	r3, #1
 800b5d0:	0692      	lsls	r2, r2, #26
 800b5d2:	d42b      	bmi.n	800b62c <_printf_common+0xb0>
 800b5d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5d8:	4641      	mov	r1, r8
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c8      	blx	r9
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d01e      	beq.n	800b620 <_printf_common+0xa4>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	6922      	ldr	r2, [r4, #16]
 800b5e6:	f003 0306 	and.w	r3, r3, #6
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	bf02      	ittt	eq
 800b5ee:	68e5      	ldreq	r5, [r4, #12]
 800b5f0:	6833      	ldreq	r3, [r6, #0]
 800b5f2:	1aed      	subeq	r5, r5, r3
 800b5f4:	68a3      	ldr	r3, [r4, #8]
 800b5f6:	bf0c      	ite	eq
 800b5f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5fc:	2500      	movne	r5, #0
 800b5fe:	4293      	cmp	r3, r2
 800b600:	bfc4      	itt	gt
 800b602:	1a9b      	subgt	r3, r3, r2
 800b604:	18ed      	addgt	r5, r5, r3
 800b606:	2600      	movs	r6, #0
 800b608:	341a      	adds	r4, #26
 800b60a:	42b5      	cmp	r5, r6
 800b60c:	d11a      	bne.n	800b644 <_printf_common+0xc8>
 800b60e:	2000      	movs	r0, #0
 800b610:	e008      	b.n	800b624 <_printf_common+0xa8>
 800b612:	2301      	movs	r3, #1
 800b614:	4652      	mov	r2, sl
 800b616:	4641      	mov	r1, r8
 800b618:	4638      	mov	r0, r7
 800b61a:	47c8      	blx	r9
 800b61c:	3001      	adds	r0, #1
 800b61e:	d103      	bne.n	800b628 <_printf_common+0xac>
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b628:	3501      	adds	r5, #1
 800b62a:	e7c6      	b.n	800b5ba <_printf_common+0x3e>
 800b62c:	18e1      	adds	r1, r4, r3
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	2030      	movs	r0, #48	@ 0x30
 800b632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b636:	4422      	add	r2, r4
 800b638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b63c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b640:	3302      	adds	r3, #2
 800b642:	e7c7      	b.n	800b5d4 <_printf_common+0x58>
 800b644:	2301      	movs	r3, #1
 800b646:	4622      	mov	r2, r4
 800b648:	4641      	mov	r1, r8
 800b64a:	4638      	mov	r0, r7
 800b64c:	47c8      	blx	r9
 800b64e:	3001      	adds	r0, #1
 800b650:	d0e6      	beq.n	800b620 <_printf_common+0xa4>
 800b652:	3601      	adds	r6, #1
 800b654:	e7d9      	b.n	800b60a <_printf_common+0x8e>
	...

0800b658 <_printf_i>:
 800b658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b65c:	7e0f      	ldrb	r7, [r1, #24]
 800b65e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b660:	2f78      	cmp	r7, #120	@ 0x78
 800b662:	4691      	mov	r9, r2
 800b664:	4680      	mov	r8, r0
 800b666:	460c      	mov	r4, r1
 800b668:	469a      	mov	sl, r3
 800b66a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b66e:	d807      	bhi.n	800b680 <_printf_i+0x28>
 800b670:	2f62      	cmp	r7, #98	@ 0x62
 800b672:	d80a      	bhi.n	800b68a <_printf_i+0x32>
 800b674:	2f00      	cmp	r7, #0
 800b676:	f000 80d2 	beq.w	800b81e <_printf_i+0x1c6>
 800b67a:	2f58      	cmp	r7, #88	@ 0x58
 800b67c:	f000 80b9 	beq.w	800b7f2 <_printf_i+0x19a>
 800b680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b688:	e03a      	b.n	800b700 <_printf_i+0xa8>
 800b68a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b68e:	2b15      	cmp	r3, #21
 800b690:	d8f6      	bhi.n	800b680 <_printf_i+0x28>
 800b692:	a101      	add	r1, pc, #4	@ (adr r1, 800b698 <_printf_i+0x40>)
 800b694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b698:	0800b6f1 	.word	0x0800b6f1
 800b69c:	0800b705 	.word	0x0800b705
 800b6a0:	0800b681 	.word	0x0800b681
 800b6a4:	0800b681 	.word	0x0800b681
 800b6a8:	0800b681 	.word	0x0800b681
 800b6ac:	0800b681 	.word	0x0800b681
 800b6b0:	0800b705 	.word	0x0800b705
 800b6b4:	0800b681 	.word	0x0800b681
 800b6b8:	0800b681 	.word	0x0800b681
 800b6bc:	0800b681 	.word	0x0800b681
 800b6c0:	0800b681 	.word	0x0800b681
 800b6c4:	0800b805 	.word	0x0800b805
 800b6c8:	0800b72f 	.word	0x0800b72f
 800b6cc:	0800b7bf 	.word	0x0800b7bf
 800b6d0:	0800b681 	.word	0x0800b681
 800b6d4:	0800b681 	.word	0x0800b681
 800b6d8:	0800b827 	.word	0x0800b827
 800b6dc:	0800b681 	.word	0x0800b681
 800b6e0:	0800b72f 	.word	0x0800b72f
 800b6e4:	0800b681 	.word	0x0800b681
 800b6e8:	0800b681 	.word	0x0800b681
 800b6ec:	0800b7c7 	.word	0x0800b7c7
 800b6f0:	6833      	ldr	r3, [r6, #0]
 800b6f2:	1d1a      	adds	r2, r3, #4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6032      	str	r2, [r6, #0]
 800b6f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b700:	2301      	movs	r3, #1
 800b702:	e09d      	b.n	800b840 <_printf_i+0x1e8>
 800b704:	6833      	ldr	r3, [r6, #0]
 800b706:	6820      	ldr	r0, [r4, #0]
 800b708:	1d19      	adds	r1, r3, #4
 800b70a:	6031      	str	r1, [r6, #0]
 800b70c:	0606      	lsls	r6, r0, #24
 800b70e:	d501      	bpl.n	800b714 <_printf_i+0xbc>
 800b710:	681d      	ldr	r5, [r3, #0]
 800b712:	e003      	b.n	800b71c <_printf_i+0xc4>
 800b714:	0645      	lsls	r5, r0, #25
 800b716:	d5fb      	bpl.n	800b710 <_printf_i+0xb8>
 800b718:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	da03      	bge.n	800b728 <_printf_i+0xd0>
 800b720:	232d      	movs	r3, #45	@ 0x2d
 800b722:	426d      	negs	r5, r5
 800b724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b728:	4859      	ldr	r0, [pc, #356]	@ (800b890 <_printf_i+0x238>)
 800b72a:	230a      	movs	r3, #10
 800b72c:	e011      	b.n	800b752 <_printf_i+0xfa>
 800b72e:	6821      	ldr	r1, [r4, #0]
 800b730:	6833      	ldr	r3, [r6, #0]
 800b732:	0608      	lsls	r0, r1, #24
 800b734:	f853 5b04 	ldr.w	r5, [r3], #4
 800b738:	d402      	bmi.n	800b740 <_printf_i+0xe8>
 800b73a:	0649      	lsls	r1, r1, #25
 800b73c:	bf48      	it	mi
 800b73e:	b2ad      	uxthmi	r5, r5
 800b740:	2f6f      	cmp	r7, #111	@ 0x6f
 800b742:	4853      	ldr	r0, [pc, #332]	@ (800b890 <_printf_i+0x238>)
 800b744:	6033      	str	r3, [r6, #0]
 800b746:	bf14      	ite	ne
 800b748:	230a      	movne	r3, #10
 800b74a:	2308      	moveq	r3, #8
 800b74c:	2100      	movs	r1, #0
 800b74e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b752:	6866      	ldr	r6, [r4, #4]
 800b754:	60a6      	str	r6, [r4, #8]
 800b756:	2e00      	cmp	r6, #0
 800b758:	bfa2      	ittt	ge
 800b75a:	6821      	ldrge	r1, [r4, #0]
 800b75c:	f021 0104 	bicge.w	r1, r1, #4
 800b760:	6021      	strge	r1, [r4, #0]
 800b762:	b90d      	cbnz	r5, 800b768 <_printf_i+0x110>
 800b764:	2e00      	cmp	r6, #0
 800b766:	d04b      	beq.n	800b800 <_printf_i+0x1a8>
 800b768:	4616      	mov	r6, r2
 800b76a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b76e:	fb03 5711 	mls	r7, r3, r1, r5
 800b772:	5dc7      	ldrb	r7, [r0, r7]
 800b774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b778:	462f      	mov	r7, r5
 800b77a:	42bb      	cmp	r3, r7
 800b77c:	460d      	mov	r5, r1
 800b77e:	d9f4      	bls.n	800b76a <_printf_i+0x112>
 800b780:	2b08      	cmp	r3, #8
 800b782:	d10b      	bne.n	800b79c <_printf_i+0x144>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	07df      	lsls	r7, r3, #31
 800b788:	d508      	bpl.n	800b79c <_printf_i+0x144>
 800b78a:	6923      	ldr	r3, [r4, #16]
 800b78c:	6861      	ldr	r1, [r4, #4]
 800b78e:	4299      	cmp	r1, r3
 800b790:	bfde      	ittt	le
 800b792:	2330      	movle	r3, #48	@ 0x30
 800b794:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b798:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b79c:	1b92      	subs	r2, r2, r6
 800b79e:	6122      	str	r2, [r4, #16]
 800b7a0:	f8cd a000 	str.w	sl, [sp]
 800b7a4:	464b      	mov	r3, r9
 800b7a6:	aa03      	add	r2, sp, #12
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	f7ff fee6 	bl	800b57c <_printf_common>
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	d14a      	bne.n	800b84a <_printf_i+0x1f2>
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	b004      	add	sp, #16
 800b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	4833      	ldr	r0, [pc, #204]	@ (800b894 <_printf_i+0x23c>)
 800b7c8:	2778      	movs	r7, #120	@ 0x78
 800b7ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	6831      	ldr	r1, [r6, #0]
 800b7d2:	061f      	lsls	r7, r3, #24
 800b7d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7d8:	d402      	bmi.n	800b7e0 <_printf_i+0x188>
 800b7da:	065f      	lsls	r7, r3, #25
 800b7dc:	bf48      	it	mi
 800b7de:	b2ad      	uxthmi	r5, r5
 800b7e0:	6031      	str	r1, [r6, #0]
 800b7e2:	07d9      	lsls	r1, r3, #31
 800b7e4:	bf44      	itt	mi
 800b7e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ea:	6023      	strmi	r3, [r4, #0]
 800b7ec:	b11d      	cbz	r5, 800b7f6 <_printf_i+0x19e>
 800b7ee:	2310      	movs	r3, #16
 800b7f0:	e7ac      	b.n	800b74c <_printf_i+0xf4>
 800b7f2:	4827      	ldr	r0, [pc, #156]	@ (800b890 <_printf_i+0x238>)
 800b7f4:	e7e9      	b.n	800b7ca <_printf_i+0x172>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	f023 0320 	bic.w	r3, r3, #32
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	e7f6      	b.n	800b7ee <_printf_i+0x196>
 800b800:	4616      	mov	r6, r2
 800b802:	e7bd      	b.n	800b780 <_printf_i+0x128>
 800b804:	6833      	ldr	r3, [r6, #0]
 800b806:	6825      	ldr	r5, [r4, #0]
 800b808:	6961      	ldr	r1, [r4, #20]
 800b80a:	1d18      	adds	r0, r3, #4
 800b80c:	6030      	str	r0, [r6, #0]
 800b80e:	062e      	lsls	r6, r5, #24
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	d501      	bpl.n	800b818 <_printf_i+0x1c0>
 800b814:	6019      	str	r1, [r3, #0]
 800b816:	e002      	b.n	800b81e <_printf_i+0x1c6>
 800b818:	0668      	lsls	r0, r5, #25
 800b81a:	d5fb      	bpl.n	800b814 <_printf_i+0x1bc>
 800b81c:	8019      	strh	r1, [r3, #0]
 800b81e:	2300      	movs	r3, #0
 800b820:	6123      	str	r3, [r4, #16]
 800b822:	4616      	mov	r6, r2
 800b824:	e7bc      	b.n	800b7a0 <_printf_i+0x148>
 800b826:	6833      	ldr	r3, [r6, #0]
 800b828:	1d1a      	adds	r2, r3, #4
 800b82a:	6032      	str	r2, [r6, #0]
 800b82c:	681e      	ldr	r6, [r3, #0]
 800b82e:	6862      	ldr	r2, [r4, #4]
 800b830:	2100      	movs	r1, #0
 800b832:	4630      	mov	r0, r6
 800b834:	f7f4 fcdc 	bl	80001f0 <memchr>
 800b838:	b108      	cbz	r0, 800b83e <_printf_i+0x1e6>
 800b83a:	1b80      	subs	r0, r0, r6
 800b83c:	6060      	str	r0, [r4, #4]
 800b83e:	6863      	ldr	r3, [r4, #4]
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	2300      	movs	r3, #0
 800b844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b848:	e7aa      	b.n	800b7a0 <_printf_i+0x148>
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	4632      	mov	r2, r6
 800b84e:	4649      	mov	r1, r9
 800b850:	4640      	mov	r0, r8
 800b852:	47d0      	blx	sl
 800b854:	3001      	adds	r0, #1
 800b856:	d0ad      	beq.n	800b7b4 <_printf_i+0x15c>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	079b      	lsls	r3, r3, #30
 800b85c:	d413      	bmi.n	800b886 <_printf_i+0x22e>
 800b85e:	68e0      	ldr	r0, [r4, #12]
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	4298      	cmp	r0, r3
 800b864:	bfb8      	it	lt
 800b866:	4618      	movlt	r0, r3
 800b868:	e7a6      	b.n	800b7b8 <_printf_i+0x160>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4632      	mov	r2, r6
 800b86e:	4649      	mov	r1, r9
 800b870:	4640      	mov	r0, r8
 800b872:	47d0      	blx	sl
 800b874:	3001      	adds	r0, #1
 800b876:	d09d      	beq.n	800b7b4 <_printf_i+0x15c>
 800b878:	3501      	adds	r5, #1
 800b87a:	68e3      	ldr	r3, [r4, #12]
 800b87c:	9903      	ldr	r1, [sp, #12]
 800b87e:	1a5b      	subs	r3, r3, r1
 800b880:	42ab      	cmp	r3, r5
 800b882:	dcf2      	bgt.n	800b86a <_printf_i+0x212>
 800b884:	e7eb      	b.n	800b85e <_printf_i+0x206>
 800b886:	2500      	movs	r5, #0
 800b888:	f104 0619 	add.w	r6, r4, #25
 800b88c:	e7f5      	b.n	800b87a <_printf_i+0x222>
 800b88e:	bf00      	nop
 800b890:	080103e9 	.word	0x080103e9
 800b894:	080103fa 	.word	0x080103fa

0800b898 <_scanf_float>:
 800b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	b087      	sub	sp, #28
 800b89e:	4617      	mov	r7, r2
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	688b      	ldr	r3, [r1, #8]
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b8aa:	bf81      	itttt	hi
 800b8ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b8b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b8b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b8b8:	608b      	strhi	r3, [r1, #8]
 800b8ba:	680b      	ldr	r3, [r1, #0]
 800b8bc:	460a      	mov	r2, r1
 800b8be:	f04f 0500 	mov.w	r5, #0
 800b8c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b8c6:	f842 3b1c 	str.w	r3, [r2], #28
 800b8ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	bf98      	it	ls
 800b8d4:	f04f 0b00 	movls.w	fp, #0
 800b8d8:	9201      	str	r2, [sp, #4]
 800b8da:	4616      	mov	r6, r2
 800b8dc:	46aa      	mov	sl, r5
 800b8de:	46a9      	mov	r9, r5
 800b8e0:	9502      	str	r5, [sp, #8]
 800b8e2:	68a2      	ldr	r2, [r4, #8]
 800b8e4:	b152      	cbz	r2, 800b8fc <_scanf_float+0x64>
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b4e      	cmp	r3, #78	@ 0x4e
 800b8ec:	d864      	bhi.n	800b9b8 <_scanf_float+0x120>
 800b8ee:	2b40      	cmp	r3, #64	@ 0x40
 800b8f0:	d83c      	bhi.n	800b96c <_scanf_float+0xd4>
 800b8f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b8f6:	b2c8      	uxtb	r0, r1
 800b8f8:	280e      	cmp	r0, #14
 800b8fa:	d93a      	bls.n	800b972 <_scanf_float+0xda>
 800b8fc:	f1b9 0f00 	cmp.w	r9, #0
 800b900:	d003      	beq.n	800b90a <_scanf_float+0x72>
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b90e:	f1ba 0f01 	cmp.w	sl, #1
 800b912:	f200 8117 	bhi.w	800bb44 <_scanf_float+0x2ac>
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	429e      	cmp	r6, r3
 800b91a:	f200 8108 	bhi.w	800bb2e <_scanf_float+0x296>
 800b91e:	2001      	movs	r0, #1
 800b920:	b007      	add	sp, #28
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b92a:	2a0d      	cmp	r2, #13
 800b92c:	d8e6      	bhi.n	800b8fc <_scanf_float+0x64>
 800b92e:	a101      	add	r1, pc, #4	@ (adr r1, 800b934 <_scanf_float+0x9c>)
 800b930:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b934:	0800ba7b 	.word	0x0800ba7b
 800b938:	0800b8fd 	.word	0x0800b8fd
 800b93c:	0800b8fd 	.word	0x0800b8fd
 800b940:	0800b8fd 	.word	0x0800b8fd
 800b944:	0800badb 	.word	0x0800badb
 800b948:	0800bab3 	.word	0x0800bab3
 800b94c:	0800b8fd 	.word	0x0800b8fd
 800b950:	0800b8fd 	.word	0x0800b8fd
 800b954:	0800ba89 	.word	0x0800ba89
 800b958:	0800b8fd 	.word	0x0800b8fd
 800b95c:	0800b8fd 	.word	0x0800b8fd
 800b960:	0800b8fd 	.word	0x0800b8fd
 800b964:	0800b8fd 	.word	0x0800b8fd
 800b968:	0800ba41 	.word	0x0800ba41
 800b96c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b970:	e7db      	b.n	800b92a <_scanf_float+0x92>
 800b972:	290e      	cmp	r1, #14
 800b974:	d8c2      	bhi.n	800b8fc <_scanf_float+0x64>
 800b976:	a001      	add	r0, pc, #4	@ (adr r0, 800b97c <_scanf_float+0xe4>)
 800b978:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b97c:	0800ba31 	.word	0x0800ba31
 800b980:	0800b8fd 	.word	0x0800b8fd
 800b984:	0800ba31 	.word	0x0800ba31
 800b988:	0800bac7 	.word	0x0800bac7
 800b98c:	0800b8fd 	.word	0x0800b8fd
 800b990:	0800b9d9 	.word	0x0800b9d9
 800b994:	0800ba17 	.word	0x0800ba17
 800b998:	0800ba17 	.word	0x0800ba17
 800b99c:	0800ba17 	.word	0x0800ba17
 800b9a0:	0800ba17 	.word	0x0800ba17
 800b9a4:	0800ba17 	.word	0x0800ba17
 800b9a8:	0800ba17 	.word	0x0800ba17
 800b9ac:	0800ba17 	.word	0x0800ba17
 800b9b0:	0800ba17 	.word	0x0800ba17
 800b9b4:	0800ba17 	.word	0x0800ba17
 800b9b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b9ba:	d809      	bhi.n	800b9d0 <_scanf_float+0x138>
 800b9bc:	2b60      	cmp	r3, #96	@ 0x60
 800b9be:	d8b2      	bhi.n	800b926 <_scanf_float+0x8e>
 800b9c0:	2b54      	cmp	r3, #84	@ 0x54
 800b9c2:	d07b      	beq.n	800babc <_scanf_float+0x224>
 800b9c4:	2b59      	cmp	r3, #89	@ 0x59
 800b9c6:	d199      	bne.n	800b8fc <_scanf_float+0x64>
 800b9c8:	2d07      	cmp	r5, #7
 800b9ca:	d197      	bne.n	800b8fc <_scanf_float+0x64>
 800b9cc:	2508      	movs	r5, #8
 800b9ce:	e02c      	b.n	800ba2a <_scanf_float+0x192>
 800b9d0:	2b74      	cmp	r3, #116	@ 0x74
 800b9d2:	d073      	beq.n	800babc <_scanf_float+0x224>
 800b9d4:	2b79      	cmp	r3, #121	@ 0x79
 800b9d6:	e7f6      	b.n	800b9c6 <_scanf_float+0x12e>
 800b9d8:	6821      	ldr	r1, [r4, #0]
 800b9da:	05c8      	lsls	r0, r1, #23
 800b9dc:	d51b      	bpl.n	800ba16 <_scanf_float+0x17e>
 800b9de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b9e2:	6021      	str	r1, [r4, #0]
 800b9e4:	f109 0901 	add.w	r9, r9, #1
 800b9e8:	f1bb 0f00 	cmp.w	fp, #0
 800b9ec:	d003      	beq.n	800b9f6 <_scanf_float+0x15e>
 800b9ee:	3201      	adds	r2, #1
 800b9f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b9f4:	60a2      	str	r2, [r4, #8]
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	60a3      	str	r3, [r4, #8]
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	6123      	str	r3, [r4, #16]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	f340 8087 	ble.w	800bb1c <_scanf_float+0x284>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	e765      	b.n	800b8e2 <_scanf_float+0x4a>
 800ba16:	eb1a 0105 	adds.w	r1, sl, r5
 800ba1a:	f47f af6f 	bne.w	800b8fc <_scanf_float+0x64>
 800ba1e:	6822      	ldr	r2, [r4, #0]
 800ba20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ba24:	6022      	str	r2, [r4, #0]
 800ba26:	460d      	mov	r5, r1
 800ba28:	468a      	mov	sl, r1
 800ba2a:	f806 3b01 	strb.w	r3, [r6], #1
 800ba2e:	e7e2      	b.n	800b9f6 <_scanf_float+0x15e>
 800ba30:	6822      	ldr	r2, [r4, #0]
 800ba32:	0610      	lsls	r0, r2, #24
 800ba34:	f57f af62 	bpl.w	800b8fc <_scanf_float+0x64>
 800ba38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	e7f4      	b.n	800ba2a <_scanf_float+0x192>
 800ba40:	f1ba 0f00 	cmp.w	sl, #0
 800ba44:	d10e      	bne.n	800ba64 <_scanf_float+0x1cc>
 800ba46:	f1b9 0f00 	cmp.w	r9, #0
 800ba4a:	d10e      	bne.n	800ba6a <_scanf_float+0x1d2>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba56:	d108      	bne.n	800ba6a <_scanf_float+0x1d2>
 800ba58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba5c:	6022      	str	r2, [r4, #0]
 800ba5e:	f04f 0a01 	mov.w	sl, #1
 800ba62:	e7e2      	b.n	800ba2a <_scanf_float+0x192>
 800ba64:	f1ba 0f02 	cmp.w	sl, #2
 800ba68:	d055      	beq.n	800bb16 <_scanf_float+0x27e>
 800ba6a:	2d01      	cmp	r5, #1
 800ba6c:	d002      	beq.n	800ba74 <_scanf_float+0x1dc>
 800ba6e:	2d04      	cmp	r5, #4
 800ba70:	f47f af44 	bne.w	800b8fc <_scanf_float+0x64>
 800ba74:	3501      	adds	r5, #1
 800ba76:	b2ed      	uxtb	r5, r5
 800ba78:	e7d7      	b.n	800ba2a <_scanf_float+0x192>
 800ba7a:	f1ba 0f01 	cmp.w	sl, #1
 800ba7e:	f47f af3d 	bne.w	800b8fc <_scanf_float+0x64>
 800ba82:	f04f 0a02 	mov.w	sl, #2
 800ba86:	e7d0      	b.n	800ba2a <_scanf_float+0x192>
 800ba88:	b97d      	cbnz	r5, 800baaa <_scanf_float+0x212>
 800ba8a:	f1b9 0f00 	cmp.w	r9, #0
 800ba8e:	f47f af38 	bne.w	800b902 <_scanf_float+0x6a>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba9c:	f040 8108 	bne.w	800bcb0 <_scanf_float+0x418>
 800baa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800baa4:	6022      	str	r2, [r4, #0]
 800baa6:	2501      	movs	r5, #1
 800baa8:	e7bf      	b.n	800ba2a <_scanf_float+0x192>
 800baaa:	2d03      	cmp	r5, #3
 800baac:	d0e2      	beq.n	800ba74 <_scanf_float+0x1dc>
 800baae:	2d05      	cmp	r5, #5
 800bab0:	e7de      	b.n	800ba70 <_scanf_float+0x1d8>
 800bab2:	2d02      	cmp	r5, #2
 800bab4:	f47f af22 	bne.w	800b8fc <_scanf_float+0x64>
 800bab8:	2503      	movs	r5, #3
 800baba:	e7b6      	b.n	800ba2a <_scanf_float+0x192>
 800babc:	2d06      	cmp	r5, #6
 800babe:	f47f af1d 	bne.w	800b8fc <_scanf_float+0x64>
 800bac2:	2507      	movs	r5, #7
 800bac4:	e7b1      	b.n	800ba2a <_scanf_float+0x192>
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	0591      	lsls	r1, r2, #22
 800baca:	f57f af17 	bpl.w	800b8fc <_scanf_float+0x64>
 800bace:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	f8cd 9008 	str.w	r9, [sp, #8]
 800bad8:	e7a7      	b.n	800ba2a <_scanf_float+0x192>
 800bada:	6822      	ldr	r2, [r4, #0]
 800badc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bae0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bae4:	d006      	beq.n	800baf4 <_scanf_float+0x25c>
 800bae6:	0550      	lsls	r0, r2, #21
 800bae8:	f57f af08 	bpl.w	800b8fc <_scanf_float+0x64>
 800baec:	f1b9 0f00 	cmp.w	r9, #0
 800baf0:	f000 80de 	beq.w	800bcb0 <_scanf_float+0x418>
 800baf4:	0591      	lsls	r1, r2, #22
 800baf6:	bf58      	it	pl
 800baf8:	9902      	ldrpl	r1, [sp, #8]
 800bafa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bafe:	bf58      	it	pl
 800bb00:	eba9 0101 	subpl.w	r1, r9, r1
 800bb04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb08:	bf58      	it	pl
 800bb0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb0e:	6022      	str	r2, [r4, #0]
 800bb10:	f04f 0900 	mov.w	r9, #0
 800bb14:	e789      	b.n	800ba2a <_scanf_float+0x192>
 800bb16:	f04f 0a03 	mov.w	sl, #3
 800bb1a:	e786      	b.n	800ba2a <_scanf_float+0x192>
 800bb1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb20:	4639      	mov	r1, r7
 800bb22:	4640      	mov	r0, r8
 800bb24:	4798      	blx	r3
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f43f aedb 	beq.w	800b8e2 <_scanf_float+0x4a>
 800bb2c:	e6e6      	b.n	800b8fc <_scanf_float+0x64>
 800bb2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb36:	463a      	mov	r2, r7
 800bb38:	4640      	mov	r0, r8
 800bb3a:	4798      	blx	r3
 800bb3c:	6923      	ldr	r3, [r4, #16]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	e6e8      	b.n	800b916 <_scanf_float+0x7e>
 800bb44:	1e6b      	subs	r3, r5, #1
 800bb46:	2b06      	cmp	r3, #6
 800bb48:	d824      	bhi.n	800bb94 <_scanf_float+0x2fc>
 800bb4a:	2d02      	cmp	r5, #2
 800bb4c:	d836      	bhi.n	800bbbc <_scanf_float+0x324>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	429e      	cmp	r6, r3
 800bb52:	f67f aee4 	bls.w	800b91e <_scanf_float+0x86>
 800bb56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb5e:	463a      	mov	r2, r7
 800bb60:	4640      	mov	r0, r8
 800bb62:	4798      	blx	r3
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	6123      	str	r3, [r4, #16]
 800bb6a:	e7f0      	b.n	800bb4e <_scanf_float+0x2b6>
 800bb6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bb74:	463a      	mov	r2, r7
 800bb76:	4640      	mov	r0, r8
 800bb78:	4798      	blx	r3
 800bb7a:	6923      	ldr	r3, [r4, #16]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb84:	fa5f fa8a 	uxtb.w	sl, sl
 800bb88:	f1ba 0f02 	cmp.w	sl, #2
 800bb8c:	d1ee      	bne.n	800bb6c <_scanf_float+0x2d4>
 800bb8e:	3d03      	subs	r5, #3
 800bb90:	b2ed      	uxtb	r5, r5
 800bb92:	1b76      	subs	r6, r6, r5
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	05da      	lsls	r2, r3, #23
 800bb98:	d530      	bpl.n	800bbfc <_scanf_float+0x364>
 800bb9a:	055b      	lsls	r3, r3, #21
 800bb9c:	d511      	bpl.n	800bbc2 <_scanf_float+0x32a>
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	429e      	cmp	r6, r3
 800bba2:	f67f aebc 	bls.w	800b91e <_scanf_float+0x86>
 800bba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbae:	463a      	mov	r2, r7
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4798      	blx	r3
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	e7f0      	b.n	800bb9e <_scanf_float+0x306>
 800bbbc:	46aa      	mov	sl, r5
 800bbbe:	46b3      	mov	fp, r6
 800bbc0:	e7de      	b.n	800bb80 <_scanf_float+0x2e8>
 800bbc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	2965      	cmp	r1, #101	@ 0x65
 800bbca:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbce:	f106 35ff 	add.w	r5, r6, #4294967295
 800bbd2:	6123      	str	r3, [r4, #16]
 800bbd4:	d00c      	beq.n	800bbf0 <_scanf_float+0x358>
 800bbd6:	2945      	cmp	r1, #69	@ 0x45
 800bbd8:	d00a      	beq.n	800bbf0 <_scanf_float+0x358>
 800bbda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbde:	463a      	mov	r2, r7
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4798      	blx	r3
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	1eb5      	subs	r5, r6, #2
 800bbee:	6123      	str	r3, [r4, #16]
 800bbf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	4798      	blx	r3
 800bbfa:	462e      	mov	r6, r5
 800bbfc:	6822      	ldr	r2, [r4, #0]
 800bbfe:	f012 0210 	ands.w	r2, r2, #16
 800bc02:	d001      	beq.n	800bc08 <_scanf_float+0x370>
 800bc04:	2000      	movs	r0, #0
 800bc06:	e68b      	b.n	800b920 <_scanf_float+0x88>
 800bc08:	7032      	strb	r2, [r6, #0]
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc14:	d11c      	bne.n	800bc50 <_scanf_float+0x3b8>
 800bc16:	9b02      	ldr	r3, [sp, #8]
 800bc18:	454b      	cmp	r3, r9
 800bc1a:	eba3 0209 	sub.w	r2, r3, r9
 800bc1e:	d123      	bne.n	800bc68 <_scanf_float+0x3d0>
 800bc20:	9901      	ldr	r1, [sp, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	4640      	mov	r0, r8
 800bc26:	f7ff f953 	bl	800aed0 <_strtod_r>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	6821      	ldr	r1, [r4, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f011 0f02 	tst.w	r1, #2
 800bc34:	ec57 6b10 	vmov	r6, r7, d0
 800bc38:	f103 0204 	add.w	r2, r3, #4
 800bc3c:	d01f      	beq.n	800bc7e <_scanf_float+0x3e6>
 800bc3e:	9903      	ldr	r1, [sp, #12]
 800bc40:	600a      	str	r2, [r1, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	e9c3 6700 	strd	r6, r7, [r3]
 800bc48:	68e3      	ldr	r3, [r4, #12]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	60e3      	str	r3, [r4, #12]
 800bc4e:	e7d9      	b.n	800bc04 <_scanf_float+0x36c>
 800bc50:	9b04      	ldr	r3, [sp, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0e4      	beq.n	800bc20 <_scanf_float+0x388>
 800bc56:	9905      	ldr	r1, [sp, #20]
 800bc58:	230a      	movs	r3, #10
 800bc5a:	3101      	adds	r1, #1
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	f7ff f9b7 	bl	800afd0 <_strtol_r>
 800bc62:	9b04      	ldr	r3, [sp, #16]
 800bc64:	9e05      	ldr	r6, [sp, #20]
 800bc66:	1ac2      	subs	r2, r0, r3
 800bc68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bc6c:	429e      	cmp	r6, r3
 800bc6e:	bf28      	it	cs
 800bc70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bc74:	4910      	ldr	r1, [pc, #64]	@ (800bcb8 <_scanf_float+0x420>)
 800bc76:	4630      	mov	r0, r6
 800bc78:	f000 f8e4 	bl	800be44 <siprintf>
 800bc7c:	e7d0      	b.n	800bc20 <_scanf_float+0x388>
 800bc7e:	f011 0f04 	tst.w	r1, #4
 800bc82:	9903      	ldr	r1, [sp, #12]
 800bc84:	600a      	str	r2, [r1, #0]
 800bc86:	d1dc      	bne.n	800bc42 <_scanf_float+0x3aa>
 800bc88:	681d      	ldr	r5, [r3, #0]
 800bc8a:	4632      	mov	r2, r6
 800bc8c:	463b      	mov	r3, r7
 800bc8e:	4630      	mov	r0, r6
 800bc90:	4639      	mov	r1, r7
 800bc92:	f7f4 ff5b 	bl	8000b4c <__aeabi_dcmpun>
 800bc96:	b128      	cbz	r0, 800bca4 <_scanf_float+0x40c>
 800bc98:	4808      	ldr	r0, [pc, #32]	@ (800bcbc <_scanf_float+0x424>)
 800bc9a:	f000 fa1d 	bl	800c0d8 <nanf>
 800bc9e:	ed85 0a00 	vstr	s0, [r5]
 800bca2:	e7d1      	b.n	800bc48 <_scanf_float+0x3b0>
 800bca4:	4630      	mov	r0, r6
 800bca6:	4639      	mov	r1, r7
 800bca8:	f7f4 ffae 	bl	8000c08 <__aeabi_d2f>
 800bcac:	6028      	str	r0, [r5, #0]
 800bcae:	e7cb      	b.n	800bc48 <_scanf_float+0x3b0>
 800bcb0:	f04f 0900 	mov.w	r9, #0
 800bcb4:	e629      	b.n	800b90a <_scanf_float+0x72>
 800bcb6:	bf00      	nop
 800bcb8:	0801040b 	.word	0x0801040b
 800bcbc:	080106c7 	.word	0x080106c7

0800bcc0 <std>:
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	b510      	push	{r4, lr}
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	e9c0 3300 	strd	r3, r3, [r0]
 800bcca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcce:	6083      	str	r3, [r0, #8]
 800bcd0:	8181      	strh	r1, [r0, #12]
 800bcd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcd4:	81c2      	strh	r2, [r0, #14]
 800bcd6:	6183      	str	r3, [r0, #24]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	2208      	movs	r2, #8
 800bcdc:	305c      	adds	r0, #92	@ 0x5c
 800bcde:	f000 f940 	bl	800bf62 <memset>
 800bce2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <std+0x58>)
 800bce4:	6263      	str	r3, [r4, #36]	@ 0x24
 800bce6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd1c <std+0x5c>)
 800bce8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bcea:	4b0d      	ldr	r3, [pc, #52]	@ (800bd20 <std+0x60>)
 800bcec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bcee:	4b0d      	ldr	r3, [pc, #52]	@ (800bd24 <std+0x64>)
 800bcf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <std+0x68>)
 800bcf4:	6224      	str	r4, [r4, #32]
 800bcf6:	429c      	cmp	r4, r3
 800bcf8:	d006      	beq.n	800bd08 <std+0x48>
 800bcfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bcfe:	4294      	cmp	r4, r2
 800bd00:	d002      	beq.n	800bd08 <std+0x48>
 800bd02:	33d0      	adds	r3, #208	@ 0xd0
 800bd04:	429c      	cmp	r4, r3
 800bd06:	d105      	bne.n	800bd14 <std+0x54>
 800bd08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd10:	f000 b9c6 	b.w	800c0a0 <__retarget_lock_init_recursive>
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	bf00      	nop
 800bd18:	0800bed9 	.word	0x0800bed9
 800bd1c:	0800beff 	.word	0x0800beff
 800bd20:	0800bf37 	.word	0x0800bf37
 800bd24:	0800bf5b 	.word	0x0800bf5b
 800bd28:	2000053c 	.word	0x2000053c

0800bd2c <stdio_exit_handler>:
 800bd2c:	4a02      	ldr	r2, [pc, #8]	@ (800bd38 <stdio_exit_handler+0xc>)
 800bd2e:	4903      	ldr	r1, [pc, #12]	@ (800bd3c <stdio_exit_handler+0x10>)
 800bd30:	4803      	ldr	r0, [pc, #12]	@ (800bd40 <stdio_exit_handler+0x14>)
 800bd32:	f000 b869 	b.w	800be08 <_fwalk_sglue>
 800bd36:	bf00      	nop
 800bd38:	20000018 	.word	0x20000018
 800bd3c:	0800e825 	.word	0x0800e825
 800bd40:	20000194 	.word	0x20000194

0800bd44 <cleanup_stdio>:
 800bd44:	6841      	ldr	r1, [r0, #4]
 800bd46:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <cleanup_stdio+0x34>)
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	b510      	push	{r4, lr}
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	d001      	beq.n	800bd54 <cleanup_stdio+0x10>
 800bd50:	f002 fd68 	bl	800e824 <_fflush_r>
 800bd54:	68a1      	ldr	r1, [r4, #8]
 800bd56:	4b09      	ldr	r3, [pc, #36]	@ (800bd7c <cleanup_stdio+0x38>)
 800bd58:	4299      	cmp	r1, r3
 800bd5a:	d002      	beq.n	800bd62 <cleanup_stdio+0x1e>
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f002 fd61 	bl	800e824 <_fflush_r>
 800bd62:	68e1      	ldr	r1, [r4, #12]
 800bd64:	4b06      	ldr	r3, [pc, #24]	@ (800bd80 <cleanup_stdio+0x3c>)
 800bd66:	4299      	cmp	r1, r3
 800bd68:	d004      	beq.n	800bd74 <cleanup_stdio+0x30>
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd70:	f002 bd58 	b.w	800e824 <_fflush_r>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	bf00      	nop
 800bd78:	2000053c 	.word	0x2000053c
 800bd7c:	200005a4 	.word	0x200005a4
 800bd80:	2000060c 	.word	0x2000060c

0800bd84 <global_stdio_init.part.0>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb4 <global_stdio_init.part.0+0x30>)
 800bd88:	4c0b      	ldr	r4, [pc, #44]	@ (800bdb8 <global_stdio_init.part.0+0x34>)
 800bd8a:	4a0c      	ldr	r2, [pc, #48]	@ (800bdbc <global_stdio_init.part.0+0x38>)
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	2200      	movs	r2, #0
 800bd92:	2104      	movs	r1, #4
 800bd94:	f7ff ff94 	bl	800bcc0 <std>
 800bd98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	2109      	movs	r1, #9
 800bda0:	f7ff ff8e 	bl	800bcc0 <std>
 800bda4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bda8:	2202      	movs	r2, #2
 800bdaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdae:	2112      	movs	r1, #18
 800bdb0:	f7ff bf86 	b.w	800bcc0 <std>
 800bdb4:	20000674 	.word	0x20000674
 800bdb8:	2000053c 	.word	0x2000053c
 800bdbc:	0800bd2d 	.word	0x0800bd2d

0800bdc0 <__sfp_lock_acquire>:
 800bdc0:	4801      	ldr	r0, [pc, #4]	@ (800bdc8 <__sfp_lock_acquire+0x8>)
 800bdc2:	f000 b96e 	b.w	800c0a2 <__retarget_lock_acquire_recursive>
 800bdc6:	bf00      	nop
 800bdc8:	2000067d 	.word	0x2000067d

0800bdcc <__sfp_lock_release>:
 800bdcc:	4801      	ldr	r0, [pc, #4]	@ (800bdd4 <__sfp_lock_release+0x8>)
 800bdce:	f000 b969 	b.w	800c0a4 <__retarget_lock_release_recursive>
 800bdd2:	bf00      	nop
 800bdd4:	2000067d 	.word	0x2000067d

0800bdd8 <__sinit>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	4604      	mov	r4, r0
 800bddc:	f7ff fff0 	bl	800bdc0 <__sfp_lock_acquire>
 800bde0:	6a23      	ldr	r3, [r4, #32]
 800bde2:	b11b      	cbz	r3, 800bdec <__sinit+0x14>
 800bde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde8:	f7ff bff0 	b.w	800bdcc <__sfp_lock_release>
 800bdec:	4b04      	ldr	r3, [pc, #16]	@ (800be00 <__sinit+0x28>)
 800bdee:	6223      	str	r3, [r4, #32]
 800bdf0:	4b04      	ldr	r3, [pc, #16]	@ (800be04 <__sinit+0x2c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1f5      	bne.n	800bde4 <__sinit+0xc>
 800bdf8:	f7ff ffc4 	bl	800bd84 <global_stdio_init.part.0>
 800bdfc:	e7f2      	b.n	800bde4 <__sinit+0xc>
 800bdfe:	bf00      	nop
 800be00:	0800bd45 	.word	0x0800bd45
 800be04:	20000674 	.word	0x20000674

0800be08 <_fwalk_sglue>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4607      	mov	r7, r0
 800be0e:	4688      	mov	r8, r1
 800be10:	4614      	mov	r4, r2
 800be12:	2600      	movs	r6, #0
 800be14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be18:	f1b9 0901 	subs.w	r9, r9, #1
 800be1c:	d505      	bpl.n	800be2a <_fwalk_sglue+0x22>
 800be1e:	6824      	ldr	r4, [r4, #0]
 800be20:	2c00      	cmp	r4, #0
 800be22:	d1f7      	bne.n	800be14 <_fwalk_sglue+0xc>
 800be24:	4630      	mov	r0, r6
 800be26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d907      	bls.n	800be40 <_fwalk_sglue+0x38>
 800be30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be34:	3301      	adds	r3, #1
 800be36:	d003      	beq.n	800be40 <_fwalk_sglue+0x38>
 800be38:	4629      	mov	r1, r5
 800be3a:	4638      	mov	r0, r7
 800be3c:	47c0      	blx	r8
 800be3e:	4306      	orrs	r6, r0
 800be40:	3568      	adds	r5, #104	@ 0x68
 800be42:	e7e9      	b.n	800be18 <_fwalk_sglue+0x10>

0800be44 <siprintf>:
 800be44:	b40e      	push	{r1, r2, r3}
 800be46:	b500      	push	{lr}
 800be48:	b09c      	sub	sp, #112	@ 0x70
 800be4a:	ab1d      	add	r3, sp, #116	@ 0x74
 800be4c:	9002      	str	r0, [sp, #8]
 800be4e:	9006      	str	r0, [sp, #24]
 800be50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be54:	4809      	ldr	r0, [pc, #36]	@ (800be7c <siprintf+0x38>)
 800be56:	9107      	str	r1, [sp, #28]
 800be58:	9104      	str	r1, [sp, #16]
 800be5a:	4909      	ldr	r1, [pc, #36]	@ (800be80 <siprintf+0x3c>)
 800be5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be60:	9105      	str	r1, [sp, #20]
 800be62:	6800      	ldr	r0, [r0, #0]
 800be64:	9301      	str	r3, [sp, #4]
 800be66:	a902      	add	r1, sp, #8
 800be68:	f002 f842 	bl	800def0 <_svfiprintf_r>
 800be6c:	9b02      	ldr	r3, [sp, #8]
 800be6e:	2200      	movs	r2, #0
 800be70:	701a      	strb	r2, [r3, #0]
 800be72:	b01c      	add	sp, #112	@ 0x70
 800be74:	f85d eb04 	ldr.w	lr, [sp], #4
 800be78:	b003      	add	sp, #12
 800be7a:	4770      	bx	lr
 800be7c:	20000190 	.word	0x20000190
 800be80:	ffff0208 	.word	0xffff0208

0800be84 <siscanf>:
 800be84:	b40e      	push	{r1, r2, r3}
 800be86:	b530      	push	{r4, r5, lr}
 800be88:	b09c      	sub	sp, #112	@ 0x70
 800be8a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800be8c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800be90:	f854 5b04 	ldr.w	r5, [r4], #4
 800be94:	f8ad 2014 	strh.w	r2, [sp, #20]
 800be98:	9002      	str	r0, [sp, #8]
 800be9a:	9006      	str	r0, [sp, #24]
 800be9c:	f7f4 f9f8 	bl	8000290 <strlen>
 800bea0:	4b0b      	ldr	r3, [pc, #44]	@ (800bed0 <siscanf+0x4c>)
 800bea2:	9003      	str	r0, [sp, #12]
 800bea4:	9007      	str	r0, [sp, #28]
 800bea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bea8:	480a      	ldr	r0, [pc, #40]	@ (800bed4 <siscanf+0x50>)
 800beaa:	9401      	str	r4, [sp, #4]
 800beac:	2300      	movs	r3, #0
 800beae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800beb0:	9314      	str	r3, [sp, #80]	@ 0x50
 800beb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800beb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800beba:	462a      	mov	r2, r5
 800bebc:	4623      	mov	r3, r4
 800bebe:	a902      	add	r1, sp, #8
 800bec0:	6800      	ldr	r0, [r0, #0]
 800bec2:	f002 f969 	bl	800e198 <__ssvfiscanf_r>
 800bec6:	b01c      	add	sp, #112	@ 0x70
 800bec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800becc:	b003      	add	sp, #12
 800bece:	4770      	bx	lr
 800bed0:	0800befb 	.word	0x0800befb
 800bed4:	20000190 	.word	0x20000190

0800bed8 <__sread>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	460c      	mov	r4, r1
 800bedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee0:	f000 f880 	bl	800bfe4 <_read_r>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	bfab      	itete	ge
 800bee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800beea:	89a3      	ldrhlt	r3, [r4, #12]
 800beec:	181b      	addge	r3, r3, r0
 800beee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bef2:	bfac      	ite	ge
 800bef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bef6:	81a3      	strhlt	r3, [r4, #12]
 800bef8:	bd10      	pop	{r4, pc}

0800befa <__seofread>:
 800befa:	2000      	movs	r0, #0
 800befc:	4770      	bx	lr

0800befe <__swrite>:
 800befe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf02:	461f      	mov	r7, r3
 800bf04:	898b      	ldrh	r3, [r1, #12]
 800bf06:	05db      	lsls	r3, r3, #23
 800bf08:	4605      	mov	r5, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	d505      	bpl.n	800bf1c <__swrite+0x1e>
 800bf10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf14:	2302      	movs	r3, #2
 800bf16:	2200      	movs	r2, #0
 800bf18:	f000 f852 	bl	800bfc0 <_lseek_r>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	4632      	mov	r2, r6
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf32:	f000 b879 	b.w	800c028 <_write_r>

0800bf36 <__sseek>:
 800bf36:	b510      	push	{r4, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf3e:	f000 f83f 	bl	800bfc0 <_lseek_r>
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	bf15      	itete	ne
 800bf48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf52:	81a3      	strheq	r3, [r4, #12]
 800bf54:	bf18      	it	ne
 800bf56:	81a3      	strhne	r3, [r4, #12]
 800bf58:	bd10      	pop	{r4, pc}

0800bf5a <__sclose>:
 800bf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5e:	f000 b81f 	b.w	800bfa0 <_close_r>

0800bf62 <memset>:
 800bf62:	4402      	add	r2, r0
 800bf64:	4603      	mov	r3, r0
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d100      	bne.n	800bf6c <memset+0xa>
 800bf6a:	4770      	bx	lr
 800bf6c:	f803 1b01 	strb.w	r1, [r3], #1
 800bf70:	e7f9      	b.n	800bf66 <memset+0x4>

0800bf72 <strncmp>:
 800bf72:	b510      	push	{r4, lr}
 800bf74:	b16a      	cbz	r2, 800bf92 <strncmp+0x20>
 800bf76:	3901      	subs	r1, #1
 800bf78:	1884      	adds	r4, r0, r2
 800bf7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d103      	bne.n	800bf8e <strncmp+0x1c>
 800bf86:	42a0      	cmp	r0, r4
 800bf88:	d001      	beq.n	800bf8e <strncmp+0x1c>
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	d1f5      	bne.n	800bf7a <strncmp+0x8>
 800bf8e:	1ad0      	subs	r0, r2, r3
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	4610      	mov	r0, r2
 800bf94:	e7fc      	b.n	800bf90 <strncmp+0x1e>
	...

0800bf98 <_localeconv_r>:
 800bf98:	4800      	ldr	r0, [pc, #0]	@ (800bf9c <_localeconv_r+0x4>)
 800bf9a:	4770      	bx	lr
 800bf9c:	20000114 	.word	0x20000114

0800bfa0 <_close_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	4d06      	ldr	r5, [pc, #24]	@ (800bfbc <_close_r+0x1c>)
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	602b      	str	r3, [r5, #0]
 800bfac:	f7f7 fc36 	bl	800381c <_close>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d102      	bne.n	800bfba <_close_r+0x1a>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	b103      	cbz	r3, 800bfba <_close_r+0x1a>
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	20000678 	.word	0x20000678

0800bfc0 <_lseek_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4d07      	ldr	r5, [pc, #28]	@ (800bfe0 <_lseek_r+0x20>)
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	4608      	mov	r0, r1
 800bfc8:	4611      	mov	r1, r2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	602a      	str	r2, [r5, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f7f7 fc4b 	bl	800386a <_lseek>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d102      	bne.n	800bfde <_lseek_r+0x1e>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	b103      	cbz	r3, 800bfde <_lseek_r+0x1e>
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	20000678 	.word	0x20000678

0800bfe4 <_read_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d07      	ldr	r5, [pc, #28]	@ (800c004 <_read_r+0x20>)
 800bfe8:	4604      	mov	r4, r0
 800bfea:	4608      	mov	r0, r1
 800bfec:	4611      	mov	r1, r2
 800bfee:	2200      	movs	r2, #0
 800bff0:	602a      	str	r2, [r5, #0]
 800bff2:	461a      	mov	r2, r3
 800bff4:	f7f7 fbd9 	bl	80037aa <_read>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	d102      	bne.n	800c002 <_read_r+0x1e>
 800bffc:	682b      	ldr	r3, [r5, #0]
 800bffe:	b103      	cbz	r3, 800c002 <_read_r+0x1e>
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	20000678 	.word	0x20000678

0800c008 <_sbrk_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d06      	ldr	r5, [pc, #24]	@ (800c024 <_sbrk_r+0x1c>)
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	4608      	mov	r0, r1
 800c012:	602b      	str	r3, [r5, #0]
 800c014:	f7f7 fc36 	bl	8003884 <_sbrk>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d102      	bne.n	800c022 <_sbrk_r+0x1a>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	b103      	cbz	r3, 800c022 <_sbrk_r+0x1a>
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	20000678 	.word	0x20000678

0800c028 <_write_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d07      	ldr	r5, [pc, #28]	@ (800c048 <_write_r+0x20>)
 800c02c:	4604      	mov	r4, r0
 800c02e:	4608      	mov	r0, r1
 800c030:	4611      	mov	r1, r2
 800c032:	2200      	movs	r2, #0
 800c034:	602a      	str	r2, [r5, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	f7f7 fbd4 	bl	80037e4 <_write>
 800c03c:	1c43      	adds	r3, r0, #1
 800c03e:	d102      	bne.n	800c046 <_write_r+0x1e>
 800c040:	682b      	ldr	r3, [r5, #0]
 800c042:	b103      	cbz	r3, 800c046 <_write_r+0x1e>
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	20000678 	.word	0x20000678

0800c04c <__errno>:
 800c04c:	4b01      	ldr	r3, [pc, #4]	@ (800c054 <__errno+0x8>)
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	20000190 	.word	0x20000190

0800c058 <__libc_init_array>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	4d0d      	ldr	r5, [pc, #52]	@ (800c090 <__libc_init_array+0x38>)
 800c05c:	4c0d      	ldr	r4, [pc, #52]	@ (800c094 <__libc_init_array+0x3c>)
 800c05e:	1b64      	subs	r4, r4, r5
 800c060:	10a4      	asrs	r4, r4, #2
 800c062:	2600      	movs	r6, #0
 800c064:	42a6      	cmp	r6, r4
 800c066:	d109      	bne.n	800c07c <__libc_init_array+0x24>
 800c068:	4d0b      	ldr	r5, [pc, #44]	@ (800c098 <__libc_init_array+0x40>)
 800c06a:	4c0c      	ldr	r4, [pc, #48]	@ (800c09c <__libc_init_array+0x44>)
 800c06c:	f004 f86c 	bl	8010148 <_init>
 800c070:	1b64      	subs	r4, r4, r5
 800c072:	10a4      	asrs	r4, r4, #2
 800c074:	2600      	movs	r6, #0
 800c076:	42a6      	cmp	r6, r4
 800c078:	d105      	bne.n	800c086 <__libc_init_array+0x2e>
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c080:	4798      	blx	r3
 800c082:	3601      	adds	r6, #1
 800c084:	e7ee      	b.n	800c064 <__libc_init_array+0xc>
 800c086:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08a:	4798      	blx	r3
 800c08c:	3601      	adds	r6, #1
 800c08e:	e7f2      	b.n	800c076 <__libc_init_array+0x1e>
 800c090:	080108a8 	.word	0x080108a8
 800c094:	080108a8 	.word	0x080108a8
 800c098:	080108a8 	.word	0x080108a8
 800c09c:	080108ac 	.word	0x080108ac

0800c0a0 <__retarget_lock_init_recursive>:
 800c0a0:	4770      	bx	lr

0800c0a2 <__retarget_lock_acquire_recursive>:
 800c0a2:	4770      	bx	lr

0800c0a4 <__retarget_lock_release_recursive>:
 800c0a4:	4770      	bx	lr

0800c0a6 <memcpy>:
 800c0a6:	440a      	add	r2, r1
 800c0a8:	4291      	cmp	r1, r2
 800c0aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0ae:	d100      	bne.n	800c0b2 <memcpy+0xc>
 800c0b0:	4770      	bx	lr
 800c0b2:	b510      	push	{r4, lr}
 800c0b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0bc:	4291      	cmp	r1, r2
 800c0be:	d1f9      	bne.n	800c0b4 <memcpy+0xe>
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	0000      	movs	r0, r0
 800c0c4:	0000      	movs	r0, r0
	...

0800c0c8 <nan>:
 800c0c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c0d0 <nan+0x8>
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	00000000 	.word	0x00000000
 800c0d4:	7ff80000 	.word	0x7ff80000

0800c0d8 <nanf>:
 800c0d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c0e0 <nanf+0x8>
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	7fc00000 	.word	0x7fc00000

0800c0e4 <quorem>:
 800c0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	6903      	ldr	r3, [r0, #16]
 800c0ea:	690c      	ldr	r4, [r1, #16]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	db7e      	blt.n	800c1f0 <quorem+0x10c>
 800c0f2:	3c01      	subs	r4, #1
 800c0f4:	f101 0814 	add.w	r8, r1, #20
 800c0f8:	00a3      	lsls	r3, r4, #2
 800c0fa:	f100 0514 	add.w	r5, r0, #20
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c10a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10e:	3301      	adds	r3, #1
 800c110:	429a      	cmp	r2, r3
 800c112:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c116:	fbb2 f6f3 	udiv	r6, r2, r3
 800c11a:	d32e      	bcc.n	800c17a <quorem+0x96>
 800c11c:	f04f 0a00 	mov.w	sl, #0
 800c120:	46c4      	mov	ip, r8
 800c122:	46ae      	mov	lr, r5
 800c124:	46d3      	mov	fp, sl
 800c126:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c12a:	b298      	uxth	r0, r3
 800c12c:	fb06 a000 	mla	r0, r6, r0, sl
 800c130:	0c02      	lsrs	r2, r0, #16
 800c132:	0c1b      	lsrs	r3, r3, #16
 800c134:	fb06 2303 	mla	r3, r6, r3, r2
 800c138:	f8de 2000 	ldr.w	r2, [lr]
 800c13c:	b280      	uxth	r0, r0
 800c13e:	b292      	uxth	r2, r2
 800c140:	1a12      	subs	r2, r2, r0
 800c142:	445a      	add	r2, fp
 800c144:	f8de 0000 	ldr.w	r0, [lr]
 800c148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c152:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c156:	b292      	uxth	r2, r2
 800c158:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c15c:	45e1      	cmp	r9, ip
 800c15e:	f84e 2b04 	str.w	r2, [lr], #4
 800c162:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c166:	d2de      	bcs.n	800c126 <quorem+0x42>
 800c168:	9b00      	ldr	r3, [sp, #0]
 800c16a:	58eb      	ldr	r3, [r5, r3]
 800c16c:	b92b      	cbnz	r3, 800c17a <quorem+0x96>
 800c16e:	9b01      	ldr	r3, [sp, #4]
 800c170:	3b04      	subs	r3, #4
 800c172:	429d      	cmp	r5, r3
 800c174:	461a      	mov	r2, r3
 800c176:	d32f      	bcc.n	800c1d8 <quorem+0xf4>
 800c178:	613c      	str	r4, [r7, #16]
 800c17a:	4638      	mov	r0, r7
 800c17c:	f001 fc5a 	bl	800da34 <__mcmp>
 800c180:	2800      	cmp	r0, #0
 800c182:	db25      	blt.n	800c1d0 <quorem+0xec>
 800c184:	4629      	mov	r1, r5
 800c186:	2000      	movs	r0, #0
 800c188:	f858 2b04 	ldr.w	r2, [r8], #4
 800c18c:	f8d1 c000 	ldr.w	ip, [r1]
 800c190:	fa1f fe82 	uxth.w	lr, r2
 800c194:	fa1f f38c 	uxth.w	r3, ip
 800c198:	eba3 030e 	sub.w	r3, r3, lr
 800c19c:	4403      	add	r3, r0
 800c19e:	0c12      	lsrs	r2, r2, #16
 800c1a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c1a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1ae:	45c1      	cmp	r9, r8
 800c1b0:	f841 3b04 	str.w	r3, [r1], #4
 800c1b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c1b8:	d2e6      	bcs.n	800c188 <quorem+0xa4>
 800c1ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1c2:	b922      	cbnz	r2, 800c1ce <quorem+0xea>
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	429d      	cmp	r5, r3
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	d30b      	bcc.n	800c1e4 <quorem+0x100>
 800c1cc:	613c      	str	r4, [r7, #16]
 800c1ce:	3601      	adds	r6, #1
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	b003      	add	sp, #12
 800c1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d8:	6812      	ldr	r2, [r2, #0]
 800c1da:	3b04      	subs	r3, #4
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	d1cb      	bne.n	800c178 <quorem+0x94>
 800c1e0:	3c01      	subs	r4, #1
 800c1e2:	e7c6      	b.n	800c172 <quorem+0x8e>
 800c1e4:	6812      	ldr	r2, [r2, #0]
 800c1e6:	3b04      	subs	r3, #4
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	d1ef      	bne.n	800c1cc <quorem+0xe8>
 800c1ec:	3c01      	subs	r4, #1
 800c1ee:	e7ea      	b.n	800c1c6 <quorem+0xe2>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7ee      	b.n	800c1d2 <quorem+0xee>
 800c1f4:	0000      	movs	r0, r0
	...

0800c1f8 <_dtoa_r>:
 800c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	69c7      	ldr	r7, [r0, #28]
 800c1fe:	b099      	sub	sp, #100	@ 0x64
 800c200:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c204:	ec55 4b10 	vmov	r4, r5, d0
 800c208:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c20a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c20c:	4683      	mov	fp, r0
 800c20e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c210:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c212:	b97f      	cbnz	r7, 800c234 <_dtoa_r+0x3c>
 800c214:	2010      	movs	r0, #16
 800c216:	f7fd ff63 	bl	800a0e0 <malloc>
 800c21a:	4602      	mov	r2, r0
 800c21c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c220:	b920      	cbnz	r0, 800c22c <_dtoa_r+0x34>
 800c222:	4ba7      	ldr	r3, [pc, #668]	@ (800c4c0 <_dtoa_r+0x2c8>)
 800c224:	21ef      	movs	r1, #239	@ 0xef
 800c226:	48a7      	ldr	r0, [pc, #668]	@ (800c4c4 <_dtoa_r+0x2cc>)
 800c228:	f002 fbb2 	bl	800e990 <__assert_func>
 800c22c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c230:	6007      	str	r7, [r0, #0]
 800c232:	60c7      	str	r7, [r0, #12]
 800c234:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c238:	6819      	ldr	r1, [r3, #0]
 800c23a:	b159      	cbz	r1, 800c254 <_dtoa_r+0x5c>
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	604a      	str	r2, [r1, #4]
 800c240:	2301      	movs	r3, #1
 800c242:	4093      	lsls	r3, r2
 800c244:	608b      	str	r3, [r1, #8]
 800c246:	4658      	mov	r0, fp
 800c248:	f001 f970 	bl	800d52c <_Bfree>
 800c24c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c250:	2200      	movs	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	1e2b      	subs	r3, r5, #0
 800c256:	bfb9      	ittee	lt
 800c258:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c25c:	9303      	strlt	r3, [sp, #12]
 800c25e:	2300      	movge	r3, #0
 800c260:	6033      	strge	r3, [r6, #0]
 800c262:	9f03      	ldr	r7, [sp, #12]
 800c264:	4b98      	ldr	r3, [pc, #608]	@ (800c4c8 <_dtoa_r+0x2d0>)
 800c266:	bfbc      	itt	lt
 800c268:	2201      	movlt	r2, #1
 800c26a:	6032      	strlt	r2, [r6, #0]
 800c26c:	43bb      	bics	r3, r7
 800c26e:	d112      	bne.n	800c296 <_dtoa_r+0x9e>
 800c270:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c272:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c27c:	4323      	orrs	r3, r4
 800c27e:	f000 854d 	beq.w	800cd1c <_dtoa_r+0xb24>
 800c282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c284:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c4dc <_dtoa_r+0x2e4>
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f000 854f 	beq.w	800cd2c <_dtoa_r+0xb34>
 800c28e:	f10a 0303 	add.w	r3, sl, #3
 800c292:	f000 bd49 	b.w	800cd28 <_dtoa_r+0xb30>
 800c296:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c29a:	2200      	movs	r2, #0
 800c29c:	ec51 0b17 	vmov	r0, r1, d7
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c2a6:	f7f4 fc1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2aa:	4680      	mov	r8, r0
 800c2ac:	b158      	cbz	r0, 800c2c6 <_dtoa_r+0xce>
 800c2ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	6013      	str	r3, [r2, #0]
 800c2b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2b6:	b113      	cbz	r3, 800c2be <_dtoa_r+0xc6>
 800c2b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c2ba:	4b84      	ldr	r3, [pc, #528]	@ (800c4cc <_dtoa_r+0x2d4>)
 800c2bc:	6013      	str	r3, [r2, #0]
 800c2be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c4e0 <_dtoa_r+0x2e8>
 800c2c2:	f000 bd33 	b.w	800cd2c <_dtoa_r+0xb34>
 800c2c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c2ca:	aa16      	add	r2, sp, #88	@ 0x58
 800c2cc:	a917      	add	r1, sp, #92	@ 0x5c
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	f001 fcd0 	bl	800dc74 <__d2b>
 800c2d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c2d8:	4681      	mov	r9, r0
 800c2da:	2e00      	cmp	r6, #0
 800c2dc:	d077      	beq.n	800c3ce <_dtoa_r+0x1d6>
 800c2de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c2f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c2f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	4b74      	ldr	r3, [pc, #464]	@ (800c4d0 <_dtoa_r+0x2d8>)
 800c2fe:	f7f3 ffd3 	bl	80002a8 <__aeabi_dsub>
 800c302:	a369      	add	r3, pc, #420	@ (adr r3, 800c4a8 <_dtoa_r+0x2b0>)
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	f7f4 f986 	bl	8000618 <__aeabi_dmul>
 800c30c:	a368      	add	r3, pc, #416	@ (adr r3, 800c4b0 <_dtoa_r+0x2b8>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f3 ffcb 	bl	80002ac <__adddf3>
 800c316:	4604      	mov	r4, r0
 800c318:	4630      	mov	r0, r6
 800c31a:	460d      	mov	r5, r1
 800c31c:	f7f4 f912 	bl	8000544 <__aeabi_i2d>
 800c320:	a365      	add	r3, pc, #404	@ (adr r3, 800c4b8 <_dtoa_r+0x2c0>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f4 f977 	bl	8000618 <__aeabi_dmul>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	4620      	mov	r0, r4
 800c330:	4629      	mov	r1, r5
 800c332:	f7f3 ffbb 	bl	80002ac <__adddf3>
 800c336:	4604      	mov	r4, r0
 800c338:	460d      	mov	r5, r1
 800c33a:	f7f4 fc1d 	bl	8000b78 <__aeabi_d2iz>
 800c33e:	2200      	movs	r2, #0
 800c340:	4607      	mov	r7, r0
 800c342:	2300      	movs	r3, #0
 800c344:	4620      	mov	r0, r4
 800c346:	4629      	mov	r1, r5
 800c348:	f7f4 fbd8 	bl	8000afc <__aeabi_dcmplt>
 800c34c:	b140      	cbz	r0, 800c360 <_dtoa_r+0x168>
 800c34e:	4638      	mov	r0, r7
 800c350:	f7f4 f8f8 	bl	8000544 <__aeabi_i2d>
 800c354:	4622      	mov	r2, r4
 800c356:	462b      	mov	r3, r5
 800c358:	f7f4 fbc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c35c:	b900      	cbnz	r0, 800c360 <_dtoa_r+0x168>
 800c35e:	3f01      	subs	r7, #1
 800c360:	2f16      	cmp	r7, #22
 800c362:	d851      	bhi.n	800c408 <_dtoa_r+0x210>
 800c364:	4b5b      	ldr	r3, [pc, #364]	@ (800c4d4 <_dtoa_r+0x2dc>)
 800c366:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c372:	f7f4 fbc3 	bl	8000afc <__aeabi_dcmplt>
 800c376:	2800      	cmp	r0, #0
 800c378:	d048      	beq.n	800c40c <_dtoa_r+0x214>
 800c37a:	3f01      	subs	r7, #1
 800c37c:	2300      	movs	r3, #0
 800c37e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c380:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c382:	1b9b      	subs	r3, r3, r6
 800c384:	1e5a      	subs	r2, r3, #1
 800c386:	bf44      	itt	mi
 800c388:	f1c3 0801 	rsbmi	r8, r3, #1
 800c38c:	2300      	movmi	r3, #0
 800c38e:	9208      	str	r2, [sp, #32]
 800c390:	bf54      	ite	pl
 800c392:	f04f 0800 	movpl.w	r8, #0
 800c396:	9308      	strmi	r3, [sp, #32]
 800c398:	2f00      	cmp	r7, #0
 800c39a:	db39      	blt.n	800c410 <_dtoa_r+0x218>
 800c39c:	9b08      	ldr	r3, [sp, #32]
 800c39e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c3a0:	443b      	add	r3, r7
 800c3a2:	9308      	str	r3, [sp, #32]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3aa:	2b09      	cmp	r3, #9
 800c3ac:	d864      	bhi.n	800c478 <_dtoa_r+0x280>
 800c3ae:	2b05      	cmp	r3, #5
 800c3b0:	bfc4      	itt	gt
 800c3b2:	3b04      	subgt	r3, #4
 800c3b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b8:	f1a3 0302 	sub.w	r3, r3, #2
 800c3bc:	bfcc      	ite	gt
 800c3be:	2400      	movgt	r4, #0
 800c3c0:	2401      	movle	r4, #1
 800c3c2:	2b03      	cmp	r3, #3
 800c3c4:	d863      	bhi.n	800c48e <_dtoa_r+0x296>
 800c3c6:	e8df f003 	tbb	[pc, r3]
 800c3ca:	372a      	.short	0x372a
 800c3cc:	5535      	.short	0x5535
 800c3ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c3d2:	441e      	add	r6, r3
 800c3d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c3d8:	2b20      	cmp	r3, #32
 800c3da:	bfc1      	itttt	gt
 800c3dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c3e0:	409f      	lslgt	r7, r3
 800c3e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c3e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c3ea:	bfd6      	itet	le
 800c3ec:	f1c3 0320 	rsble	r3, r3, #32
 800c3f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c3f4:	fa04 f003 	lslle.w	r0, r4, r3
 800c3f8:	f7f4 f894 	bl	8000524 <__aeabi_ui2d>
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c402:	3e01      	subs	r6, #1
 800c404:	9214      	str	r2, [sp, #80]	@ 0x50
 800c406:	e777      	b.n	800c2f8 <_dtoa_r+0x100>
 800c408:	2301      	movs	r3, #1
 800c40a:	e7b8      	b.n	800c37e <_dtoa_r+0x186>
 800c40c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c40e:	e7b7      	b.n	800c380 <_dtoa_r+0x188>
 800c410:	427b      	negs	r3, r7
 800c412:	930a      	str	r3, [sp, #40]	@ 0x28
 800c414:	2300      	movs	r3, #0
 800c416:	eba8 0807 	sub.w	r8, r8, r7
 800c41a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c41c:	e7c4      	b.n	800c3a8 <_dtoa_r+0x1b0>
 800c41e:	2300      	movs	r3, #0
 800c420:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c424:	2b00      	cmp	r3, #0
 800c426:	dc35      	bgt.n	800c494 <_dtoa_r+0x29c>
 800c428:	2301      	movs	r3, #1
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	9307      	str	r3, [sp, #28]
 800c42e:	461a      	mov	r2, r3
 800c430:	920e      	str	r2, [sp, #56]	@ 0x38
 800c432:	e00b      	b.n	800c44c <_dtoa_r+0x254>
 800c434:	2301      	movs	r3, #1
 800c436:	e7f3      	b.n	800c420 <_dtoa_r+0x228>
 800c438:	2300      	movs	r3, #0
 800c43a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c43e:	18fb      	adds	r3, r7, r3
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	2b01      	cmp	r3, #1
 800c446:	9307      	str	r3, [sp, #28]
 800c448:	bfb8      	it	lt
 800c44a:	2301      	movlt	r3, #1
 800c44c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c450:	2100      	movs	r1, #0
 800c452:	2204      	movs	r2, #4
 800c454:	f102 0514 	add.w	r5, r2, #20
 800c458:	429d      	cmp	r5, r3
 800c45a:	d91f      	bls.n	800c49c <_dtoa_r+0x2a4>
 800c45c:	6041      	str	r1, [r0, #4]
 800c45e:	4658      	mov	r0, fp
 800c460:	f001 f824 	bl	800d4ac <_Balloc>
 800c464:	4682      	mov	sl, r0
 800c466:	2800      	cmp	r0, #0
 800c468:	d13c      	bne.n	800c4e4 <_dtoa_r+0x2ec>
 800c46a:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d8 <_dtoa_r+0x2e0>)
 800c46c:	4602      	mov	r2, r0
 800c46e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c472:	e6d8      	b.n	800c226 <_dtoa_r+0x2e>
 800c474:	2301      	movs	r3, #1
 800c476:	e7e0      	b.n	800c43a <_dtoa_r+0x242>
 800c478:	2401      	movs	r4, #1
 800c47a:	2300      	movs	r3, #0
 800c47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c47e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c480:	f04f 33ff 	mov.w	r3, #4294967295
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	9307      	str	r3, [sp, #28]
 800c488:	2200      	movs	r2, #0
 800c48a:	2312      	movs	r3, #18
 800c48c:	e7d0      	b.n	800c430 <_dtoa_r+0x238>
 800c48e:	2301      	movs	r3, #1
 800c490:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c492:	e7f5      	b.n	800c480 <_dtoa_r+0x288>
 800c494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	9307      	str	r3, [sp, #28]
 800c49a:	e7d7      	b.n	800c44c <_dtoa_r+0x254>
 800c49c:	3101      	adds	r1, #1
 800c49e:	0052      	lsls	r2, r2, #1
 800c4a0:	e7d8      	b.n	800c454 <_dtoa_r+0x25c>
 800c4a2:	bf00      	nop
 800c4a4:	f3af 8000 	nop.w
 800c4a8:	636f4361 	.word	0x636f4361
 800c4ac:	3fd287a7 	.word	0x3fd287a7
 800c4b0:	8b60c8b3 	.word	0x8b60c8b3
 800c4b4:	3fc68a28 	.word	0x3fc68a28
 800c4b8:	509f79fb 	.word	0x509f79fb
 800c4bc:	3fd34413 	.word	0x3fd34413
 800c4c0:	08010425 	.word	0x08010425
 800c4c4:	0801043c 	.word	0x0801043c
 800c4c8:	7ff00000 	.word	0x7ff00000
 800c4cc:	08010688 	.word	0x08010688
 800c4d0:	3ff80000 	.word	0x3ff80000
 800c4d4:	08010598 	.word	0x08010598
 800c4d8:	08010494 	.word	0x08010494
 800c4dc:	08010421 	.word	0x08010421
 800c4e0:	08010687 	.word	0x08010687
 800c4e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c4e8:	6018      	str	r0, [r3, #0]
 800c4ea:	9b07      	ldr	r3, [sp, #28]
 800c4ec:	2b0e      	cmp	r3, #14
 800c4ee:	f200 80a4 	bhi.w	800c63a <_dtoa_r+0x442>
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	f000 80a1 	beq.w	800c63a <_dtoa_r+0x442>
 800c4f8:	2f00      	cmp	r7, #0
 800c4fa:	dd33      	ble.n	800c564 <_dtoa_r+0x36c>
 800c4fc:	4bad      	ldr	r3, [pc, #692]	@ (800c7b4 <_dtoa_r+0x5bc>)
 800c4fe:	f007 020f 	and.w	r2, r7, #15
 800c502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c506:	ed93 7b00 	vldr	d7, [r3]
 800c50a:	05f8      	lsls	r0, r7, #23
 800c50c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c510:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c514:	d516      	bpl.n	800c544 <_dtoa_r+0x34c>
 800c516:	4ba8      	ldr	r3, [pc, #672]	@ (800c7b8 <_dtoa_r+0x5c0>)
 800c518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c51c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c520:	f7f4 f9a4 	bl	800086c <__aeabi_ddiv>
 800c524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c528:	f004 040f 	and.w	r4, r4, #15
 800c52c:	2603      	movs	r6, #3
 800c52e:	4da2      	ldr	r5, [pc, #648]	@ (800c7b8 <_dtoa_r+0x5c0>)
 800c530:	b954      	cbnz	r4, 800c548 <_dtoa_r+0x350>
 800c532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c53a:	f7f4 f997 	bl	800086c <__aeabi_ddiv>
 800c53e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c542:	e028      	b.n	800c596 <_dtoa_r+0x39e>
 800c544:	2602      	movs	r6, #2
 800c546:	e7f2      	b.n	800c52e <_dtoa_r+0x336>
 800c548:	07e1      	lsls	r1, r4, #31
 800c54a:	d508      	bpl.n	800c55e <_dtoa_r+0x366>
 800c54c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c550:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c554:	f7f4 f860 	bl	8000618 <__aeabi_dmul>
 800c558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c55c:	3601      	adds	r6, #1
 800c55e:	1064      	asrs	r4, r4, #1
 800c560:	3508      	adds	r5, #8
 800c562:	e7e5      	b.n	800c530 <_dtoa_r+0x338>
 800c564:	f000 80d2 	beq.w	800c70c <_dtoa_r+0x514>
 800c568:	427c      	negs	r4, r7
 800c56a:	4b92      	ldr	r3, [pc, #584]	@ (800c7b4 <_dtoa_r+0x5bc>)
 800c56c:	4d92      	ldr	r5, [pc, #584]	@ (800c7b8 <_dtoa_r+0x5c0>)
 800c56e:	f004 020f 	and.w	r2, r4, #15
 800c572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c57e:	f7f4 f84b 	bl	8000618 <__aeabi_dmul>
 800c582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c586:	1124      	asrs	r4, r4, #4
 800c588:	2300      	movs	r3, #0
 800c58a:	2602      	movs	r6, #2
 800c58c:	2c00      	cmp	r4, #0
 800c58e:	f040 80b2 	bne.w	800c6f6 <_dtoa_r+0x4fe>
 800c592:	2b00      	cmp	r3, #0
 800c594:	d1d3      	bne.n	800c53e <_dtoa_r+0x346>
 800c596:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c598:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 80b7 	beq.w	800c710 <_dtoa_r+0x518>
 800c5a2:	4b86      	ldr	r3, [pc, #536]	@ (800c7bc <_dtoa_r+0x5c4>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	f7f4 faa7 	bl	8000afc <__aeabi_dcmplt>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f000 80ae 	beq.w	800c710 <_dtoa_r+0x518>
 800c5b4:	9b07      	ldr	r3, [sp, #28]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 80aa 	beq.w	800c710 <_dtoa_r+0x518>
 800c5bc:	9b00      	ldr	r3, [sp, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	dd37      	ble.n	800c632 <_dtoa_r+0x43a>
 800c5c2:	1e7b      	subs	r3, r7, #1
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4b7d      	ldr	r3, [pc, #500]	@ (800c7c0 <_dtoa_r+0x5c8>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7f4 f823 	bl	8000618 <__aeabi_dmul>
 800c5d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5d6:	9c00      	ldr	r4, [sp, #0]
 800c5d8:	3601      	adds	r6, #1
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f7f3 ffb2 	bl	8000544 <__aeabi_i2d>
 800c5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5e4:	f7f4 f818 	bl	8000618 <__aeabi_dmul>
 800c5e8:	4b76      	ldr	r3, [pc, #472]	@ (800c7c4 <_dtoa_r+0x5cc>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f7f3 fe5e 	bl	80002ac <__adddf3>
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c5f6:	2c00      	cmp	r4, #0
 800c5f8:	f040 808d 	bne.w	800c716 <_dtoa_r+0x51e>
 800c5fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c600:	4b71      	ldr	r3, [pc, #452]	@ (800c7c8 <_dtoa_r+0x5d0>)
 800c602:	2200      	movs	r2, #0
 800c604:	f7f3 fe50 	bl	80002a8 <__aeabi_dsub>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c610:	462a      	mov	r2, r5
 800c612:	4633      	mov	r3, r6
 800c614:	f7f4 fa90 	bl	8000b38 <__aeabi_dcmpgt>
 800c618:	2800      	cmp	r0, #0
 800c61a:	f040 828b 	bne.w	800cb34 <_dtoa_r+0x93c>
 800c61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c622:	462a      	mov	r2, r5
 800c624:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c628:	f7f4 fa68 	bl	8000afc <__aeabi_dcmplt>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	f040 8128 	bne.w	800c882 <_dtoa_r+0x68a>
 800c632:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c636:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c63a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f2c0 815a 	blt.w	800c8f6 <_dtoa_r+0x6fe>
 800c642:	2f0e      	cmp	r7, #14
 800c644:	f300 8157 	bgt.w	800c8f6 <_dtoa_r+0x6fe>
 800c648:	4b5a      	ldr	r3, [pc, #360]	@ (800c7b4 <_dtoa_r+0x5bc>)
 800c64a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c64e:	ed93 7b00 	vldr	d7, [r3]
 800c652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c654:	2b00      	cmp	r3, #0
 800c656:	ed8d 7b00 	vstr	d7, [sp]
 800c65a:	da03      	bge.n	800c664 <_dtoa_r+0x46c>
 800c65c:	9b07      	ldr	r3, [sp, #28]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f340 8101 	ble.w	800c866 <_dtoa_r+0x66e>
 800c664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c668:	4656      	mov	r6, sl
 800c66a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c66e:	4620      	mov	r0, r4
 800c670:	4629      	mov	r1, r5
 800c672:	f7f4 f8fb 	bl	800086c <__aeabi_ddiv>
 800c676:	f7f4 fa7f 	bl	8000b78 <__aeabi_d2iz>
 800c67a:	4680      	mov	r8, r0
 800c67c:	f7f3 ff62 	bl	8000544 <__aeabi_i2d>
 800c680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c684:	f7f3 ffc8 	bl	8000618 <__aeabi_dmul>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	4620      	mov	r0, r4
 800c68e:	4629      	mov	r1, r5
 800c690:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c694:	f7f3 fe08 	bl	80002a8 <__aeabi_dsub>
 800c698:	f806 4b01 	strb.w	r4, [r6], #1
 800c69c:	9d07      	ldr	r5, [sp, #28]
 800c69e:	eba6 040a 	sub.w	r4, r6, sl
 800c6a2:	42a5      	cmp	r5, r4
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	f040 8117 	bne.w	800c8da <_dtoa_r+0x6e2>
 800c6ac:	f7f3 fdfe 	bl	80002ac <__adddf3>
 800c6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	460d      	mov	r5, r1
 800c6b8:	f7f4 fa3e 	bl	8000b38 <__aeabi_dcmpgt>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f040 80f9 	bne.w	800c8b4 <_dtoa_r+0x6bc>
 800c6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	f7f4 fa0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c6ce:	b118      	cbz	r0, 800c6d8 <_dtoa_r+0x4e0>
 800c6d0:	f018 0f01 	tst.w	r8, #1
 800c6d4:	f040 80ee 	bne.w	800c8b4 <_dtoa_r+0x6bc>
 800c6d8:	4649      	mov	r1, r9
 800c6da:	4658      	mov	r0, fp
 800c6dc:	f000 ff26 	bl	800d52c <_Bfree>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	7033      	strb	r3, [r6, #0]
 800c6e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c6e6:	3701      	adds	r7, #1
 800c6e8:	601f      	str	r7, [r3, #0]
 800c6ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f000 831d 	beq.w	800cd2c <_dtoa_r+0xb34>
 800c6f2:	601e      	str	r6, [r3, #0]
 800c6f4:	e31a      	b.n	800cd2c <_dtoa_r+0xb34>
 800c6f6:	07e2      	lsls	r2, r4, #31
 800c6f8:	d505      	bpl.n	800c706 <_dtoa_r+0x50e>
 800c6fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6fe:	f7f3 ff8b 	bl	8000618 <__aeabi_dmul>
 800c702:	3601      	adds	r6, #1
 800c704:	2301      	movs	r3, #1
 800c706:	1064      	asrs	r4, r4, #1
 800c708:	3508      	adds	r5, #8
 800c70a:	e73f      	b.n	800c58c <_dtoa_r+0x394>
 800c70c:	2602      	movs	r6, #2
 800c70e:	e742      	b.n	800c596 <_dtoa_r+0x39e>
 800c710:	9c07      	ldr	r4, [sp, #28]
 800c712:	9704      	str	r7, [sp, #16]
 800c714:	e761      	b.n	800c5da <_dtoa_r+0x3e2>
 800c716:	4b27      	ldr	r3, [pc, #156]	@ (800c7b4 <_dtoa_r+0x5bc>)
 800c718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c71a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c71e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c722:	4454      	add	r4, sl
 800c724:	2900      	cmp	r1, #0
 800c726:	d053      	beq.n	800c7d0 <_dtoa_r+0x5d8>
 800c728:	4928      	ldr	r1, [pc, #160]	@ (800c7cc <_dtoa_r+0x5d4>)
 800c72a:	2000      	movs	r0, #0
 800c72c:	f7f4 f89e 	bl	800086c <__aeabi_ddiv>
 800c730:	4633      	mov	r3, r6
 800c732:	462a      	mov	r2, r5
 800c734:	f7f3 fdb8 	bl	80002a8 <__aeabi_dsub>
 800c738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c73c:	4656      	mov	r6, sl
 800c73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c742:	f7f4 fa19 	bl	8000b78 <__aeabi_d2iz>
 800c746:	4605      	mov	r5, r0
 800c748:	f7f3 fefc 	bl	8000544 <__aeabi_i2d>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c754:	f7f3 fda8 	bl	80002a8 <__aeabi_dsub>
 800c758:	3530      	adds	r5, #48	@ 0x30
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c762:	f806 5b01 	strb.w	r5, [r6], #1
 800c766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c76a:	f7f4 f9c7 	bl	8000afc <__aeabi_dcmplt>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d171      	bne.n	800c856 <_dtoa_r+0x65e>
 800c772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c776:	4911      	ldr	r1, [pc, #68]	@ (800c7bc <_dtoa_r+0x5c4>)
 800c778:	2000      	movs	r0, #0
 800c77a:	f7f3 fd95 	bl	80002a8 <__aeabi_dsub>
 800c77e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c782:	f7f4 f9bb 	bl	8000afc <__aeabi_dcmplt>
 800c786:	2800      	cmp	r0, #0
 800c788:	f040 8095 	bne.w	800c8b6 <_dtoa_r+0x6be>
 800c78c:	42a6      	cmp	r6, r4
 800c78e:	f43f af50 	beq.w	800c632 <_dtoa_r+0x43a>
 800c792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c796:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c0 <_dtoa_r+0x5c8>)
 800c798:	2200      	movs	r2, #0
 800c79a:	f7f3 ff3d 	bl	8000618 <__aeabi_dmul>
 800c79e:	4b08      	ldr	r3, [pc, #32]	@ (800c7c0 <_dtoa_r+0x5c8>)
 800c7a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7aa:	f7f3 ff35 	bl	8000618 <__aeabi_dmul>
 800c7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7b2:	e7c4      	b.n	800c73e <_dtoa_r+0x546>
 800c7b4:	08010598 	.word	0x08010598
 800c7b8:	08010570 	.word	0x08010570
 800c7bc:	3ff00000 	.word	0x3ff00000
 800c7c0:	40240000 	.word	0x40240000
 800c7c4:	401c0000 	.word	0x401c0000
 800c7c8:	40140000 	.word	0x40140000
 800c7cc:	3fe00000 	.word	0x3fe00000
 800c7d0:	4631      	mov	r1, r6
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f7f3 ff20 	bl	8000618 <__aeabi_dmul>
 800c7d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c7dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800c7de:	4656      	mov	r6, sl
 800c7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7e4:	f7f4 f9c8 	bl	8000b78 <__aeabi_d2iz>
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	f7f3 feab 	bl	8000544 <__aeabi_i2d>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7f6:	f7f3 fd57 	bl	80002a8 <__aeabi_dsub>
 800c7fa:	3530      	adds	r5, #48	@ 0x30
 800c7fc:	f806 5b01 	strb.w	r5, [r6], #1
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	42a6      	cmp	r6, r4
 800c806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c80a:	f04f 0200 	mov.w	r2, #0
 800c80e:	d124      	bne.n	800c85a <_dtoa_r+0x662>
 800c810:	4bac      	ldr	r3, [pc, #688]	@ (800cac4 <_dtoa_r+0x8cc>)
 800c812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c816:	f7f3 fd49 	bl	80002ac <__adddf3>
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c822:	f7f4 f989 	bl	8000b38 <__aeabi_dcmpgt>
 800c826:	2800      	cmp	r0, #0
 800c828:	d145      	bne.n	800c8b6 <_dtoa_r+0x6be>
 800c82a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c82e:	49a5      	ldr	r1, [pc, #660]	@ (800cac4 <_dtoa_r+0x8cc>)
 800c830:	2000      	movs	r0, #0
 800c832:	f7f3 fd39 	bl	80002a8 <__aeabi_dsub>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c83e:	f7f4 f95d 	bl	8000afc <__aeabi_dcmplt>
 800c842:	2800      	cmp	r0, #0
 800c844:	f43f aef5 	beq.w	800c632 <_dtoa_r+0x43a>
 800c848:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c84a:	1e73      	subs	r3, r6, #1
 800c84c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c84e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c852:	2b30      	cmp	r3, #48	@ 0x30
 800c854:	d0f8      	beq.n	800c848 <_dtoa_r+0x650>
 800c856:	9f04      	ldr	r7, [sp, #16]
 800c858:	e73e      	b.n	800c6d8 <_dtoa_r+0x4e0>
 800c85a:	4b9b      	ldr	r3, [pc, #620]	@ (800cac8 <_dtoa_r+0x8d0>)
 800c85c:	f7f3 fedc 	bl	8000618 <__aeabi_dmul>
 800c860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c864:	e7bc      	b.n	800c7e0 <_dtoa_r+0x5e8>
 800c866:	d10c      	bne.n	800c882 <_dtoa_r+0x68a>
 800c868:	4b98      	ldr	r3, [pc, #608]	@ (800cacc <_dtoa_r+0x8d4>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c870:	f7f3 fed2 	bl	8000618 <__aeabi_dmul>
 800c874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c878:	f7f4 f954 	bl	8000b24 <__aeabi_dcmpge>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	f000 8157 	beq.w	800cb30 <_dtoa_r+0x938>
 800c882:	2400      	movs	r4, #0
 800c884:	4625      	mov	r5, r4
 800c886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c888:	43db      	mvns	r3, r3
 800c88a:	9304      	str	r3, [sp, #16]
 800c88c:	4656      	mov	r6, sl
 800c88e:	2700      	movs	r7, #0
 800c890:	4621      	mov	r1, r4
 800c892:	4658      	mov	r0, fp
 800c894:	f000 fe4a 	bl	800d52c <_Bfree>
 800c898:	2d00      	cmp	r5, #0
 800c89a:	d0dc      	beq.n	800c856 <_dtoa_r+0x65e>
 800c89c:	b12f      	cbz	r7, 800c8aa <_dtoa_r+0x6b2>
 800c89e:	42af      	cmp	r7, r5
 800c8a0:	d003      	beq.n	800c8aa <_dtoa_r+0x6b2>
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	4658      	mov	r0, fp
 800c8a6:	f000 fe41 	bl	800d52c <_Bfree>
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4658      	mov	r0, fp
 800c8ae:	f000 fe3d 	bl	800d52c <_Bfree>
 800c8b2:	e7d0      	b.n	800c856 <_dtoa_r+0x65e>
 800c8b4:	9704      	str	r7, [sp, #16]
 800c8b6:	4633      	mov	r3, r6
 800c8b8:	461e      	mov	r6, r3
 800c8ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8be:	2a39      	cmp	r2, #57	@ 0x39
 800c8c0:	d107      	bne.n	800c8d2 <_dtoa_r+0x6da>
 800c8c2:	459a      	cmp	sl, r3
 800c8c4:	d1f8      	bne.n	800c8b8 <_dtoa_r+0x6c0>
 800c8c6:	9a04      	ldr	r2, [sp, #16]
 800c8c8:	3201      	adds	r2, #1
 800c8ca:	9204      	str	r2, [sp, #16]
 800c8cc:	2230      	movs	r2, #48	@ 0x30
 800c8ce:	f88a 2000 	strb.w	r2, [sl]
 800c8d2:	781a      	ldrb	r2, [r3, #0]
 800c8d4:	3201      	adds	r2, #1
 800c8d6:	701a      	strb	r2, [r3, #0]
 800c8d8:	e7bd      	b.n	800c856 <_dtoa_r+0x65e>
 800c8da:	4b7b      	ldr	r3, [pc, #492]	@ (800cac8 <_dtoa_r+0x8d0>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f7f3 fe9b 	bl	8000618 <__aeabi_dmul>
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	f7f4 f8fd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f43f aebb 	beq.w	800c66a <_dtoa_r+0x472>
 800c8f4:	e6f0      	b.n	800c6d8 <_dtoa_r+0x4e0>
 800c8f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c8f8:	2a00      	cmp	r2, #0
 800c8fa:	f000 80db 	beq.w	800cab4 <_dtoa_r+0x8bc>
 800c8fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c900:	2a01      	cmp	r2, #1
 800c902:	f300 80bf 	bgt.w	800ca84 <_dtoa_r+0x88c>
 800c906:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c908:	2a00      	cmp	r2, #0
 800c90a:	f000 80b7 	beq.w	800ca7c <_dtoa_r+0x884>
 800c90e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c912:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c914:	4646      	mov	r6, r8
 800c916:	9a08      	ldr	r2, [sp, #32]
 800c918:	2101      	movs	r1, #1
 800c91a:	441a      	add	r2, r3
 800c91c:	4658      	mov	r0, fp
 800c91e:	4498      	add	r8, r3
 800c920:	9208      	str	r2, [sp, #32]
 800c922:	f000 ff01 	bl	800d728 <__i2b>
 800c926:	4605      	mov	r5, r0
 800c928:	b15e      	cbz	r6, 800c942 <_dtoa_r+0x74a>
 800c92a:	9b08      	ldr	r3, [sp, #32]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dd08      	ble.n	800c942 <_dtoa_r+0x74a>
 800c930:	42b3      	cmp	r3, r6
 800c932:	9a08      	ldr	r2, [sp, #32]
 800c934:	bfa8      	it	ge
 800c936:	4633      	movge	r3, r6
 800c938:	eba8 0803 	sub.w	r8, r8, r3
 800c93c:	1af6      	subs	r6, r6, r3
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	9308      	str	r3, [sp, #32]
 800c942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c944:	b1f3      	cbz	r3, 800c984 <_dtoa_r+0x78c>
 800c946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 80b7 	beq.w	800cabc <_dtoa_r+0x8c4>
 800c94e:	b18c      	cbz	r4, 800c974 <_dtoa_r+0x77c>
 800c950:	4629      	mov	r1, r5
 800c952:	4622      	mov	r2, r4
 800c954:	4658      	mov	r0, fp
 800c956:	f000 ffa7 	bl	800d8a8 <__pow5mult>
 800c95a:	464a      	mov	r2, r9
 800c95c:	4601      	mov	r1, r0
 800c95e:	4605      	mov	r5, r0
 800c960:	4658      	mov	r0, fp
 800c962:	f000 fef7 	bl	800d754 <__multiply>
 800c966:	4649      	mov	r1, r9
 800c968:	9004      	str	r0, [sp, #16]
 800c96a:	4658      	mov	r0, fp
 800c96c:	f000 fdde 	bl	800d52c <_Bfree>
 800c970:	9b04      	ldr	r3, [sp, #16]
 800c972:	4699      	mov	r9, r3
 800c974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c976:	1b1a      	subs	r2, r3, r4
 800c978:	d004      	beq.n	800c984 <_dtoa_r+0x78c>
 800c97a:	4649      	mov	r1, r9
 800c97c:	4658      	mov	r0, fp
 800c97e:	f000 ff93 	bl	800d8a8 <__pow5mult>
 800c982:	4681      	mov	r9, r0
 800c984:	2101      	movs	r1, #1
 800c986:	4658      	mov	r0, fp
 800c988:	f000 fece 	bl	800d728 <__i2b>
 800c98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c98e:	4604      	mov	r4, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 81cf 	beq.w	800cd34 <_dtoa_r+0xb3c>
 800c996:	461a      	mov	r2, r3
 800c998:	4601      	mov	r1, r0
 800c99a:	4658      	mov	r0, fp
 800c99c:	f000 ff84 	bl	800d8a8 <__pow5mult>
 800c9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	f300 8095 	bgt.w	800cad4 <_dtoa_r+0x8dc>
 800c9aa:	9b02      	ldr	r3, [sp, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f040 8087 	bne.w	800cac0 <_dtoa_r+0x8c8>
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f040 8089 	bne.w	800cad0 <_dtoa_r+0x8d8>
 800c9be:	9b03      	ldr	r3, [sp, #12]
 800c9c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9c4:	0d1b      	lsrs	r3, r3, #20
 800c9c6:	051b      	lsls	r3, r3, #20
 800c9c8:	b12b      	cbz	r3, 800c9d6 <_dtoa_r+0x7de>
 800c9ca:	9b08      	ldr	r3, [sp, #32]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	9308      	str	r3, [sp, #32]
 800c9d0:	f108 0801 	add.w	r8, r8, #1
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 81b0 	beq.w	800cd40 <_dtoa_r+0xb48>
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9e6:	6918      	ldr	r0, [r3, #16]
 800c9e8:	f000 fe52 	bl	800d690 <__hi0bits>
 800c9ec:	f1c0 0020 	rsb	r0, r0, #32
 800c9f0:	9b08      	ldr	r3, [sp, #32]
 800c9f2:	4418      	add	r0, r3
 800c9f4:	f010 001f 	ands.w	r0, r0, #31
 800c9f8:	d077      	beq.n	800caea <_dtoa_r+0x8f2>
 800c9fa:	f1c0 0320 	rsb	r3, r0, #32
 800c9fe:	2b04      	cmp	r3, #4
 800ca00:	dd6b      	ble.n	800cada <_dtoa_r+0x8e2>
 800ca02:	9b08      	ldr	r3, [sp, #32]
 800ca04:	f1c0 001c 	rsb	r0, r0, #28
 800ca08:	4403      	add	r3, r0
 800ca0a:	4480      	add	r8, r0
 800ca0c:	4406      	add	r6, r0
 800ca0e:	9308      	str	r3, [sp, #32]
 800ca10:	f1b8 0f00 	cmp.w	r8, #0
 800ca14:	dd05      	ble.n	800ca22 <_dtoa_r+0x82a>
 800ca16:	4649      	mov	r1, r9
 800ca18:	4642      	mov	r2, r8
 800ca1a:	4658      	mov	r0, fp
 800ca1c:	f000 ff9e 	bl	800d95c <__lshift>
 800ca20:	4681      	mov	r9, r0
 800ca22:	9b08      	ldr	r3, [sp, #32]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dd05      	ble.n	800ca34 <_dtoa_r+0x83c>
 800ca28:	4621      	mov	r1, r4
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4658      	mov	r0, fp
 800ca2e:	f000 ff95 	bl	800d95c <__lshift>
 800ca32:	4604      	mov	r4, r0
 800ca34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d059      	beq.n	800caee <_dtoa_r+0x8f6>
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4648      	mov	r0, r9
 800ca3e:	f000 fff9 	bl	800da34 <__mcmp>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	da53      	bge.n	800caee <_dtoa_r+0x8f6>
 800ca46:	1e7b      	subs	r3, r7, #1
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	220a      	movs	r2, #10
 800ca50:	4658      	mov	r0, fp
 800ca52:	f000 fd8d 	bl	800d570 <__multadd>
 800ca56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca58:	4681      	mov	r9, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f000 8172 	beq.w	800cd44 <_dtoa_r+0xb4c>
 800ca60:	2300      	movs	r3, #0
 800ca62:	4629      	mov	r1, r5
 800ca64:	220a      	movs	r2, #10
 800ca66:	4658      	mov	r0, fp
 800ca68:	f000 fd82 	bl	800d570 <__multadd>
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	4605      	mov	r5, r0
 800ca72:	dc67      	bgt.n	800cb44 <_dtoa_r+0x94c>
 800ca74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	dc41      	bgt.n	800cafe <_dtoa_r+0x906>
 800ca7a:	e063      	b.n	800cb44 <_dtoa_r+0x94c>
 800ca7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ca7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ca82:	e746      	b.n	800c912 <_dtoa_r+0x71a>
 800ca84:	9b07      	ldr	r3, [sp, #28]
 800ca86:	1e5c      	subs	r4, r3, #1
 800ca88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca8a:	42a3      	cmp	r3, r4
 800ca8c:	bfbf      	itttt	lt
 800ca8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ca90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ca92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ca94:	1ae3      	sublt	r3, r4, r3
 800ca96:	bfb4      	ite	lt
 800ca98:	18d2      	addlt	r2, r2, r3
 800ca9a:	1b1c      	subge	r4, r3, r4
 800ca9c:	9b07      	ldr	r3, [sp, #28]
 800ca9e:	bfbc      	itt	lt
 800caa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800caa2:	2400      	movlt	r4, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfb5      	itete	lt
 800caa8:	eba8 0603 	sublt.w	r6, r8, r3
 800caac:	9b07      	ldrge	r3, [sp, #28]
 800caae:	2300      	movlt	r3, #0
 800cab0:	4646      	movge	r6, r8
 800cab2:	e730      	b.n	800c916 <_dtoa_r+0x71e>
 800cab4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cab6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cab8:	4646      	mov	r6, r8
 800caba:	e735      	b.n	800c928 <_dtoa_r+0x730>
 800cabc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cabe:	e75c      	b.n	800c97a <_dtoa_r+0x782>
 800cac0:	2300      	movs	r3, #0
 800cac2:	e788      	b.n	800c9d6 <_dtoa_r+0x7de>
 800cac4:	3fe00000 	.word	0x3fe00000
 800cac8:	40240000 	.word	0x40240000
 800cacc:	40140000 	.word	0x40140000
 800cad0:	9b02      	ldr	r3, [sp, #8]
 800cad2:	e780      	b.n	800c9d6 <_dtoa_r+0x7de>
 800cad4:	2300      	movs	r3, #0
 800cad6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cad8:	e782      	b.n	800c9e0 <_dtoa_r+0x7e8>
 800cada:	d099      	beq.n	800ca10 <_dtoa_r+0x818>
 800cadc:	9a08      	ldr	r2, [sp, #32]
 800cade:	331c      	adds	r3, #28
 800cae0:	441a      	add	r2, r3
 800cae2:	4498      	add	r8, r3
 800cae4:	441e      	add	r6, r3
 800cae6:	9208      	str	r2, [sp, #32]
 800cae8:	e792      	b.n	800ca10 <_dtoa_r+0x818>
 800caea:	4603      	mov	r3, r0
 800caec:	e7f6      	b.n	800cadc <_dtoa_r+0x8e4>
 800caee:	9b07      	ldr	r3, [sp, #28]
 800caf0:	9704      	str	r7, [sp, #16]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	dc20      	bgt.n	800cb38 <_dtoa_r+0x940>
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	dd1e      	ble.n	800cb3c <_dtoa_r+0x944>
 800cafe:	9b00      	ldr	r3, [sp, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f47f aec0 	bne.w	800c886 <_dtoa_r+0x68e>
 800cb06:	4621      	mov	r1, r4
 800cb08:	2205      	movs	r2, #5
 800cb0a:	4658      	mov	r0, fp
 800cb0c:	f000 fd30 	bl	800d570 <__multadd>
 800cb10:	4601      	mov	r1, r0
 800cb12:	4604      	mov	r4, r0
 800cb14:	4648      	mov	r0, r9
 800cb16:	f000 ff8d 	bl	800da34 <__mcmp>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	f77f aeb3 	ble.w	800c886 <_dtoa_r+0x68e>
 800cb20:	4656      	mov	r6, sl
 800cb22:	2331      	movs	r3, #49	@ 0x31
 800cb24:	f806 3b01 	strb.w	r3, [r6], #1
 800cb28:	9b04      	ldr	r3, [sp, #16]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	9304      	str	r3, [sp, #16]
 800cb2e:	e6ae      	b.n	800c88e <_dtoa_r+0x696>
 800cb30:	9c07      	ldr	r4, [sp, #28]
 800cb32:	9704      	str	r7, [sp, #16]
 800cb34:	4625      	mov	r5, r4
 800cb36:	e7f3      	b.n	800cb20 <_dtoa_r+0x928>
 800cb38:	9b07      	ldr	r3, [sp, #28]
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f000 8104 	beq.w	800cd4c <_dtoa_r+0xb54>
 800cb44:	2e00      	cmp	r6, #0
 800cb46:	dd05      	ble.n	800cb54 <_dtoa_r+0x95c>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4632      	mov	r2, r6
 800cb4c:	4658      	mov	r0, fp
 800cb4e:	f000 ff05 	bl	800d95c <__lshift>
 800cb52:	4605      	mov	r5, r0
 800cb54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d05a      	beq.n	800cc10 <_dtoa_r+0xa18>
 800cb5a:	6869      	ldr	r1, [r5, #4]
 800cb5c:	4658      	mov	r0, fp
 800cb5e:	f000 fca5 	bl	800d4ac <_Balloc>
 800cb62:	4606      	mov	r6, r0
 800cb64:	b928      	cbnz	r0, 800cb72 <_dtoa_r+0x97a>
 800cb66:	4b84      	ldr	r3, [pc, #528]	@ (800cd78 <_dtoa_r+0xb80>)
 800cb68:	4602      	mov	r2, r0
 800cb6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb6e:	f7ff bb5a 	b.w	800c226 <_dtoa_r+0x2e>
 800cb72:	692a      	ldr	r2, [r5, #16]
 800cb74:	3202      	adds	r2, #2
 800cb76:	0092      	lsls	r2, r2, #2
 800cb78:	f105 010c 	add.w	r1, r5, #12
 800cb7c:	300c      	adds	r0, #12
 800cb7e:	f7ff fa92 	bl	800c0a6 <memcpy>
 800cb82:	2201      	movs	r2, #1
 800cb84:	4631      	mov	r1, r6
 800cb86:	4658      	mov	r0, fp
 800cb88:	f000 fee8 	bl	800d95c <__lshift>
 800cb8c:	f10a 0301 	add.w	r3, sl, #1
 800cb90:	9307      	str	r3, [sp, #28]
 800cb92:	9b00      	ldr	r3, [sp, #0]
 800cb94:	4453      	add	r3, sl
 800cb96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb98:	9b02      	ldr	r3, [sp, #8]
 800cb9a:	f003 0301 	and.w	r3, r3, #1
 800cb9e:	462f      	mov	r7, r5
 800cba0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cba2:	4605      	mov	r5, r0
 800cba4:	9b07      	ldr	r3, [sp, #28]
 800cba6:	4621      	mov	r1, r4
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	4648      	mov	r0, r9
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	f7ff fa99 	bl	800c0e4 <quorem>
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	9002      	str	r0, [sp, #8]
 800cbb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbba:	4648      	mov	r0, r9
 800cbbc:	f000 ff3a 	bl	800da34 <__mcmp>
 800cbc0:	462a      	mov	r2, r5
 800cbc2:	9008      	str	r0, [sp, #32]
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4658      	mov	r0, fp
 800cbc8:	f000 ff50 	bl	800da6c <__mdiff>
 800cbcc:	68c2      	ldr	r2, [r0, #12]
 800cbce:	4606      	mov	r6, r0
 800cbd0:	bb02      	cbnz	r2, 800cc14 <_dtoa_r+0xa1c>
 800cbd2:	4601      	mov	r1, r0
 800cbd4:	4648      	mov	r0, r9
 800cbd6:	f000 ff2d 	bl	800da34 <__mcmp>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4658      	mov	r0, fp
 800cbe0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbe2:	f000 fca3 	bl	800d52c <_Bfree>
 800cbe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbea:	9e07      	ldr	r6, [sp, #28]
 800cbec:	ea43 0102 	orr.w	r1, r3, r2
 800cbf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbf2:	4319      	orrs	r1, r3
 800cbf4:	d110      	bne.n	800cc18 <_dtoa_r+0xa20>
 800cbf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cbfa:	d029      	beq.n	800cc50 <_dtoa_r+0xa58>
 800cbfc:	9b08      	ldr	r3, [sp, #32]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	dd02      	ble.n	800cc08 <_dtoa_r+0xa10>
 800cc02:	9b02      	ldr	r3, [sp, #8]
 800cc04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cc08:	9b00      	ldr	r3, [sp, #0]
 800cc0a:	f883 8000 	strb.w	r8, [r3]
 800cc0e:	e63f      	b.n	800c890 <_dtoa_r+0x698>
 800cc10:	4628      	mov	r0, r5
 800cc12:	e7bb      	b.n	800cb8c <_dtoa_r+0x994>
 800cc14:	2201      	movs	r2, #1
 800cc16:	e7e1      	b.n	800cbdc <_dtoa_r+0x9e4>
 800cc18:	9b08      	ldr	r3, [sp, #32]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	db04      	blt.n	800cc28 <_dtoa_r+0xa30>
 800cc1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc20:	430b      	orrs	r3, r1
 800cc22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc24:	430b      	orrs	r3, r1
 800cc26:	d120      	bne.n	800cc6a <_dtoa_r+0xa72>
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	dded      	ble.n	800cc08 <_dtoa_r+0xa10>
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	2201      	movs	r2, #1
 800cc30:	4658      	mov	r0, fp
 800cc32:	f000 fe93 	bl	800d95c <__lshift>
 800cc36:	4621      	mov	r1, r4
 800cc38:	4681      	mov	r9, r0
 800cc3a:	f000 fefb 	bl	800da34 <__mcmp>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	dc03      	bgt.n	800cc4a <_dtoa_r+0xa52>
 800cc42:	d1e1      	bne.n	800cc08 <_dtoa_r+0xa10>
 800cc44:	f018 0f01 	tst.w	r8, #1
 800cc48:	d0de      	beq.n	800cc08 <_dtoa_r+0xa10>
 800cc4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc4e:	d1d8      	bne.n	800cc02 <_dtoa_r+0xa0a>
 800cc50:	9a00      	ldr	r2, [sp, #0]
 800cc52:	2339      	movs	r3, #57	@ 0x39
 800cc54:	7013      	strb	r3, [r2, #0]
 800cc56:	4633      	mov	r3, r6
 800cc58:	461e      	mov	r6, r3
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc60:	2a39      	cmp	r2, #57	@ 0x39
 800cc62:	d052      	beq.n	800cd0a <_dtoa_r+0xb12>
 800cc64:	3201      	adds	r2, #1
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	e612      	b.n	800c890 <_dtoa_r+0x698>
 800cc6a:	2a00      	cmp	r2, #0
 800cc6c:	dd07      	ble.n	800cc7e <_dtoa_r+0xa86>
 800cc6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc72:	d0ed      	beq.n	800cc50 <_dtoa_r+0xa58>
 800cc74:	9a00      	ldr	r2, [sp, #0]
 800cc76:	f108 0301 	add.w	r3, r8, #1
 800cc7a:	7013      	strb	r3, [r2, #0]
 800cc7c:	e608      	b.n	800c890 <_dtoa_r+0x698>
 800cc7e:	9b07      	ldr	r3, [sp, #28]
 800cc80:	9a07      	ldr	r2, [sp, #28]
 800cc82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d028      	beq.n	800ccde <_dtoa_r+0xae6>
 800cc8c:	4649      	mov	r1, r9
 800cc8e:	2300      	movs	r3, #0
 800cc90:	220a      	movs	r2, #10
 800cc92:	4658      	mov	r0, fp
 800cc94:	f000 fc6c 	bl	800d570 <__multadd>
 800cc98:	42af      	cmp	r7, r5
 800cc9a:	4681      	mov	r9, r0
 800cc9c:	f04f 0300 	mov.w	r3, #0
 800cca0:	f04f 020a 	mov.w	r2, #10
 800cca4:	4639      	mov	r1, r7
 800cca6:	4658      	mov	r0, fp
 800cca8:	d107      	bne.n	800ccba <_dtoa_r+0xac2>
 800ccaa:	f000 fc61 	bl	800d570 <__multadd>
 800ccae:	4607      	mov	r7, r0
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	9b07      	ldr	r3, [sp, #28]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	9307      	str	r3, [sp, #28]
 800ccb8:	e774      	b.n	800cba4 <_dtoa_r+0x9ac>
 800ccba:	f000 fc59 	bl	800d570 <__multadd>
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	220a      	movs	r2, #10
 800ccc6:	4658      	mov	r0, fp
 800ccc8:	f000 fc52 	bl	800d570 <__multadd>
 800cccc:	4605      	mov	r5, r0
 800ccce:	e7f0      	b.n	800ccb2 <_dtoa_r+0xaba>
 800ccd0:	9b00      	ldr	r3, [sp, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bfcc      	ite	gt
 800ccd6:	461e      	movgt	r6, r3
 800ccd8:	2601      	movle	r6, #1
 800ccda:	4456      	add	r6, sl
 800ccdc:	2700      	movs	r7, #0
 800ccde:	4649      	mov	r1, r9
 800cce0:	2201      	movs	r2, #1
 800cce2:	4658      	mov	r0, fp
 800cce4:	f000 fe3a 	bl	800d95c <__lshift>
 800cce8:	4621      	mov	r1, r4
 800ccea:	4681      	mov	r9, r0
 800ccec:	f000 fea2 	bl	800da34 <__mcmp>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	dcb0      	bgt.n	800cc56 <_dtoa_r+0xa5e>
 800ccf4:	d102      	bne.n	800ccfc <_dtoa_r+0xb04>
 800ccf6:	f018 0f01 	tst.w	r8, #1
 800ccfa:	d1ac      	bne.n	800cc56 <_dtoa_r+0xa5e>
 800ccfc:	4633      	mov	r3, r6
 800ccfe:	461e      	mov	r6, r3
 800cd00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd04:	2a30      	cmp	r2, #48	@ 0x30
 800cd06:	d0fa      	beq.n	800ccfe <_dtoa_r+0xb06>
 800cd08:	e5c2      	b.n	800c890 <_dtoa_r+0x698>
 800cd0a:	459a      	cmp	sl, r3
 800cd0c:	d1a4      	bne.n	800cc58 <_dtoa_r+0xa60>
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	3301      	adds	r3, #1
 800cd12:	9304      	str	r3, [sp, #16]
 800cd14:	2331      	movs	r3, #49	@ 0x31
 800cd16:	f88a 3000 	strb.w	r3, [sl]
 800cd1a:	e5b9      	b.n	800c890 <_dtoa_r+0x698>
 800cd1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cd7c <_dtoa_r+0xb84>
 800cd22:	b11b      	cbz	r3, 800cd2c <_dtoa_r+0xb34>
 800cd24:	f10a 0308 	add.w	r3, sl, #8
 800cd28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cd2a:	6013      	str	r3, [r2, #0]
 800cd2c:	4650      	mov	r0, sl
 800cd2e:	b019      	add	sp, #100	@ 0x64
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	f77f ae37 	ble.w	800c9aa <_dtoa_r+0x7b2>
 800cd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd40:	2001      	movs	r0, #1
 800cd42:	e655      	b.n	800c9f0 <_dtoa_r+0x7f8>
 800cd44:	9b00      	ldr	r3, [sp, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f77f aed6 	ble.w	800caf8 <_dtoa_r+0x900>
 800cd4c:	4656      	mov	r6, sl
 800cd4e:	4621      	mov	r1, r4
 800cd50:	4648      	mov	r0, r9
 800cd52:	f7ff f9c7 	bl	800c0e4 <quorem>
 800cd56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cd5a:	f806 8b01 	strb.w	r8, [r6], #1
 800cd5e:	9b00      	ldr	r3, [sp, #0]
 800cd60:	eba6 020a 	sub.w	r2, r6, sl
 800cd64:	4293      	cmp	r3, r2
 800cd66:	ddb3      	ble.n	800ccd0 <_dtoa_r+0xad8>
 800cd68:	4649      	mov	r1, r9
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	220a      	movs	r2, #10
 800cd6e:	4658      	mov	r0, fp
 800cd70:	f000 fbfe 	bl	800d570 <__multadd>
 800cd74:	4681      	mov	r9, r0
 800cd76:	e7ea      	b.n	800cd4e <_dtoa_r+0xb56>
 800cd78:	08010494 	.word	0x08010494
 800cd7c:	08010418 	.word	0x08010418

0800cd80 <_free_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4605      	mov	r5, r0
 800cd84:	2900      	cmp	r1, #0
 800cd86:	d041      	beq.n	800ce0c <_free_r+0x8c>
 800cd88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd8c:	1f0c      	subs	r4, r1, #4
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	bfb8      	it	lt
 800cd92:	18e4      	addlt	r4, r4, r3
 800cd94:	f7fd fa56 	bl	800a244 <__malloc_lock>
 800cd98:	4a1d      	ldr	r2, [pc, #116]	@ (800ce10 <_free_r+0x90>)
 800cd9a:	6813      	ldr	r3, [r2, #0]
 800cd9c:	b933      	cbnz	r3, 800cdac <_free_r+0x2c>
 800cd9e:	6063      	str	r3, [r4, #4]
 800cda0:	6014      	str	r4, [r2, #0]
 800cda2:	4628      	mov	r0, r5
 800cda4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cda8:	f7fd ba52 	b.w	800a250 <__malloc_unlock>
 800cdac:	42a3      	cmp	r3, r4
 800cdae:	d908      	bls.n	800cdc2 <_free_r+0x42>
 800cdb0:	6820      	ldr	r0, [r4, #0]
 800cdb2:	1821      	adds	r1, r4, r0
 800cdb4:	428b      	cmp	r3, r1
 800cdb6:	bf01      	itttt	eq
 800cdb8:	6819      	ldreq	r1, [r3, #0]
 800cdba:	685b      	ldreq	r3, [r3, #4]
 800cdbc:	1809      	addeq	r1, r1, r0
 800cdbe:	6021      	streq	r1, [r4, #0]
 800cdc0:	e7ed      	b.n	800cd9e <_free_r+0x1e>
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	b10b      	cbz	r3, 800cdcc <_free_r+0x4c>
 800cdc8:	42a3      	cmp	r3, r4
 800cdca:	d9fa      	bls.n	800cdc2 <_free_r+0x42>
 800cdcc:	6811      	ldr	r1, [r2, #0]
 800cdce:	1850      	adds	r0, r2, r1
 800cdd0:	42a0      	cmp	r0, r4
 800cdd2:	d10b      	bne.n	800cdec <_free_r+0x6c>
 800cdd4:	6820      	ldr	r0, [r4, #0]
 800cdd6:	4401      	add	r1, r0
 800cdd8:	1850      	adds	r0, r2, r1
 800cdda:	4283      	cmp	r3, r0
 800cddc:	6011      	str	r1, [r2, #0]
 800cdde:	d1e0      	bne.n	800cda2 <_free_r+0x22>
 800cde0:	6818      	ldr	r0, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	6053      	str	r3, [r2, #4]
 800cde6:	4408      	add	r0, r1
 800cde8:	6010      	str	r0, [r2, #0]
 800cdea:	e7da      	b.n	800cda2 <_free_r+0x22>
 800cdec:	d902      	bls.n	800cdf4 <_free_r+0x74>
 800cdee:	230c      	movs	r3, #12
 800cdf0:	602b      	str	r3, [r5, #0]
 800cdf2:	e7d6      	b.n	800cda2 <_free_r+0x22>
 800cdf4:	6820      	ldr	r0, [r4, #0]
 800cdf6:	1821      	adds	r1, r4, r0
 800cdf8:	428b      	cmp	r3, r1
 800cdfa:	bf04      	itt	eq
 800cdfc:	6819      	ldreq	r1, [r3, #0]
 800cdfe:	685b      	ldreq	r3, [r3, #4]
 800ce00:	6063      	str	r3, [r4, #4]
 800ce02:	bf04      	itt	eq
 800ce04:	1809      	addeq	r1, r1, r0
 800ce06:	6021      	streq	r1, [r4, #0]
 800ce08:	6054      	str	r4, [r2, #4]
 800ce0a:	e7ca      	b.n	800cda2 <_free_r+0x22>
 800ce0c:	bd38      	pop	{r3, r4, r5, pc}
 800ce0e:	bf00      	nop
 800ce10:	20000538 	.word	0x20000538

0800ce14 <rshift>:
 800ce14:	6903      	ldr	r3, [r0, #16]
 800ce16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce22:	f100 0414 	add.w	r4, r0, #20
 800ce26:	dd45      	ble.n	800ceb4 <rshift+0xa0>
 800ce28:	f011 011f 	ands.w	r1, r1, #31
 800ce2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce34:	d10c      	bne.n	800ce50 <rshift+0x3c>
 800ce36:	f100 0710 	add.w	r7, r0, #16
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	42b1      	cmp	r1, r6
 800ce3e:	d334      	bcc.n	800ceaa <rshift+0x96>
 800ce40:	1a9b      	subs	r3, r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	1eea      	subs	r2, r5, #3
 800ce46:	4296      	cmp	r6, r2
 800ce48:	bf38      	it	cc
 800ce4a:	2300      	movcc	r3, #0
 800ce4c:	4423      	add	r3, r4
 800ce4e:	e015      	b.n	800ce7c <rshift+0x68>
 800ce50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce54:	f1c1 0820 	rsb	r8, r1, #32
 800ce58:	40cf      	lsrs	r7, r1
 800ce5a:	f105 0e04 	add.w	lr, r5, #4
 800ce5e:	46a1      	mov	r9, r4
 800ce60:	4576      	cmp	r6, lr
 800ce62:	46f4      	mov	ip, lr
 800ce64:	d815      	bhi.n	800ce92 <rshift+0x7e>
 800ce66:	1a9a      	subs	r2, r3, r2
 800ce68:	0092      	lsls	r2, r2, #2
 800ce6a:	3a04      	subs	r2, #4
 800ce6c:	3501      	adds	r5, #1
 800ce6e:	42ae      	cmp	r6, r5
 800ce70:	bf38      	it	cc
 800ce72:	2200      	movcc	r2, #0
 800ce74:	18a3      	adds	r3, r4, r2
 800ce76:	50a7      	str	r7, [r4, r2]
 800ce78:	b107      	cbz	r7, 800ce7c <rshift+0x68>
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	1b1a      	subs	r2, r3, r4
 800ce7e:	42a3      	cmp	r3, r4
 800ce80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce84:	bf08      	it	eq
 800ce86:	2300      	moveq	r3, #0
 800ce88:	6102      	str	r2, [r0, #16]
 800ce8a:	bf08      	it	eq
 800ce8c:	6143      	streq	r3, [r0, #20]
 800ce8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce92:	f8dc c000 	ldr.w	ip, [ip]
 800ce96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ce9e:	f849 7b04 	str.w	r7, [r9], #4
 800cea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cea6:	40cf      	lsrs	r7, r1
 800cea8:	e7da      	b.n	800ce60 <rshift+0x4c>
 800ceaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800ceae:	f847 cf04 	str.w	ip, [r7, #4]!
 800ceb2:	e7c3      	b.n	800ce3c <rshift+0x28>
 800ceb4:	4623      	mov	r3, r4
 800ceb6:	e7e1      	b.n	800ce7c <rshift+0x68>

0800ceb8 <__hexdig_fun>:
 800ceb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cebc:	2b09      	cmp	r3, #9
 800cebe:	d802      	bhi.n	800cec6 <__hexdig_fun+0xe>
 800cec0:	3820      	subs	r0, #32
 800cec2:	b2c0      	uxtb	r0, r0
 800cec4:	4770      	bx	lr
 800cec6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ceca:	2b05      	cmp	r3, #5
 800cecc:	d801      	bhi.n	800ced2 <__hexdig_fun+0x1a>
 800cece:	3847      	subs	r0, #71	@ 0x47
 800ced0:	e7f7      	b.n	800cec2 <__hexdig_fun+0xa>
 800ced2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ced6:	2b05      	cmp	r3, #5
 800ced8:	d801      	bhi.n	800cede <__hexdig_fun+0x26>
 800ceda:	3827      	subs	r0, #39	@ 0x27
 800cedc:	e7f1      	b.n	800cec2 <__hexdig_fun+0xa>
 800cede:	2000      	movs	r0, #0
 800cee0:	4770      	bx	lr
	...

0800cee4 <__gethex>:
 800cee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	b085      	sub	sp, #20
 800ceea:	468a      	mov	sl, r1
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	680b      	ldr	r3, [r1, #0]
 800cef0:	9001      	str	r0, [sp, #4]
 800cef2:	4690      	mov	r8, r2
 800cef4:	1c9c      	adds	r4, r3, #2
 800cef6:	46a1      	mov	r9, r4
 800cef8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cefc:	2830      	cmp	r0, #48	@ 0x30
 800cefe:	d0fa      	beq.n	800cef6 <__gethex+0x12>
 800cf00:	eba9 0303 	sub.w	r3, r9, r3
 800cf04:	f1a3 0b02 	sub.w	fp, r3, #2
 800cf08:	f7ff ffd6 	bl	800ceb8 <__hexdig_fun>
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d168      	bne.n	800cfe4 <__gethex+0x100>
 800cf12:	49a0      	ldr	r1, [pc, #640]	@ (800d194 <__gethex+0x2b0>)
 800cf14:	2201      	movs	r2, #1
 800cf16:	4648      	mov	r0, r9
 800cf18:	f7ff f82b 	bl	800bf72 <strncmp>
 800cf1c:	4607      	mov	r7, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d167      	bne.n	800cff2 <__gethex+0x10e>
 800cf22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf26:	4626      	mov	r6, r4
 800cf28:	f7ff ffc6 	bl	800ceb8 <__hexdig_fun>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d062      	beq.n	800cff6 <__gethex+0x112>
 800cf30:	4623      	mov	r3, r4
 800cf32:	7818      	ldrb	r0, [r3, #0]
 800cf34:	2830      	cmp	r0, #48	@ 0x30
 800cf36:	4699      	mov	r9, r3
 800cf38:	f103 0301 	add.w	r3, r3, #1
 800cf3c:	d0f9      	beq.n	800cf32 <__gethex+0x4e>
 800cf3e:	f7ff ffbb 	bl	800ceb8 <__hexdig_fun>
 800cf42:	fab0 f580 	clz	r5, r0
 800cf46:	096d      	lsrs	r5, r5, #5
 800cf48:	f04f 0b01 	mov.w	fp, #1
 800cf4c:	464a      	mov	r2, r9
 800cf4e:	4616      	mov	r6, r2
 800cf50:	3201      	adds	r2, #1
 800cf52:	7830      	ldrb	r0, [r6, #0]
 800cf54:	f7ff ffb0 	bl	800ceb8 <__hexdig_fun>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d1f8      	bne.n	800cf4e <__gethex+0x6a>
 800cf5c:	498d      	ldr	r1, [pc, #564]	@ (800d194 <__gethex+0x2b0>)
 800cf5e:	2201      	movs	r2, #1
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7ff f806 	bl	800bf72 <strncmp>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d13f      	bne.n	800cfea <__gethex+0x106>
 800cf6a:	b944      	cbnz	r4, 800cf7e <__gethex+0x9a>
 800cf6c:	1c74      	adds	r4, r6, #1
 800cf6e:	4622      	mov	r2, r4
 800cf70:	4616      	mov	r6, r2
 800cf72:	3201      	adds	r2, #1
 800cf74:	7830      	ldrb	r0, [r6, #0]
 800cf76:	f7ff ff9f 	bl	800ceb8 <__hexdig_fun>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d1f8      	bne.n	800cf70 <__gethex+0x8c>
 800cf7e:	1ba4      	subs	r4, r4, r6
 800cf80:	00a7      	lsls	r7, r4, #2
 800cf82:	7833      	ldrb	r3, [r6, #0]
 800cf84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cf88:	2b50      	cmp	r3, #80	@ 0x50
 800cf8a:	d13e      	bne.n	800d00a <__gethex+0x126>
 800cf8c:	7873      	ldrb	r3, [r6, #1]
 800cf8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cf90:	d033      	beq.n	800cffa <__gethex+0x116>
 800cf92:	2b2d      	cmp	r3, #45	@ 0x2d
 800cf94:	d034      	beq.n	800d000 <__gethex+0x11c>
 800cf96:	1c71      	adds	r1, r6, #1
 800cf98:	2400      	movs	r4, #0
 800cf9a:	7808      	ldrb	r0, [r1, #0]
 800cf9c:	f7ff ff8c 	bl	800ceb8 <__hexdig_fun>
 800cfa0:	1e43      	subs	r3, r0, #1
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b18      	cmp	r3, #24
 800cfa6:	d830      	bhi.n	800d00a <__gethex+0x126>
 800cfa8:	f1a0 0210 	sub.w	r2, r0, #16
 800cfac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfb0:	f7ff ff82 	bl	800ceb8 <__hexdig_fun>
 800cfb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800cfb8:	fa5f fc8c 	uxtb.w	ip, ip
 800cfbc:	f1bc 0f18 	cmp.w	ip, #24
 800cfc0:	f04f 030a 	mov.w	r3, #10
 800cfc4:	d91e      	bls.n	800d004 <__gethex+0x120>
 800cfc6:	b104      	cbz	r4, 800cfca <__gethex+0xe6>
 800cfc8:	4252      	negs	r2, r2
 800cfca:	4417      	add	r7, r2
 800cfcc:	f8ca 1000 	str.w	r1, [sl]
 800cfd0:	b1ed      	cbz	r5, 800d00e <__gethex+0x12a>
 800cfd2:	f1bb 0f00 	cmp.w	fp, #0
 800cfd6:	bf0c      	ite	eq
 800cfd8:	2506      	moveq	r5, #6
 800cfda:	2500      	movne	r5, #0
 800cfdc:	4628      	mov	r0, r5
 800cfde:	b005      	add	sp, #20
 800cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe4:	2500      	movs	r5, #0
 800cfe6:	462c      	mov	r4, r5
 800cfe8:	e7b0      	b.n	800cf4c <__gethex+0x68>
 800cfea:	2c00      	cmp	r4, #0
 800cfec:	d1c7      	bne.n	800cf7e <__gethex+0x9a>
 800cfee:	4627      	mov	r7, r4
 800cff0:	e7c7      	b.n	800cf82 <__gethex+0x9e>
 800cff2:	464e      	mov	r6, r9
 800cff4:	462f      	mov	r7, r5
 800cff6:	2501      	movs	r5, #1
 800cff8:	e7c3      	b.n	800cf82 <__gethex+0x9e>
 800cffa:	2400      	movs	r4, #0
 800cffc:	1cb1      	adds	r1, r6, #2
 800cffe:	e7cc      	b.n	800cf9a <__gethex+0xb6>
 800d000:	2401      	movs	r4, #1
 800d002:	e7fb      	b.n	800cffc <__gethex+0x118>
 800d004:	fb03 0002 	mla	r0, r3, r2, r0
 800d008:	e7ce      	b.n	800cfa8 <__gethex+0xc4>
 800d00a:	4631      	mov	r1, r6
 800d00c:	e7de      	b.n	800cfcc <__gethex+0xe8>
 800d00e:	eba6 0309 	sub.w	r3, r6, r9
 800d012:	3b01      	subs	r3, #1
 800d014:	4629      	mov	r1, r5
 800d016:	2b07      	cmp	r3, #7
 800d018:	dc0a      	bgt.n	800d030 <__gethex+0x14c>
 800d01a:	9801      	ldr	r0, [sp, #4]
 800d01c:	f000 fa46 	bl	800d4ac <_Balloc>
 800d020:	4604      	mov	r4, r0
 800d022:	b940      	cbnz	r0, 800d036 <__gethex+0x152>
 800d024:	4b5c      	ldr	r3, [pc, #368]	@ (800d198 <__gethex+0x2b4>)
 800d026:	4602      	mov	r2, r0
 800d028:	21e4      	movs	r1, #228	@ 0xe4
 800d02a:	485c      	ldr	r0, [pc, #368]	@ (800d19c <__gethex+0x2b8>)
 800d02c:	f001 fcb0 	bl	800e990 <__assert_func>
 800d030:	3101      	adds	r1, #1
 800d032:	105b      	asrs	r3, r3, #1
 800d034:	e7ef      	b.n	800d016 <__gethex+0x132>
 800d036:	f100 0a14 	add.w	sl, r0, #20
 800d03a:	2300      	movs	r3, #0
 800d03c:	4655      	mov	r5, sl
 800d03e:	469b      	mov	fp, r3
 800d040:	45b1      	cmp	r9, r6
 800d042:	d337      	bcc.n	800d0b4 <__gethex+0x1d0>
 800d044:	f845 bb04 	str.w	fp, [r5], #4
 800d048:	eba5 050a 	sub.w	r5, r5, sl
 800d04c:	10ad      	asrs	r5, r5, #2
 800d04e:	6125      	str	r5, [r4, #16]
 800d050:	4658      	mov	r0, fp
 800d052:	f000 fb1d 	bl	800d690 <__hi0bits>
 800d056:	016d      	lsls	r5, r5, #5
 800d058:	f8d8 6000 	ldr.w	r6, [r8]
 800d05c:	1a2d      	subs	r5, r5, r0
 800d05e:	42b5      	cmp	r5, r6
 800d060:	dd54      	ble.n	800d10c <__gethex+0x228>
 800d062:	1bad      	subs	r5, r5, r6
 800d064:	4629      	mov	r1, r5
 800d066:	4620      	mov	r0, r4
 800d068:	f000 feb1 	bl	800ddce <__any_on>
 800d06c:	4681      	mov	r9, r0
 800d06e:	b178      	cbz	r0, 800d090 <__gethex+0x1ac>
 800d070:	1e6b      	subs	r3, r5, #1
 800d072:	1159      	asrs	r1, r3, #5
 800d074:	f003 021f 	and.w	r2, r3, #31
 800d078:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d07c:	f04f 0901 	mov.w	r9, #1
 800d080:	fa09 f202 	lsl.w	r2, r9, r2
 800d084:	420a      	tst	r2, r1
 800d086:	d003      	beq.n	800d090 <__gethex+0x1ac>
 800d088:	454b      	cmp	r3, r9
 800d08a:	dc36      	bgt.n	800d0fa <__gethex+0x216>
 800d08c:	f04f 0902 	mov.w	r9, #2
 800d090:	4629      	mov	r1, r5
 800d092:	4620      	mov	r0, r4
 800d094:	f7ff febe 	bl	800ce14 <rshift>
 800d098:	442f      	add	r7, r5
 800d09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d09e:	42bb      	cmp	r3, r7
 800d0a0:	da42      	bge.n	800d128 <__gethex+0x244>
 800d0a2:	9801      	ldr	r0, [sp, #4]
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	f000 fa41 	bl	800d52c <_Bfree>
 800d0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	25a3      	movs	r5, #163	@ 0xa3
 800d0b2:	e793      	b.n	800cfdc <__gethex+0xf8>
 800d0b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d0b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800d0ba:	d012      	beq.n	800d0e2 <__gethex+0x1fe>
 800d0bc:	2b20      	cmp	r3, #32
 800d0be:	d104      	bne.n	800d0ca <__gethex+0x1e6>
 800d0c0:	f845 bb04 	str.w	fp, [r5], #4
 800d0c4:	f04f 0b00 	mov.w	fp, #0
 800d0c8:	465b      	mov	r3, fp
 800d0ca:	7830      	ldrb	r0, [r6, #0]
 800d0cc:	9303      	str	r3, [sp, #12]
 800d0ce:	f7ff fef3 	bl	800ceb8 <__hexdig_fun>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	f000 000f 	and.w	r0, r0, #15
 800d0d8:	4098      	lsls	r0, r3
 800d0da:	ea4b 0b00 	orr.w	fp, fp, r0
 800d0de:	3304      	adds	r3, #4
 800d0e0:	e7ae      	b.n	800d040 <__gethex+0x15c>
 800d0e2:	45b1      	cmp	r9, r6
 800d0e4:	d8ea      	bhi.n	800d0bc <__gethex+0x1d8>
 800d0e6:	492b      	ldr	r1, [pc, #172]	@ (800d194 <__gethex+0x2b0>)
 800d0e8:	9303      	str	r3, [sp, #12]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7fe ff40 	bl	800bf72 <strncmp>
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d1e1      	bne.n	800d0bc <__gethex+0x1d8>
 800d0f8:	e7a2      	b.n	800d040 <__gethex+0x15c>
 800d0fa:	1ea9      	subs	r1, r5, #2
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f000 fe66 	bl	800ddce <__any_on>
 800d102:	2800      	cmp	r0, #0
 800d104:	d0c2      	beq.n	800d08c <__gethex+0x1a8>
 800d106:	f04f 0903 	mov.w	r9, #3
 800d10a:	e7c1      	b.n	800d090 <__gethex+0x1ac>
 800d10c:	da09      	bge.n	800d122 <__gethex+0x23e>
 800d10e:	1b75      	subs	r5, r6, r5
 800d110:	4621      	mov	r1, r4
 800d112:	9801      	ldr	r0, [sp, #4]
 800d114:	462a      	mov	r2, r5
 800d116:	f000 fc21 	bl	800d95c <__lshift>
 800d11a:	1b7f      	subs	r7, r7, r5
 800d11c:	4604      	mov	r4, r0
 800d11e:	f100 0a14 	add.w	sl, r0, #20
 800d122:	f04f 0900 	mov.w	r9, #0
 800d126:	e7b8      	b.n	800d09a <__gethex+0x1b6>
 800d128:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d12c:	42bd      	cmp	r5, r7
 800d12e:	dd6f      	ble.n	800d210 <__gethex+0x32c>
 800d130:	1bed      	subs	r5, r5, r7
 800d132:	42ae      	cmp	r6, r5
 800d134:	dc34      	bgt.n	800d1a0 <__gethex+0x2bc>
 800d136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d022      	beq.n	800d184 <__gethex+0x2a0>
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d024      	beq.n	800d18c <__gethex+0x2a8>
 800d142:	2b01      	cmp	r3, #1
 800d144:	d115      	bne.n	800d172 <__gethex+0x28e>
 800d146:	42ae      	cmp	r6, r5
 800d148:	d113      	bne.n	800d172 <__gethex+0x28e>
 800d14a:	2e01      	cmp	r6, #1
 800d14c:	d10b      	bne.n	800d166 <__gethex+0x282>
 800d14e:	9a02      	ldr	r2, [sp, #8]
 800d150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d154:	6013      	str	r3, [r2, #0]
 800d156:	2301      	movs	r3, #1
 800d158:	6123      	str	r3, [r4, #16]
 800d15a:	f8ca 3000 	str.w	r3, [sl]
 800d15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d160:	2562      	movs	r5, #98	@ 0x62
 800d162:	601c      	str	r4, [r3, #0]
 800d164:	e73a      	b.n	800cfdc <__gethex+0xf8>
 800d166:	1e71      	subs	r1, r6, #1
 800d168:	4620      	mov	r0, r4
 800d16a:	f000 fe30 	bl	800ddce <__any_on>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d1ed      	bne.n	800d14e <__gethex+0x26a>
 800d172:	9801      	ldr	r0, [sp, #4]
 800d174:	4621      	mov	r1, r4
 800d176:	f000 f9d9 	bl	800d52c <_Bfree>
 800d17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d17c:	2300      	movs	r3, #0
 800d17e:	6013      	str	r3, [r2, #0]
 800d180:	2550      	movs	r5, #80	@ 0x50
 800d182:	e72b      	b.n	800cfdc <__gethex+0xf8>
 800d184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d186:	2b00      	cmp	r3, #0
 800d188:	d1f3      	bne.n	800d172 <__gethex+0x28e>
 800d18a:	e7e0      	b.n	800d14e <__gethex+0x26a>
 800d18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1dd      	bne.n	800d14e <__gethex+0x26a>
 800d192:	e7ee      	b.n	800d172 <__gethex+0x28e>
 800d194:	08010284 	.word	0x08010284
 800d198:	08010494 	.word	0x08010494
 800d19c:	080104a5 	.word	0x080104a5
 800d1a0:	1e6f      	subs	r7, r5, #1
 800d1a2:	f1b9 0f00 	cmp.w	r9, #0
 800d1a6:	d130      	bne.n	800d20a <__gethex+0x326>
 800d1a8:	b127      	cbz	r7, 800d1b4 <__gethex+0x2d0>
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f000 fe0e 	bl	800ddce <__any_on>
 800d1b2:	4681      	mov	r9, r0
 800d1b4:	117a      	asrs	r2, r7, #5
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1bc:	f007 071f 	and.w	r7, r7, #31
 800d1c0:	40bb      	lsls	r3, r7
 800d1c2:	4213      	tst	r3, r2
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	bf18      	it	ne
 800d1ca:	f049 0902 	orrne.w	r9, r9, #2
 800d1ce:	f7ff fe21 	bl	800ce14 <rshift>
 800d1d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d1d6:	1b76      	subs	r6, r6, r5
 800d1d8:	2502      	movs	r5, #2
 800d1da:	f1b9 0f00 	cmp.w	r9, #0
 800d1de:	d047      	beq.n	800d270 <__gethex+0x38c>
 800d1e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d015      	beq.n	800d214 <__gethex+0x330>
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d017      	beq.n	800d21c <__gethex+0x338>
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d109      	bne.n	800d204 <__gethex+0x320>
 800d1f0:	f019 0f02 	tst.w	r9, #2
 800d1f4:	d006      	beq.n	800d204 <__gethex+0x320>
 800d1f6:	f8da 3000 	ldr.w	r3, [sl]
 800d1fa:	ea49 0903 	orr.w	r9, r9, r3
 800d1fe:	f019 0f01 	tst.w	r9, #1
 800d202:	d10e      	bne.n	800d222 <__gethex+0x33e>
 800d204:	f045 0510 	orr.w	r5, r5, #16
 800d208:	e032      	b.n	800d270 <__gethex+0x38c>
 800d20a:	f04f 0901 	mov.w	r9, #1
 800d20e:	e7d1      	b.n	800d1b4 <__gethex+0x2d0>
 800d210:	2501      	movs	r5, #1
 800d212:	e7e2      	b.n	800d1da <__gethex+0x2f6>
 800d214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d216:	f1c3 0301 	rsb	r3, r3, #1
 800d21a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0f0      	beq.n	800d204 <__gethex+0x320>
 800d222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d226:	f104 0314 	add.w	r3, r4, #20
 800d22a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d22e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d232:	f04f 0c00 	mov.w	ip, #0
 800d236:	4618      	mov	r0, r3
 800d238:	f853 2b04 	ldr.w	r2, [r3], #4
 800d23c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d240:	d01b      	beq.n	800d27a <__gethex+0x396>
 800d242:	3201      	adds	r2, #1
 800d244:	6002      	str	r2, [r0, #0]
 800d246:	2d02      	cmp	r5, #2
 800d248:	f104 0314 	add.w	r3, r4, #20
 800d24c:	d13c      	bne.n	800d2c8 <__gethex+0x3e4>
 800d24e:	f8d8 2000 	ldr.w	r2, [r8]
 800d252:	3a01      	subs	r2, #1
 800d254:	42b2      	cmp	r2, r6
 800d256:	d109      	bne.n	800d26c <__gethex+0x388>
 800d258:	1171      	asrs	r1, r6, #5
 800d25a:	2201      	movs	r2, #1
 800d25c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d260:	f006 061f 	and.w	r6, r6, #31
 800d264:	fa02 f606 	lsl.w	r6, r2, r6
 800d268:	421e      	tst	r6, r3
 800d26a:	d13a      	bne.n	800d2e2 <__gethex+0x3fe>
 800d26c:	f045 0520 	orr.w	r5, r5, #32
 800d270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d272:	601c      	str	r4, [r3, #0]
 800d274:	9b02      	ldr	r3, [sp, #8]
 800d276:	601f      	str	r7, [r3, #0]
 800d278:	e6b0      	b.n	800cfdc <__gethex+0xf8>
 800d27a:	4299      	cmp	r1, r3
 800d27c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d280:	d8d9      	bhi.n	800d236 <__gethex+0x352>
 800d282:	68a3      	ldr	r3, [r4, #8]
 800d284:	459b      	cmp	fp, r3
 800d286:	db17      	blt.n	800d2b8 <__gethex+0x3d4>
 800d288:	6861      	ldr	r1, [r4, #4]
 800d28a:	9801      	ldr	r0, [sp, #4]
 800d28c:	3101      	adds	r1, #1
 800d28e:	f000 f90d 	bl	800d4ac <_Balloc>
 800d292:	4681      	mov	r9, r0
 800d294:	b918      	cbnz	r0, 800d29e <__gethex+0x3ba>
 800d296:	4b1a      	ldr	r3, [pc, #104]	@ (800d300 <__gethex+0x41c>)
 800d298:	4602      	mov	r2, r0
 800d29a:	2184      	movs	r1, #132	@ 0x84
 800d29c:	e6c5      	b.n	800d02a <__gethex+0x146>
 800d29e:	6922      	ldr	r2, [r4, #16]
 800d2a0:	3202      	adds	r2, #2
 800d2a2:	f104 010c 	add.w	r1, r4, #12
 800d2a6:	0092      	lsls	r2, r2, #2
 800d2a8:	300c      	adds	r0, #12
 800d2aa:	f7fe fefc 	bl	800c0a6 <memcpy>
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	9801      	ldr	r0, [sp, #4]
 800d2b2:	f000 f93b 	bl	800d52c <_Bfree>
 800d2b6:	464c      	mov	r4, r9
 800d2b8:	6923      	ldr	r3, [r4, #16]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2c0:	6122      	str	r2, [r4, #16]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	615a      	str	r2, [r3, #20]
 800d2c6:	e7be      	b.n	800d246 <__gethex+0x362>
 800d2c8:	6922      	ldr	r2, [r4, #16]
 800d2ca:	455a      	cmp	r2, fp
 800d2cc:	dd0b      	ble.n	800d2e6 <__gethex+0x402>
 800d2ce:	2101      	movs	r1, #1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f7ff fd9f 	bl	800ce14 <rshift>
 800d2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2da:	3701      	adds	r7, #1
 800d2dc:	42bb      	cmp	r3, r7
 800d2de:	f6ff aee0 	blt.w	800d0a2 <__gethex+0x1be>
 800d2e2:	2501      	movs	r5, #1
 800d2e4:	e7c2      	b.n	800d26c <__gethex+0x388>
 800d2e6:	f016 061f 	ands.w	r6, r6, #31
 800d2ea:	d0fa      	beq.n	800d2e2 <__gethex+0x3fe>
 800d2ec:	4453      	add	r3, sl
 800d2ee:	f1c6 0620 	rsb	r6, r6, #32
 800d2f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d2f6:	f000 f9cb 	bl	800d690 <__hi0bits>
 800d2fa:	42b0      	cmp	r0, r6
 800d2fc:	dbe7      	blt.n	800d2ce <__gethex+0x3ea>
 800d2fe:	e7f0      	b.n	800d2e2 <__gethex+0x3fe>
 800d300:	08010494 	.word	0x08010494

0800d304 <L_shift>:
 800d304:	f1c2 0208 	rsb	r2, r2, #8
 800d308:	0092      	lsls	r2, r2, #2
 800d30a:	b570      	push	{r4, r5, r6, lr}
 800d30c:	f1c2 0620 	rsb	r6, r2, #32
 800d310:	6843      	ldr	r3, [r0, #4]
 800d312:	6804      	ldr	r4, [r0, #0]
 800d314:	fa03 f506 	lsl.w	r5, r3, r6
 800d318:	432c      	orrs	r4, r5
 800d31a:	40d3      	lsrs	r3, r2
 800d31c:	6004      	str	r4, [r0, #0]
 800d31e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d322:	4288      	cmp	r0, r1
 800d324:	d3f4      	bcc.n	800d310 <L_shift+0xc>
 800d326:	bd70      	pop	{r4, r5, r6, pc}

0800d328 <__match>:
 800d328:	b530      	push	{r4, r5, lr}
 800d32a:	6803      	ldr	r3, [r0, #0]
 800d32c:	3301      	adds	r3, #1
 800d32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d332:	b914      	cbnz	r4, 800d33a <__match+0x12>
 800d334:	6003      	str	r3, [r0, #0]
 800d336:	2001      	movs	r0, #1
 800d338:	bd30      	pop	{r4, r5, pc}
 800d33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d33e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d342:	2d19      	cmp	r5, #25
 800d344:	bf98      	it	ls
 800d346:	3220      	addls	r2, #32
 800d348:	42a2      	cmp	r2, r4
 800d34a:	d0f0      	beq.n	800d32e <__match+0x6>
 800d34c:	2000      	movs	r0, #0
 800d34e:	e7f3      	b.n	800d338 <__match+0x10>

0800d350 <__hexnan>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	680b      	ldr	r3, [r1, #0]
 800d356:	6801      	ldr	r1, [r0, #0]
 800d358:	115e      	asrs	r6, r3, #5
 800d35a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d35e:	f013 031f 	ands.w	r3, r3, #31
 800d362:	b087      	sub	sp, #28
 800d364:	bf18      	it	ne
 800d366:	3604      	addne	r6, #4
 800d368:	2500      	movs	r5, #0
 800d36a:	1f37      	subs	r7, r6, #4
 800d36c:	4682      	mov	sl, r0
 800d36e:	4690      	mov	r8, r2
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	f846 5c04 	str.w	r5, [r6, #-4]
 800d376:	46b9      	mov	r9, r7
 800d378:	463c      	mov	r4, r7
 800d37a:	9502      	str	r5, [sp, #8]
 800d37c:	46ab      	mov	fp, r5
 800d37e:	784a      	ldrb	r2, [r1, #1]
 800d380:	1c4b      	adds	r3, r1, #1
 800d382:	9303      	str	r3, [sp, #12]
 800d384:	b342      	cbz	r2, 800d3d8 <__hexnan+0x88>
 800d386:	4610      	mov	r0, r2
 800d388:	9105      	str	r1, [sp, #20]
 800d38a:	9204      	str	r2, [sp, #16]
 800d38c:	f7ff fd94 	bl	800ceb8 <__hexdig_fun>
 800d390:	2800      	cmp	r0, #0
 800d392:	d151      	bne.n	800d438 <__hexnan+0xe8>
 800d394:	9a04      	ldr	r2, [sp, #16]
 800d396:	9905      	ldr	r1, [sp, #20]
 800d398:	2a20      	cmp	r2, #32
 800d39a:	d818      	bhi.n	800d3ce <__hexnan+0x7e>
 800d39c:	9b02      	ldr	r3, [sp, #8]
 800d39e:	459b      	cmp	fp, r3
 800d3a0:	dd13      	ble.n	800d3ca <__hexnan+0x7a>
 800d3a2:	454c      	cmp	r4, r9
 800d3a4:	d206      	bcs.n	800d3b4 <__hexnan+0x64>
 800d3a6:	2d07      	cmp	r5, #7
 800d3a8:	dc04      	bgt.n	800d3b4 <__hexnan+0x64>
 800d3aa:	462a      	mov	r2, r5
 800d3ac:	4649      	mov	r1, r9
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f7ff ffa8 	bl	800d304 <L_shift>
 800d3b4:	4544      	cmp	r4, r8
 800d3b6:	d952      	bls.n	800d45e <__hexnan+0x10e>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f1a4 0904 	sub.w	r9, r4, #4
 800d3be:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3c2:	f8cd b008 	str.w	fp, [sp, #8]
 800d3c6:	464c      	mov	r4, r9
 800d3c8:	461d      	mov	r5, r3
 800d3ca:	9903      	ldr	r1, [sp, #12]
 800d3cc:	e7d7      	b.n	800d37e <__hexnan+0x2e>
 800d3ce:	2a29      	cmp	r2, #41	@ 0x29
 800d3d0:	d157      	bne.n	800d482 <__hexnan+0x132>
 800d3d2:	3102      	adds	r1, #2
 800d3d4:	f8ca 1000 	str.w	r1, [sl]
 800d3d8:	f1bb 0f00 	cmp.w	fp, #0
 800d3dc:	d051      	beq.n	800d482 <__hexnan+0x132>
 800d3de:	454c      	cmp	r4, r9
 800d3e0:	d206      	bcs.n	800d3f0 <__hexnan+0xa0>
 800d3e2:	2d07      	cmp	r5, #7
 800d3e4:	dc04      	bgt.n	800d3f0 <__hexnan+0xa0>
 800d3e6:	462a      	mov	r2, r5
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f7ff ff8a 	bl	800d304 <L_shift>
 800d3f0:	4544      	cmp	r4, r8
 800d3f2:	d936      	bls.n	800d462 <__hexnan+0x112>
 800d3f4:	f1a8 0204 	sub.w	r2, r8, #4
 800d3f8:	4623      	mov	r3, r4
 800d3fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800d402:	429f      	cmp	r7, r3
 800d404:	d2f9      	bcs.n	800d3fa <__hexnan+0xaa>
 800d406:	1b3b      	subs	r3, r7, r4
 800d408:	f023 0303 	bic.w	r3, r3, #3
 800d40c:	3304      	adds	r3, #4
 800d40e:	3401      	adds	r4, #1
 800d410:	3e03      	subs	r6, #3
 800d412:	42b4      	cmp	r4, r6
 800d414:	bf88      	it	hi
 800d416:	2304      	movhi	r3, #4
 800d418:	4443      	add	r3, r8
 800d41a:	2200      	movs	r2, #0
 800d41c:	f843 2b04 	str.w	r2, [r3], #4
 800d420:	429f      	cmp	r7, r3
 800d422:	d2fb      	bcs.n	800d41c <__hexnan+0xcc>
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	b91b      	cbnz	r3, 800d430 <__hexnan+0xe0>
 800d428:	4547      	cmp	r7, r8
 800d42a:	d128      	bne.n	800d47e <__hexnan+0x12e>
 800d42c:	2301      	movs	r3, #1
 800d42e:	603b      	str	r3, [r7, #0]
 800d430:	2005      	movs	r0, #5
 800d432:	b007      	add	sp, #28
 800d434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d438:	3501      	adds	r5, #1
 800d43a:	2d08      	cmp	r5, #8
 800d43c:	f10b 0b01 	add.w	fp, fp, #1
 800d440:	dd06      	ble.n	800d450 <__hexnan+0x100>
 800d442:	4544      	cmp	r4, r8
 800d444:	d9c1      	bls.n	800d3ca <__hexnan+0x7a>
 800d446:	2300      	movs	r3, #0
 800d448:	f844 3c04 	str.w	r3, [r4, #-4]
 800d44c:	2501      	movs	r5, #1
 800d44e:	3c04      	subs	r4, #4
 800d450:	6822      	ldr	r2, [r4, #0]
 800d452:	f000 000f 	and.w	r0, r0, #15
 800d456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d45a:	6020      	str	r0, [r4, #0]
 800d45c:	e7b5      	b.n	800d3ca <__hexnan+0x7a>
 800d45e:	2508      	movs	r5, #8
 800d460:	e7b3      	b.n	800d3ca <__hexnan+0x7a>
 800d462:	9b01      	ldr	r3, [sp, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d0dd      	beq.n	800d424 <__hexnan+0xd4>
 800d468:	f1c3 0320 	rsb	r3, r3, #32
 800d46c:	f04f 32ff 	mov.w	r2, #4294967295
 800d470:	40da      	lsrs	r2, r3
 800d472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d476:	4013      	ands	r3, r2
 800d478:	f846 3c04 	str.w	r3, [r6, #-4]
 800d47c:	e7d2      	b.n	800d424 <__hexnan+0xd4>
 800d47e:	3f04      	subs	r7, #4
 800d480:	e7d0      	b.n	800d424 <__hexnan+0xd4>
 800d482:	2004      	movs	r0, #4
 800d484:	e7d5      	b.n	800d432 <__hexnan+0xe2>

0800d486 <__ascii_mbtowc>:
 800d486:	b082      	sub	sp, #8
 800d488:	b901      	cbnz	r1, 800d48c <__ascii_mbtowc+0x6>
 800d48a:	a901      	add	r1, sp, #4
 800d48c:	b142      	cbz	r2, 800d4a0 <__ascii_mbtowc+0x1a>
 800d48e:	b14b      	cbz	r3, 800d4a4 <__ascii_mbtowc+0x1e>
 800d490:	7813      	ldrb	r3, [r2, #0]
 800d492:	600b      	str	r3, [r1, #0]
 800d494:	7812      	ldrb	r2, [r2, #0]
 800d496:	1e10      	subs	r0, r2, #0
 800d498:	bf18      	it	ne
 800d49a:	2001      	movne	r0, #1
 800d49c:	b002      	add	sp, #8
 800d49e:	4770      	bx	lr
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	e7fb      	b.n	800d49c <__ascii_mbtowc+0x16>
 800d4a4:	f06f 0001 	mvn.w	r0, #1
 800d4a8:	e7f8      	b.n	800d49c <__ascii_mbtowc+0x16>
	...

0800d4ac <_Balloc>:
 800d4ac:	b570      	push	{r4, r5, r6, lr}
 800d4ae:	69c6      	ldr	r6, [r0, #28]
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	460d      	mov	r5, r1
 800d4b4:	b976      	cbnz	r6, 800d4d4 <_Balloc+0x28>
 800d4b6:	2010      	movs	r0, #16
 800d4b8:	f7fc fe12 	bl	800a0e0 <malloc>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	61e0      	str	r0, [r4, #28]
 800d4c0:	b920      	cbnz	r0, 800d4cc <_Balloc+0x20>
 800d4c2:	4b18      	ldr	r3, [pc, #96]	@ (800d524 <_Balloc+0x78>)
 800d4c4:	4818      	ldr	r0, [pc, #96]	@ (800d528 <_Balloc+0x7c>)
 800d4c6:	216b      	movs	r1, #107	@ 0x6b
 800d4c8:	f001 fa62 	bl	800e990 <__assert_func>
 800d4cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4d0:	6006      	str	r6, [r0, #0]
 800d4d2:	60c6      	str	r6, [r0, #12]
 800d4d4:	69e6      	ldr	r6, [r4, #28]
 800d4d6:	68f3      	ldr	r3, [r6, #12]
 800d4d8:	b183      	cbz	r3, 800d4fc <_Balloc+0x50>
 800d4da:	69e3      	ldr	r3, [r4, #28]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4e2:	b9b8      	cbnz	r0, 800d514 <_Balloc+0x68>
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	fa01 f605 	lsl.w	r6, r1, r5
 800d4ea:	1d72      	adds	r2, r6, #5
 800d4ec:	0092      	lsls	r2, r2, #2
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f001 fa6c 	bl	800e9cc <_calloc_r>
 800d4f4:	b160      	cbz	r0, 800d510 <_Balloc+0x64>
 800d4f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4fa:	e00e      	b.n	800d51a <_Balloc+0x6e>
 800d4fc:	2221      	movs	r2, #33	@ 0x21
 800d4fe:	2104      	movs	r1, #4
 800d500:	4620      	mov	r0, r4
 800d502:	f001 fa63 	bl	800e9cc <_calloc_r>
 800d506:	69e3      	ldr	r3, [r4, #28]
 800d508:	60f0      	str	r0, [r6, #12]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e4      	bne.n	800d4da <_Balloc+0x2e>
 800d510:	2000      	movs	r0, #0
 800d512:	bd70      	pop	{r4, r5, r6, pc}
 800d514:	6802      	ldr	r2, [r0, #0]
 800d516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d51a:	2300      	movs	r3, #0
 800d51c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d520:	e7f7      	b.n	800d512 <_Balloc+0x66>
 800d522:	bf00      	nop
 800d524:	08010425 	.word	0x08010425
 800d528:	08010505 	.word	0x08010505

0800d52c <_Bfree>:
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	69c6      	ldr	r6, [r0, #28]
 800d530:	4605      	mov	r5, r0
 800d532:	460c      	mov	r4, r1
 800d534:	b976      	cbnz	r6, 800d554 <_Bfree+0x28>
 800d536:	2010      	movs	r0, #16
 800d538:	f7fc fdd2 	bl	800a0e0 <malloc>
 800d53c:	4602      	mov	r2, r0
 800d53e:	61e8      	str	r0, [r5, #28]
 800d540:	b920      	cbnz	r0, 800d54c <_Bfree+0x20>
 800d542:	4b09      	ldr	r3, [pc, #36]	@ (800d568 <_Bfree+0x3c>)
 800d544:	4809      	ldr	r0, [pc, #36]	@ (800d56c <_Bfree+0x40>)
 800d546:	218f      	movs	r1, #143	@ 0x8f
 800d548:	f001 fa22 	bl	800e990 <__assert_func>
 800d54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d550:	6006      	str	r6, [r0, #0]
 800d552:	60c6      	str	r6, [r0, #12]
 800d554:	b13c      	cbz	r4, 800d566 <_Bfree+0x3a>
 800d556:	69eb      	ldr	r3, [r5, #28]
 800d558:	6862      	ldr	r2, [r4, #4]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d560:	6021      	str	r1, [r4, #0]
 800d562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d566:	bd70      	pop	{r4, r5, r6, pc}
 800d568:	08010425 	.word	0x08010425
 800d56c:	08010505 	.word	0x08010505

0800d570 <__multadd>:
 800d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d574:	690d      	ldr	r5, [r1, #16]
 800d576:	4607      	mov	r7, r0
 800d578:	460c      	mov	r4, r1
 800d57a:	461e      	mov	r6, r3
 800d57c:	f101 0c14 	add.w	ip, r1, #20
 800d580:	2000      	movs	r0, #0
 800d582:	f8dc 3000 	ldr.w	r3, [ip]
 800d586:	b299      	uxth	r1, r3
 800d588:	fb02 6101 	mla	r1, r2, r1, r6
 800d58c:	0c1e      	lsrs	r6, r3, #16
 800d58e:	0c0b      	lsrs	r3, r1, #16
 800d590:	fb02 3306 	mla	r3, r2, r6, r3
 800d594:	b289      	uxth	r1, r1
 800d596:	3001      	adds	r0, #1
 800d598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d59c:	4285      	cmp	r5, r0
 800d59e:	f84c 1b04 	str.w	r1, [ip], #4
 800d5a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d5a6:	dcec      	bgt.n	800d582 <__multadd+0x12>
 800d5a8:	b30e      	cbz	r6, 800d5ee <__multadd+0x7e>
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	42ab      	cmp	r3, r5
 800d5ae:	dc19      	bgt.n	800d5e4 <__multadd+0x74>
 800d5b0:	6861      	ldr	r1, [r4, #4]
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	3101      	adds	r1, #1
 800d5b6:	f7ff ff79 	bl	800d4ac <_Balloc>
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	b928      	cbnz	r0, 800d5ca <__multadd+0x5a>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d5f4 <__multadd+0x84>)
 800d5c2:	480d      	ldr	r0, [pc, #52]	@ (800d5f8 <__multadd+0x88>)
 800d5c4:	21ba      	movs	r1, #186	@ 0xba
 800d5c6:	f001 f9e3 	bl	800e990 <__assert_func>
 800d5ca:	6922      	ldr	r2, [r4, #16]
 800d5cc:	3202      	adds	r2, #2
 800d5ce:	f104 010c 	add.w	r1, r4, #12
 800d5d2:	0092      	lsls	r2, r2, #2
 800d5d4:	300c      	adds	r0, #12
 800d5d6:	f7fe fd66 	bl	800c0a6 <memcpy>
 800d5da:	4621      	mov	r1, r4
 800d5dc:	4638      	mov	r0, r7
 800d5de:	f7ff ffa5 	bl	800d52c <_Bfree>
 800d5e2:	4644      	mov	r4, r8
 800d5e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5e8:	3501      	adds	r5, #1
 800d5ea:	615e      	str	r6, [r3, #20]
 800d5ec:	6125      	str	r5, [r4, #16]
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f4:	08010494 	.word	0x08010494
 800d5f8:	08010505 	.word	0x08010505

0800d5fc <__s2b>:
 800d5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d600:	460c      	mov	r4, r1
 800d602:	4615      	mov	r5, r2
 800d604:	461f      	mov	r7, r3
 800d606:	2209      	movs	r2, #9
 800d608:	3308      	adds	r3, #8
 800d60a:	4606      	mov	r6, r0
 800d60c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d610:	2100      	movs	r1, #0
 800d612:	2201      	movs	r2, #1
 800d614:	429a      	cmp	r2, r3
 800d616:	db09      	blt.n	800d62c <__s2b+0x30>
 800d618:	4630      	mov	r0, r6
 800d61a:	f7ff ff47 	bl	800d4ac <_Balloc>
 800d61e:	b940      	cbnz	r0, 800d632 <__s2b+0x36>
 800d620:	4602      	mov	r2, r0
 800d622:	4b19      	ldr	r3, [pc, #100]	@ (800d688 <__s2b+0x8c>)
 800d624:	4819      	ldr	r0, [pc, #100]	@ (800d68c <__s2b+0x90>)
 800d626:	21d3      	movs	r1, #211	@ 0xd3
 800d628:	f001 f9b2 	bl	800e990 <__assert_func>
 800d62c:	0052      	lsls	r2, r2, #1
 800d62e:	3101      	adds	r1, #1
 800d630:	e7f0      	b.n	800d614 <__s2b+0x18>
 800d632:	9b08      	ldr	r3, [sp, #32]
 800d634:	6143      	str	r3, [r0, #20]
 800d636:	2d09      	cmp	r5, #9
 800d638:	f04f 0301 	mov.w	r3, #1
 800d63c:	6103      	str	r3, [r0, #16]
 800d63e:	dd16      	ble.n	800d66e <__s2b+0x72>
 800d640:	f104 0909 	add.w	r9, r4, #9
 800d644:	46c8      	mov	r8, r9
 800d646:	442c      	add	r4, r5
 800d648:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d64c:	4601      	mov	r1, r0
 800d64e:	3b30      	subs	r3, #48	@ 0x30
 800d650:	220a      	movs	r2, #10
 800d652:	4630      	mov	r0, r6
 800d654:	f7ff ff8c 	bl	800d570 <__multadd>
 800d658:	45a0      	cmp	r8, r4
 800d65a:	d1f5      	bne.n	800d648 <__s2b+0x4c>
 800d65c:	f1a5 0408 	sub.w	r4, r5, #8
 800d660:	444c      	add	r4, r9
 800d662:	1b2d      	subs	r5, r5, r4
 800d664:	1963      	adds	r3, r4, r5
 800d666:	42bb      	cmp	r3, r7
 800d668:	db04      	blt.n	800d674 <__s2b+0x78>
 800d66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d66e:	340a      	adds	r4, #10
 800d670:	2509      	movs	r5, #9
 800d672:	e7f6      	b.n	800d662 <__s2b+0x66>
 800d674:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d678:	4601      	mov	r1, r0
 800d67a:	3b30      	subs	r3, #48	@ 0x30
 800d67c:	220a      	movs	r2, #10
 800d67e:	4630      	mov	r0, r6
 800d680:	f7ff ff76 	bl	800d570 <__multadd>
 800d684:	e7ee      	b.n	800d664 <__s2b+0x68>
 800d686:	bf00      	nop
 800d688:	08010494 	.word	0x08010494
 800d68c:	08010505 	.word	0x08010505

0800d690 <__hi0bits>:
 800d690:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d694:	4603      	mov	r3, r0
 800d696:	bf36      	itet	cc
 800d698:	0403      	lslcc	r3, r0, #16
 800d69a:	2000      	movcs	r0, #0
 800d69c:	2010      	movcc	r0, #16
 800d69e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6a2:	bf3c      	itt	cc
 800d6a4:	021b      	lslcc	r3, r3, #8
 800d6a6:	3008      	addcc	r0, #8
 800d6a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6ac:	bf3c      	itt	cc
 800d6ae:	011b      	lslcc	r3, r3, #4
 800d6b0:	3004      	addcc	r0, #4
 800d6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6b6:	bf3c      	itt	cc
 800d6b8:	009b      	lslcc	r3, r3, #2
 800d6ba:	3002      	addcc	r0, #2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	db05      	blt.n	800d6cc <__hi0bits+0x3c>
 800d6c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d6c4:	f100 0001 	add.w	r0, r0, #1
 800d6c8:	bf08      	it	eq
 800d6ca:	2020      	moveq	r0, #32
 800d6cc:	4770      	bx	lr

0800d6ce <__lo0bits>:
 800d6ce:	6803      	ldr	r3, [r0, #0]
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	f013 0007 	ands.w	r0, r3, #7
 800d6d6:	d00b      	beq.n	800d6f0 <__lo0bits+0x22>
 800d6d8:	07d9      	lsls	r1, r3, #31
 800d6da:	d421      	bmi.n	800d720 <__lo0bits+0x52>
 800d6dc:	0798      	lsls	r0, r3, #30
 800d6de:	bf49      	itett	mi
 800d6e0:	085b      	lsrmi	r3, r3, #1
 800d6e2:	089b      	lsrpl	r3, r3, #2
 800d6e4:	2001      	movmi	r0, #1
 800d6e6:	6013      	strmi	r3, [r2, #0]
 800d6e8:	bf5c      	itt	pl
 800d6ea:	6013      	strpl	r3, [r2, #0]
 800d6ec:	2002      	movpl	r0, #2
 800d6ee:	4770      	bx	lr
 800d6f0:	b299      	uxth	r1, r3
 800d6f2:	b909      	cbnz	r1, 800d6f8 <__lo0bits+0x2a>
 800d6f4:	0c1b      	lsrs	r3, r3, #16
 800d6f6:	2010      	movs	r0, #16
 800d6f8:	b2d9      	uxtb	r1, r3
 800d6fa:	b909      	cbnz	r1, 800d700 <__lo0bits+0x32>
 800d6fc:	3008      	adds	r0, #8
 800d6fe:	0a1b      	lsrs	r3, r3, #8
 800d700:	0719      	lsls	r1, r3, #28
 800d702:	bf04      	itt	eq
 800d704:	091b      	lsreq	r3, r3, #4
 800d706:	3004      	addeq	r0, #4
 800d708:	0799      	lsls	r1, r3, #30
 800d70a:	bf04      	itt	eq
 800d70c:	089b      	lsreq	r3, r3, #2
 800d70e:	3002      	addeq	r0, #2
 800d710:	07d9      	lsls	r1, r3, #31
 800d712:	d403      	bmi.n	800d71c <__lo0bits+0x4e>
 800d714:	085b      	lsrs	r3, r3, #1
 800d716:	f100 0001 	add.w	r0, r0, #1
 800d71a:	d003      	beq.n	800d724 <__lo0bits+0x56>
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	4770      	bx	lr
 800d720:	2000      	movs	r0, #0
 800d722:	4770      	bx	lr
 800d724:	2020      	movs	r0, #32
 800d726:	4770      	bx	lr

0800d728 <__i2b>:
 800d728:	b510      	push	{r4, lr}
 800d72a:	460c      	mov	r4, r1
 800d72c:	2101      	movs	r1, #1
 800d72e:	f7ff febd 	bl	800d4ac <_Balloc>
 800d732:	4602      	mov	r2, r0
 800d734:	b928      	cbnz	r0, 800d742 <__i2b+0x1a>
 800d736:	4b05      	ldr	r3, [pc, #20]	@ (800d74c <__i2b+0x24>)
 800d738:	4805      	ldr	r0, [pc, #20]	@ (800d750 <__i2b+0x28>)
 800d73a:	f240 1145 	movw	r1, #325	@ 0x145
 800d73e:	f001 f927 	bl	800e990 <__assert_func>
 800d742:	2301      	movs	r3, #1
 800d744:	6144      	str	r4, [r0, #20]
 800d746:	6103      	str	r3, [r0, #16]
 800d748:	bd10      	pop	{r4, pc}
 800d74a:	bf00      	nop
 800d74c:	08010494 	.word	0x08010494
 800d750:	08010505 	.word	0x08010505

0800d754 <__multiply>:
 800d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d758:	4614      	mov	r4, r2
 800d75a:	690a      	ldr	r2, [r1, #16]
 800d75c:	6923      	ldr	r3, [r4, #16]
 800d75e:	429a      	cmp	r2, r3
 800d760:	bfa8      	it	ge
 800d762:	4623      	movge	r3, r4
 800d764:	460f      	mov	r7, r1
 800d766:	bfa4      	itt	ge
 800d768:	460c      	movge	r4, r1
 800d76a:	461f      	movge	r7, r3
 800d76c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d770:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d774:	68a3      	ldr	r3, [r4, #8]
 800d776:	6861      	ldr	r1, [r4, #4]
 800d778:	eb0a 0609 	add.w	r6, sl, r9
 800d77c:	42b3      	cmp	r3, r6
 800d77e:	b085      	sub	sp, #20
 800d780:	bfb8      	it	lt
 800d782:	3101      	addlt	r1, #1
 800d784:	f7ff fe92 	bl	800d4ac <_Balloc>
 800d788:	b930      	cbnz	r0, 800d798 <__multiply+0x44>
 800d78a:	4602      	mov	r2, r0
 800d78c:	4b44      	ldr	r3, [pc, #272]	@ (800d8a0 <__multiply+0x14c>)
 800d78e:	4845      	ldr	r0, [pc, #276]	@ (800d8a4 <__multiply+0x150>)
 800d790:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d794:	f001 f8fc 	bl	800e990 <__assert_func>
 800d798:	f100 0514 	add.w	r5, r0, #20
 800d79c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d7a0:	462b      	mov	r3, r5
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	4543      	cmp	r3, r8
 800d7a6:	d321      	bcc.n	800d7ec <__multiply+0x98>
 800d7a8:	f107 0114 	add.w	r1, r7, #20
 800d7ac:	f104 0214 	add.w	r2, r4, #20
 800d7b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d7b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d7b8:	9302      	str	r3, [sp, #8]
 800d7ba:	1b13      	subs	r3, r2, r4
 800d7bc:	3b15      	subs	r3, #21
 800d7be:	f023 0303 	bic.w	r3, r3, #3
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	f104 0715 	add.w	r7, r4, #21
 800d7c8:	42ba      	cmp	r2, r7
 800d7ca:	bf38      	it	cc
 800d7cc:	2304      	movcc	r3, #4
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	9b02      	ldr	r3, [sp, #8]
 800d7d2:	9103      	str	r1, [sp, #12]
 800d7d4:	428b      	cmp	r3, r1
 800d7d6:	d80c      	bhi.n	800d7f2 <__multiply+0x9e>
 800d7d8:	2e00      	cmp	r6, #0
 800d7da:	dd03      	ble.n	800d7e4 <__multiply+0x90>
 800d7dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d05b      	beq.n	800d89c <__multiply+0x148>
 800d7e4:	6106      	str	r6, [r0, #16]
 800d7e6:	b005      	add	sp, #20
 800d7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ec:	f843 2b04 	str.w	r2, [r3], #4
 800d7f0:	e7d8      	b.n	800d7a4 <__multiply+0x50>
 800d7f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d7f6:	f1ba 0f00 	cmp.w	sl, #0
 800d7fa:	d024      	beq.n	800d846 <__multiply+0xf2>
 800d7fc:	f104 0e14 	add.w	lr, r4, #20
 800d800:	46a9      	mov	r9, r5
 800d802:	f04f 0c00 	mov.w	ip, #0
 800d806:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d80a:	f8d9 3000 	ldr.w	r3, [r9]
 800d80e:	fa1f fb87 	uxth.w	fp, r7
 800d812:	b29b      	uxth	r3, r3
 800d814:	fb0a 330b 	mla	r3, sl, fp, r3
 800d818:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d81c:	f8d9 7000 	ldr.w	r7, [r9]
 800d820:	4463      	add	r3, ip
 800d822:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d826:	fb0a c70b 	mla	r7, sl, fp, ip
 800d82a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d82e:	b29b      	uxth	r3, r3
 800d830:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d834:	4572      	cmp	r2, lr
 800d836:	f849 3b04 	str.w	r3, [r9], #4
 800d83a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d83e:	d8e2      	bhi.n	800d806 <__multiply+0xb2>
 800d840:	9b01      	ldr	r3, [sp, #4]
 800d842:	f845 c003 	str.w	ip, [r5, r3]
 800d846:	9b03      	ldr	r3, [sp, #12]
 800d848:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d84c:	3104      	adds	r1, #4
 800d84e:	f1b9 0f00 	cmp.w	r9, #0
 800d852:	d021      	beq.n	800d898 <__multiply+0x144>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	f104 0c14 	add.w	ip, r4, #20
 800d85a:	46ae      	mov	lr, r5
 800d85c:	f04f 0a00 	mov.w	sl, #0
 800d860:	f8bc b000 	ldrh.w	fp, [ip]
 800d864:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d868:	fb09 770b 	mla	r7, r9, fp, r7
 800d86c:	4457      	add	r7, sl
 800d86e:	b29b      	uxth	r3, r3
 800d870:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d874:	f84e 3b04 	str.w	r3, [lr], #4
 800d878:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d87c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d880:	f8be 3000 	ldrh.w	r3, [lr]
 800d884:	fb09 330a 	mla	r3, r9, sl, r3
 800d888:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d88c:	4562      	cmp	r2, ip
 800d88e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d892:	d8e5      	bhi.n	800d860 <__multiply+0x10c>
 800d894:	9f01      	ldr	r7, [sp, #4]
 800d896:	51eb      	str	r3, [r5, r7]
 800d898:	3504      	adds	r5, #4
 800d89a:	e799      	b.n	800d7d0 <__multiply+0x7c>
 800d89c:	3e01      	subs	r6, #1
 800d89e:	e79b      	b.n	800d7d8 <__multiply+0x84>
 800d8a0:	08010494 	.word	0x08010494
 800d8a4:	08010505 	.word	0x08010505

0800d8a8 <__pow5mult>:
 800d8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8ac:	4615      	mov	r5, r2
 800d8ae:	f012 0203 	ands.w	r2, r2, #3
 800d8b2:	4607      	mov	r7, r0
 800d8b4:	460e      	mov	r6, r1
 800d8b6:	d007      	beq.n	800d8c8 <__pow5mult+0x20>
 800d8b8:	4c25      	ldr	r4, [pc, #148]	@ (800d950 <__pow5mult+0xa8>)
 800d8ba:	3a01      	subs	r2, #1
 800d8bc:	2300      	movs	r3, #0
 800d8be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8c2:	f7ff fe55 	bl	800d570 <__multadd>
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	10ad      	asrs	r5, r5, #2
 800d8ca:	d03d      	beq.n	800d948 <__pow5mult+0xa0>
 800d8cc:	69fc      	ldr	r4, [r7, #28]
 800d8ce:	b97c      	cbnz	r4, 800d8f0 <__pow5mult+0x48>
 800d8d0:	2010      	movs	r0, #16
 800d8d2:	f7fc fc05 	bl	800a0e0 <malloc>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	61f8      	str	r0, [r7, #28]
 800d8da:	b928      	cbnz	r0, 800d8e8 <__pow5mult+0x40>
 800d8dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d954 <__pow5mult+0xac>)
 800d8de:	481e      	ldr	r0, [pc, #120]	@ (800d958 <__pow5mult+0xb0>)
 800d8e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d8e4:	f001 f854 	bl	800e990 <__assert_func>
 800d8e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8ec:	6004      	str	r4, [r0, #0]
 800d8ee:	60c4      	str	r4, [r0, #12]
 800d8f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d8f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8f8:	b94c      	cbnz	r4, 800d90e <__pow5mult+0x66>
 800d8fa:	f240 2171 	movw	r1, #625	@ 0x271
 800d8fe:	4638      	mov	r0, r7
 800d900:	f7ff ff12 	bl	800d728 <__i2b>
 800d904:	2300      	movs	r3, #0
 800d906:	f8c8 0008 	str.w	r0, [r8, #8]
 800d90a:	4604      	mov	r4, r0
 800d90c:	6003      	str	r3, [r0, #0]
 800d90e:	f04f 0900 	mov.w	r9, #0
 800d912:	07eb      	lsls	r3, r5, #31
 800d914:	d50a      	bpl.n	800d92c <__pow5mult+0x84>
 800d916:	4631      	mov	r1, r6
 800d918:	4622      	mov	r2, r4
 800d91a:	4638      	mov	r0, r7
 800d91c:	f7ff ff1a 	bl	800d754 <__multiply>
 800d920:	4631      	mov	r1, r6
 800d922:	4680      	mov	r8, r0
 800d924:	4638      	mov	r0, r7
 800d926:	f7ff fe01 	bl	800d52c <_Bfree>
 800d92a:	4646      	mov	r6, r8
 800d92c:	106d      	asrs	r5, r5, #1
 800d92e:	d00b      	beq.n	800d948 <__pow5mult+0xa0>
 800d930:	6820      	ldr	r0, [r4, #0]
 800d932:	b938      	cbnz	r0, 800d944 <__pow5mult+0x9c>
 800d934:	4622      	mov	r2, r4
 800d936:	4621      	mov	r1, r4
 800d938:	4638      	mov	r0, r7
 800d93a:	f7ff ff0b 	bl	800d754 <__multiply>
 800d93e:	6020      	str	r0, [r4, #0]
 800d940:	f8c0 9000 	str.w	r9, [r0]
 800d944:	4604      	mov	r4, r0
 800d946:	e7e4      	b.n	800d912 <__pow5mult+0x6a>
 800d948:	4630      	mov	r0, r6
 800d94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d94e:	bf00      	nop
 800d950:	08010560 	.word	0x08010560
 800d954:	08010425 	.word	0x08010425
 800d958:	08010505 	.word	0x08010505

0800d95c <__lshift>:
 800d95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d960:	460c      	mov	r4, r1
 800d962:	6849      	ldr	r1, [r1, #4]
 800d964:	6923      	ldr	r3, [r4, #16]
 800d966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d96a:	68a3      	ldr	r3, [r4, #8]
 800d96c:	4607      	mov	r7, r0
 800d96e:	4691      	mov	r9, r2
 800d970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d974:	f108 0601 	add.w	r6, r8, #1
 800d978:	42b3      	cmp	r3, r6
 800d97a:	db0b      	blt.n	800d994 <__lshift+0x38>
 800d97c:	4638      	mov	r0, r7
 800d97e:	f7ff fd95 	bl	800d4ac <_Balloc>
 800d982:	4605      	mov	r5, r0
 800d984:	b948      	cbnz	r0, 800d99a <__lshift+0x3e>
 800d986:	4602      	mov	r2, r0
 800d988:	4b28      	ldr	r3, [pc, #160]	@ (800da2c <__lshift+0xd0>)
 800d98a:	4829      	ldr	r0, [pc, #164]	@ (800da30 <__lshift+0xd4>)
 800d98c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d990:	f000 fffe 	bl	800e990 <__assert_func>
 800d994:	3101      	adds	r1, #1
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	e7ee      	b.n	800d978 <__lshift+0x1c>
 800d99a:	2300      	movs	r3, #0
 800d99c:	f100 0114 	add.w	r1, r0, #20
 800d9a0:	f100 0210 	add.w	r2, r0, #16
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	4553      	cmp	r3, sl
 800d9a8:	db33      	blt.n	800da12 <__lshift+0xb6>
 800d9aa:	6920      	ldr	r0, [r4, #16]
 800d9ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d9b0:	f104 0314 	add.w	r3, r4, #20
 800d9b4:	f019 091f 	ands.w	r9, r9, #31
 800d9b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9c0:	d02b      	beq.n	800da1a <__lshift+0xbe>
 800d9c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d9c6:	468a      	mov	sl, r1
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	6818      	ldr	r0, [r3, #0]
 800d9cc:	fa00 f009 	lsl.w	r0, r0, r9
 800d9d0:	4310      	orrs	r0, r2
 800d9d2:	f84a 0b04 	str.w	r0, [sl], #4
 800d9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9da:	459c      	cmp	ip, r3
 800d9dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9e0:	d8f3      	bhi.n	800d9ca <__lshift+0x6e>
 800d9e2:	ebac 0304 	sub.w	r3, ip, r4
 800d9e6:	3b15      	subs	r3, #21
 800d9e8:	f023 0303 	bic.w	r3, r3, #3
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	f104 0015 	add.w	r0, r4, #21
 800d9f2:	4584      	cmp	ip, r0
 800d9f4:	bf38      	it	cc
 800d9f6:	2304      	movcc	r3, #4
 800d9f8:	50ca      	str	r2, [r1, r3]
 800d9fa:	b10a      	cbz	r2, 800da00 <__lshift+0xa4>
 800d9fc:	f108 0602 	add.w	r6, r8, #2
 800da00:	3e01      	subs	r6, #1
 800da02:	4638      	mov	r0, r7
 800da04:	612e      	str	r6, [r5, #16]
 800da06:	4621      	mov	r1, r4
 800da08:	f7ff fd90 	bl	800d52c <_Bfree>
 800da0c:	4628      	mov	r0, r5
 800da0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da12:	f842 0f04 	str.w	r0, [r2, #4]!
 800da16:	3301      	adds	r3, #1
 800da18:	e7c5      	b.n	800d9a6 <__lshift+0x4a>
 800da1a:	3904      	subs	r1, #4
 800da1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da20:	f841 2f04 	str.w	r2, [r1, #4]!
 800da24:	459c      	cmp	ip, r3
 800da26:	d8f9      	bhi.n	800da1c <__lshift+0xc0>
 800da28:	e7ea      	b.n	800da00 <__lshift+0xa4>
 800da2a:	bf00      	nop
 800da2c:	08010494 	.word	0x08010494
 800da30:	08010505 	.word	0x08010505

0800da34 <__mcmp>:
 800da34:	690a      	ldr	r2, [r1, #16]
 800da36:	4603      	mov	r3, r0
 800da38:	6900      	ldr	r0, [r0, #16]
 800da3a:	1a80      	subs	r0, r0, r2
 800da3c:	b530      	push	{r4, r5, lr}
 800da3e:	d10e      	bne.n	800da5e <__mcmp+0x2a>
 800da40:	3314      	adds	r3, #20
 800da42:	3114      	adds	r1, #20
 800da44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800da48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800da4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800da50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800da54:	4295      	cmp	r5, r2
 800da56:	d003      	beq.n	800da60 <__mcmp+0x2c>
 800da58:	d205      	bcs.n	800da66 <__mcmp+0x32>
 800da5a:	f04f 30ff 	mov.w	r0, #4294967295
 800da5e:	bd30      	pop	{r4, r5, pc}
 800da60:	42a3      	cmp	r3, r4
 800da62:	d3f3      	bcc.n	800da4c <__mcmp+0x18>
 800da64:	e7fb      	b.n	800da5e <__mcmp+0x2a>
 800da66:	2001      	movs	r0, #1
 800da68:	e7f9      	b.n	800da5e <__mcmp+0x2a>
	...

0800da6c <__mdiff>:
 800da6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da70:	4689      	mov	r9, r1
 800da72:	4606      	mov	r6, r0
 800da74:	4611      	mov	r1, r2
 800da76:	4648      	mov	r0, r9
 800da78:	4614      	mov	r4, r2
 800da7a:	f7ff ffdb 	bl	800da34 <__mcmp>
 800da7e:	1e05      	subs	r5, r0, #0
 800da80:	d112      	bne.n	800daa8 <__mdiff+0x3c>
 800da82:	4629      	mov	r1, r5
 800da84:	4630      	mov	r0, r6
 800da86:	f7ff fd11 	bl	800d4ac <_Balloc>
 800da8a:	4602      	mov	r2, r0
 800da8c:	b928      	cbnz	r0, 800da9a <__mdiff+0x2e>
 800da8e:	4b3f      	ldr	r3, [pc, #252]	@ (800db8c <__mdiff+0x120>)
 800da90:	f240 2137 	movw	r1, #567	@ 0x237
 800da94:	483e      	ldr	r0, [pc, #248]	@ (800db90 <__mdiff+0x124>)
 800da96:	f000 ff7b 	bl	800e990 <__assert_func>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800daa0:	4610      	mov	r0, r2
 800daa2:	b003      	add	sp, #12
 800daa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa8:	bfbc      	itt	lt
 800daaa:	464b      	movlt	r3, r9
 800daac:	46a1      	movlt	r9, r4
 800daae:	4630      	mov	r0, r6
 800dab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dab4:	bfba      	itte	lt
 800dab6:	461c      	movlt	r4, r3
 800dab8:	2501      	movlt	r5, #1
 800daba:	2500      	movge	r5, #0
 800dabc:	f7ff fcf6 	bl	800d4ac <_Balloc>
 800dac0:	4602      	mov	r2, r0
 800dac2:	b918      	cbnz	r0, 800dacc <__mdiff+0x60>
 800dac4:	4b31      	ldr	r3, [pc, #196]	@ (800db8c <__mdiff+0x120>)
 800dac6:	f240 2145 	movw	r1, #581	@ 0x245
 800daca:	e7e3      	b.n	800da94 <__mdiff+0x28>
 800dacc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dad0:	6926      	ldr	r6, [r4, #16]
 800dad2:	60c5      	str	r5, [r0, #12]
 800dad4:	f109 0310 	add.w	r3, r9, #16
 800dad8:	f109 0514 	add.w	r5, r9, #20
 800dadc:	f104 0e14 	add.w	lr, r4, #20
 800dae0:	f100 0b14 	add.w	fp, r0, #20
 800dae4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dae8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	46d9      	mov	r9, fp
 800daf0:	f04f 0c00 	mov.w	ip, #0
 800daf4:	9b01      	ldr	r3, [sp, #4]
 800daf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dafa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dafe:	9301      	str	r3, [sp, #4]
 800db00:	fa1f f38a 	uxth.w	r3, sl
 800db04:	4619      	mov	r1, r3
 800db06:	b283      	uxth	r3, r0
 800db08:	1acb      	subs	r3, r1, r3
 800db0a:	0c00      	lsrs	r0, r0, #16
 800db0c:	4463      	add	r3, ip
 800db0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800db12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800db16:	b29b      	uxth	r3, r3
 800db18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800db1c:	4576      	cmp	r6, lr
 800db1e:	f849 3b04 	str.w	r3, [r9], #4
 800db22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db26:	d8e5      	bhi.n	800daf4 <__mdiff+0x88>
 800db28:	1b33      	subs	r3, r6, r4
 800db2a:	3b15      	subs	r3, #21
 800db2c:	f023 0303 	bic.w	r3, r3, #3
 800db30:	3415      	adds	r4, #21
 800db32:	3304      	adds	r3, #4
 800db34:	42a6      	cmp	r6, r4
 800db36:	bf38      	it	cc
 800db38:	2304      	movcc	r3, #4
 800db3a:	441d      	add	r5, r3
 800db3c:	445b      	add	r3, fp
 800db3e:	461e      	mov	r6, r3
 800db40:	462c      	mov	r4, r5
 800db42:	4544      	cmp	r4, r8
 800db44:	d30e      	bcc.n	800db64 <__mdiff+0xf8>
 800db46:	f108 0103 	add.w	r1, r8, #3
 800db4a:	1b49      	subs	r1, r1, r5
 800db4c:	f021 0103 	bic.w	r1, r1, #3
 800db50:	3d03      	subs	r5, #3
 800db52:	45a8      	cmp	r8, r5
 800db54:	bf38      	it	cc
 800db56:	2100      	movcc	r1, #0
 800db58:	440b      	add	r3, r1
 800db5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db5e:	b191      	cbz	r1, 800db86 <__mdiff+0x11a>
 800db60:	6117      	str	r7, [r2, #16]
 800db62:	e79d      	b.n	800daa0 <__mdiff+0x34>
 800db64:	f854 1b04 	ldr.w	r1, [r4], #4
 800db68:	46e6      	mov	lr, ip
 800db6a:	0c08      	lsrs	r0, r1, #16
 800db6c:	fa1c fc81 	uxtah	ip, ip, r1
 800db70:	4471      	add	r1, lr
 800db72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800db76:	b289      	uxth	r1, r1
 800db78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db7c:	f846 1b04 	str.w	r1, [r6], #4
 800db80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db84:	e7dd      	b.n	800db42 <__mdiff+0xd6>
 800db86:	3f01      	subs	r7, #1
 800db88:	e7e7      	b.n	800db5a <__mdiff+0xee>
 800db8a:	bf00      	nop
 800db8c:	08010494 	.word	0x08010494
 800db90:	08010505 	.word	0x08010505

0800db94 <__ulp>:
 800db94:	b082      	sub	sp, #8
 800db96:	ed8d 0b00 	vstr	d0, [sp]
 800db9a:	9a01      	ldr	r2, [sp, #4]
 800db9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dbdc <__ulp+0x48>)
 800db9e:	4013      	ands	r3, r2
 800dba0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dc08      	bgt.n	800dbba <__ulp+0x26>
 800dba8:	425b      	negs	r3, r3
 800dbaa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dbae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dbb2:	da04      	bge.n	800dbbe <__ulp+0x2a>
 800dbb4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dbb8:	4113      	asrs	r3, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	e008      	b.n	800dbd0 <__ulp+0x3c>
 800dbbe:	f1a2 0314 	sub.w	r3, r2, #20
 800dbc2:	2b1e      	cmp	r3, #30
 800dbc4:	bfda      	itte	le
 800dbc6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dbca:	40da      	lsrle	r2, r3
 800dbcc:	2201      	movgt	r2, #1
 800dbce:	2300      	movs	r3, #0
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	ec41 0b10 	vmov	d0, r0, r1
 800dbd8:	b002      	add	sp, #8
 800dbda:	4770      	bx	lr
 800dbdc:	7ff00000 	.word	0x7ff00000

0800dbe0 <__b2d>:
 800dbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe4:	6906      	ldr	r6, [r0, #16]
 800dbe6:	f100 0814 	add.w	r8, r0, #20
 800dbea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dbee:	1f37      	subs	r7, r6, #4
 800dbf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	f7ff fd4b 	bl	800d690 <__hi0bits>
 800dbfa:	f1c0 0320 	rsb	r3, r0, #32
 800dbfe:	280a      	cmp	r0, #10
 800dc00:	600b      	str	r3, [r1, #0]
 800dc02:	491b      	ldr	r1, [pc, #108]	@ (800dc70 <__b2d+0x90>)
 800dc04:	dc15      	bgt.n	800dc32 <__b2d+0x52>
 800dc06:	f1c0 0c0b 	rsb	ip, r0, #11
 800dc0a:	fa22 f30c 	lsr.w	r3, r2, ip
 800dc0e:	45b8      	cmp	r8, r7
 800dc10:	ea43 0501 	orr.w	r5, r3, r1
 800dc14:	bf34      	ite	cc
 800dc16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc1a:	2300      	movcs	r3, #0
 800dc1c:	3015      	adds	r0, #21
 800dc1e:	fa02 f000 	lsl.w	r0, r2, r0
 800dc22:	fa23 f30c 	lsr.w	r3, r3, ip
 800dc26:	4303      	orrs	r3, r0
 800dc28:	461c      	mov	r4, r3
 800dc2a:	ec45 4b10 	vmov	d0, r4, r5
 800dc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc32:	45b8      	cmp	r8, r7
 800dc34:	bf3a      	itte	cc
 800dc36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc3a:	f1a6 0708 	subcc.w	r7, r6, #8
 800dc3e:	2300      	movcs	r3, #0
 800dc40:	380b      	subs	r0, #11
 800dc42:	d012      	beq.n	800dc6a <__b2d+0x8a>
 800dc44:	f1c0 0120 	rsb	r1, r0, #32
 800dc48:	fa23 f401 	lsr.w	r4, r3, r1
 800dc4c:	4082      	lsls	r2, r0
 800dc4e:	4322      	orrs	r2, r4
 800dc50:	4547      	cmp	r7, r8
 800dc52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dc56:	bf8c      	ite	hi
 800dc58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dc5c:	2200      	movls	r2, #0
 800dc5e:	4083      	lsls	r3, r0
 800dc60:	40ca      	lsrs	r2, r1
 800dc62:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dc66:	4313      	orrs	r3, r2
 800dc68:	e7de      	b.n	800dc28 <__b2d+0x48>
 800dc6a:	ea42 0501 	orr.w	r5, r2, r1
 800dc6e:	e7db      	b.n	800dc28 <__b2d+0x48>
 800dc70:	3ff00000 	.word	0x3ff00000

0800dc74 <__d2b>:
 800dc74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc78:	460f      	mov	r7, r1
 800dc7a:	2101      	movs	r1, #1
 800dc7c:	ec59 8b10 	vmov	r8, r9, d0
 800dc80:	4616      	mov	r6, r2
 800dc82:	f7ff fc13 	bl	800d4ac <_Balloc>
 800dc86:	4604      	mov	r4, r0
 800dc88:	b930      	cbnz	r0, 800dc98 <__d2b+0x24>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	4b23      	ldr	r3, [pc, #140]	@ (800dd1c <__d2b+0xa8>)
 800dc8e:	4824      	ldr	r0, [pc, #144]	@ (800dd20 <__d2b+0xac>)
 800dc90:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc94:	f000 fe7c 	bl	800e990 <__assert_func>
 800dc98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dca0:	b10d      	cbz	r5, 800dca6 <__d2b+0x32>
 800dca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	f1b8 0300 	subs.w	r3, r8, #0
 800dcac:	d023      	beq.n	800dcf6 <__d2b+0x82>
 800dcae:	4668      	mov	r0, sp
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	f7ff fd0c 	bl	800d6ce <__lo0bits>
 800dcb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dcba:	b1d0      	cbz	r0, 800dcf2 <__d2b+0x7e>
 800dcbc:	f1c0 0320 	rsb	r3, r0, #32
 800dcc0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc4:	430b      	orrs	r3, r1
 800dcc6:	40c2      	lsrs	r2, r0
 800dcc8:	6163      	str	r3, [r4, #20]
 800dcca:	9201      	str	r2, [sp, #4]
 800dccc:	9b01      	ldr	r3, [sp, #4]
 800dcce:	61a3      	str	r3, [r4, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	bf0c      	ite	eq
 800dcd4:	2201      	moveq	r2, #1
 800dcd6:	2202      	movne	r2, #2
 800dcd8:	6122      	str	r2, [r4, #16]
 800dcda:	b1a5      	cbz	r5, 800dd06 <__d2b+0x92>
 800dcdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dce0:	4405      	add	r5, r0
 800dce2:	603d      	str	r5, [r7, #0]
 800dce4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dce8:	6030      	str	r0, [r6, #0]
 800dcea:	4620      	mov	r0, r4
 800dcec:	b003      	add	sp, #12
 800dcee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcf2:	6161      	str	r1, [r4, #20]
 800dcf4:	e7ea      	b.n	800dccc <__d2b+0x58>
 800dcf6:	a801      	add	r0, sp, #4
 800dcf8:	f7ff fce9 	bl	800d6ce <__lo0bits>
 800dcfc:	9b01      	ldr	r3, [sp, #4]
 800dcfe:	6163      	str	r3, [r4, #20]
 800dd00:	3020      	adds	r0, #32
 800dd02:	2201      	movs	r2, #1
 800dd04:	e7e8      	b.n	800dcd8 <__d2b+0x64>
 800dd06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd0e:	6038      	str	r0, [r7, #0]
 800dd10:	6918      	ldr	r0, [r3, #16]
 800dd12:	f7ff fcbd 	bl	800d690 <__hi0bits>
 800dd16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd1a:	e7e5      	b.n	800dce8 <__d2b+0x74>
 800dd1c:	08010494 	.word	0x08010494
 800dd20:	08010505 	.word	0x08010505

0800dd24 <__ratio>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	b085      	sub	sp, #20
 800dd2a:	e9cd 1000 	strd	r1, r0, [sp]
 800dd2e:	a902      	add	r1, sp, #8
 800dd30:	f7ff ff56 	bl	800dbe0 <__b2d>
 800dd34:	9800      	ldr	r0, [sp, #0]
 800dd36:	a903      	add	r1, sp, #12
 800dd38:	ec55 4b10 	vmov	r4, r5, d0
 800dd3c:	f7ff ff50 	bl	800dbe0 <__b2d>
 800dd40:	9b01      	ldr	r3, [sp, #4]
 800dd42:	6919      	ldr	r1, [r3, #16]
 800dd44:	9b00      	ldr	r3, [sp, #0]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	1ac9      	subs	r1, r1, r3
 800dd4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dd4e:	1a9b      	subs	r3, r3, r2
 800dd50:	ec5b ab10 	vmov	sl, fp, d0
 800dd54:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	bfce      	itee	gt
 800dd5c:	462a      	movgt	r2, r5
 800dd5e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd62:	465a      	movle	r2, fp
 800dd64:	462f      	mov	r7, r5
 800dd66:	46d9      	mov	r9, fp
 800dd68:	bfcc      	ite	gt
 800dd6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd6e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dd72:	464b      	mov	r3, r9
 800dd74:	4652      	mov	r2, sl
 800dd76:	4620      	mov	r0, r4
 800dd78:	4639      	mov	r1, r7
 800dd7a:	f7f2 fd77 	bl	800086c <__aeabi_ddiv>
 800dd7e:	ec41 0b10 	vmov	d0, r0, r1
 800dd82:	b005      	add	sp, #20
 800dd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd88 <__copybits>:
 800dd88:	3901      	subs	r1, #1
 800dd8a:	b570      	push	{r4, r5, r6, lr}
 800dd8c:	1149      	asrs	r1, r1, #5
 800dd8e:	6914      	ldr	r4, [r2, #16]
 800dd90:	3101      	adds	r1, #1
 800dd92:	f102 0314 	add.w	r3, r2, #20
 800dd96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd9e:	1f05      	subs	r5, r0, #4
 800dda0:	42a3      	cmp	r3, r4
 800dda2:	d30c      	bcc.n	800ddbe <__copybits+0x36>
 800dda4:	1aa3      	subs	r3, r4, r2
 800dda6:	3b11      	subs	r3, #17
 800dda8:	f023 0303 	bic.w	r3, r3, #3
 800ddac:	3211      	adds	r2, #17
 800ddae:	42a2      	cmp	r2, r4
 800ddb0:	bf88      	it	hi
 800ddb2:	2300      	movhi	r3, #0
 800ddb4:	4418      	add	r0, r3
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	4288      	cmp	r0, r1
 800ddba:	d305      	bcc.n	800ddc8 <__copybits+0x40>
 800ddbc:	bd70      	pop	{r4, r5, r6, pc}
 800ddbe:	f853 6b04 	ldr.w	r6, [r3], #4
 800ddc2:	f845 6f04 	str.w	r6, [r5, #4]!
 800ddc6:	e7eb      	b.n	800dda0 <__copybits+0x18>
 800ddc8:	f840 3b04 	str.w	r3, [r0], #4
 800ddcc:	e7f4      	b.n	800ddb8 <__copybits+0x30>

0800ddce <__any_on>:
 800ddce:	f100 0214 	add.w	r2, r0, #20
 800ddd2:	6900      	ldr	r0, [r0, #16]
 800ddd4:	114b      	asrs	r3, r1, #5
 800ddd6:	4298      	cmp	r0, r3
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	db11      	blt.n	800de00 <__any_on+0x32>
 800dddc:	dd0a      	ble.n	800ddf4 <__any_on+0x26>
 800ddde:	f011 011f 	ands.w	r1, r1, #31
 800dde2:	d007      	beq.n	800ddf4 <__any_on+0x26>
 800dde4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dde8:	fa24 f001 	lsr.w	r0, r4, r1
 800ddec:	fa00 f101 	lsl.w	r1, r0, r1
 800ddf0:	428c      	cmp	r4, r1
 800ddf2:	d10b      	bne.n	800de0c <__any_on+0x3e>
 800ddf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d803      	bhi.n	800de04 <__any_on+0x36>
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	bd10      	pop	{r4, pc}
 800de00:	4603      	mov	r3, r0
 800de02:	e7f7      	b.n	800ddf4 <__any_on+0x26>
 800de04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de08:	2900      	cmp	r1, #0
 800de0a:	d0f5      	beq.n	800ddf8 <__any_on+0x2a>
 800de0c:	2001      	movs	r0, #1
 800de0e:	e7f6      	b.n	800ddfe <__any_on+0x30>

0800de10 <_malloc_usable_size_r>:
 800de10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de14:	1f18      	subs	r0, r3, #4
 800de16:	2b00      	cmp	r3, #0
 800de18:	bfbc      	itt	lt
 800de1a:	580b      	ldrlt	r3, [r1, r0]
 800de1c:	18c0      	addlt	r0, r0, r3
 800de1e:	4770      	bx	lr

0800de20 <__ascii_wctomb>:
 800de20:	4603      	mov	r3, r0
 800de22:	4608      	mov	r0, r1
 800de24:	b141      	cbz	r1, 800de38 <__ascii_wctomb+0x18>
 800de26:	2aff      	cmp	r2, #255	@ 0xff
 800de28:	d904      	bls.n	800de34 <__ascii_wctomb+0x14>
 800de2a:	228a      	movs	r2, #138	@ 0x8a
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	f04f 30ff 	mov.w	r0, #4294967295
 800de32:	4770      	bx	lr
 800de34:	700a      	strb	r2, [r1, #0]
 800de36:	2001      	movs	r0, #1
 800de38:	4770      	bx	lr

0800de3a <__ssputs_r>:
 800de3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de3e:	688e      	ldr	r6, [r1, #8]
 800de40:	461f      	mov	r7, r3
 800de42:	42be      	cmp	r6, r7
 800de44:	680b      	ldr	r3, [r1, #0]
 800de46:	4682      	mov	sl, r0
 800de48:	460c      	mov	r4, r1
 800de4a:	4690      	mov	r8, r2
 800de4c:	d82d      	bhi.n	800deaa <__ssputs_r+0x70>
 800de4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de52:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de56:	d026      	beq.n	800dea6 <__ssputs_r+0x6c>
 800de58:	6965      	ldr	r5, [r4, #20]
 800de5a:	6909      	ldr	r1, [r1, #16]
 800de5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de60:	eba3 0901 	sub.w	r9, r3, r1
 800de64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de68:	1c7b      	adds	r3, r7, #1
 800de6a:	444b      	add	r3, r9
 800de6c:	106d      	asrs	r5, r5, #1
 800de6e:	429d      	cmp	r5, r3
 800de70:	bf38      	it	cc
 800de72:	461d      	movcc	r5, r3
 800de74:	0553      	lsls	r3, r2, #21
 800de76:	d527      	bpl.n	800dec8 <__ssputs_r+0x8e>
 800de78:	4629      	mov	r1, r5
 800de7a:	f7fc f963 	bl	800a144 <_malloc_r>
 800de7e:	4606      	mov	r6, r0
 800de80:	b360      	cbz	r0, 800dedc <__ssputs_r+0xa2>
 800de82:	6921      	ldr	r1, [r4, #16]
 800de84:	464a      	mov	r2, r9
 800de86:	f7fe f90e 	bl	800c0a6 <memcpy>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	6126      	str	r6, [r4, #16]
 800de98:	6165      	str	r5, [r4, #20]
 800de9a:	444e      	add	r6, r9
 800de9c:	eba5 0509 	sub.w	r5, r5, r9
 800dea0:	6026      	str	r6, [r4, #0]
 800dea2:	60a5      	str	r5, [r4, #8]
 800dea4:	463e      	mov	r6, r7
 800dea6:	42be      	cmp	r6, r7
 800dea8:	d900      	bls.n	800deac <__ssputs_r+0x72>
 800deaa:	463e      	mov	r6, r7
 800deac:	6820      	ldr	r0, [r4, #0]
 800deae:	4632      	mov	r2, r6
 800deb0:	4641      	mov	r1, r8
 800deb2:	f000 fd52 	bl	800e95a <memmove>
 800deb6:	68a3      	ldr	r3, [r4, #8]
 800deb8:	1b9b      	subs	r3, r3, r6
 800deba:	60a3      	str	r3, [r4, #8]
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	4433      	add	r3, r6
 800dec0:	6023      	str	r3, [r4, #0]
 800dec2:	2000      	movs	r0, #0
 800dec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dec8:	462a      	mov	r2, r5
 800deca:	f7fc f9cf 	bl	800a26c <_realloc_r>
 800dece:	4606      	mov	r6, r0
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d1e0      	bne.n	800de96 <__ssputs_r+0x5c>
 800ded4:	6921      	ldr	r1, [r4, #16]
 800ded6:	4650      	mov	r0, sl
 800ded8:	f7fe ff52 	bl	800cd80 <_free_r>
 800dedc:	230c      	movs	r3, #12
 800dede:	f8ca 3000 	str.w	r3, [sl]
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee8:	81a3      	strh	r3, [r4, #12]
 800deea:	f04f 30ff 	mov.w	r0, #4294967295
 800deee:	e7e9      	b.n	800dec4 <__ssputs_r+0x8a>

0800def0 <_svfiprintf_r>:
 800def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def4:	4698      	mov	r8, r3
 800def6:	898b      	ldrh	r3, [r1, #12]
 800def8:	061b      	lsls	r3, r3, #24
 800defa:	b09d      	sub	sp, #116	@ 0x74
 800defc:	4607      	mov	r7, r0
 800defe:	460d      	mov	r5, r1
 800df00:	4614      	mov	r4, r2
 800df02:	d510      	bpl.n	800df26 <_svfiprintf_r+0x36>
 800df04:	690b      	ldr	r3, [r1, #16]
 800df06:	b973      	cbnz	r3, 800df26 <_svfiprintf_r+0x36>
 800df08:	2140      	movs	r1, #64	@ 0x40
 800df0a:	f7fc f91b 	bl	800a144 <_malloc_r>
 800df0e:	6028      	str	r0, [r5, #0]
 800df10:	6128      	str	r0, [r5, #16]
 800df12:	b930      	cbnz	r0, 800df22 <_svfiprintf_r+0x32>
 800df14:	230c      	movs	r3, #12
 800df16:	603b      	str	r3, [r7, #0]
 800df18:	f04f 30ff 	mov.w	r0, #4294967295
 800df1c:	b01d      	add	sp, #116	@ 0x74
 800df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df22:	2340      	movs	r3, #64	@ 0x40
 800df24:	616b      	str	r3, [r5, #20]
 800df26:	2300      	movs	r3, #0
 800df28:	9309      	str	r3, [sp, #36]	@ 0x24
 800df2a:	2320      	movs	r3, #32
 800df2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df30:	f8cd 800c 	str.w	r8, [sp, #12]
 800df34:	2330      	movs	r3, #48	@ 0x30
 800df36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e0d4 <_svfiprintf_r+0x1e4>
 800df3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df3e:	f04f 0901 	mov.w	r9, #1
 800df42:	4623      	mov	r3, r4
 800df44:	469a      	mov	sl, r3
 800df46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df4a:	b10a      	cbz	r2, 800df50 <_svfiprintf_r+0x60>
 800df4c:	2a25      	cmp	r2, #37	@ 0x25
 800df4e:	d1f9      	bne.n	800df44 <_svfiprintf_r+0x54>
 800df50:	ebba 0b04 	subs.w	fp, sl, r4
 800df54:	d00b      	beq.n	800df6e <_svfiprintf_r+0x7e>
 800df56:	465b      	mov	r3, fp
 800df58:	4622      	mov	r2, r4
 800df5a:	4629      	mov	r1, r5
 800df5c:	4638      	mov	r0, r7
 800df5e:	f7ff ff6c 	bl	800de3a <__ssputs_r>
 800df62:	3001      	adds	r0, #1
 800df64:	f000 80a7 	beq.w	800e0b6 <_svfiprintf_r+0x1c6>
 800df68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df6a:	445a      	add	r2, fp
 800df6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800df6e:	f89a 3000 	ldrb.w	r3, [sl]
 800df72:	2b00      	cmp	r3, #0
 800df74:	f000 809f 	beq.w	800e0b6 <_svfiprintf_r+0x1c6>
 800df78:	2300      	movs	r3, #0
 800df7a:	f04f 32ff 	mov.w	r2, #4294967295
 800df7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df82:	f10a 0a01 	add.w	sl, sl, #1
 800df86:	9304      	str	r3, [sp, #16]
 800df88:	9307      	str	r3, [sp, #28]
 800df8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800df90:	4654      	mov	r4, sl
 800df92:	2205      	movs	r2, #5
 800df94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df98:	484e      	ldr	r0, [pc, #312]	@ (800e0d4 <_svfiprintf_r+0x1e4>)
 800df9a:	f7f2 f929 	bl	80001f0 <memchr>
 800df9e:	9a04      	ldr	r2, [sp, #16]
 800dfa0:	b9d8      	cbnz	r0, 800dfda <_svfiprintf_r+0xea>
 800dfa2:	06d0      	lsls	r0, r2, #27
 800dfa4:	bf44      	itt	mi
 800dfa6:	2320      	movmi	r3, #32
 800dfa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfac:	0711      	lsls	r1, r2, #28
 800dfae:	bf44      	itt	mi
 800dfb0:	232b      	movmi	r3, #43	@ 0x2b
 800dfb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfb6:	f89a 3000 	ldrb.w	r3, [sl]
 800dfba:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfbc:	d015      	beq.n	800dfea <_svfiprintf_r+0xfa>
 800dfbe:	9a07      	ldr	r2, [sp, #28]
 800dfc0:	4654      	mov	r4, sl
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	f04f 0c0a 	mov.w	ip, #10
 800dfc8:	4621      	mov	r1, r4
 800dfca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfce:	3b30      	subs	r3, #48	@ 0x30
 800dfd0:	2b09      	cmp	r3, #9
 800dfd2:	d94b      	bls.n	800e06c <_svfiprintf_r+0x17c>
 800dfd4:	b1b0      	cbz	r0, 800e004 <_svfiprintf_r+0x114>
 800dfd6:	9207      	str	r2, [sp, #28]
 800dfd8:	e014      	b.n	800e004 <_svfiprintf_r+0x114>
 800dfda:	eba0 0308 	sub.w	r3, r0, r8
 800dfde:	fa09 f303 	lsl.w	r3, r9, r3
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	46a2      	mov	sl, r4
 800dfe8:	e7d2      	b.n	800df90 <_svfiprintf_r+0xa0>
 800dfea:	9b03      	ldr	r3, [sp, #12]
 800dfec:	1d19      	adds	r1, r3, #4
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	9103      	str	r1, [sp, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	bfbb      	ittet	lt
 800dff6:	425b      	neglt	r3, r3
 800dff8:	f042 0202 	orrlt.w	r2, r2, #2
 800dffc:	9307      	strge	r3, [sp, #28]
 800dffe:	9307      	strlt	r3, [sp, #28]
 800e000:	bfb8      	it	lt
 800e002:	9204      	strlt	r2, [sp, #16]
 800e004:	7823      	ldrb	r3, [r4, #0]
 800e006:	2b2e      	cmp	r3, #46	@ 0x2e
 800e008:	d10a      	bne.n	800e020 <_svfiprintf_r+0x130>
 800e00a:	7863      	ldrb	r3, [r4, #1]
 800e00c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e00e:	d132      	bne.n	800e076 <_svfiprintf_r+0x186>
 800e010:	9b03      	ldr	r3, [sp, #12]
 800e012:	1d1a      	adds	r2, r3, #4
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	9203      	str	r2, [sp, #12]
 800e018:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e01c:	3402      	adds	r4, #2
 800e01e:	9305      	str	r3, [sp, #20]
 800e020:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e0e4 <_svfiprintf_r+0x1f4>
 800e024:	7821      	ldrb	r1, [r4, #0]
 800e026:	2203      	movs	r2, #3
 800e028:	4650      	mov	r0, sl
 800e02a:	f7f2 f8e1 	bl	80001f0 <memchr>
 800e02e:	b138      	cbz	r0, 800e040 <_svfiprintf_r+0x150>
 800e030:	9b04      	ldr	r3, [sp, #16]
 800e032:	eba0 000a 	sub.w	r0, r0, sl
 800e036:	2240      	movs	r2, #64	@ 0x40
 800e038:	4082      	lsls	r2, r0
 800e03a:	4313      	orrs	r3, r2
 800e03c:	3401      	adds	r4, #1
 800e03e:	9304      	str	r3, [sp, #16]
 800e040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e044:	4824      	ldr	r0, [pc, #144]	@ (800e0d8 <_svfiprintf_r+0x1e8>)
 800e046:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e04a:	2206      	movs	r2, #6
 800e04c:	f7f2 f8d0 	bl	80001f0 <memchr>
 800e050:	2800      	cmp	r0, #0
 800e052:	d036      	beq.n	800e0c2 <_svfiprintf_r+0x1d2>
 800e054:	4b21      	ldr	r3, [pc, #132]	@ (800e0dc <_svfiprintf_r+0x1ec>)
 800e056:	bb1b      	cbnz	r3, 800e0a0 <_svfiprintf_r+0x1b0>
 800e058:	9b03      	ldr	r3, [sp, #12]
 800e05a:	3307      	adds	r3, #7
 800e05c:	f023 0307 	bic.w	r3, r3, #7
 800e060:	3308      	adds	r3, #8
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e066:	4433      	add	r3, r6
 800e068:	9309      	str	r3, [sp, #36]	@ 0x24
 800e06a:	e76a      	b.n	800df42 <_svfiprintf_r+0x52>
 800e06c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e070:	460c      	mov	r4, r1
 800e072:	2001      	movs	r0, #1
 800e074:	e7a8      	b.n	800dfc8 <_svfiprintf_r+0xd8>
 800e076:	2300      	movs	r3, #0
 800e078:	3401      	adds	r4, #1
 800e07a:	9305      	str	r3, [sp, #20]
 800e07c:	4619      	mov	r1, r3
 800e07e:	f04f 0c0a 	mov.w	ip, #10
 800e082:	4620      	mov	r0, r4
 800e084:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e088:	3a30      	subs	r2, #48	@ 0x30
 800e08a:	2a09      	cmp	r2, #9
 800e08c:	d903      	bls.n	800e096 <_svfiprintf_r+0x1a6>
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d0c6      	beq.n	800e020 <_svfiprintf_r+0x130>
 800e092:	9105      	str	r1, [sp, #20]
 800e094:	e7c4      	b.n	800e020 <_svfiprintf_r+0x130>
 800e096:	fb0c 2101 	mla	r1, ip, r1, r2
 800e09a:	4604      	mov	r4, r0
 800e09c:	2301      	movs	r3, #1
 800e09e:	e7f0      	b.n	800e082 <_svfiprintf_r+0x192>
 800e0a0:	ab03      	add	r3, sp, #12
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	462a      	mov	r2, r5
 800e0a6:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e0 <_svfiprintf_r+0x1f0>)
 800e0a8:	a904      	add	r1, sp, #16
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	f7fd f83c 	bl	800b128 <_printf_float>
 800e0b0:	1c42      	adds	r2, r0, #1
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	d1d6      	bne.n	800e064 <_svfiprintf_r+0x174>
 800e0b6:	89ab      	ldrh	r3, [r5, #12]
 800e0b8:	065b      	lsls	r3, r3, #25
 800e0ba:	f53f af2d 	bmi.w	800df18 <_svfiprintf_r+0x28>
 800e0be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0c0:	e72c      	b.n	800df1c <_svfiprintf_r+0x2c>
 800e0c2:	ab03      	add	r3, sp, #12
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4b05      	ldr	r3, [pc, #20]	@ (800e0e0 <_svfiprintf_r+0x1f0>)
 800e0ca:	a904      	add	r1, sp, #16
 800e0cc:	4638      	mov	r0, r7
 800e0ce:	f7fd fac3 	bl	800b658 <_printf_i>
 800e0d2:	e7ed      	b.n	800e0b0 <_svfiprintf_r+0x1c0>
 800e0d4:	08010660 	.word	0x08010660
 800e0d8:	0801066a 	.word	0x0801066a
 800e0dc:	0800b129 	.word	0x0800b129
 800e0e0:	0800de3b 	.word	0x0800de3b
 800e0e4:	08010666 	.word	0x08010666

0800e0e8 <_sungetc_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	1c4b      	adds	r3, r1, #1
 800e0ec:	4614      	mov	r4, r2
 800e0ee:	d103      	bne.n	800e0f8 <_sungetc_r+0x10>
 800e0f0:	f04f 35ff 	mov.w	r5, #4294967295
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	bd38      	pop	{r3, r4, r5, pc}
 800e0f8:	8993      	ldrh	r3, [r2, #12]
 800e0fa:	f023 0320 	bic.w	r3, r3, #32
 800e0fe:	8193      	strh	r3, [r2, #12]
 800e100:	6853      	ldr	r3, [r2, #4]
 800e102:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e104:	b2cd      	uxtb	r5, r1
 800e106:	b18a      	cbz	r2, 800e12c <_sungetc_r+0x44>
 800e108:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e10a:	429a      	cmp	r2, r3
 800e10c:	dd08      	ble.n	800e120 <_sungetc_r+0x38>
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	1e5a      	subs	r2, r3, #1
 800e112:	6022      	str	r2, [r4, #0]
 800e114:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e118:	6863      	ldr	r3, [r4, #4]
 800e11a:	3301      	adds	r3, #1
 800e11c:	6063      	str	r3, [r4, #4]
 800e11e:	e7e9      	b.n	800e0f4 <_sungetc_r+0xc>
 800e120:	4621      	mov	r1, r4
 800e122:	f000 fbe0 	bl	800e8e6 <__submore>
 800e126:	2800      	cmp	r0, #0
 800e128:	d0f1      	beq.n	800e10e <_sungetc_r+0x26>
 800e12a:	e7e1      	b.n	800e0f0 <_sungetc_r+0x8>
 800e12c:	6921      	ldr	r1, [r4, #16]
 800e12e:	6822      	ldr	r2, [r4, #0]
 800e130:	b141      	cbz	r1, 800e144 <_sungetc_r+0x5c>
 800e132:	4291      	cmp	r1, r2
 800e134:	d206      	bcs.n	800e144 <_sungetc_r+0x5c>
 800e136:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e13a:	42a9      	cmp	r1, r5
 800e13c:	d102      	bne.n	800e144 <_sungetc_r+0x5c>
 800e13e:	3a01      	subs	r2, #1
 800e140:	6022      	str	r2, [r4, #0]
 800e142:	e7ea      	b.n	800e11a <_sungetc_r+0x32>
 800e144:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e14c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e14e:	2303      	movs	r3, #3
 800e150:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e152:	4623      	mov	r3, r4
 800e154:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	2301      	movs	r3, #1
 800e15c:	e7de      	b.n	800e11c <_sungetc_r+0x34>

0800e15e <__ssrefill_r>:
 800e15e:	b510      	push	{r4, lr}
 800e160:	460c      	mov	r4, r1
 800e162:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e164:	b169      	cbz	r1, 800e182 <__ssrefill_r+0x24>
 800e166:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e16a:	4299      	cmp	r1, r3
 800e16c:	d001      	beq.n	800e172 <__ssrefill_r+0x14>
 800e16e:	f7fe fe07 	bl	800cd80 <_free_r>
 800e172:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e174:	6063      	str	r3, [r4, #4]
 800e176:	2000      	movs	r0, #0
 800e178:	6360      	str	r0, [r4, #52]	@ 0x34
 800e17a:	b113      	cbz	r3, 800e182 <__ssrefill_r+0x24>
 800e17c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e17e:	6023      	str	r3, [r4, #0]
 800e180:	bd10      	pop	{r4, pc}
 800e182:	6923      	ldr	r3, [r4, #16]
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	2300      	movs	r3, #0
 800e188:	6063      	str	r3, [r4, #4]
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	f043 0320 	orr.w	r3, r3, #32
 800e190:	81a3      	strh	r3, [r4, #12]
 800e192:	f04f 30ff 	mov.w	r0, #4294967295
 800e196:	e7f3      	b.n	800e180 <__ssrefill_r+0x22>

0800e198 <__ssvfiscanf_r>:
 800e198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e19c:	460c      	mov	r4, r1
 800e19e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e1a8:	49a5      	ldr	r1, [pc, #660]	@ (800e440 <__ssvfiscanf_r+0x2a8>)
 800e1aa:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e1ac:	f10d 0804 	add.w	r8, sp, #4
 800e1b0:	49a4      	ldr	r1, [pc, #656]	@ (800e444 <__ssvfiscanf_r+0x2ac>)
 800e1b2:	4fa5      	ldr	r7, [pc, #660]	@ (800e448 <__ssvfiscanf_r+0x2b0>)
 800e1b4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	7813      	ldrb	r3, [r2, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f000 8158 	beq.w	800e476 <__ssvfiscanf_r+0x2de>
 800e1c6:	5cf9      	ldrb	r1, [r7, r3]
 800e1c8:	f011 0108 	ands.w	r1, r1, #8
 800e1cc:	f102 0501 	add.w	r5, r2, #1
 800e1d0:	d019      	beq.n	800e206 <__ssvfiscanf_r+0x6e>
 800e1d2:	6863      	ldr	r3, [r4, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	dd0f      	ble.n	800e1f8 <__ssvfiscanf_r+0x60>
 800e1d8:	6823      	ldr	r3, [r4, #0]
 800e1da:	781a      	ldrb	r2, [r3, #0]
 800e1dc:	5cba      	ldrb	r2, [r7, r2]
 800e1de:	0712      	lsls	r2, r2, #28
 800e1e0:	d401      	bmi.n	800e1e6 <__ssvfiscanf_r+0x4e>
 800e1e2:	462a      	mov	r2, r5
 800e1e4:	e7eb      	b.n	800e1be <__ssvfiscanf_r+0x26>
 800e1e6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e1e8:	3201      	adds	r2, #1
 800e1ea:	9245      	str	r2, [sp, #276]	@ 0x114
 800e1ec:	6862      	ldr	r2, [r4, #4]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	3a01      	subs	r2, #1
 800e1f2:	6062      	str	r2, [r4, #4]
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	e7ec      	b.n	800e1d2 <__ssvfiscanf_r+0x3a>
 800e1f8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	4798      	blx	r3
 800e200:	2800      	cmp	r0, #0
 800e202:	d0e9      	beq.n	800e1d8 <__ssvfiscanf_r+0x40>
 800e204:	e7ed      	b.n	800e1e2 <__ssvfiscanf_r+0x4a>
 800e206:	2b25      	cmp	r3, #37	@ 0x25
 800e208:	d012      	beq.n	800e230 <__ssvfiscanf_r+0x98>
 800e20a:	4699      	mov	r9, r3
 800e20c:	6863      	ldr	r3, [r4, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f340 8093 	ble.w	800e33a <__ssvfiscanf_r+0x1a2>
 800e214:	6822      	ldr	r2, [r4, #0]
 800e216:	7813      	ldrb	r3, [r2, #0]
 800e218:	454b      	cmp	r3, r9
 800e21a:	f040 812c 	bne.w	800e476 <__ssvfiscanf_r+0x2de>
 800e21e:	6863      	ldr	r3, [r4, #4]
 800e220:	3b01      	subs	r3, #1
 800e222:	6063      	str	r3, [r4, #4]
 800e224:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e226:	3201      	adds	r2, #1
 800e228:	3301      	adds	r3, #1
 800e22a:	6022      	str	r2, [r4, #0]
 800e22c:	9345      	str	r3, [sp, #276]	@ 0x114
 800e22e:	e7d8      	b.n	800e1e2 <__ssvfiscanf_r+0x4a>
 800e230:	9141      	str	r1, [sp, #260]	@ 0x104
 800e232:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e234:	7853      	ldrb	r3, [r2, #1]
 800e236:	2b2a      	cmp	r3, #42	@ 0x2a
 800e238:	bf02      	ittt	eq
 800e23a:	2310      	moveq	r3, #16
 800e23c:	1c95      	addeq	r5, r2, #2
 800e23e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e240:	220a      	movs	r2, #10
 800e242:	46a9      	mov	r9, r5
 800e244:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e248:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e24c:	2b09      	cmp	r3, #9
 800e24e:	d91e      	bls.n	800e28e <__ssvfiscanf_r+0xf6>
 800e250:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e44c <__ssvfiscanf_r+0x2b4>
 800e254:	2203      	movs	r2, #3
 800e256:	4650      	mov	r0, sl
 800e258:	f7f1 ffca 	bl	80001f0 <memchr>
 800e25c:	b138      	cbz	r0, 800e26e <__ssvfiscanf_r+0xd6>
 800e25e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e260:	eba0 000a 	sub.w	r0, r0, sl
 800e264:	2301      	movs	r3, #1
 800e266:	4083      	lsls	r3, r0
 800e268:	4313      	orrs	r3, r2
 800e26a:	9341      	str	r3, [sp, #260]	@ 0x104
 800e26c:	464d      	mov	r5, r9
 800e26e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e272:	2b78      	cmp	r3, #120	@ 0x78
 800e274:	d806      	bhi.n	800e284 <__ssvfiscanf_r+0xec>
 800e276:	2b57      	cmp	r3, #87	@ 0x57
 800e278:	d810      	bhi.n	800e29c <__ssvfiscanf_r+0x104>
 800e27a:	2b25      	cmp	r3, #37	@ 0x25
 800e27c:	d0c5      	beq.n	800e20a <__ssvfiscanf_r+0x72>
 800e27e:	d857      	bhi.n	800e330 <__ssvfiscanf_r+0x198>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d065      	beq.n	800e350 <__ssvfiscanf_r+0x1b8>
 800e284:	2303      	movs	r3, #3
 800e286:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e288:	230a      	movs	r3, #10
 800e28a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e28c:	e078      	b.n	800e380 <__ssvfiscanf_r+0x1e8>
 800e28e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e290:	fb02 1103 	mla	r1, r2, r3, r1
 800e294:	3930      	subs	r1, #48	@ 0x30
 800e296:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e298:	464d      	mov	r5, r9
 800e29a:	e7d2      	b.n	800e242 <__ssvfiscanf_r+0xaa>
 800e29c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e2a0:	2a20      	cmp	r2, #32
 800e2a2:	d8ef      	bhi.n	800e284 <__ssvfiscanf_r+0xec>
 800e2a4:	a101      	add	r1, pc, #4	@ (adr r1, 800e2ac <__ssvfiscanf_r+0x114>)
 800e2a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2aa:	bf00      	nop
 800e2ac:	0800e35f 	.word	0x0800e35f
 800e2b0:	0800e285 	.word	0x0800e285
 800e2b4:	0800e285 	.word	0x0800e285
 800e2b8:	0800e3b9 	.word	0x0800e3b9
 800e2bc:	0800e285 	.word	0x0800e285
 800e2c0:	0800e285 	.word	0x0800e285
 800e2c4:	0800e285 	.word	0x0800e285
 800e2c8:	0800e285 	.word	0x0800e285
 800e2cc:	0800e285 	.word	0x0800e285
 800e2d0:	0800e285 	.word	0x0800e285
 800e2d4:	0800e285 	.word	0x0800e285
 800e2d8:	0800e3cf 	.word	0x0800e3cf
 800e2dc:	0800e3b5 	.word	0x0800e3b5
 800e2e0:	0800e337 	.word	0x0800e337
 800e2e4:	0800e337 	.word	0x0800e337
 800e2e8:	0800e337 	.word	0x0800e337
 800e2ec:	0800e285 	.word	0x0800e285
 800e2f0:	0800e371 	.word	0x0800e371
 800e2f4:	0800e285 	.word	0x0800e285
 800e2f8:	0800e285 	.word	0x0800e285
 800e2fc:	0800e285 	.word	0x0800e285
 800e300:	0800e285 	.word	0x0800e285
 800e304:	0800e3df 	.word	0x0800e3df
 800e308:	0800e379 	.word	0x0800e379
 800e30c:	0800e357 	.word	0x0800e357
 800e310:	0800e285 	.word	0x0800e285
 800e314:	0800e285 	.word	0x0800e285
 800e318:	0800e3db 	.word	0x0800e3db
 800e31c:	0800e285 	.word	0x0800e285
 800e320:	0800e3b5 	.word	0x0800e3b5
 800e324:	0800e285 	.word	0x0800e285
 800e328:	0800e285 	.word	0x0800e285
 800e32c:	0800e35f 	.word	0x0800e35f
 800e330:	3b45      	subs	r3, #69	@ 0x45
 800e332:	2b02      	cmp	r3, #2
 800e334:	d8a6      	bhi.n	800e284 <__ssvfiscanf_r+0xec>
 800e336:	2305      	movs	r3, #5
 800e338:	e021      	b.n	800e37e <__ssvfiscanf_r+0x1e6>
 800e33a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e33c:	4621      	mov	r1, r4
 800e33e:	4630      	mov	r0, r6
 800e340:	4798      	blx	r3
 800e342:	2800      	cmp	r0, #0
 800e344:	f43f af66 	beq.w	800e214 <__ssvfiscanf_r+0x7c>
 800e348:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e34a:	2800      	cmp	r0, #0
 800e34c:	f040 808b 	bne.w	800e466 <__ssvfiscanf_r+0x2ce>
 800e350:	f04f 30ff 	mov.w	r0, #4294967295
 800e354:	e08b      	b.n	800e46e <__ssvfiscanf_r+0x2d6>
 800e356:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e358:	f042 0220 	orr.w	r2, r2, #32
 800e35c:	9241      	str	r2, [sp, #260]	@ 0x104
 800e35e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e364:	9241      	str	r2, [sp, #260]	@ 0x104
 800e366:	2210      	movs	r2, #16
 800e368:	2b6e      	cmp	r3, #110	@ 0x6e
 800e36a:	9242      	str	r2, [sp, #264]	@ 0x108
 800e36c:	d902      	bls.n	800e374 <__ssvfiscanf_r+0x1dc>
 800e36e:	e005      	b.n	800e37c <__ssvfiscanf_r+0x1e4>
 800e370:	2300      	movs	r3, #0
 800e372:	9342      	str	r3, [sp, #264]	@ 0x108
 800e374:	2303      	movs	r3, #3
 800e376:	e002      	b.n	800e37e <__ssvfiscanf_r+0x1e6>
 800e378:	2308      	movs	r3, #8
 800e37a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e37c:	2304      	movs	r3, #4
 800e37e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e380:	6863      	ldr	r3, [r4, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	dd39      	ble.n	800e3fa <__ssvfiscanf_r+0x262>
 800e386:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e388:	0659      	lsls	r1, r3, #25
 800e38a:	d404      	bmi.n	800e396 <__ssvfiscanf_r+0x1fe>
 800e38c:	6823      	ldr	r3, [r4, #0]
 800e38e:	781a      	ldrb	r2, [r3, #0]
 800e390:	5cba      	ldrb	r2, [r7, r2]
 800e392:	0712      	lsls	r2, r2, #28
 800e394:	d438      	bmi.n	800e408 <__ssvfiscanf_r+0x270>
 800e396:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e398:	2b02      	cmp	r3, #2
 800e39a:	dc47      	bgt.n	800e42c <__ssvfiscanf_r+0x294>
 800e39c:	466b      	mov	r3, sp
 800e39e:	4622      	mov	r2, r4
 800e3a0:	a941      	add	r1, sp, #260	@ 0x104
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f000 f86c 	bl	800e480 <_scanf_chars>
 800e3a8:	2801      	cmp	r0, #1
 800e3aa:	d064      	beq.n	800e476 <__ssvfiscanf_r+0x2de>
 800e3ac:	2802      	cmp	r0, #2
 800e3ae:	f47f af18 	bne.w	800e1e2 <__ssvfiscanf_r+0x4a>
 800e3b2:	e7c9      	b.n	800e348 <__ssvfiscanf_r+0x1b0>
 800e3b4:	220a      	movs	r2, #10
 800e3b6:	e7d7      	b.n	800e368 <__ssvfiscanf_r+0x1d0>
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	4640      	mov	r0, r8
 800e3bc:	f000 fa5a 	bl	800e874 <__sccl>
 800e3c0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3c6:	9341      	str	r3, [sp, #260]	@ 0x104
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e7d7      	b.n	800e37e <__ssvfiscanf_r+0x1e6>
 800e3ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e3d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3d4:	9341      	str	r3, [sp, #260]	@ 0x104
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e7d1      	b.n	800e37e <__ssvfiscanf_r+0x1e6>
 800e3da:	2302      	movs	r3, #2
 800e3dc:	e7cf      	b.n	800e37e <__ssvfiscanf_r+0x1e6>
 800e3de:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e3e0:	06c3      	lsls	r3, r0, #27
 800e3e2:	f53f aefe 	bmi.w	800e1e2 <__ssvfiscanf_r+0x4a>
 800e3e6:	9b00      	ldr	r3, [sp, #0]
 800e3e8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e3ea:	1d19      	adds	r1, r3, #4
 800e3ec:	9100      	str	r1, [sp, #0]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	07c0      	lsls	r0, r0, #31
 800e3f2:	bf4c      	ite	mi
 800e3f4:	801a      	strhmi	r2, [r3, #0]
 800e3f6:	601a      	strpl	r2, [r3, #0]
 800e3f8:	e6f3      	b.n	800e1e2 <__ssvfiscanf_r+0x4a>
 800e3fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4630      	mov	r0, r6
 800e400:	4798      	blx	r3
 800e402:	2800      	cmp	r0, #0
 800e404:	d0bf      	beq.n	800e386 <__ssvfiscanf_r+0x1ee>
 800e406:	e79f      	b.n	800e348 <__ssvfiscanf_r+0x1b0>
 800e408:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e40a:	3201      	adds	r2, #1
 800e40c:	9245      	str	r2, [sp, #276]	@ 0x114
 800e40e:	6862      	ldr	r2, [r4, #4]
 800e410:	3a01      	subs	r2, #1
 800e412:	2a00      	cmp	r2, #0
 800e414:	6062      	str	r2, [r4, #4]
 800e416:	dd02      	ble.n	800e41e <__ssvfiscanf_r+0x286>
 800e418:	3301      	adds	r3, #1
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	e7b6      	b.n	800e38c <__ssvfiscanf_r+0x1f4>
 800e41e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e420:	4621      	mov	r1, r4
 800e422:	4630      	mov	r0, r6
 800e424:	4798      	blx	r3
 800e426:	2800      	cmp	r0, #0
 800e428:	d0b0      	beq.n	800e38c <__ssvfiscanf_r+0x1f4>
 800e42a:	e78d      	b.n	800e348 <__ssvfiscanf_r+0x1b0>
 800e42c:	2b04      	cmp	r3, #4
 800e42e:	dc0f      	bgt.n	800e450 <__ssvfiscanf_r+0x2b8>
 800e430:	466b      	mov	r3, sp
 800e432:	4622      	mov	r2, r4
 800e434:	a941      	add	r1, sp, #260	@ 0x104
 800e436:	4630      	mov	r0, r6
 800e438:	f000 f87c 	bl	800e534 <_scanf_i>
 800e43c:	e7b4      	b.n	800e3a8 <__ssvfiscanf_r+0x210>
 800e43e:	bf00      	nop
 800e440:	0800e0e9 	.word	0x0800e0e9
 800e444:	0800e15f 	.word	0x0800e15f
 800e448:	080102d9 	.word	0x080102d9
 800e44c:	08010666 	.word	0x08010666
 800e450:	4b0a      	ldr	r3, [pc, #40]	@ (800e47c <__ssvfiscanf_r+0x2e4>)
 800e452:	2b00      	cmp	r3, #0
 800e454:	f43f aec5 	beq.w	800e1e2 <__ssvfiscanf_r+0x4a>
 800e458:	466b      	mov	r3, sp
 800e45a:	4622      	mov	r2, r4
 800e45c:	a941      	add	r1, sp, #260	@ 0x104
 800e45e:	4630      	mov	r0, r6
 800e460:	f7fd fa1a 	bl	800b898 <_scanf_float>
 800e464:	e7a0      	b.n	800e3a8 <__ssvfiscanf_r+0x210>
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	065b      	lsls	r3, r3, #25
 800e46a:	f53f af71 	bmi.w	800e350 <__ssvfiscanf_r+0x1b8>
 800e46e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e476:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e478:	e7f9      	b.n	800e46e <__ssvfiscanf_r+0x2d6>
 800e47a:	bf00      	nop
 800e47c:	0800b899 	.word	0x0800b899

0800e480 <_scanf_chars>:
 800e480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e484:	4615      	mov	r5, r2
 800e486:	688a      	ldr	r2, [r1, #8]
 800e488:	4680      	mov	r8, r0
 800e48a:	460c      	mov	r4, r1
 800e48c:	b932      	cbnz	r2, 800e49c <_scanf_chars+0x1c>
 800e48e:	698a      	ldr	r2, [r1, #24]
 800e490:	2a00      	cmp	r2, #0
 800e492:	bf14      	ite	ne
 800e494:	f04f 32ff 	movne.w	r2, #4294967295
 800e498:	2201      	moveq	r2, #1
 800e49a:	608a      	str	r2, [r1, #8]
 800e49c:	6822      	ldr	r2, [r4, #0]
 800e49e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e530 <_scanf_chars+0xb0>
 800e4a2:	06d1      	lsls	r1, r2, #27
 800e4a4:	bf5f      	itttt	pl
 800e4a6:	681a      	ldrpl	r2, [r3, #0]
 800e4a8:	1d11      	addpl	r1, r2, #4
 800e4aa:	6019      	strpl	r1, [r3, #0]
 800e4ac:	6816      	ldrpl	r6, [r2, #0]
 800e4ae:	2700      	movs	r7, #0
 800e4b0:	69a0      	ldr	r0, [r4, #24]
 800e4b2:	b188      	cbz	r0, 800e4d8 <_scanf_chars+0x58>
 800e4b4:	2801      	cmp	r0, #1
 800e4b6:	d107      	bne.n	800e4c8 <_scanf_chars+0x48>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	781a      	ldrb	r2, [r3, #0]
 800e4bc:	6963      	ldr	r3, [r4, #20]
 800e4be:	5c9b      	ldrb	r3, [r3, r2]
 800e4c0:	b953      	cbnz	r3, 800e4d8 <_scanf_chars+0x58>
 800e4c2:	2f00      	cmp	r7, #0
 800e4c4:	d031      	beq.n	800e52a <_scanf_chars+0xaa>
 800e4c6:	e022      	b.n	800e50e <_scanf_chars+0x8e>
 800e4c8:	2802      	cmp	r0, #2
 800e4ca:	d120      	bne.n	800e50e <_scanf_chars+0x8e>
 800e4cc:	682b      	ldr	r3, [r5, #0]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e4d4:	071b      	lsls	r3, r3, #28
 800e4d6:	d41a      	bmi.n	800e50e <_scanf_chars+0x8e>
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	06da      	lsls	r2, r3, #27
 800e4dc:	bf5e      	ittt	pl
 800e4de:	682b      	ldrpl	r3, [r5, #0]
 800e4e0:	781b      	ldrbpl	r3, [r3, #0]
 800e4e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e4e6:	682a      	ldr	r2, [r5, #0]
 800e4e8:	686b      	ldr	r3, [r5, #4]
 800e4ea:	3201      	adds	r2, #1
 800e4ec:	602a      	str	r2, [r5, #0]
 800e4ee:	68a2      	ldr	r2, [r4, #8]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	3a01      	subs	r2, #1
 800e4f4:	606b      	str	r3, [r5, #4]
 800e4f6:	3701      	adds	r7, #1
 800e4f8:	60a2      	str	r2, [r4, #8]
 800e4fa:	b142      	cbz	r2, 800e50e <_scanf_chars+0x8e>
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	dcd7      	bgt.n	800e4b0 <_scanf_chars+0x30>
 800e500:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e504:	4629      	mov	r1, r5
 800e506:	4640      	mov	r0, r8
 800e508:	4798      	blx	r3
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d0d0      	beq.n	800e4b0 <_scanf_chars+0x30>
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	f013 0310 	ands.w	r3, r3, #16
 800e514:	d105      	bne.n	800e522 <_scanf_chars+0xa2>
 800e516:	68e2      	ldr	r2, [r4, #12]
 800e518:	3201      	adds	r2, #1
 800e51a:	60e2      	str	r2, [r4, #12]
 800e51c:	69a2      	ldr	r2, [r4, #24]
 800e51e:	b102      	cbz	r2, 800e522 <_scanf_chars+0xa2>
 800e520:	7033      	strb	r3, [r6, #0]
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	443b      	add	r3, r7
 800e526:	6123      	str	r3, [r4, #16]
 800e528:	2000      	movs	r0, #0
 800e52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e52e:	bf00      	nop
 800e530:	080102d9 	.word	0x080102d9

0800e534 <_scanf_i>:
 800e534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e538:	4698      	mov	r8, r3
 800e53a:	4b74      	ldr	r3, [pc, #464]	@ (800e70c <_scanf_i+0x1d8>)
 800e53c:	460c      	mov	r4, r1
 800e53e:	4682      	mov	sl, r0
 800e540:	4616      	mov	r6, r2
 800e542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e546:	b087      	sub	sp, #28
 800e548:	ab03      	add	r3, sp, #12
 800e54a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e54e:	4b70      	ldr	r3, [pc, #448]	@ (800e710 <_scanf_i+0x1dc>)
 800e550:	69a1      	ldr	r1, [r4, #24]
 800e552:	4a70      	ldr	r2, [pc, #448]	@ (800e714 <_scanf_i+0x1e0>)
 800e554:	2903      	cmp	r1, #3
 800e556:	bf08      	it	eq
 800e558:	461a      	moveq	r2, r3
 800e55a:	68a3      	ldr	r3, [r4, #8]
 800e55c:	9201      	str	r2, [sp, #4]
 800e55e:	1e5a      	subs	r2, r3, #1
 800e560:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e564:	bf88      	it	hi
 800e566:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e56a:	4627      	mov	r7, r4
 800e56c:	bf82      	ittt	hi
 800e56e:	eb03 0905 	addhi.w	r9, r3, r5
 800e572:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e576:	60a3      	strhi	r3, [r4, #8]
 800e578:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e57c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e580:	bf98      	it	ls
 800e582:	f04f 0900 	movls.w	r9, #0
 800e586:	6023      	str	r3, [r4, #0]
 800e588:	463d      	mov	r5, r7
 800e58a:	f04f 0b00 	mov.w	fp, #0
 800e58e:	6831      	ldr	r1, [r6, #0]
 800e590:	ab03      	add	r3, sp, #12
 800e592:	7809      	ldrb	r1, [r1, #0]
 800e594:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e598:	2202      	movs	r2, #2
 800e59a:	f7f1 fe29 	bl	80001f0 <memchr>
 800e59e:	b328      	cbz	r0, 800e5ec <_scanf_i+0xb8>
 800e5a0:	f1bb 0f01 	cmp.w	fp, #1
 800e5a4:	d159      	bne.n	800e65a <_scanf_i+0x126>
 800e5a6:	6862      	ldr	r2, [r4, #4]
 800e5a8:	b92a      	cbnz	r2, 800e5b6 <_scanf_i+0x82>
 800e5aa:	6822      	ldr	r2, [r4, #0]
 800e5ac:	2108      	movs	r1, #8
 800e5ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5b2:	6061      	str	r1, [r4, #4]
 800e5b4:	6022      	str	r2, [r4, #0]
 800e5b6:	6822      	ldr	r2, [r4, #0]
 800e5b8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e5bc:	6022      	str	r2, [r4, #0]
 800e5be:	68a2      	ldr	r2, [r4, #8]
 800e5c0:	1e51      	subs	r1, r2, #1
 800e5c2:	60a1      	str	r1, [r4, #8]
 800e5c4:	b192      	cbz	r2, 800e5ec <_scanf_i+0xb8>
 800e5c6:	6832      	ldr	r2, [r6, #0]
 800e5c8:	1c51      	adds	r1, r2, #1
 800e5ca:	6031      	str	r1, [r6, #0]
 800e5cc:	7812      	ldrb	r2, [r2, #0]
 800e5ce:	f805 2b01 	strb.w	r2, [r5], #1
 800e5d2:	6872      	ldr	r2, [r6, #4]
 800e5d4:	3a01      	subs	r2, #1
 800e5d6:	2a00      	cmp	r2, #0
 800e5d8:	6072      	str	r2, [r6, #4]
 800e5da:	dc07      	bgt.n	800e5ec <_scanf_i+0xb8>
 800e5dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e5e0:	4631      	mov	r1, r6
 800e5e2:	4650      	mov	r0, sl
 800e5e4:	4790      	blx	r2
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	f040 8085 	bne.w	800e6f6 <_scanf_i+0x1c2>
 800e5ec:	f10b 0b01 	add.w	fp, fp, #1
 800e5f0:	f1bb 0f03 	cmp.w	fp, #3
 800e5f4:	d1cb      	bne.n	800e58e <_scanf_i+0x5a>
 800e5f6:	6863      	ldr	r3, [r4, #4]
 800e5f8:	b90b      	cbnz	r3, 800e5fe <_scanf_i+0xca>
 800e5fa:	230a      	movs	r3, #10
 800e5fc:	6063      	str	r3, [r4, #4]
 800e5fe:	6863      	ldr	r3, [r4, #4]
 800e600:	4945      	ldr	r1, [pc, #276]	@ (800e718 <_scanf_i+0x1e4>)
 800e602:	6960      	ldr	r0, [r4, #20]
 800e604:	1ac9      	subs	r1, r1, r3
 800e606:	f000 f935 	bl	800e874 <__sccl>
 800e60a:	f04f 0b00 	mov.w	fp, #0
 800e60e:	68a3      	ldr	r3, [r4, #8]
 800e610:	6822      	ldr	r2, [r4, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d03d      	beq.n	800e692 <_scanf_i+0x15e>
 800e616:	6831      	ldr	r1, [r6, #0]
 800e618:	6960      	ldr	r0, [r4, #20]
 800e61a:	f891 c000 	ldrb.w	ip, [r1]
 800e61e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e622:	2800      	cmp	r0, #0
 800e624:	d035      	beq.n	800e692 <_scanf_i+0x15e>
 800e626:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e62a:	d124      	bne.n	800e676 <_scanf_i+0x142>
 800e62c:	0510      	lsls	r0, r2, #20
 800e62e:	d522      	bpl.n	800e676 <_scanf_i+0x142>
 800e630:	f10b 0b01 	add.w	fp, fp, #1
 800e634:	f1b9 0f00 	cmp.w	r9, #0
 800e638:	d003      	beq.n	800e642 <_scanf_i+0x10e>
 800e63a:	3301      	adds	r3, #1
 800e63c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	6873      	ldr	r3, [r6, #4]
 800e644:	3b01      	subs	r3, #1
 800e646:	2b00      	cmp	r3, #0
 800e648:	6073      	str	r3, [r6, #4]
 800e64a:	dd1b      	ble.n	800e684 <_scanf_i+0x150>
 800e64c:	6833      	ldr	r3, [r6, #0]
 800e64e:	3301      	adds	r3, #1
 800e650:	6033      	str	r3, [r6, #0]
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	3b01      	subs	r3, #1
 800e656:	60a3      	str	r3, [r4, #8]
 800e658:	e7d9      	b.n	800e60e <_scanf_i+0xda>
 800e65a:	f1bb 0f02 	cmp.w	fp, #2
 800e65e:	d1ae      	bne.n	800e5be <_scanf_i+0x8a>
 800e660:	6822      	ldr	r2, [r4, #0]
 800e662:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e666:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e66a:	d1bf      	bne.n	800e5ec <_scanf_i+0xb8>
 800e66c:	2110      	movs	r1, #16
 800e66e:	6061      	str	r1, [r4, #4]
 800e670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e674:	e7a2      	b.n	800e5bc <_scanf_i+0x88>
 800e676:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e67a:	6022      	str	r2, [r4, #0]
 800e67c:	780b      	ldrb	r3, [r1, #0]
 800e67e:	f805 3b01 	strb.w	r3, [r5], #1
 800e682:	e7de      	b.n	800e642 <_scanf_i+0x10e>
 800e684:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e688:	4631      	mov	r1, r6
 800e68a:	4650      	mov	r0, sl
 800e68c:	4798      	blx	r3
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0df      	beq.n	800e652 <_scanf_i+0x11e>
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	05d9      	lsls	r1, r3, #23
 800e696:	d50d      	bpl.n	800e6b4 <_scanf_i+0x180>
 800e698:	42bd      	cmp	r5, r7
 800e69a:	d909      	bls.n	800e6b0 <_scanf_i+0x17c>
 800e69c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e6a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	4650      	mov	r0, sl
 800e6a8:	4798      	blx	r3
 800e6aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800e6ae:	464d      	mov	r5, r9
 800e6b0:	42bd      	cmp	r5, r7
 800e6b2:	d028      	beq.n	800e706 <_scanf_i+0x1d2>
 800e6b4:	6822      	ldr	r2, [r4, #0]
 800e6b6:	f012 0210 	ands.w	r2, r2, #16
 800e6ba:	d113      	bne.n	800e6e4 <_scanf_i+0x1b0>
 800e6bc:	702a      	strb	r2, [r5, #0]
 800e6be:	6863      	ldr	r3, [r4, #4]
 800e6c0:	9e01      	ldr	r6, [sp, #4]
 800e6c2:	4639      	mov	r1, r7
 800e6c4:	4650      	mov	r0, sl
 800e6c6:	47b0      	blx	r6
 800e6c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6cc:	6821      	ldr	r1, [r4, #0]
 800e6ce:	1d1a      	adds	r2, r3, #4
 800e6d0:	f8c8 2000 	str.w	r2, [r8]
 800e6d4:	f011 0f20 	tst.w	r1, #32
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	d00f      	beq.n	800e6fc <_scanf_i+0x1c8>
 800e6dc:	6018      	str	r0, [r3, #0]
 800e6de:	68e3      	ldr	r3, [r4, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60e3      	str	r3, [r4, #12]
 800e6e4:	6923      	ldr	r3, [r4, #16]
 800e6e6:	1bed      	subs	r5, r5, r7
 800e6e8:	445d      	add	r5, fp
 800e6ea:	442b      	add	r3, r5
 800e6ec:	6123      	str	r3, [r4, #16]
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	b007      	add	sp, #28
 800e6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f6:	f04f 0b00 	mov.w	fp, #0
 800e6fa:	e7ca      	b.n	800e692 <_scanf_i+0x15e>
 800e6fc:	07ca      	lsls	r2, r1, #31
 800e6fe:	bf4c      	ite	mi
 800e700:	8018      	strhmi	r0, [r3, #0]
 800e702:	6018      	strpl	r0, [r3, #0]
 800e704:	e7eb      	b.n	800e6de <_scanf_i+0x1aa>
 800e706:	2001      	movs	r0, #1
 800e708:	e7f2      	b.n	800e6f0 <_scanf_i+0x1bc>
 800e70a:	bf00      	nop
 800e70c:	0801022c 	.word	0x0801022c
 800e710:	0800afd1 	.word	0x0800afd1
 800e714:	0800ead1 	.word	0x0800ead1
 800e718:	08010681 	.word	0x08010681

0800e71c <__sflush_r>:
 800e71c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e724:	0716      	lsls	r6, r2, #28
 800e726:	4605      	mov	r5, r0
 800e728:	460c      	mov	r4, r1
 800e72a:	d454      	bmi.n	800e7d6 <__sflush_r+0xba>
 800e72c:	684b      	ldr	r3, [r1, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	dc02      	bgt.n	800e738 <__sflush_r+0x1c>
 800e732:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd48      	ble.n	800e7ca <__sflush_r+0xae>
 800e738:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e73a:	2e00      	cmp	r6, #0
 800e73c:	d045      	beq.n	800e7ca <__sflush_r+0xae>
 800e73e:	2300      	movs	r3, #0
 800e740:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e744:	682f      	ldr	r7, [r5, #0]
 800e746:	6a21      	ldr	r1, [r4, #32]
 800e748:	602b      	str	r3, [r5, #0]
 800e74a:	d030      	beq.n	800e7ae <__sflush_r+0x92>
 800e74c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	0759      	lsls	r1, r3, #29
 800e752:	d505      	bpl.n	800e760 <__sflush_r+0x44>
 800e754:	6863      	ldr	r3, [r4, #4]
 800e756:	1ad2      	subs	r2, r2, r3
 800e758:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e75a:	b10b      	cbz	r3, 800e760 <__sflush_r+0x44>
 800e75c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e75e:	1ad2      	subs	r2, r2, r3
 800e760:	2300      	movs	r3, #0
 800e762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e764:	6a21      	ldr	r1, [r4, #32]
 800e766:	4628      	mov	r0, r5
 800e768:	47b0      	blx	r6
 800e76a:	1c43      	adds	r3, r0, #1
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	d106      	bne.n	800e77e <__sflush_r+0x62>
 800e770:	6829      	ldr	r1, [r5, #0]
 800e772:	291d      	cmp	r1, #29
 800e774:	d82b      	bhi.n	800e7ce <__sflush_r+0xb2>
 800e776:	4a2a      	ldr	r2, [pc, #168]	@ (800e820 <__sflush_r+0x104>)
 800e778:	410a      	asrs	r2, r1
 800e77a:	07d6      	lsls	r6, r2, #31
 800e77c:	d427      	bmi.n	800e7ce <__sflush_r+0xb2>
 800e77e:	2200      	movs	r2, #0
 800e780:	6062      	str	r2, [r4, #4]
 800e782:	04d9      	lsls	r1, r3, #19
 800e784:	6922      	ldr	r2, [r4, #16]
 800e786:	6022      	str	r2, [r4, #0]
 800e788:	d504      	bpl.n	800e794 <__sflush_r+0x78>
 800e78a:	1c42      	adds	r2, r0, #1
 800e78c:	d101      	bne.n	800e792 <__sflush_r+0x76>
 800e78e:	682b      	ldr	r3, [r5, #0]
 800e790:	b903      	cbnz	r3, 800e794 <__sflush_r+0x78>
 800e792:	6560      	str	r0, [r4, #84]	@ 0x54
 800e794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e796:	602f      	str	r7, [r5, #0]
 800e798:	b1b9      	cbz	r1, 800e7ca <__sflush_r+0xae>
 800e79a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e79e:	4299      	cmp	r1, r3
 800e7a0:	d002      	beq.n	800e7a8 <__sflush_r+0x8c>
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7fe faec 	bl	800cd80 <_free_r>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7ac:	e00d      	b.n	800e7ca <__sflush_r+0xae>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	47b0      	blx	r6
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	1c50      	adds	r0, r2, #1
 800e7b8:	d1c9      	bne.n	800e74e <__sflush_r+0x32>
 800e7ba:	682b      	ldr	r3, [r5, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d0c6      	beq.n	800e74e <__sflush_r+0x32>
 800e7c0:	2b1d      	cmp	r3, #29
 800e7c2:	d001      	beq.n	800e7c8 <__sflush_r+0xac>
 800e7c4:	2b16      	cmp	r3, #22
 800e7c6:	d11e      	bne.n	800e806 <__sflush_r+0xea>
 800e7c8:	602f      	str	r7, [r5, #0]
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	e022      	b.n	800e814 <__sflush_r+0xf8>
 800e7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7d2:	b21b      	sxth	r3, r3
 800e7d4:	e01b      	b.n	800e80e <__sflush_r+0xf2>
 800e7d6:	690f      	ldr	r7, [r1, #16]
 800e7d8:	2f00      	cmp	r7, #0
 800e7da:	d0f6      	beq.n	800e7ca <__sflush_r+0xae>
 800e7dc:	0793      	lsls	r3, r2, #30
 800e7de:	680e      	ldr	r6, [r1, #0]
 800e7e0:	bf08      	it	eq
 800e7e2:	694b      	ldreq	r3, [r1, #20]
 800e7e4:	600f      	str	r7, [r1, #0]
 800e7e6:	bf18      	it	ne
 800e7e8:	2300      	movne	r3, #0
 800e7ea:	eba6 0807 	sub.w	r8, r6, r7
 800e7ee:	608b      	str	r3, [r1, #8]
 800e7f0:	f1b8 0f00 	cmp.w	r8, #0
 800e7f4:	dde9      	ble.n	800e7ca <__sflush_r+0xae>
 800e7f6:	6a21      	ldr	r1, [r4, #32]
 800e7f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e7fa:	4643      	mov	r3, r8
 800e7fc:	463a      	mov	r2, r7
 800e7fe:	4628      	mov	r0, r5
 800e800:	47b0      	blx	r6
 800e802:	2800      	cmp	r0, #0
 800e804:	dc08      	bgt.n	800e818 <__sflush_r+0xfc>
 800e806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e818:	4407      	add	r7, r0
 800e81a:	eba8 0800 	sub.w	r8, r8, r0
 800e81e:	e7e7      	b.n	800e7f0 <__sflush_r+0xd4>
 800e820:	dfbffffe 	.word	0xdfbffffe

0800e824 <_fflush_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	690b      	ldr	r3, [r1, #16]
 800e828:	4605      	mov	r5, r0
 800e82a:	460c      	mov	r4, r1
 800e82c:	b913      	cbnz	r3, 800e834 <_fflush_r+0x10>
 800e82e:	2500      	movs	r5, #0
 800e830:	4628      	mov	r0, r5
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	b118      	cbz	r0, 800e83e <_fflush_r+0x1a>
 800e836:	6a03      	ldr	r3, [r0, #32]
 800e838:	b90b      	cbnz	r3, 800e83e <_fflush_r+0x1a>
 800e83a:	f7fd facd 	bl	800bdd8 <__sinit>
 800e83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d0f3      	beq.n	800e82e <_fflush_r+0xa>
 800e846:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e848:	07d0      	lsls	r0, r2, #31
 800e84a:	d404      	bmi.n	800e856 <_fflush_r+0x32>
 800e84c:	0599      	lsls	r1, r3, #22
 800e84e:	d402      	bmi.n	800e856 <_fflush_r+0x32>
 800e850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e852:	f7fd fc26 	bl	800c0a2 <__retarget_lock_acquire_recursive>
 800e856:	4628      	mov	r0, r5
 800e858:	4621      	mov	r1, r4
 800e85a:	f7ff ff5f 	bl	800e71c <__sflush_r>
 800e85e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e860:	07da      	lsls	r2, r3, #31
 800e862:	4605      	mov	r5, r0
 800e864:	d4e4      	bmi.n	800e830 <_fflush_r+0xc>
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	059b      	lsls	r3, r3, #22
 800e86a:	d4e1      	bmi.n	800e830 <_fflush_r+0xc>
 800e86c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e86e:	f7fd fc19 	bl	800c0a4 <__retarget_lock_release_recursive>
 800e872:	e7dd      	b.n	800e830 <_fflush_r+0xc>

0800e874 <__sccl>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	780b      	ldrb	r3, [r1, #0]
 800e878:	4604      	mov	r4, r0
 800e87a:	2b5e      	cmp	r3, #94	@ 0x5e
 800e87c:	bf0b      	itete	eq
 800e87e:	784b      	ldrbeq	r3, [r1, #1]
 800e880:	1c4a      	addne	r2, r1, #1
 800e882:	1c8a      	addeq	r2, r1, #2
 800e884:	2100      	movne	r1, #0
 800e886:	bf08      	it	eq
 800e888:	2101      	moveq	r1, #1
 800e88a:	3801      	subs	r0, #1
 800e88c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e890:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e894:	42a8      	cmp	r0, r5
 800e896:	d1fb      	bne.n	800e890 <__sccl+0x1c>
 800e898:	b90b      	cbnz	r3, 800e89e <__sccl+0x2a>
 800e89a:	1e50      	subs	r0, r2, #1
 800e89c:	bd70      	pop	{r4, r5, r6, pc}
 800e89e:	f081 0101 	eor.w	r1, r1, #1
 800e8a2:	54e1      	strb	r1, [r4, r3]
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e8ac:	2d2d      	cmp	r5, #45	@ 0x2d
 800e8ae:	d005      	beq.n	800e8bc <__sccl+0x48>
 800e8b0:	2d5d      	cmp	r5, #93	@ 0x5d
 800e8b2:	d016      	beq.n	800e8e2 <__sccl+0x6e>
 800e8b4:	2d00      	cmp	r5, #0
 800e8b6:	d0f1      	beq.n	800e89c <__sccl+0x28>
 800e8b8:	462b      	mov	r3, r5
 800e8ba:	e7f2      	b.n	800e8a2 <__sccl+0x2e>
 800e8bc:	7846      	ldrb	r6, [r0, #1]
 800e8be:	2e5d      	cmp	r6, #93	@ 0x5d
 800e8c0:	d0fa      	beq.n	800e8b8 <__sccl+0x44>
 800e8c2:	42b3      	cmp	r3, r6
 800e8c4:	dcf8      	bgt.n	800e8b8 <__sccl+0x44>
 800e8c6:	3002      	adds	r0, #2
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	3201      	adds	r2, #1
 800e8cc:	4296      	cmp	r6, r2
 800e8ce:	54a1      	strb	r1, [r4, r2]
 800e8d0:	dcfb      	bgt.n	800e8ca <__sccl+0x56>
 800e8d2:	1af2      	subs	r2, r6, r3
 800e8d4:	3a01      	subs	r2, #1
 800e8d6:	1c5d      	adds	r5, r3, #1
 800e8d8:	42b3      	cmp	r3, r6
 800e8da:	bfa8      	it	ge
 800e8dc:	2200      	movge	r2, #0
 800e8de:	18ab      	adds	r3, r5, r2
 800e8e0:	e7e1      	b.n	800e8a6 <__sccl+0x32>
 800e8e2:	4610      	mov	r0, r2
 800e8e4:	e7da      	b.n	800e89c <__sccl+0x28>

0800e8e6 <__submore>:
 800e8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ea:	460c      	mov	r4, r1
 800e8ec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e8ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8f2:	4299      	cmp	r1, r3
 800e8f4:	d11d      	bne.n	800e932 <__submore+0x4c>
 800e8f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e8fa:	f7fb fc23 	bl	800a144 <_malloc_r>
 800e8fe:	b918      	cbnz	r0, 800e908 <__submore+0x22>
 800e900:	f04f 30ff 	mov.w	r0, #4294967295
 800e904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e90c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e90e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e912:	6360      	str	r0, [r4, #52]	@ 0x34
 800e914:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e918:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e91c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e920:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e924:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e928:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e92c:	6020      	str	r0, [r4, #0]
 800e92e:	2000      	movs	r0, #0
 800e930:	e7e8      	b.n	800e904 <__submore+0x1e>
 800e932:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e934:	0077      	lsls	r7, r6, #1
 800e936:	463a      	mov	r2, r7
 800e938:	f7fb fc98 	bl	800a26c <_realloc_r>
 800e93c:	4605      	mov	r5, r0
 800e93e:	2800      	cmp	r0, #0
 800e940:	d0de      	beq.n	800e900 <__submore+0x1a>
 800e942:	eb00 0806 	add.w	r8, r0, r6
 800e946:	4601      	mov	r1, r0
 800e948:	4632      	mov	r2, r6
 800e94a:	4640      	mov	r0, r8
 800e94c:	f7fd fbab 	bl	800c0a6 <memcpy>
 800e950:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e954:	f8c4 8000 	str.w	r8, [r4]
 800e958:	e7e9      	b.n	800e92e <__submore+0x48>

0800e95a <memmove>:
 800e95a:	4288      	cmp	r0, r1
 800e95c:	b510      	push	{r4, lr}
 800e95e:	eb01 0402 	add.w	r4, r1, r2
 800e962:	d902      	bls.n	800e96a <memmove+0x10>
 800e964:	4284      	cmp	r4, r0
 800e966:	4623      	mov	r3, r4
 800e968:	d807      	bhi.n	800e97a <memmove+0x20>
 800e96a:	1e43      	subs	r3, r0, #1
 800e96c:	42a1      	cmp	r1, r4
 800e96e:	d008      	beq.n	800e982 <memmove+0x28>
 800e970:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e974:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e978:	e7f8      	b.n	800e96c <memmove+0x12>
 800e97a:	4402      	add	r2, r0
 800e97c:	4601      	mov	r1, r0
 800e97e:	428a      	cmp	r2, r1
 800e980:	d100      	bne.n	800e984 <memmove+0x2a>
 800e982:	bd10      	pop	{r4, pc}
 800e984:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e988:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e98c:	e7f7      	b.n	800e97e <memmove+0x24>
	...

0800e990 <__assert_func>:
 800e990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e992:	4614      	mov	r4, r2
 800e994:	461a      	mov	r2, r3
 800e996:	4b09      	ldr	r3, [pc, #36]	@ (800e9bc <__assert_func+0x2c>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4605      	mov	r5, r0
 800e99c:	68d8      	ldr	r0, [r3, #12]
 800e99e:	b954      	cbnz	r4, 800e9b6 <__assert_func+0x26>
 800e9a0:	4b07      	ldr	r3, [pc, #28]	@ (800e9c0 <__assert_func+0x30>)
 800e9a2:	461c      	mov	r4, r3
 800e9a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9a8:	9100      	str	r1, [sp, #0]
 800e9aa:	462b      	mov	r3, r5
 800e9ac:	4905      	ldr	r1, [pc, #20]	@ (800e9c4 <__assert_func+0x34>)
 800e9ae:	f000 f891 	bl	800ead4 <fiprintf>
 800e9b2:	f000 f8a1 	bl	800eaf8 <abort>
 800e9b6:	4b04      	ldr	r3, [pc, #16]	@ (800e9c8 <__assert_func+0x38>)
 800e9b8:	e7f4      	b.n	800e9a4 <__assert_func+0x14>
 800e9ba:	bf00      	nop
 800e9bc:	20000190 	.word	0x20000190
 800e9c0:	080106c7 	.word	0x080106c7
 800e9c4:	08010699 	.word	0x08010699
 800e9c8:	0801068c 	.word	0x0801068c

0800e9cc <_calloc_r>:
 800e9cc:	b570      	push	{r4, r5, r6, lr}
 800e9ce:	fba1 5402 	umull	r5, r4, r1, r2
 800e9d2:	b93c      	cbnz	r4, 800e9e4 <_calloc_r+0x18>
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	f7fb fbb5 	bl	800a144 <_malloc_r>
 800e9da:	4606      	mov	r6, r0
 800e9dc:	b928      	cbnz	r0, 800e9ea <_calloc_r+0x1e>
 800e9de:	2600      	movs	r6, #0
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	bd70      	pop	{r4, r5, r6, pc}
 800e9e4:	220c      	movs	r2, #12
 800e9e6:	6002      	str	r2, [r0, #0]
 800e9e8:	e7f9      	b.n	800e9de <_calloc_r+0x12>
 800e9ea:	462a      	mov	r2, r5
 800e9ec:	4621      	mov	r1, r4
 800e9ee:	f7fd fab8 	bl	800bf62 <memset>
 800e9f2:	e7f5      	b.n	800e9e0 <_calloc_r+0x14>

0800e9f4 <_strtoul_l.constprop.0>:
 800e9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9f8:	4e34      	ldr	r6, [pc, #208]	@ (800eacc <_strtoul_l.constprop.0+0xd8>)
 800e9fa:	4686      	mov	lr, r0
 800e9fc:	460d      	mov	r5, r1
 800e9fe:	4628      	mov	r0, r5
 800ea00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea04:	5d37      	ldrb	r7, [r6, r4]
 800ea06:	f017 0708 	ands.w	r7, r7, #8
 800ea0a:	d1f8      	bne.n	800e9fe <_strtoul_l.constprop.0+0xa>
 800ea0c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ea0e:	d12f      	bne.n	800ea70 <_strtoul_l.constprop.0+0x7c>
 800ea10:	782c      	ldrb	r4, [r5, #0]
 800ea12:	2701      	movs	r7, #1
 800ea14:	1c85      	adds	r5, r0, #2
 800ea16:	f033 0010 	bics.w	r0, r3, #16
 800ea1a:	d109      	bne.n	800ea30 <_strtoul_l.constprop.0+0x3c>
 800ea1c:	2c30      	cmp	r4, #48	@ 0x30
 800ea1e:	d12c      	bne.n	800ea7a <_strtoul_l.constprop.0+0x86>
 800ea20:	7828      	ldrb	r0, [r5, #0]
 800ea22:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ea26:	2858      	cmp	r0, #88	@ 0x58
 800ea28:	d127      	bne.n	800ea7a <_strtoul_l.constprop.0+0x86>
 800ea2a:	786c      	ldrb	r4, [r5, #1]
 800ea2c:	2310      	movs	r3, #16
 800ea2e:	3502      	adds	r5, #2
 800ea30:	f04f 38ff 	mov.w	r8, #4294967295
 800ea34:	2600      	movs	r6, #0
 800ea36:	fbb8 f8f3 	udiv	r8, r8, r3
 800ea3a:	fb03 f908 	mul.w	r9, r3, r8
 800ea3e:	ea6f 0909 	mvn.w	r9, r9
 800ea42:	4630      	mov	r0, r6
 800ea44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ea48:	f1bc 0f09 	cmp.w	ip, #9
 800ea4c:	d81c      	bhi.n	800ea88 <_strtoul_l.constprop.0+0x94>
 800ea4e:	4664      	mov	r4, ip
 800ea50:	42a3      	cmp	r3, r4
 800ea52:	dd2a      	ble.n	800eaaa <_strtoul_l.constprop.0+0xb6>
 800ea54:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ea58:	d007      	beq.n	800ea6a <_strtoul_l.constprop.0+0x76>
 800ea5a:	4580      	cmp	r8, r0
 800ea5c:	d322      	bcc.n	800eaa4 <_strtoul_l.constprop.0+0xb0>
 800ea5e:	d101      	bne.n	800ea64 <_strtoul_l.constprop.0+0x70>
 800ea60:	45a1      	cmp	r9, r4
 800ea62:	db1f      	blt.n	800eaa4 <_strtoul_l.constprop.0+0xb0>
 800ea64:	fb00 4003 	mla	r0, r0, r3, r4
 800ea68:	2601      	movs	r6, #1
 800ea6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea6e:	e7e9      	b.n	800ea44 <_strtoul_l.constprop.0+0x50>
 800ea70:	2c2b      	cmp	r4, #43	@ 0x2b
 800ea72:	bf04      	itt	eq
 800ea74:	782c      	ldrbeq	r4, [r5, #0]
 800ea76:	1c85      	addeq	r5, r0, #2
 800ea78:	e7cd      	b.n	800ea16 <_strtoul_l.constprop.0+0x22>
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1d8      	bne.n	800ea30 <_strtoul_l.constprop.0+0x3c>
 800ea7e:	2c30      	cmp	r4, #48	@ 0x30
 800ea80:	bf0c      	ite	eq
 800ea82:	2308      	moveq	r3, #8
 800ea84:	230a      	movne	r3, #10
 800ea86:	e7d3      	b.n	800ea30 <_strtoul_l.constprop.0+0x3c>
 800ea88:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ea8c:	f1bc 0f19 	cmp.w	ip, #25
 800ea90:	d801      	bhi.n	800ea96 <_strtoul_l.constprop.0+0xa2>
 800ea92:	3c37      	subs	r4, #55	@ 0x37
 800ea94:	e7dc      	b.n	800ea50 <_strtoul_l.constprop.0+0x5c>
 800ea96:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ea9a:	f1bc 0f19 	cmp.w	ip, #25
 800ea9e:	d804      	bhi.n	800eaaa <_strtoul_l.constprop.0+0xb6>
 800eaa0:	3c57      	subs	r4, #87	@ 0x57
 800eaa2:	e7d5      	b.n	800ea50 <_strtoul_l.constprop.0+0x5c>
 800eaa4:	f04f 36ff 	mov.w	r6, #4294967295
 800eaa8:	e7df      	b.n	800ea6a <_strtoul_l.constprop.0+0x76>
 800eaaa:	1c73      	adds	r3, r6, #1
 800eaac:	d106      	bne.n	800eabc <_strtoul_l.constprop.0+0xc8>
 800eaae:	2322      	movs	r3, #34	@ 0x22
 800eab0:	f8ce 3000 	str.w	r3, [lr]
 800eab4:	4630      	mov	r0, r6
 800eab6:	b932      	cbnz	r2, 800eac6 <_strtoul_l.constprop.0+0xd2>
 800eab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eabc:	b107      	cbz	r7, 800eac0 <_strtoul_l.constprop.0+0xcc>
 800eabe:	4240      	negs	r0, r0
 800eac0:	2a00      	cmp	r2, #0
 800eac2:	d0f9      	beq.n	800eab8 <_strtoul_l.constprop.0+0xc4>
 800eac4:	b106      	cbz	r6, 800eac8 <_strtoul_l.constprop.0+0xd4>
 800eac6:	1e69      	subs	r1, r5, #1
 800eac8:	6011      	str	r1, [r2, #0]
 800eaca:	e7f5      	b.n	800eab8 <_strtoul_l.constprop.0+0xc4>
 800eacc:	080102d9 	.word	0x080102d9

0800ead0 <_strtoul_r>:
 800ead0:	f7ff bf90 	b.w	800e9f4 <_strtoul_l.constprop.0>

0800ead4 <fiprintf>:
 800ead4:	b40e      	push	{r1, r2, r3}
 800ead6:	b503      	push	{r0, r1, lr}
 800ead8:	4601      	mov	r1, r0
 800eada:	ab03      	add	r3, sp, #12
 800eadc:	4805      	ldr	r0, [pc, #20]	@ (800eaf4 <fiprintf+0x20>)
 800eade:	f853 2b04 	ldr.w	r2, [r3], #4
 800eae2:	6800      	ldr	r0, [r0, #0]
 800eae4:	9301      	str	r3, [sp, #4]
 800eae6:	f000 f837 	bl	800eb58 <_vfiprintf_r>
 800eaea:	b002      	add	sp, #8
 800eaec:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaf0:	b003      	add	sp, #12
 800eaf2:	4770      	bx	lr
 800eaf4:	20000190 	.word	0x20000190

0800eaf8 <abort>:
 800eaf8:	b508      	push	{r3, lr}
 800eafa:	2006      	movs	r0, #6
 800eafc:	f000 fa00 	bl	800ef00 <raise>
 800eb00:	2001      	movs	r0, #1
 800eb02:	f7f4 fe47 	bl	8003794 <_exit>

0800eb06 <__sfputc_r>:
 800eb06:	6893      	ldr	r3, [r2, #8]
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	b410      	push	{r4}
 800eb0e:	6093      	str	r3, [r2, #8]
 800eb10:	da08      	bge.n	800eb24 <__sfputc_r+0x1e>
 800eb12:	6994      	ldr	r4, [r2, #24]
 800eb14:	42a3      	cmp	r3, r4
 800eb16:	db01      	blt.n	800eb1c <__sfputc_r+0x16>
 800eb18:	290a      	cmp	r1, #10
 800eb1a:	d103      	bne.n	800eb24 <__sfputc_r+0x1e>
 800eb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb20:	f000 b932 	b.w	800ed88 <__swbuf_r>
 800eb24:	6813      	ldr	r3, [r2, #0]
 800eb26:	1c58      	adds	r0, r3, #1
 800eb28:	6010      	str	r0, [r2, #0]
 800eb2a:	7019      	strb	r1, [r3, #0]
 800eb2c:	4608      	mov	r0, r1
 800eb2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <__sfputs_r>:
 800eb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb36:	4606      	mov	r6, r0
 800eb38:	460f      	mov	r7, r1
 800eb3a:	4614      	mov	r4, r2
 800eb3c:	18d5      	adds	r5, r2, r3
 800eb3e:	42ac      	cmp	r4, r5
 800eb40:	d101      	bne.n	800eb46 <__sfputs_r+0x12>
 800eb42:	2000      	movs	r0, #0
 800eb44:	e007      	b.n	800eb56 <__sfputs_r+0x22>
 800eb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4a:	463a      	mov	r2, r7
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7ff ffda 	bl	800eb06 <__sfputc_r>
 800eb52:	1c43      	adds	r3, r0, #1
 800eb54:	d1f3      	bne.n	800eb3e <__sfputs_r+0xa>
 800eb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb58 <_vfiprintf_r>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	460d      	mov	r5, r1
 800eb5e:	b09d      	sub	sp, #116	@ 0x74
 800eb60:	4614      	mov	r4, r2
 800eb62:	4698      	mov	r8, r3
 800eb64:	4606      	mov	r6, r0
 800eb66:	b118      	cbz	r0, 800eb70 <_vfiprintf_r+0x18>
 800eb68:	6a03      	ldr	r3, [r0, #32]
 800eb6a:	b90b      	cbnz	r3, 800eb70 <_vfiprintf_r+0x18>
 800eb6c:	f7fd f934 	bl	800bdd8 <__sinit>
 800eb70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb72:	07d9      	lsls	r1, r3, #31
 800eb74:	d405      	bmi.n	800eb82 <_vfiprintf_r+0x2a>
 800eb76:	89ab      	ldrh	r3, [r5, #12]
 800eb78:	059a      	lsls	r2, r3, #22
 800eb7a:	d402      	bmi.n	800eb82 <_vfiprintf_r+0x2a>
 800eb7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb7e:	f7fd fa90 	bl	800c0a2 <__retarget_lock_acquire_recursive>
 800eb82:	89ab      	ldrh	r3, [r5, #12]
 800eb84:	071b      	lsls	r3, r3, #28
 800eb86:	d501      	bpl.n	800eb8c <_vfiprintf_r+0x34>
 800eb88:	692b      	ldr	r3, [r5, #16]
 800eb8a:	b99b      	cbnz	r3, 800ebb4 <_vfiprintf_r+0x5c>
 800eb8c:	4629      	mov	r1, r5
 800eb8e:	4630      	mov	r0, r6
 800eb90:	f000 f938 	bl	800ee04 <__swsetup_r>
 800eb94:	b170      	cbz	r0, 800ebb4 <_vfiprintf_r+0x5c>
 800eb96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb98:	07dc      	lsls	r4, r3, #31
 800eb9a:	d504      	bpl.n	800eba6 <_vfiprintf_r+0x4e>
 800eb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eba0:	b01d      	add	sp, #116	@ 0x74
 800eba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba6:	89ab      	ldrh	r3, [r5, #12]
 800eba8:	0598      	lsls	r0, r3, #22
 800ebaa:	d4f7      	bmi.n	800eb9c <_vfiprintf_r+0x44>
 800ebac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebae:	f7fd fa79 	bl	800c0a4 <__retarget_lock_release_recursive>
 800ebb2:	e7f3      	b.n	800eb9c <_vfiprintf_r+0x44>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebb8:	2320      	movs	r3, #32
 800ebba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ebbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebc2:	2330      	movs	r3, #48	@ 0x30
 800ebc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ed74 <_vfiprintf_r+0x21c>
 800ebc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebcc:	f04f 0901 	mov.w	r9, #1
 800ebd0:	4623      	mov	r3, r4
 800ebd2:	469a      	mov	sl, r3
 800ebd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebd8:	b10a      	cbz	r2, 800ebde <_vfiprintf_r+0x86>
 800ebda:	2a25      	cmp	r2, #37	@ 0x25
 800ebdc:	d1f9      	bne.n	800ebd2 <_vfiprintf_r+0x7a>
 800ebde:	ebba 0b04 	subs.w	fp, sl, r4
 800ebe2:	d00b      	beq.n	800ebfc <_vfiprintf_r+0xa4>
 800ebe4:	465b      	mov	r3, fp
 800ebe6:	4622      	mov	r2, r4
 800ebe8:	4629      	mov	r1, r5
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7ff ffa2 	bl	800eb34 <__sfputs_r>
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	f000 80a7 	beq.w	800ed44 <_vfiprintf_r+0x1ec>
 800ebf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebf8:	445a      	add	r2, fp
 800ebfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f000 809f 	beq.w	800ed44 <_vfiprintf_r+0x1ec>
 800ec06:	2300      	movs	r3, #0
 800ec08:	f04f 32ff 	mov.w	r2, #4294967295
 800ec0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec10:	f10a 0a01 	add.w	sl, sl, #1
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	9307      	str	r3, [sp, #28]
 800ec18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec1e:	4654      	mov	r4, sl
 800ec20:	2205      	movs	r2, #5
 800ec22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec26:	4853      	ldr	r0, [pc, #332]	@ (800ed74 <_vfiprintf_r+0x21c>)
 800ec28:	f7f1 fae2 	bl	80001f0 <memchr>
 800ec2c:	9a04      	ldr	r2, [sp, #16]
 800ec2e:	b9d8      	cbnz	r0, 800ec68 <_vfiprintf_r+0x110>
 800ec30:	06d1      	lsls	r1, r2, #27
 800ec32:	bf44      	itt	mi
 800ec34:	2320      	movmi	r3, #32
 800ec36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec3a:	0713      	lsls	r3, r2, #28
 800ec3c:	bf44      	itt	mi
 800ec3e:	232b      	movmi	r3, #43	@ 0x2b
 800ec40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec44:	f89a 3000 	ldrb.w	r3, [sl]
 800ec48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec4a:	d015      	beq.n	800ec78 <_vfiprintf_r+0x120>
 800ec4c:	9a07      	ldr	r2, [sp, #28]
 800ec4e:	4654      	mov	r4, sl
 800ec50:	2000      	movs	r0, #0
 800ec52:	f04f 0c0a 	mov.w	ip, #10
 800ec56:	4621      	mov	r1, r4
 800ec58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec5c:	3b30      	subs	r3, #48	@ 0x30
 800ec5e:	2b09      	cmp	r3, #9
 800ec60:	d94b      	bls.n	800ecfa <_vfiprintf_r+0x1a2>
 800ec62:	b1b0      	cbz	r0, 800ec92 <_vfiprintf_r+0x13a>
 800ec64:	9207      	str	r2, [sp, #28]
 800ec66:	e014      	b.n	800ec92 <_vfiprintf_r+0x13a>
 800ec68:	eba0 0308 	sub.w	r3, r0, r8
 800ec6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ec70:	4313      	orrs	r3, r2
 800ec72:	9304      	str	r3, [sp, #16]
 800ec74:	46a2      	mov	sl, r4
 800ec76:	e7d2      	b.n	800ec1e <_vfiprintf_r+0xc6>
 800ec78:	9b03      	ldr	r3, [sp, #12]
 800ec7a:	1d19      	adds	r1, r3, #4
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	9103      	str	r1, [sp, #12]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	bfbb      	ittet	lt
 800ec84:	425b      	neglt	r3, r3
 800ec86:	f042 0202 	orrlt.w	r2, r2, #2
 800ec8a:	9307      	strge	r3, [sp, #28]
 800ec8c:	9307      	strlt	r3, [sp, #28]
 800ec8e:	bfb8      	it	lt
 800ec90:	9204      	strlt	r2, [sp, #16]
 800ec92:	7823      	ldrb	r3, [r4, #0]
 800ec94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec96:	d10a      	bne.n	800ecae <_vfiprintf_r+0x156>
 800ec98:	7863      	ldrb	r3, [r4, #1]
 800ec9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec9c:	d132      	bne.n	800ed04 <_vfiprintf_r+0x1ac>
 800ec9e:	9b03      	ldr	r3, [sp, #12]
 800eca0:	1d1a      	adds	r2, r3, #4
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	9203      	str	r2, [sp, #12]
 800eca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecaa:	3402      	adds	r4, #2
 800ecac:	9305      	str	r3, [sp, #20]
 800ecae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ed84 <_vfiprintf_r+0x22c>
 800ecb2:	7821      	ldrb	r1, [r4, #0]
 800ecb4:	2203      	movs	r2, #3
 800ecb6:	4650      	mov	r0, sl
 800ecb8:	f7f1 fa9a 	bl	80001f0 <memchr>
 800ecbc:	b138      	cbz	r0, 800ecce <_vfiprintf_r+0x176>
 800ecbe:	9b04      	ldr	r3, [sp, #16]
 800ecc0:	eba0 000a 	sub.w	r0, r0, sl
 800ecc4:	2240      	movs	r2, #64	@ 0x40
 800ecc6:	4082      	lsls	r2, r0
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	3401      	adds	r4, #1
 800eccc:	9304      	str	r3, [sp, #16]
 800ecce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecd2:	4829      	ldr	r0, [pc, #164]	@ (800ed78 <_vfiprintf_r+0x220>)
 800ecd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecd8:	2206      	movs	r2, #6
 800ecda:	f7f1 fa89 	bl	80001f0 <memchr>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d03f      	beq.n	800ed62 <_vfiprintf_r+0x20a>
 800ece2:	4b26      	ldr	r3, [pc, #152]	@ (800ed7c <_vfiprintf_r+0x224>)
 800ece4:	bb1b      	cbnz	r3, 800ed2e <_vfiprintf_r+0x1d6>
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	3307      	adds	r3, #7
 800ecea:	f023 0307 	bic.w	r3, r3, #7
 800ecee:	3308      	adds	r3, #8
 800ecf0:	9303      	str	r3, [sp, #12]
 800ecf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf4:	443b      	add	r3, r7
 800ecf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecf8:	e76a      	b.n	800ebd0 <_vfiprintf_r+0x78>
 800ecfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecfe:	460c      	mov	r4, r1
 800ed00:	2001      	movs	r0, #1
 800ed02:	e7a8      	b.n	800ec56 <_vfiprintf_r+0xfe>
 800ed04:	2300      	movs	r3, #0
 800ed06:	3401      	adds	r4, #1
 800ed08:	9305      	str	r3, [sp, #20]
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	f04f 0c0a 	mov.w	ip, #10
 800ed10:	4620      	mov	r0, r4
 800ed12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed16:	3a30      	subs	r2, #48	@ 0x30
 800ed18:	2a09      	cmp	r2, #9
 800ed1a:	d903      	bls.n	800ed24 <_vfiprintf_r+0x1cc>
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d0c6      	beq.n	800ecae <_vfiprintf_r+0x156>
 800ed20:	9105      	str	r1, [sp, #20]
 800ed22:	e7c4      	b.n	800ecae <_vfiprintf_r+0x156>
 800ed24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed28:	4604      	mov	r4, r0
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e7f0      	b.n	800ed10 <_vfiprintf_r+0x1b8>
 800ed2e:	ab03      	add	r3, sp, #12
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	462a      	mov	r2, r5
 800ed34:	4b12      	ldr	r3, [pc, #72]	@ (800ed80 <_vfiprintf_r+0x228>)
 800ed36:	a904      	add	r1, sp, #16
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f7fc f9f5 	bl	800b128 <_printf_float>
 800ed3e:	4607      	mov	r7, r0
 800ed40:	1c78      	adds	r0, r7, #1
 800ed42:	d1d6      	bne.n	800ecf2 <_vfiprintf_r+0x19a>
 800ed44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed46:	07d9      	lsls	r1, r3, #31
 800ed48:	d405      	bmi.n	800ed56 <_vfiprintf_r+0x1fe>
 800ed4a:	89ab      	ldrh	r3, [r5, #12]
 800ed4c:	059a      	lsls	r2, r3, #22
 800ed4e:	d402      	bmi.n	800ed56 <_vfiprintf_r+0x1fe>
 800ed50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed52:	f7fd f9a7 	bl	800c0a4 <__retarget_lock_release_recursive>
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	065b      	lsls	r3, r3, #25
 800ed5a:	f53f af1f 	bmi.w	800eb9c <_vfiprintf_r+0x44>
 800ed5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed60:	e71e      	b.n	800eba0 <_vfiprintf_r+0x48>
 800ed62:	ab03      	add	r3, sp, #12
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	462a      	mov	r2, r5
 800ed68:	4b05      	ldr	r3, [pc, #20]	@ (800ed80 <_vfiprintf_r+0x228>)
 800ed6a:	a904      	add	r1, sp, #16
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	f7fc fc73 	bl	800b658 <_printf_i>
 800ed72:	e7e4      	b.n	800ed3e <_vfiprintf_r+0x1e6>
 800ed74:	08010660 	.word	0x08010660
 800ed78:	0801066a 	.word	0x0801066a
 800ed7c:	0800b129 	.word	0x0800b129
 800ed80:	0800eb35 	.word	0x0800eb35
 800ed84:	08010666 	.word	0x08010666

0800ed88 <__swbuf_r>:
 800ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8a:	460e      	mov	r6, r1
 800ed8c:	4614      	mov	r4, r2
 800ed8e:	4605      	mov	r5, r0
 800ed90:	b118      	cbz	r0, 800ed9a <__swbuf_r+0x12>
 800ed92:	6a03      	ldr	r3, [r0, #32]
 800ed94:	b90b      	cbnz	r3, 800ed9a <__swbuf_r+0x12>
 800ed96:	f7fd f81f 	bl	800bdd8 <__sinit>
 800ed9a:	69a3      	ldr	r3, [r4, #24]
 800ed9c:	60a3      	str	r3, [r4, #8]
 800ed9e:	89a3      	ldrh	r3, [r4, #12]
 800eda0:	071a      	lsls	r2, r3, #28
 800eda2:	d501      	bpl.n	800eda8 <__swbuf_r+0x20>
 800eda4:	6923      	ldr	r3, [r4, #16]
 800eda6:	b943      	cbnz	r3, 800edba <__swbuf_r+0x32>
 800eda8:	4621      	mov	r1, r4
 800edaa:	4628      	mov	r0, r5
 800edac:	f000 f82a 	bl	800ee04 <__swsetup_r>
 800edb0:	b118      	cbz	r0, 800edba <__swbuf_r+0x32>
 800edb2:	f04f 37ff 	mov.w	r7, #4294967295
 800edb6:	4638      	mov	r0, r7
 800edb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	6922      	ldr	r2, [r4, #16]
 800edbe:	1a98      	subs	r0, r3, r2
 800edc0:	6963      	ldr	r3, [r4, #20]
 800edc2:	b2f6      	uxtb	r6, r6
 800edc4:	4283      	cmp	r3, r0
 800edc6:	4637      	mov	r7, r6
 800edc8:	dc05      	bgt.n	800edd6 <__swbuf_r+0x4e>
 800edca:	4621      	mov	r1, r4
 800edcc:	4628      	mov	r0, r5
 800edce:	f7ff fd29 	bl	800e824 <_fflush_r>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d1ed      	bne.n	800edb2 <__swbuf_r+0x2a>
 800edd6:	68a3      	ldr	r3, [r4, #8]
 800edd8:	3b01      	subs	r3, #1
 800edda:	60a3      	str	r3, [r4, #8]
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	1c5a      	adds	r2, r3, #1
 800ede0:	6022      	str	r2, [r4, #0]
 800ede2:	701e      	strb	r6, [r3, #0]
 800ede4:	6962      	ldr	r2, [r4, #20]
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	429a      	cmp	r2, r3
 800edea:	d004      	beq.n	800edf6 <__swbuf_r+0x6e>
 800edec:	89a3      	ldrh	r3, [r4, #12]
 800edee:	07db      	lsls	r3, r3, #31
 800edf0:	d5e1      	bpl.n	800edb6 <__swbuf_r+0x2e>
 800edf2:	2e0a      	cmp	r6, #10
 800edf4:	d1df      	bne.n	800edb6 <__swbuf_r+0x2e>
 800edf6:	4621      	mov	r1, r4
 800edf8:	4628      	mov	r0, r5
 800edfa:	f7ff fd13 	bl	800e824 <_fflush_r>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d0d9      	beq.n	800edb6 <__swbuf_r+0x2e>
 800ee02:	e7d6      	b.n	800edb2 <__swbuf_r+0x2a>

0800ee04 <__swsetup_r>:
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	4b29      	ldr	r3, [pc, #164]	@ (800eeac <__swsetup_r+0xa8>)
 800ee08:	4605      	mov	r5, r0
 800ee0a:	6818      	ldr	r0, [r3, #0]
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	b118      	cbz	r0, 800ee18 <__swsetup_r+0x14>
 800ee10:	6a03      	ldr	r3, [r0, #32]
 800ee12:	b90b      	cbnz	r3, 800ee18 <__swsetup_r+0x14>
 800ee14:	f7fc ffe0 	bl	800bdd8 <__sinit>
 800ee18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee1c:	0719      	lsls	r1, r3, #28
 800ee1e:	d422      	bmi.n	800ee66 <__swsetup_r+0x62>
 800ee20:	06da      	lsls	r2, r3, #27
 800ee22:	d407      	bmi.n	800ee34 <__swsetup_r+0x30>
 800ee24:	2209      	movs	r2, #9
 800ee26:	602a      	str	r2, [r5, #0]
 800ee28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee2c:	81a3      	strh	r3, [r4, #12]
 800ee2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee32:	e033      	b.n	800ee9c <__swsetup_r+0x98>
 800ee34:	0758      	lsls	r0, r3, #29
 800ee36:	d512      	bpl.n	800ee5e <__swsetup_r+0x5a>
 800ee38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee3a:	b141      	cbz	r1, 800ee4e <__swsetup_r+0x4a>
 800ee3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee40:	4299      	cmp	r1, r3
 800ee42:	d002      	beq.n	800ee4a <__swsetup_r+0x46>
 800ee44:	4628      	mov	r0, r5
 800ee46:	f7fd ff9b 	bl	800cd80 <_free_r>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ee54:	81a3      	strh	r3, [r4, #12]
 800ee56:	2300      	movs	r3, #0
 800ee58:	6063      	str	r3, [r4, #4]
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f043 0308 	orr.w	r3, r3, #8
 800ee64:	81a3      	strh	r3, [r4, #12]
 800ee66:	6923      	ldr	r3, [r4, #16]
 800ee68:	b94b      	cbnz	r3, 800ee7e <__swsetup_r+0x7a>
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ee70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee74:	d003      	beq.n	800ee7e <__swsetup_r+0x7a>
 800ee76:	4621      	mov	r1, r4
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f000 f883 	bl	800ef84 <__smakebuf_r>
 800ee7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee82:	f013 0201 	ands.w	r2, r3, #1
 800ee86:	d00a      	beq.n	800ee9e <__swsetup_r+0x9a>
 800ee88:	2200      	movs	r2, #0
 800ee8a:	60a2      	str	r2, [r4, #8]
 800ee8c:	6962      	ldr	r2, [r4, #20]
 800ee8e:	4252      	negs	r2, r2
 800ee90:	61a2      	str	r2, [r4, #24]
 800ee92:	6922      	ldr	r2, [r4, #16]
 800ee94:	b942      	cbnz	r2, 800eea8 <__swsetup_r+0xa4>
 800ee96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ee9a:	d1c5      	bne.n	800ee28 <__swsetup_r+0x24>
 800ee9c:	bd38      	pop	{r3, r4, r5, pc}
 800ee9e:	0799      	lsls	r1, r3, #30
 800eea0:	bf58      	it	pl
 800eea2:	6962      	ldrpl	r2, [r4, #20]
 800eea4:	60a2      	str	r2, [r4, #8]
 800eea6:	e7f4      	b.n	800ee92 <__swsetup_r+0x8e>
 800eea8:	2000      	movs	r0, #0
 800eeaa:	e7f7      	b.n	800ee9c <__swsetup_r+0x98>
 800eeac:	20000190 	.word	0x20000190

0800eeb0 <_raise_r>:
 800eeb0:	291f      	cmp	r1, #31
 800eeb2:	b538      	push	{r3, r4, r5, lr}
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	460c      	mov	r4, r1
 800eeb8:	d904      	bls.n	800eec4 <_raise_r+0x14>
 800eeba:	2316      	movs	r3, #22
 800eebc:	6003      	str	r3, [r0, #0]
 800eebe:	f04f 30ff 	mov.w	r0, #4294967295
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eec6:	b112      	cbz	r2, 800eece <_raise_r+0x1e>
 800eec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eecc:	b94b      	cbnz	r3, 800eee2 <_raise_r+0x32>
 800eece:	4628      	mov	r0, r5
 800eed0:	f000 f830 	bl	800ef34 <_getpid_r>
 800eed4:	4622      	mov	r2, r4
 800eed6:	4601      	mov	r1, r0
 800eed8:	4628      	mov	r0, r5
 800eeda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eede:	f000 b817 	b.w	800ef10 <_kill_r>
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d00a      	beq.n	800eefc <_raise_r+0x4c>
 800eee6:	1c59      	adds	r1, r3, #1
 800eee8:	d103      	bne.n	800eef2 <_raise_r+0x42>
 800eeea:	2316      	movs	r3, #22
 800eeec:	6003      	str	r3, [r0, #0]
 800eeee:	2001      	movs	r0, #1
 800eef0:	e7e7      	b.n	800eec2 <_raise_r+0x12>
 800eef2:	2100      	movs	r1, #0
 800eef4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eef8:	4620      	mov	r0, r4
 800eefa:	4798      	blx	r3
 800eefc:	2000      	movs	r0, #0
 800eefe:	e7e0      	b.n	800eec2 <_raise_r+0x12>

0800ef00 <raise>:
 800ef00:	4b02      	ldr	r3, [pc, #8]	@ (800ef0c <raise+0xc>)
 800ef02:	4601      	mov	r1, r0
 800ef04:	6818      	ldr	r0, [r3, #0]
 800ef06:	f7ff bfd3 	b.w	800eeb0 <_raise_r>
 800ef0a:	bf00      	nop
 800ef0c:	20000190 	.word	0x20000190

0800ef10 <_kill_r>:
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	4d07      	ldr	r5, [pc, #28]	@ (800ef30 <_kill_r+0x20>)
 800ef14:	2300      	movs	r3, #0
 800ef16:	4604      	mov	r4, r0
 800ef18:	4608      	mov	r0, r1
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	602b      	str	r3, [r5, #0]
 800ef1e:	f7f4 fc29 	bl	8003774 <_kill>
 800ef22:	1c43      	adds	r3, r0, #1
 800ef24:	d102      	bne.n	800ef2c <_kill_r+0x1c>
 800ef26:	682b      	ldr	r3, [r5, #0]
 800ef28:	b103      	cbz	r3, 800ef2c <_kill_r+0x1c>
 800ef2a:	6023      	str	r3, [r4, #0]
 800ef2c:	bd38      	pop	{r3, r4, r5, pc}
 800ef2e:	bf00      	nop
 800ef30:	20000678 	.word	0x20000678

0800ef34 <_getpid_r>:
 800ef34:	f7f4 bc16 	b.w	8003764 <_getpid>

0800ef38 <__swhatbuf_r>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef40:	2900      	cmp	r1, #0
 800ef42:	b096      	sub	sp, #88	@ 0x58
 800ef44:	4615      	mov	r5, r2
 800ef46:	461e      	mov	r6, r3
 800ef48:	da0d      	bge.n	800ef66 <__swhatbuf_r+0x2e>
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ef50:	f04f 0100 	mov.w	r1, #0
 800ef54:	bf14      	ite	ne
 800ef56:	2340      	movne	r3, #64	@ 0x40
 800ef58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef5c:	2000      	movs	r0, #0
 800ef5e:	6031      	str	r1, [r6, #0]
 800ef60:	602b      	str	r3, [r5, #0]
 800ef62:	b016      	add	sp, #88	@ 0x58
 800ef64:	bd70      	pop	{r4, r5, r6, pc}
 800ef66:	466a      	mov	r2, sp
 800ef68:	f000 f848 	bl	800effc <_fstat_r>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	dbec      	blt.n	800ef4a <__swhatbuf_r+0x12>
 800ef70:	9901      	ldr	r1, [sp, #4]
 800ef72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef7a:	4259      	negs	r1, r3
 800ef7c:	4159      	adcs	r1, r3
 800ef7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef82:	e7eb      	b.n	800ef5c <__swhatbuf_r+0x24>

0800ef84 <__smakebuf_r>:
 800ef84:	898b      	ldrh	r3, [r1, #12]
 800ef86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef88:	079d      	lsls	r5, r3, #30
 800ef8a:	4606      	mov	r6, r0
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	d507      	bpl.n	800efa0 <__smakebuf_r+0x1c>
 800ef90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	6123      	str	r3, [r4, #16]
 800ef98:	2301      	movs	r3, #1
 800ef9a:	6163      	str	r3, [r4, #20]
 800ef9c:	b003      	add	sp, #12
 800ef9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efa0:	ab01      	add	r3, sp, #4
 800efa2:	466a      	mov	r2, sp
 800efa4:	f7ff ffc8 	bl	800ef38 <__swhatbuf_r>
 800efa8:	9f00      	ldr	r7, [sp, #0]
 800efaa:	4605      	mov	r5, r0
 800efac:	4639      	mov	r1, r7
 800efae:	4630      	mov	r0, r6
 800efb0:	f7fb f8c8 	bl	800a144 <_malloc_r>
 800efb4:	b948      	cbnz	r0, 800efca <__smakebuf_r+0x46>
 800efb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efba:	059a      	lsls	r2, r3, #22
 800efbc:	d4ee      	bmi.n	800ef9c <__smakebuf_r+0x18>
 800efbe:	f023 0303 	bic.w	r3, r3, #3
 800efc2:	f043 0302 	orr.w	r3, r3, #2
 800efc6:	81a3      	strh	r3, [r4, #12]
 800efc8:	e7e2      	b.n	800ef90 <__smakebuf_r+0xc>
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	6020      	str	r0, [r4, #0]
 800efce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efd2:	81a3      	strh	r3, [r4, #12]
 800efd4:	9b01      	ldr	r3, [sp, #4]
 800efd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800efda:	b15b      	cbz	r3, 800eff4 <__smakebuf_r+0x70>
 800efdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efe0:	4630      	mov	r0, r6
 800efe2:	f000 f81d 	bl	800f020 <_isatty_r>
 800efe6:	b128      	cbz	r0, 800eff4 <__smakebuf_r+0x70>
 800efe8:	89a3      	ldrh	r3, [r4, #12]
 800efea:	f023 0303 	bic.w	r3, r3, #3
 800efee:	f043 0301 	orr.w	r3, r3, #1
 800eff2:	81a3      	strh	r3, [r4, #12]
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	431d      	orrs	r5, r3
 800eff8:	81a5      	strh	r5, [r4, #12]
 800effa:	e7cf      	b.n	800ef9c <__smakebuf_r+0x18>

0800effc <_fstat_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	4d07      	ldr	r5, [pc, #28]	@ (800f01c <_fstat_r+0x20>)
 800f000:	2300      	movs	r3, #0
 800f002:	4604      	mov	r4, r0
 800f004:	4608      	mov	r0, r1
 800f006:	4611      	mov	r1, r2
 800f008:	602b      	str	r3, [r5, #0]
 800f00a:	f7f4 fc13 	bl	8003834 <_fstat>
 800f00e:	1c43      	adds	r3, r0, #1
 800f010:	d102      	bne.n	800f018 <_fstat_r+0x1c>
 800f012:	682b      	ldr	r3, [r5, #0]
 800f014:	b103      	cbz	r3, 800f018 <_fstat_r+0x1c>
 800f016:	6023      	str	r3, [r4, #0]
 800f018:	bd38      	pop	{r3, r4, r5, pc}
 800f01a:	bf00      	nop
 800f01c:	20000678 	.word	0x20000678

0800f020 <_isatty_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4d06      	ldr	r5, [pc, #24]	@ (800f03c <_isatty_r+0x1c>)
 800f024:	2300      	movs	r3, #0
 800f026:	4604      	mov	r4, r0
 800f028:	4608      	mov	r0, r1
 800f02a:	602b      	str	r3, [r5, #0]
 800f02c:	f7f4 fc12 	bl	8003854 <_isatty>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d102      	bne.n	800f03a <_isatty_r+0x1a>
 800f034:	682b      	ldr	r3, [r5, #0]
 800f036:	b103      	cbz	r3, 800f03a <_isatty_r+0x1a>
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	20000678 	.word	0x20000678

0800f040 <cos>:
 800f040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f042:	ec53 2b10 	vmov	r2, r3, d0
 800f046:	4826      	ldr	r0, [pc, #152]	@ (800f0e0 <cos+0xa0>)
 800f048:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f04c:	4281      	cmp	r1, r0
 800f04e:	d806      	bhi.n	800f05e <cos+0x1e>
 800f050:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f0d8 <cos+0x98>
 800f054:	b005      	add	sp, #20
 800f056:	f85d eb04 	ldr.w	lr, [sp], #4
 800f05a:	f000 b899 	b.w	800f190 <__kernel_cos>
 800f05e:	4821      	ldr	r0, [pc, #132]	@ (800f0e4 <cos+0xa4>)
 800f060:	4281      	cmp	r1, r0
 800f062:	d908      	bls.n	800f076 <cos+0x36>
 800f064:	4610      	mov	r0, r2
 800f066:	4619      	mov	r1, r3
 800f068:	f7f1 f91e 	bl	80002a8 <__aeabi_dsub>
 800f06c:	ec41 0b10 	vmov	d0, r0, r1
 800f070:	b005      	add	sp, #20
 800f072:	f85d fb04 	ldr.w	pc, [sp], #4
 800f076:	4668      	mov	r0, sp
 800f078:	f000 fa0e 	bl	800f498 <__ieee754_rem_pio2>
 800f07c:	f000 0003 	and.w	r0, r0, #3
 800f080:	2801      	cmp	r0, #1
 800f082:	d00b      	beq.n	800f09c <cos+0x5c>
 800f084:	2802      	cmp	r0, #2
 800f086:	d015      	beq.n	800f0b4 <cos+0x74>
 800f088:	b9d8      	cbnz	r0, 800f0c2 <cos+0x82>
 800f08a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f08e:	ed9d 0b00 	vldr	d0, [sp]
 800f092:	f000 f87d 	bl	800f190 <__kernel_cos>
 800f096:	ec51 0b10 	vmov	r0, r1, d0
 800f09a:	e7e7      	b.n	800f06c <cos+0x2c>
 800f09c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f0a0:	ed9d 0b00 	vldr	d0, [sp]
 800f0a4:	f000 f93c 	bl	800f320 <__kernel_sin>
 800f0a8:	ec53 2b10 	vmov	r2, r3, d0
 800f0ac:	4610      	mov	r0, r2
 800f0ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f0b2:	e7db      	b.n	800f06c <cos+0x2c>
 800f0b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f0b8:	ed9d 0b00 	vldr	d0, [sp]
 800f0bc:	f000 f868 	bl	800f190 <__kernel_cos>
 800f0c0:	e7f2      	b.n	800f0a8 <cos+0x68>
 800f0c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f0c6:	ed9d 0b00 	vldr	d0, [sp]
 800f0ca:	2001      	movs	r0, #1
 800f0cc:	f000 f928 	bl	800f320 <__kernel_sin>
 800f0d0:	e7e1      	b.n	800f096 <cos+0x56>
 800f0d2:	bf00      	nop
 800f0d4:	f3af 8000 	nop.w
	...
 800f0e0:	3fe921fb 	.word	0x3fe921fb
 800f0e4:	7fefffff 	.word	0x7fefffff

0800f0e8 <sin>:
 800f0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0ea:	ec53 2b10 	vmov	r2, r3, d0
 800f0ee:	4826      	ldr	r0, [pc, #152]	@ (800f188 <sin+0xa0>)
 800f0f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f0f4:	4281      	cmp	r1, r0
 800f0f6:	d807      	bhi.n	800f108 <sin+0x20>
 800f0f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f180 <sin+0x98>
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	b005      	add	sp, #20
 800f100:	f85d eb04 	ldr.w	lr, [sp], #4
 800f104:	f000 b90c 	b.w	800f320 <__kernel_sin>
 800f108:	4820      	ldr	r0, [pc, #128]	@ (800f18c <sin+0xa4>)
 800f10a:	4281      	cmp	r1, r0
 800f10c:	d908      	bls.n	800f120 <sin+0x38>
 800f10e:	4610      	mov	r0, r2
 800f110:	4619      	mov	r1, r3
 800f112:	f7f1 f8c9 	bl	80002a8 <__aeabi_dsub>
 800f116:	ec41 0b10 	vmov	d0, r0, r1
 800f11a:	b005      	add	sp, #20
 800f11c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f120:	4668      	mov	r0, sp
 800f122:	f000 f9b9 	bl	800f498 <__ieee754_rem_pio2>
 800f126:	f000 0003 	and.w	r0, r0, #3
 800f12a:	2801      	cmp	r0, #1
 800f12c:	d00c      	beq.n	800f148 <sin+0x60>
 800f12e:	2802      	cmp	r0, #2
 800f130:	d011      	beq.n	800f156 <sin+0x6e>
 800f132:	b9e8      	cbnz	r0, 800f170 <sin+0x88>
 800f134:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f138:	ed9d 0b00 	vldr	d0, [sp]
 800f13c:	2001      	movs	r0, #1
 800f13e:	f000 f8ef 	bl	800f320 <__kernel_sin>
 800f142:	ec51 0b10 	vmov	r0, r1, d0
 800f146:	e7e6      	b.n	800f116 <sin+0x2e>
 800f148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f14c:	ed9d 0b00 	vldr	d0, [sp]
 800f150:	f000 f81e 	bl	800f190 <__kernel_cos>
 800f154:	e7f5      	b.n	800f142 <sin+0x5a>
 800f156:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f15a:	ed9d 0b00 	vldr	d0, [sp]
 800f15e:	2001      	movs	r0, #1
 800f160:	f000 f8de 	bl	800f320 <__kernel_sin>
 800f164:	ec53 2b10 	vmov	r2, r3, d0
 800f168:	4610      	mov	r0, r2
 800f16a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f16e:	e7d2      	b.n	800f116 <sin+0x2e>
 800f170:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f174:	ed9d 0b00 	vldr	d0, [sp]
 800f178:	f000 f80a 	bl	800f190 <__kernel_cos>
 800f17c:	e7f2      	b.n	800f164 <sin+0x7c>
 800f17e:	bf00      	nop
	...
 800f188:	3fe921fb 	.word	0x3fe921fb
 800f18c:	7fefffff 	.word	0x7fefffff

0800f190 <__kernel_cos>:
 800f190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f194:	ec57 6b10 	vmov	r6, r7, d0
 800f198:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f19c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f1a0:	ed8d 1b00 	vstr	d1, [sp]
 800f1a4:	d206      	bcs.n	800f1b4 <__kernel_cos+0x24>
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	f7f1 fce5 	bl	8000b78 <__aeabi_d2iz>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	f000 8088 	beq.w	800f2c4 <__kernel_cos+0x134>
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	4639      	mov	r1, r7
 800f1bc:	f7f1 fa2c 	bl	8000618 <__aeabi_dmul>
 800f1c0:	4b51      	ldr	r3, [pc, #324]	@ (800f308 <__kernel_cos+0x178>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	460d      	mov	r5, r1
 800f1c8:	f7f1 fa26 	bl	8000618 <__aeabi_dmul>
 800f1cc:	a340      	add	r3, pc, #256	@ (adr r3, 800f2d0 <__kernel_cos+0x140>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	4682      	mov	sl, r0
 800f1d4:	468b      	mov	fp, r1
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	4629      	mov	r1, r5
 800f1da:	f7f1 fa1d 	bl	8000618 <__aeabi_dmul>
 800f1de:	a33e      	add	r3, pc, #248	@ (adr r3, 800f2d8 <__kernel_cos+0x148>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	f7f1 f862 	bl	80002ac <__adddf3>
 800f1e8:	4622      	mov	r2, r4
 800f1ea:	462b      	mov	r3, r5
 800f1ec:	f7f1 fa14 	bl	8000618 <__aeabi_dmul>
 800f1f0:	a33b      	add	r3, pc, #236	@ (adr r3, 800f2e0 <__kernel_cos+0x150>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	f7f1 f857 	bl	80002a8 <__aeabi_dsub>
 800f1fa:	4622      	mov	r2, r4
 800f1fc:	462b      	mov	r3, r5
 800f1fe:	f7f1 fa0b 	bl	8000618 <__aeabi_dmul>
 800f202:	a339      	add	r3, pc, #228	@ (adr r3, 800f2e8 <__kernel_cos+0x158>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f850 	bl	80002ac <__adddf3>
 800f20c:	4622      	mov	r2, r4
 800f20e:	462b      	mov	r3, r5
 800f210:	f7f1 fa02 	bl	8000618 <__aeabi_dmul>
 800f214:	a336      	add	r3, pc, #216	@ (adr r3, 800f2f0 <__kernel_cos+0x160>)
 800f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21a:	f7f1 f845 	bl	80002a8 <__aeabi_dsub>
 800f21e:	4622      	mov	r2, r4
 800f220:	462b      	mov	r3, r5
 800f222:	f7f1 f9f9 	bl	8000618 <__aeabi_dmul>
 800f226:	a334      	add	r3, pc, #208	@ (adr r3, 800f2f8 <__kernel_cos+0x168>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f1 f83e 	bl	80002ac <__adddf3>
 800f230:	4622      	mov	r2, r4
 800f232:	462b      	mov	r3, r5
 800f234:	f7f1 f9f0 	bl	8000618 <__aeabi_dmul>
 800f238:	4622      	mov	r2, r4
 800f23a:	462b      	mov	r3, r5
 800f23c:	f7f1 f9ec 	bl	8000618 <__aeabi_dmul>
 800f240:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f244:	4604      	mov	r4, r0
 800f246:	460d      	mov	r5, r1
 800f248:	4630      	mov	r0, r6
 800f24a:	4639      	mov	r1, r7
 800f24c:	f7f1 f9e4 	bl	8000618 <__aeabi_dmul>
 800f250:	460b      	mov	r3, r1
 800f252:	4602      	mov	r2, r0
 800f254:	4629      	mov	r1, r5
 800f256:	4620      	mov	r0, r4
 800f258:	f7f1 f826 	bl	80002a8 <__aeabi_dsub>
 800f25c:	4b2b      	ldr	r3, [pc, #172]	@ (800f30c <__kernel_cos+0x17c>)
 800f25e:	4598      	cmp	r8, r3
 800f260:	4606      	mov	r6, r0
 800f262:	460f      	mov	r7, r1
 800f264:	d810      	bhi.n	800f288 <__kernel_cos+0xf8>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4650      	mov	r0, sl
 800f26c:	4659      	mov	r1, fp
 800f26e:	f7f1 f81b 	bl	80002a8 <__aeabi_dsub>
 800f272:	460b      	mov	r3, r1
 800f274:	4926      	ldr	r1, [pc, #152]	@ (800f310 <__kernel_cos+0x180>)
 800f276:	4602      	mov	r2, r0
 800f278:	2000      	movs	r0, #0
 800f27a:	f7f1 f815 	bl	80002a8 <__aeabi_dsub>
 800f27e:	ec41 0b10 	vmov	d0, r0, r1
 800f282:	b003      	add	sp, #12
 800f284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f288:	4b22      	ldr	r3, [pc, #136]	@ (800f314 <__kernel_cos+0x184>)
 800f28a:	4921      	ldr	r1, [pc, #132]	@ (800f310 <__kernel_cos+0x180>)
 800f28c:	4598      	cmp	r8, r3
 800f28e:	bf8c      	ite	hi
 800f290:	4d21      	ldrhi	r5, [pc, #132]	@ (800f318 <__kernel_cos+0x188>)
 800f292:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f296:	2400      	movs	r4, #0
 800f298:	4622      	mov	r2, r4
 800f29a:	462b      	mov	r3, r5
 800f29c:	2000      	movs	r0, #0
 800f29e:	f7f1 f803 	bl	80002a8 <__aeabi_dsub>
 800f2a2:	4622      	mov	r2, r4
 800f2a4:	4680      	mov	r8, r0
 800f2a6:	4689      	mov	r9, r1
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	4650      	mov	r0, sl
 800f2ac:	4659      	mov	r1, fp
 800f2ae:	f7f0 fffb 	bl	80002a8 <__aeabi_dsub>
 800f2b2:	4632      	mov	r2, r6
 800f2b4:	463b      	mov	r3, r7
 800f2b6:	f7f0 fff7 	bl	80002a8 <__aeabi_dsub>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	460b      	mov	r3, r1
 800f2be:	4640      	mov	r0, r8
 800f2c0:	4649      	mov	r1, r9
 800f2c2:	e7da      	b.n	800f27a <__kernel_cos+0xea>
 800f2c4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f300 <__kernel_cos+0x170>
 800f2c8:	e7db      	b.n	800f282 <__kernel_cos+0xf2>
 800f2ca:	bf00      	nop
 800f2cc:	f3af 8000 	nop.w
 800f2d0:	be8838d4 	.word	0xbe8838d4
 800f2d4:	bda8fae9 	.word	0xbda8fae9
 800f2d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f2dc:	3e21ee9e 	.word	0x3e21ee9e
 800f2e0:	809c52ad 	.word	0x809c52ad
 800f2e4:	3e927e4f 	.word	0x3e927e4f
 800f2e8:	19cb1590 	.word	0x19cb1590
 800f2ec:	3efa01a0 	.word	0x3efa01a0
 800f2f0:	16c15177 	.word	0x16c15177
 800f2f4:	3f56c16c 	.word	0x3f56c16c
 800f2f8:	5555554c 	.word	0x5555554c
 800f2fc:	3fa55555 	.word	0x3fa55555
 800f300:	00000000 	.word	0x00000000
 800f304:	3ff00000 	.word	0x3ff00000
 800f308:	3fe00000 	.word	0x3fe00000
 800f30c:	3fd33332 	.word	0x3fd33332
 800f310:	3ff00000 	.word	0x3ff00000
 800f314:	3fe90000 	.word	0x3fe90000
 800f318:	3fd20000 	.word	0x3fd20000
 800f31c:	00000000 	.word	0x00000000

0800f320 <__kernel_sin>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	ec55 4b10 	vmov	r4, r5, d0
 800f328:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f32c:	b085      	sub	sp, #20
 800f32e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f332:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f336:	4680      	mov	r8, r0
 800f338:	d205      	bcs.n	800f346 <__kernel_sin+0x26>
 800f33a:	4620      	mov	r0, r4
 800f33c:	4629      	mov	r1, r5
 800f33e:	f7f1 fc1b 	bl	8000b78 <__aeabi_d2iz>
 800f342:	2800      	cmp	r0, #0
 800f344:	d052      	beq.n	800f3ec <__kernel_sin+0xcc>
 800f346:	4622      	mov	r2, r4
 800f348:	462b      	mov	r3, r5
 800f34a:	4620      	mov	r0, r4
 800f34c:	4629      	mov	r1, r5
 800f34e:	f7f1 f963 	bl	8000618 <__aeabi_dmul>
 800f352:	4682      	mov	sl, r0
 800f354:	468b      	mov	fp, r1
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	4620      	mov	r0, r4
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7f1 f95b 	bl	8000618 <__aeabi_dmul>
 800f362:	a342      	add	r3, pc, #264	@ (adr r3, 800f46c <__kernel_sin+0x14c>)
 800f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f368:	e9cd 0100 	strd	r0, r1, [sp]
 800f36c:	4650      	mov	r0, sl
 800f36e:	4659      	mov	r1, fp
 800f370:	f7f1 f952 	bl	8000618 <__aeabi_dmul>
 800f374:	a33f      	add	r3, pc, #252	@ (adr r3, 800f474 <__kernel_sin+0x154>)
 800f376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37a:	f7f0 ff95 	bl	80002a8 <__aeabi_dsub>
 800f37e:	4652      	mov	r2, sl
 800f380:	465b      	mov	r3, fp
 800f382:	f7f1 f949 	bl	8000618 <__aeabi_dmul>
 800f386:	a33d      	add	r3, pc, #244	@ (adr r3, 800f47c <__kernel_sin+0x15c>)
 800f388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38c:	f7f0 ff8e 	bl	80002ac <__adddf3>
 800f390:	4652      	mov	r2, sl
 800f392:	465b      	mov	r3, fp
 800f394:	f7f1 f940 	bl	8000618 <__aeabi_dmul>
 800f398:	a33a      	add	r3, pc, #232	@ (adr r3, 800f484 <__kernel_sin+0x164>)
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	f7f0 ff83 	bl	80002a8 <__aeabi_dsub>
 800f3a2:	4652      	mov	r2, sl
 800f3a4:	465b      	mov	r3, fp
 800f3a6:	f7f1 f937 	bl	8000618 <__aeabi_dmul>
 800f3aa:	a338      	add	r3, pc, #224	@ (adr r3, 800f48c <__kernel_sin+0x16c>)
 800f3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b0:	f7f0 ff7c 	bl	80002ac <__adddf3>
 800f3b4:	4606      	mov	r6, r0
 800f3b6:	460f      	mov	r7, r1
 800f3b8:	f1b8 0f00 	cmp.w	r8, #0
 800f3bc:	d11b      	bne.n	800f3f6 <__kernel_sin+0xd6>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4650      	mov	r0, sl
 800f3c4:	4659      	mov	r1, fp
 800f3c6:	f7f1 f927 	bl	8000618 <__aeabi_dmul>
 800f3ca:	a325      	add	r3, pc, #148	@ (adr r3, 800f460 <__kernel_sin+0x140>)
 800f3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d0:	f7f0 ff6a 	bl	80002a8 <__aeabi_dsub>
 800f3d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3d8:	f7f1 f91e 	bl	8000618 <__aeabi_dmul>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	460b      	mov	r3, r1
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	f7f0 ff62 	bl	80002ac <__adddf3>
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	460d      	mov	r5, r1
 800f3ec:	ec45 4b10 	vmov	d0, r4, r5
 800f3f0:	b005      	add	sp, #20
 800f3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800f468 <__kernel_sin+0x148>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f7f1 f90b 	bl	8000618 <__aeabi_dmul>
 800f402:	4632      	mov	r2, r6
 800f404:	4680      	mov	r8, r0
 800f406:	4689      	mov	r9, r1
 800f408:	463b      	mov	r3, r7
 800f40a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f40e:	f7f1 f903 	bl	8000618 <__aeabi_dmul>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	4640      	mov	r0, r8
 800f418:	4649      	mov	r1, r9
 800f41a:	f7f0 ff45 	bl	80002a8 <__aeabi_dsub>
 800f41e:	4652      	mov	r2, sl
 800f420:	465b      	mov	r3, fp
 800f422:	f7f1 f8f9 	bl	8000618 <__aeabi_dmul>
 800f426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f42a:	f7f0 ff3d 	bl	80002a8 <__aeabi_dsub>
 800f42e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f460 <__kernel_sin+0x140>)
 800f430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f434:	4606      	mov	r6, r0
 800f436:	460f      	mov	r7, r1
 800f438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f43c:	f7f1 f8ec 	bl	8000618 <__aeabi_dmul>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4630      	mov	r0, r6
 800f446:	4639      	mov	r1, r7
 800f448:	f7f0 ff30 	bl	80002ac <__adddf3>
 800f44c:	4602      	mov	r2, r0
 800f44e:	460b      	mov	r3, r1
 800f450:	4620      	mov	r0, r4
 800f452:	4629      	mov	r1, r5
 800f454:	f7f0 ff28 	bl	80002a8 <__aeabi_dsub>
 800f458:	e7c6      	b.n	800f3e8 <__kernel_sin+0xc8>
 800f45a:	bf00      	nop
 800f45c:	f3af 8000 	nop.w
 800f460:	55555549 	.word	0x55555549
 800f464:	3fc55555 	.word	0x3fc55555
 800f468:	3fe00000 	.word	0x3fe00000
 800f46c:	5acfd57c 	.word	0x5acfd57c
 800f470:	3de5d93a 	.word	0x3de5d93a
 800f474:	8a2b9ceb 	.word	0x8a2b9ceb
 800f478:	3e5ae5e6 	.word	0x3e5ae5e6
 800f47c:	57b1fe7d 	.word	0x57b1fe7d
 800f480:	3ec71de3 	.word	0x3ec71de3
 800f484:	19c161d5 	.word	0x19c161d5
 800f488:	3f2a01a0 	.word	0x3f2a01a0
 800f48c:	1110f8a6 	.word	0x1110f8a6
 800f490:	3f811111 	.word	0x3f811111
 800f494:	00000000 	.word	0x00000000

0800f498 <__ieee754_rem_pio2>:
 800f498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49c:	ec57 6b10 	vmov	r6, r7, d0
 800f4a0:	4bc5      	ldr	r3, [pc, #788]	@ (800f7b8 <__ieee754_rem_pio2+0x320>)
 800f4a2:	b08d      	sub	sp, #52	@ 0x34
 800f4a4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f4a8:	4598      	cmp	r8, r3
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	9704      	str	r7, [sp, #16]
 800f4ae:	d807      	bhi.n	800f4c0 <__ieee754_rem_pio2+0x28>
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	ed80 0b00 	vstr	d0, [r0]
 800f4b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f4bc:	2500      	movs	r5, #0
 800f4be:	e028      	b.n	800f512 <__ieee754_rem_pio2+0x7a>
 800f4c0:	4bbe      	ldr	r3, [pc, #760]	@ (800f7bc <__ieee754_rem_pio2+0x324>)
 800f4c2:	4598      	cmp	r8, r3
 800f4c4:	d878      	bhi.n	800f5b8 <__ieee754_rem_pio2+0x120>
 800f4c6:	9b04      	ldr	r3, [sp, #16]
 800f4c8:	4dbd      	ldr	r5, [pc, #756]	@ (800f7c0 <__ieee754_rem_pio2+0x328>)
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f780 <__ieee754_rem_pio2+0x2e8>)
 800f4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	dd38      	ble.n	800f54a <__ieee754_rem_pio2+0xb2>
 800f4d8:	f7f0 fee6 	bl	80002a8 <__aeabi_dsub>
 800f4dc:	45a8      	cmp	r8, r5
 800f4de:	4606      	mov	r6, r0
 800f4e0:	460f      	mov	r7, r1
 800f4e2:	d01a      	beq.n	800f51a <__ieee754_rem_pio2+0x82>
 800f4e4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f788 <__ieee754_rem_pio2+0x2f0>)
 800f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ea:	f7f0 fedd 	bl	80002a8 <__aeabi_dsub>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4680      	mov	r8, r0
 800f4f4:	4689      	mov	r9, r1
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	4639      	mov	r1, r7
 800f4fa:	f7f0 fed5 	bl	80002a8 <__aeabi_dsub>
 800f4fe:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f788 <__ieee754_rem_pio2+0x2f0>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f7f0 fed0 	bl	80002a8 <__aeabi_dsub>
 800f508:	e9c4 8900 	strd	r8, r9, [r4]
 800f50c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f510:	2501      	movs	r5, #1
 800f512:	4628      	mov	r0, r5
 800f514:	b00d      	add	sp, #52	@ 0x34
 800f516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51a:	a39d      	add	r3, pc, #628	@ (adr r3, 800f790 <__ieee754_rem_pio2+0x2f8>)
 800f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f520:	f7f0 fec2 	bl	80002a8 <__aeabi_dsub>
 800f524:	a39c      	add	r3, pc, #624	@ (adr r3, 800f798 <__ieee754_rem_pio2+0x300>)
 800f526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52a:	4606      	mov	r6, r0
 800f52c:	460f      	mov	r7, r1
 800f52e:	f7f0 febb 	bl	80002a8 <__aeabi_dsub>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	4680      	mov	r8, r0
 800f538:	4689      	mov	r9, r1
 800f53a:	4630      	mov	r0, r6
 800f53c:	4639      	mov	r1, r7
 800f53e:	f7f0 feb3 	bl	80002a8 <__aeabi_dsub>
 800f542:	a395      	add	r3, pc, #596	@ (adr r3, 800f798 <__ieee754_rem_pio2+0x300>)
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	e7dc      	b.n	800f504 <__ieee754_rem_pio2+0x6c>
 800f54a:	f7f0 feaf 	bl	80002ac <__adddf3>
 800f54e:	45a8      	cmp	r8, r5
 800f550:	4606      	mov	r6, r0
 800f552:	460f      	mov	r7, r1
 800f554:	d018      	beq.n	800f588 <__ieee754_rem_pio2+0xf0>
 800f556:	a38c      	add	r3, pc, #560	@ (adr r3, 800f788 <__ieee754_rem_pio2+0x2f0>)
 800f558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55c:	f7f0 fea6 	bl	80002ac <__adddf3>
 800f560:	4602      	mov	r2, r0
 800f562:	460b      	mov	r3, r1
 800f564:	4680      	mov	r8, r0
 800f566:	4689      	mov	r9, r1
 800f568:	4630      	mov	r0, r6
 800f56a:	4639      	mov	r1, r7
 800f56c:	f7f0 fe9c 	bl	80002a8 <__aeabi_dsub>
 800f570:	a385      	add	r3, pc, #532	@ (adr r3, 800f788 <__ieee754_rem_pio2+0x2f0>)
 800f572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f576:	f7f0 fe99 	bl	80002ac <__adddf3>
 800f57a:	f04f 35ff 	mov.w	r5, #4294967295
 800f57e:	e9c4 8900 	strd	r8, r9, [r4]
 800f582:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f586:	e7c4      	b.n	800f512 <__ieee754_rem_pio2+0x7a>
 800f588:	a381      	add	r3, pc, #516	@ (adr r3, 800f790 <__ieee754_rem_pio2+0x2f8>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fe8d 	bl	80002ac <__adddf3>
 800f592:	a381      	add	r3, pc, #516	@ (adr r3, 800f798 <__ieee754_rem_pio2+0x300>)
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	4606      	mov	r6, r0
 800f59a:	460f      	mov	r7, r1
 800f59c:	f7f0 fe86 	bl	80002ac <__adddf3>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	4680      	mov	r8, r0
 800f5a6:	4689      	mov	r9, r1
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	4639      	mov	r1, r7
 800f5ac:	f7f0 fe7c 	bl	80002a8 <__aeabi_dsub>
 800f5b0:	a379      	add	r3, pc, #484	@ (adr r3, 800f798 <__ieee754_rem_pio2+0x300>)
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	e7de      	b.n	800f576 <__ieee754_rem_pio2+0xde>
 800f5b8:	4b82      	ldr	r3, [pc, #520]	@ (800f7c4 <__ieee754_rem_pio2+0x32c>)
 800f5ba:	4598      	cmp	r8, r3
 800f5bc:	f200 80d1 	bhi.w	800f762 <__ieee754_rem_pio2+0x2ca>
 800f5c0:	f000 f966 	bl	800f890 <fabs>
 800f5c4:	ec57 6b10 	vmov	r6, r7, d0
 800f5c8:	a375      	add	r3, pc, #468	@ (adr r3, 800f7a0 <__ieee754_rem_pio2+0x308>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	4639      	mov	r1, r7
 800f5d2:	f7f1 f821 	bl	8000618 <__aeabi_dmul>
 800f5d6:	4b7c      	ldr	r3, [pc, #496]	@ (800f7c8 <__ieee754_rem_pio2+0x330>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f7f0 fe67 	bl	80002ac <__adddf3>
 800f5de:	f7f1 facb 	bl	8000b78 <__aeabi_d2iz>
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	f7f0 ffae 	bl	8000544 <__aeabi_i2d>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5f0:	a363      	add	r3, pc, #396	@ (adr r3, 800f780 <__ieee754_rem_pio2+0x2e8>)
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	f7f1 f80f 	bl	8000618 <__aeabi_dmul>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	4630      	mov	r0, r6
 800f600:	4639      	mov	r1, r7
 800f602:	f7f0 fe51 	bl	80002a8 <__aeabi_dsub>
 800f606:	a360      	add	r3, pc, #384	@ (adr r3, 800f788 <__ieee754_rem_pio2+0x2f0>)
 800f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60c:	4682      	mov	sl, r0
 800f60e:	468b      	mov	fp, r1
 800f610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f614:	f7f1 f800 	bl	8000618 <__aeabi_dmul>
 800f618:	2d1f      	cmp	r5, #31
 800f61a:	4606      	mov	r6, r0
 800f61c:	460f      	mov	r7, r1
 800f61e:	dc0c      	bgt.n	800f63a <__ieee754_rem_pio2+0x1a2>
 800f620:	4b6a      	ldr	r3, [pc, #424]	@ (800f7cc <__ieee754_rem_pio2+0x334>)
 800f622:	1e6a      	subs	r2, r5, #1
 800f624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f628:	4543      	cmp	r3, r8
 800f62a:	d006      	beq.n	800f63a <__ieee754_rem_pio2+0x1a2>
 800f62c:	4632      	mov	r2, r6
 800f62e:	463b      	mov	r3, r7
 800f630:	4650      	mov	r0, sl
 800f632:	4659      	mov	r1, fp
 800f634:	f7f0 fe38 	bl	80002a8 <__aeabi_dsub>
 800f638:	e00e      	b.n	800f658 <__ieee754_rem_pio2+0x1c0>
 800f63a:	463b      	mov	r3, r7
 800f63c:	4632      	mov	r2, r6
 800f63e:	4650      	mov	r0, sl
 800f640:	4659      	mov	r1, fp
 800f642:	f7f0 fe31 	bl	80002a8 <__aeabi_dsub>
 800f646:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f64a:	9305      	str	r3, [sp, #20]
 800f64c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f650:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f654:	2b10      	cmp	r3, #16
 800f656:	dc02      	bgt.n	800f65e <__ieee754_rem_pio2+0x1c6>
 800f658:	e9c4 0100 	strd	r0, r1, [r4]
 800f65c:	e039      	b.n	800f6d2 <__ieee754_rem_pio2+0x23a>
 800f65e:	a34c      	add	r3, pc, #304	@ (adr r3, 800f790 <__ieee754_rem_pio2+0x2f8>)
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f668:	f7f0 ffd6 	bl	8000618 <__aeabi_dmul>
 800f66c:	4606      	mov	r6, r0
 800f66e:	460f      	mov	r7, r1
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4650      	mov	r0, sl
 800f676:	4659      	mov	r1, fp
 800f678:	f7f0 fe16 	bl	80002a8 <__aeabi_dsub>
 800f67c:	4602      	mov	r2, r0
 800f67e:	460b      	mov	r3, r1
 800f680:	4680      	mov	r8, r0
 800f682:	4689      	mov	r9, r1
 800f684:	4650      	mov	r0, sl
 800f686:	4659      	mov	r1, fp
 800f688:	f7f0 fe0e 	bl	80002a8 <__aeabi_dsub>
 800f68c:	4632      	mov	r2, r6
 800f68e:	463b      	mov	r3, r7
 800f690:	f7f0 fe0a 	bl	80002a8 <__aeabi_dsub>
 800f694:	a340      	add	r3, pc, #256	@ (adr r3, 800f798 <__ieee754_rem_pio2+0x300>)
 800f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69a:	4606      	mov	r6, r0
 800f69c:	460f      	mov	r7, r1
 800f69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a2:	f7f0 ffb9 	bl	8000618 <__aeabi_dmul>
 800f6a6:	4632      	mov	r2, r6
 800f6a8:	463b      	mov	r3, r7
 800f6aa:	f7f0 fdfd 	bl	80002a8 <__aeabi_dsub>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	460f      	mov	r7, r1
 800f6b6:	4640      	mov	r0, r8
 800f6b8:	4649      	mov	r1, r9
 800f6ba:	f7f0 fdf5 	bl	80002a8 <__aeabi_dsub>
 800f6be:	9a05      	ldr	r2, [sp, #20]
 800f6c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6c4:	1ad3      	subs	r3, r2, r3
 800f6c6:	2b31      	cmp	r3, #49	@ 0x31
 800f6c8:	dc20      	bgt.n	800f70c <__ieee754_rem_pio2+0x274>
 800f6ca:	e9c4 0100 	strd	r0, r1, [r4]
 800f6ce:	46c2      	mov	sl, r8
 800f6d0:	46cb      	mov	fp, r9
 800f6d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f6d6:	4650      	mov	r0, sl
 800f6d8:	4642      	mov	r2, r8
 800f6da:	464b      	mov	r3, r9
 800f6dc:	4659      	mov	r1, fp
 800f6de:	f7f0 fde3 	bl	80002a8 <__aeabi_dsub>
 800f6e2:	463b      	mov	r3, r7
 800f6e4:	4632      	mov	r2, r6
 800f6e6:	f7f0 fddf 	bl	80002a8 <__aeabi_dsub>
 800f6ea:	9b04      	ldr	r3, [sp, #16]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f6f2:	f6bf af0e 	bge.w	800f512 <__ieee754_rem_pio2+0x7a>
 800f6f6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f6fa:	6063      	str	r3, [r4, #4]
 800f6fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f700:	f8c4 8000 	str.w	r8, [r4]
 800f704:	60a0      	str	r0, [r4, #8]
 800f706:	60e3      	str	r3, [r4, #12]
 800f708:	426d      	negs	r5, r5
 800f70a:	e702      	b.n	800f512 <__ieee754_rem_pio2+0x7a>
 800f70c:	a326      	add	r3, pc, #152	@ (adr r3, 800f7a8 <__ieee754_rem_pio2+0x310>)
 800f70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f716:	f7f0 ff7f 	bl	8000618 <__aeabi_dmul>
 800f71a:	4606      	mov	r6, r0
 800f71c:	460f      	mov	r7, r1
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	4640      	mov	r0, r8
 800f724:	4649      	mov	r1, r9
 800f726:	f7f0 fdbf 	bl	80002a8 <__aeabi_dsub>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	4682      	mov	sl, r0
 800f730:	468b      	mov	fp, r1
 800f732:	4640      	mov	r0, r8
 800f734:	4649      	mov	r1, r9
 800f736:	f7f0 fdb7 	bl	80002a8 <__aeabi_dsub>
 800f73a:	4632      	mov	r2, r6
 800f73c:	463b      	mov	r3, r7
 800f73e:	f7f0 fdb3 	bl	80002a8 <__aeabi_dsub>
 800f742:	a31b      	add	r3, pc, #108	@ (adr r3, 800f7b0 <__ieee754_rem_pio2+0x318>)
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	4606      	mov	r6, r0
 800f74a:	460f      	mov	r7, r1
 800f74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f750:	f7f0 ff62 	bl	8000618 <__aeabi_dmul>
 800f754:	4632      	mov	r2, r6
 800f756:	463b      	mov	r3, r7
 800f758:	f7f0 fda6 	bl	80002a8 <__aeabi_dsub>
 800f75c:	4606      	mov	r6, r0
 800f75e:	460f      	mov	r7, r1
 800f760:	e764      	b.n	800f62c <__ieee754_rem_pio2+0x194>
 800f762:	4b1b      	ldr	r3, [pc, #108]	@ (800f7d0 <__ieee754_rem_pio2+0x338>)
 800f764:	4598      	cmp	r8, r3
 800f766:	d935      	bls.n	800f7d4 <__ieee754_rem_pio2+0x33c>
 800f768:	4632      	mov	r2, r6
 800f76a:	463b      	mov	r3, r7
 800f76c:	4630      	mov	r0, r6
 800f76e:	4639      	mov	r1, r7
 800f770:	f7f0 fd9a 	bl	80002a8 <__aeabi_dsub>
 800f774:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f778:	e9c4 0100 	strd	r0, r1, [r4]
 800f77c:	e69e      	b.n	800f4bc <__ieee754_rem_pio2+0x24>
 800f77e:	bf00      	nop
 800f780:	54400000 	.word	0x54400000
 800f784:	3ff921fb 	.word	0x3ff921fb
 800f788:	1a626331 	.word	0x1a626331
 800f78c:	3dd0b461 	.word	0x3dd0b461
 800f790:	1a600000 	.word	0x1a600000
 800f794:	3dd0b461 	.word	0x3dd0b461
 800f798:	2e037073 	.word	0x2e037073
 800f79c:	3ba3198a 	.word	0x3ba3198a
 800f7a0:	6dc9c883 	.word	0x6dc9c883
 800f7a4:	3fe45f30 	.word	0x3fe45f30
 800f7a8:	2e000000 	.word	0x2e000000
 800f7ac:	3ba3198a 	.word	0x3ba3198a
 800f7b0:	252049c1 	.word	0x252049c1
 800f7b4:	397b839a 	.word	0x397b839a
 800f7b8:	3fe921fb 	.word	0x3fe921fb
 800f7bc:	4002d97b 	.word	0x4002d97b
 800f7c0:	3ff921fb 	.word	0x3ff921fb
 800f7c4:	413921fb 	.word	0x413921fb
 800f7c8:	3fe00000 	.word	0x3fe00000
 800f7cc:	080106c8 	.word	0x080106c8
 800f7d0:	7fefffff 	.word	0x7fefffff
 800f7d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f7d8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f7dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	460f      	mov	r7, r1
 800f7e4:	f7f1 f9c8 	bl	8000b78 <__aeabi_d2iz>
 800f7e8:	f7f0 feac 	bl	8000544 <__aeabi_i2d>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f7f8:	f7f0 fd56 	bl	80002a8 <__aeabi_dsub>
 800f7fc:	4b22      	ldr	r3, [pc, #136]	@ (800f888 <__ieee754_rem_pio2+0x3f0>)
 800f7fe:	2200      	movs	r2, #0
 800f800:	f7f0 ff0a 	bl	8000618 <__aeabi_dmul>
 800f804:	460f      	mov	r7, r1
 800f806:	4606      	mov	r6, r0
 800f808:	f7f1 f9b6 	bl	8000b78 <__aeabi_d2iz>
 800f80c:	f7f0 fe9a 	bl	8000544 <__aeabi_i2d>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	4630      	mov	r0, r6
 800f816:	4639      	mov	r1, r7
 800f818:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f81c:	f7f0 fd44 	bl	80002a8 <__aeabi_dsub>
 800f820:	4b19      	ldr	r3, [pc, #100]	@ (800f888 <__ieee754_rem_pio2+0x3f0>)
 800f822:	2200      	movs	r2, #0
 800f824:	f7f0 fef8 	bl	8000618 <__aeabi_dmul>
 800f828:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f82c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f830:	f04f 0803 	mov.w	r8, #3
 800f834:	2600      	movs	r6, #0
 800f836:	2700      	movs	r7, #0
 800f838:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f83c:	4632      	mov	r2, r6
 800f83e:	463b      	mov	r3, r7
 800f840:	46c2      	mov	sl, r8
 800f842:	f108 38ff 	add.w	r8, r8, #4294967295
 800f846:	f7f1 f94f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d1f4      	bne.n	800f838 <__ieee754_rem_pio2+0x3a0>
 800f84e:	4b0f      	ldr	r3, [pc, #60]	@ (800f88c <__ieee754_rem_pio2+0x3f4>)
 800f850:	9301      	str	r3, [sp, #4]
 800f852:	2302      	movs	r3, #2
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	462a      	mov	r2, r5
 800f858:	4653      	mov	r3, sl
 800f85a:	4621      	mov	r1, r4
 800f85c:	a806      	add	r0, sp, #24
 800f85e:	f000 f81f 	bl	800f8a0 <__kernel_rem_pio2>
 800f862:	9b04      	ldr	r3, [sp, #16]
 800f864:	2b00      	cmp	r3, #0
 800f866:	4605      	mov	r5, r0
 800f868:	f6bf ae53 	bge.w	800f512 <__ieee754_rem_pio2+0x7a>
 800f86c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f870:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f874:	e9c4 2300 	strd	r2, r3, [r4]
 800f878:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f87c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f880:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f884:	e740      	b.n	800f708 <__ieee754_rem_pio2+0x270>
 800f886:	bf00      	nop
 800f888:	41700000 	.word	0x41700000
 800f88c:	08010748 	.word	0x08010748

0800f890 <fabs>:
 800f890:	ec51 0b10 	vmov	r0, r1, d0
 800f894:	4602      	mov	r2, r0
 800f896:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f89a:	ec43 2b10 	vmov	d0, r2, r3
 800f89e:	4770      	bx	lr

0800f8a0 <__kernel_rem_pio2>:
 800f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a4:	ed2d 8b02 	vpush	{d8}
 800f8a8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f8ac:	f112 0f14 	cmn.w	r2, #20
 800f8b0:	9306      	str	r3, [sp, #24]
 800f8b2:	9104      	str	r1, [sp, #16]
 800f8b4:	4bbe      	ldr	r3, [pc, #760]	@ (800fbb0 <__kernel_rem_pio2+0x310>)
 800f8b6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f8b8:	9008      	str	r0, [sp, #32]
 800f8ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	9b06      	ldr	r3, [sp, #24]
 800f8c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8c6:	bfa8      	it	ge
 800f8c8:	1ed4      	subge	r4, r2, #3
 800f8ca:	9305      	str	r3, [sp, #20]
 800f8cc:	bfb2      	itee	lt
 800f8ce:	2400      	movlt	r4, #0
 800f8d0:	2318      	movge	r3, #24
 800f8d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800f8d6:	f06f 0317 	mvn.w	r3, #23
 800f8da:	fb04 3303 	mla	r3, r4, r3, r3
 800f8de:	eb03 0b02 	add.w	fp, r3, r2
 800f8e2:	9b00      	ldr	r3, [sp, #0]
 800f8e4:	9a05      	ldr	r2, [sp, #20]
 800f8e6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800fba0 <__kernel_rem_pio2+0x300>
 800f8ea:	eb03 0802 	add.w	r8, r3, r2
 800f8ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f8f0:	1aa7      	subs	r7, r4, r2
 800f8f2:	ae20      	add	r6, sp, #128	@ 0x80
 800f8f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f8f8:	2500      	movs	r5, #0
 800f8fa:	4545      	cmp	r5, r8
 800f8fc:	dd13      	ble.n	800f926 <__kernel_rem_pio2+0x86>
 800f8fe:	9b06      	ldr	r3, [sp, #24]
 800f900:	aa20      	add	r2, sp, #128	@ 0x80
 800f902:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f906:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f90a:	f04f 0800 	mov.w	r8, #0
 800f90e:	9b00      	ldr	r3, [sp, #0]
 800f910:	4598      	cmp	r8, r3
 800f912:	dc31      	bgt.n	800f978 <__kernel_rem_pio2+0xd8>
 800f914:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800fba0 <__kernel_rem_pio2+0x300>
 800f918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f91c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f920:	462f      	mov	r7, r5
 800f922:	2600      	movs	r6, #0
 800f924:	e01b      	b.n	800f95e <__kernel_rem_pio2+0xbe>
 800f926:	42ef      	cmn	r7, r5
 800f928:	d407      	bmi.n	800f93a <__kernel_rem_pio2+0x9a>
 800f92a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f92e:	f7f0 fe09 	bl	8000544 <__aeabi_i2d>
 800f932:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f936:	3501      	adds	r5, #1
 800f938:	e7df      	b.n	800f8fa <__kernel_rem_pio2+0x5a>
 800f93a:	ec51 0b18 	vmov	r0, r1, d8
 800f93e:	e7f8      	b.n	800f932 <__kernel_rem_pio2+0x92>
 800f940:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f944:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f948:	f7f0 fe66 	bl	8000618 <__aeabi_dmul>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f954:	f7f0 fcaa 	bl	80002ac <__adddf3>
 800f958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f95c:	3601      	adds	r6, #1
 800f95e:	9b05      	ldr	r3, [sp, #20]
 800f960:	429e      	cmp	r6, r3
 800f962:	f1a7 0708 	sub.w	r7, r7, #8
 800f966:	ddeb      	ble.n	800f940 <__kernel_rem_pio2+0xa0>
 800f968:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f96c:	f108 0801 	add.w	r8, r8, #1
 800f970:	ecaa 7b02 	vstmia	sl!, {d7}
 800f974:	3508      	adds	r5, #8
 800f976:	e7ca      	b.n	800f90e <__kernel_rem_pio2+0x6e>
 800f978:	9b00      	ldr	r3, [sp, #0]
 800f97a:	f8dd 8000 	ldr.w	r8, [sp]
 800f97e:	aa0c      	add	r2, sp, #48	@ 0x30
 800f980:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f984:	930a      	str	r3, [sp, #40]	@ 0x28
 800f986:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f988:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f98e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f992:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f994:	ab98      	add	r3, sp, #608	@ 0x260
 800f996:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f99a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f99e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9a2:	ac0c      	add	r4, sp, #48	@ 0x30
 800f9a4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f9a6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f9aa:	46a1      	mov	r9, r4
 800f9ac:	46c2      	mov	sl, r8
 800f9ae:	f1ba 0f00 	cmp.w	sl, #0
 800f9b2:	f1a5 0508 	sub.w	r5, r5, #8
 800f9b6:	dc77      	bgt.n	800faa8 <__kernel_rem_pio2+0x208>
 800f9b8:	4658      	mov	r0, fp
 800f9ba:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f9be:	f000 fac7 	bl	800ff50 <scalbn>
 800f9c2:	ec57 6b10 	vmov	r6, r7, d0
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	f7f0 fe22 	bl	8000618 <__aeabi_dmul>
 800f9d4:	ec41 0b10 	vmov	d0, r0, r1
 800f9d8:	f000 fb3a 	bl	8010050 <floor>
 800f9dc:	4b75      	ldr	r3, [pc, #468]	@ (800fbb4 <__kernel_rem_pio2+0x314>)
 800f9de:	ec51 0b10 	vmov	r0, r1, d0
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f7f0 fe18 	bl	8000618 <__aeabi_dmul>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	4639      	mov	r1, r7
 800f9f0:	f7f0 fc5a 	bl	80002a8 <__aeabi_dsub>
 800f9f4:	460f      	mov	r7, r1
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	f7f1 f8be 	bl	8000b78 <__aeabi_d2iz>
 800f9fc:	9002      	str	r0, [sp, #8]
 800f9fe:	f7f0 fda1 	bl	8000544 <__aeabi_i2d>
 800fa02:	4602      	mov	r2, r0
 800fa04:	460b      	mov	r3, r1
 800fa06:	4630      	mov	r0, r6
 800fa08:	4639      	mov	r1, r7
 800fa0a:	f7f0 fc4d 	bl	80002a8 <__aeabi_dsub>
 800fa0e:	f1bb 0f00 	cmp.w	fp, #0
 800fa12:	4606      	mov	r6, r0
 800fa14:	460f      	mov	r7, r1
 800fa16:	dd6c      	ble.n	800faf2 <__kernel_rem_pio2+0x252>
 800fa18:	f108 31ff 	add.w	r1, r8, #4294967295
 800fa1c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fa1e:	9d02      	ldr	r5, [sp, #8]
 800fa20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa24:	f1cb 0018 	rsb	r0, fp, #24
 800fa28:	fa43 f200 	asr.w	r2, r3, r0
 800fa2c:	4415      	add	r5, r2
 800fa2e:	4082      	lsls	r2, r0
 800fa30:	1a9b      	subs	r3, r3, r2
 800fa32:	aa0c      	add	r2, sp, #48	@ 0x30
 800fa34:	9502      	str	r5, [sp, #8]
 800fa36:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fa3a:	f1cb 0217 	rsb	r2, fp, #23
 800fa3e:	fa43 f902 	asr.w	r9, r3, r2
 800fa42:	f1b9 0f00 	cmp.w	r9, #0
 800fa46:	dd64      	ble.n	800fb12 <__kernel_rem_pio2+0x272>
 800fa48:	9b02      	ldr	r3, [sp, #8]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	9302      	str	r3, [sp, #8]
 800fa50:	4615      	mov	r5, r2
 800fa52:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800fa56:	4590      	cmp	r8, r2
 800fa58:	f300 80b8 	bgt.w	800fbcc <__kernel_rem_pio2+0x32c>
 800fa5c:	f1bb 0f00 	cmp.w	fp, #0
 800fa60:	dd07      	ble.n	800fa72 <__kernel_rem_pio2+0x1d2>
 800fa62:	f1bb 0f01 	cmp.w	fp, #1
 800fa66:	f000 80bf 	beq.w	800fbe8 <__kernel_rem_pio2+0x348>
 800fa6a:	f1bb 0f02 	cmp.w	fp, #2
 800fa6e:	f000 80c6 	beq.w	800fbfe <__kernel_rem_pio2+0x35e>
 800fa72:	f1b9 0f02 	cmp.w	r9, #2
 800fa76:	d14c      	bne.n	800fb12 <__kernel_rem_pio2+0x272>
 800fa78:	4632      	mov	r2, r6
 800fa7a:	463b      	mov	r3, r7
 800fa7c:	494e      	ldr	r1, [pc, #312]	@ (800fbb8 <__kernel_rem_pio2+0x318>)
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f7f0 fc12 	bl	80002a8 <__aeabi_dsub>
 800fa84:	4606      	mov	r6, r0
 800fa86:	460f      	mov	r7, r1
 800fa88:	2d00      	cmp	r5, #0
 800fa8a:	d042      	beq.n	800fb12 <__kernel_rem_pio2+0x272>
 800fa8c:	4658      	mov	r0, fp
 800fa8e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800fba8 <__kernel_rem_pio2+0x308>
 800fa92:	f000 fa5d 	bl	800ff50 <scalbn>
 800fa96:	4630      	mov	r0, r6
 800fa98:	4639      	mov	r1, r7
 800fa9a:	ec53 2b10 	vmov	r2, r3, d0
 800fa9e:	f7f0 fc03 	bl	80002a8 <__aeabi_dsub>
 800faa2:	4606      	mov	r6, r0
 800faa4:	460f      	mov	r7, r1
 800faa6:	e034      	b.n	800fb12 <__kernel_rem_pio2+0x272>
 800faa8:	4b44      	ldr	r3, [pc, #272]	@ (800fbbc <__kernel_rem_pio2+0x31c>)
 800faaa:	2200      	movs	r2, #0
 800faac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fab0:	f7f0 fdb2 	bl	8000618 <__aeabi_dmul>
 800fab4:	f7f1 f860 	bl	8000b78 <__aeabi_d2iz>
 800fab8:	f7f0 fd44 	bl	8000544 <__aeabi_i2d>
 800fabc:	4b40      	ldr	r3, [pc, #256]	@ (800fbc0 <__kernel_rem_pio2+0x320>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	4606      	mov	r6, r0
 800fac2:	460f      	mov	r7, r1
 800fac4:	f7f0 fda8 	bl	8000618 <__aeabi_dmul>
 800fac8:	4602      	mov	r2, r0
 800faca:	460b      	mov	r3, r1
 800facc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fad0:	f7f0 fbea 	bl	80002a8 <__aeabi_dsub>
 800fad4:	f7f1 f850 	bl	8000b78 <__aeabi_d2iz>
 800fad8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fadc:	f849 0b04 	str.w	r0, [r9], #4
 800fae0:	4639      	mov	r1, r7
 800fae2:	4630      	mov	r0, r6
 800fae4:	f7f0 fbe2 	bl	80002ac <__adddf3>
 800fae8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800faec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faf0:	e75d      	b.n	800f9ae <__kernel_rem_pio2+0x10e>
 800faf2:	d107      	bne.n	800fb04 <__kernel_rem_pio2+0x264>
 800faf4:	f108 33ff 	add.w	r3, r8, #4294967295
 800faf8:	aa0c      	add	r2, sp, #48	@ 0x30
 800fafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fafe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800fb02:	e79e      	b.n	800fa42 <__kernel_rem_pio2+0x1a2>
 800fb04:	4b2f      	ldr	r3, [pc, #188]	@ (800fbc4 <__kernel_rem_pio2+0x324>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	f7f1 f80c 	bl	8000b24 <__aeabi_dcmpge>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d143      	bne.n	800fb98 <__kernel_rem_pio2+0x2f8>
 800fb10:	4681      	mov	r9, r0
 800fb12:	2200      	movs	r2, #0
 800fb14:	2300      	movs	r3, #0
 800fb16:	4630      	mov	r0, r6
 800fb18:	4639      	mov	r1, r7
 800fb1a:	f7f0 ffe5 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	f000 80bf 	beq.w	800fca2 <__kernel_rem_pio2+0x402>
 800fb24:	f108 33ff 	add.w	r3, r8, #4294967295
 800fb28:	2200      	movs	r2, #0
 800fb2a:	9900      	ldr	r1, [sp, #0]
 800fb2c:	428b      	cmp	r3, r1
 800fb2e:	da6e      	bge.n	800fc0e <__kernel_rem_pio2+0x36e>
 800fb30:	2a00      	cmp	r2, #0
 800fb32:	f000 8089 	beq.w	800fc48 <__kernel_rem_pio2+0x3a8>
 800fb36:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb3c:	f1ab 0b18 	sub.w	fp, fp, #24
 800fb40:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d0f6      	beq.n	800fb36 <__kernel_rem_pio2+0x296>
 800fb48:	4658      	mov	r0, fp
 800fb4a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800fba8 <__kernel_rem_pio2+0x308>
 800fb4e:	f000 f9ff 	bl	800ff50 <scalbn>
 800fb52:	f108 0301 	add.w	r3, r8, #1
 800fb56:	00da      	lsls	r2, r3, #3
 800fb58:	9205      	str	r2, [sp, #20]
 800fb5a:	ec55 4b10 	vmov	r4, r5, d0
 800fb5e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800fb60:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800fbbc <__kernel_rem_pio2+0x31c>
 800fb64:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800fb68:	4646      	mov	r6, r8
 800fb6a:	f04f 0a00 	mov.w	sl, #0
 800fb6e:	2e00      	cmp	r6, #0
 800fb70:	f280 80cf 	bge.w	800fd12 <__kernel_rem_pio2+0x472>
 800fb74:	4644      	mov	r4, r8
 800fb76:	2c00      	cmp	r4, #0
 800fb78:	f2c0 80fd 	blt.w	800fd76 <__kernel_rem_pio2+0x4d6>
 800fb7c:	4b12      	ldr	r3, [pc, #72]	@ (800fbc8 <__kernel_rem_pio2+0x328>)
 800fb7e:	461f      	mov	r7, r3
 800fb80:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fb82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb86:	9306      	str	r3, [sp, #24]
 800fb88:	f04f 0a00 	mov.w	sl, #0
 800fb8c:	f04f 0b00 	mov.w	fp, #0
 800fb90:	2600      	movs	r6, #0
 800fb92:	eba8 0504 	sub.w	r5, r8, r4
 800fb96:	e0e2      	b.n	800fd5e <__kernel_rem_pio2+0x4be>
 800fb98:	f04f 0902 	mov.w	r9, #2
 800fb9c:	e754      	b.n	800fa48 <__kernel_rem_pio2+0x1a8>
 800fb9e:	bf00      	nop
	...
 800fbac:	3ff00000 	.word	0x3ff00000
 800fbb0:	08010890 	.word	0x08010890
 800fbb4:	40200000 	.word	0x40200000
 800fbb8:	3ff00000 	.word	0x3ff00000
 800fbbc:	3e700000 	.word	0x3e700000
 800fbc0:	41700000 	.word	0x41700000
 800fbc4:	3fe00000 	.word	0x3fe00000
 800fbc8:	08010850 	.word	0x08010850
 800fbcc:	f854 3b04 	ldr.w	r3, [r4], #4
 800fbd0:	b945      	cbnz	r5, 800fbe4 <__kernel_rem_pio2+0x344>
 800fbd2:	b123      	cbz	r3, 800fbde <__kernel_rem_pio2+0x33e>
 800fbd4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800fbd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbdc:	2301      	movs	r3, #1
 800fbde:	3201      	adds	r2, #1
 800fbe0:	461d      	mov	r5, r3
 800fbe2:	e738      	b.n	800fa56 <__kernel_rem_pio2+0x1b6>
 800fbe4:	1acb      	subs	r3, r1, r3
 800fbe6:	e7f7      	b.n	800fbd8 <__kernel_rem_pio2+0x338>
 800fbe8:	f108 32ff 	add.w	r2, r8, #4294967295
 800fbec:	ab0c      	add	r3, sp, #48	@ 0x30
 800fbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbf2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fbf6:	a90c      	add	r1, sp, #48	@ 0x30
 800fbf8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fbfc:	e739      	b.n	800fa72 <__kernel_rem_pio2+0x1d2>
 800fbfe:	f108 32ff 	add.w	r2, r8, #4294967295
 800fc02:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fc0c:	e7f3      	b.n	800fbf6 <__kernel_rem_pio2+0x356>
 800fc0e:	a90c      	add	r1, sp, #48	@ 0x30
 800fc10:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fc14:	3b01      	subs	r3, #1
 800fc16:	430a      	orrs	r2, r1
 800fc18:	e787      	b.n	800fb2a <__kernel_rem_pio2+0x28a>
 800fc1a:	3401      	adds	r4, #1
 800fc1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc20:	2a00      	cmp	r2, #0
 800fc22:	d0fa      	beq.n	800fc1a <__kernel_rem_pio2+0x37a>
 800fc24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fc2a:	eb0d 0503 	add.w	r5, sp, r3
 800fc2e:	9b06      	ldr	r3, [sp, #24]
 800fc30:	aa20      	add	r2, sp, #128	@ 0x80
 800fc32:	4443      	add	r3, r8
 800fc34:	f108 0701 	add.w	r7, r8, #1
 800fc38:	3d98      	subs	r5, #152	@ 0x98
 800fc3a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800fc3e:	4444      	add	r4, r8
 800fc40:	42bc      	cmp	r4, r7
 800fc42:	da04      	bge.n	800fc4e <__kernel_rem_pio2+0x3ae>
 800fc44:	46a0      	mov	r8, r4
 800fc46:	e6a2      	b.n	800f98e <__kernel_rem_pio2+0xee>
 800fc48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc4a:	2401      	movs	r4, #1
 800fc4c:	e7e6      	b.n	800fc1c <__kernel_rem_pio2+0x37c>
 800fc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc50:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800fc54:	f7f0 fc76 	bl	8000544 <__aeabi_i2d>
 800fc58:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800ff20 <__kernel_rem_pio2+0x680>
 800fc5c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc68:	46b2      	mov	sl, r6
 800fc6a:	f04f 0800 	mov.w	r8, #0
 800fc6e:	9b05      	ldr	r3, [sp, #20]
 800fc70:	4598      	cmp	r8, r3
 800fc72:	dd05      	ble.n	800fc80 <__kernel_rem_pio2+0x3e0>
 800fc74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc78:	3701      	adds	r7, #1
 800fc7a:	eca5 7b02 	vstmia	r5!, {d7}
 800fc7e:	e7df      	b.n	800fc40 <__kernel_rem_pio2+0x3a0>
 800fc80:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800fc84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fc88:	f7f0 fcc6 	bl	8000618 <__aeabi_dmul>
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	460b      	mov	r3, r1
 800fc90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc94:	f7f0 fb0a 	bl	80002ac <__adddf3>
 800fc98:	f108 0801 	add.w	r8, r8, #1
 800fc9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fca0:	e7e5      	b.n	800fc6e <__kernel_rem_pio2+0x3ce>
 800fca2:	f1cb 0000 	rsb	r0, fp, #0
 800fca6:	ec47 6b10 	vmov	d0, r6, r7
 800fcaa:	f000 f951 	bl	800ff50 <scalbn>
 800fcae:	ec55 4b10 	vmov	r4, r5, d0
 800fcb2:	4b9d      	ldr	r3, [pc, #628]	@ (800ff28 <__kernel_rem_pio2+0x688>)
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	4629      	mov	r1, r5
 800fcba:	f7f0 ff33 	bl	8000b24 <__aeabi_dcmpge>
 800fcbe:	b300      	cbz	r0, 800fd02 <__kernel_rem_pio2+0x462>
 800fcc0:	4b9a      	ldr	r3, [pc, #616]	@ (800ff2c <__kernel_rem_pio2+0x68c>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	f7f0 fca6 	bl	8000618 <__aeabi_dmul>
 800fccc:	f7f0 ff54 	bl	8000b78 <__aeabi_d2iz>
 800fcd0:	4606      	mov	r6, r0
 800fcd2:	f7f0 fc37 	bl	8000544 <__aeabi_i2d>
 800fcd6:	4b94      	ldr	r3, [pc, #592]	@ (800ff28 <__kernel_rem_pio2+0x688>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f7f0 fc9d 	bl	8000618 <__aeabi_dmul>
 800fcde:	460b      	mov	r3, r1
 800fce0:	4602      	mov	r2, r0
 800fce2:	4629      	mov	r1, r5
 800fce4:	4620      	mov	r0, r4
 800fce6:	f7f0 fadf 	bl	80002a8 <__aeabi_dsub>
 800fcea:	f7f0 ff45 	bl	8000b78 <__aeabi_d2iz>
 800fcee:	ab0c      	add	r3, sp, #48	@ 0x30
 800fcf0:	f10b 0b18 	add.w	fp, fp, #24
 800fcf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fcf8:	f108 0801 	add.w	r8, r8, #1
 800fcfc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800fd00:	e722      	b.n	800fb48 <__kernel_rem_pio2+0x2a8>
 800fd02:	4620      	mov	r0, r4
 800fd04:	4629      	mov	r1, r5
 800fd06:	f7f0 ff37 	bl	8000b78 <__aeabi_d2iz>
 800fd0a:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fd10:	e71a      	b.n	800fb48 <__kernel_rem_pio2+0x2a8>
 800fd12:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fd18:	f7f0 fc14 	bl	8000544 <__aeabi_i2d>
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	462b      	mov	r3, r5
 800fd20:	f7f0 fc7a 	bl	8000618 <__aeabi_dmul>
 800fd24:	4652      	mov	r2, sl
 800fd26:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800fd2a:	465b      	mov	r3, fp
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	4629      	mov	r1, r5
 800fd30:	f7f0 fc72 	bl	8000618 <__aeabi_dmul>
 800fd34:	3e01      	subs	r6, #1
 800fd36:	4604      	mov	r4, r0
 800fd38:	460d      	mov	r5, r1
 800fd3a:	e718      	b.n	800fb6e <__kernel_rem_pio2+0x2ce>
 800fd3c:	9906      	ldr	r1, [sp, #24]
 800fd3e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fd42:	9106      	str	r1, [sp, #24]
 800fd44:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800fd48:	f7f0 fc66 	bl	8000618 <__aeabi_dmul>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	460b      	mov	r3, r1
 800fd50:	4650      	mov	r0, sl
 800fd52:	4659      	mov	r1, fp
 800fd54:	f7f0 faaa 	bl	80002ac <__adddf3>
 800fd58:	3601      	adds	r6, #1
 800fd5a:	4682      	mov	sl, r0
 800fd5c:	468b      	mov	fp, r1
 800fd5e:	9b00      	ldr	r3, [sp, #0]
 800fd60:	429e      	cmp	r6, r3
 800fd62:	dc01      	bgt.n	800fd68 <__kernel_rem_pio2+0x4c8>
 800fd64:	42b5      	cmp	r5, r6
 800fd66:	dae9      	bge.n	800fd3c <__kernel_rem_pio2+0x49c>
 800fd68:	ab48      	add	r3, sp, #288	@ 0x120
 800fd6a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fd6e:	e9c5 ab00 	strd	sl, fp, [r5]
 800fd72:	3c01      	subs	r4, #1
 800fd74:	e6ff      	b.n	800fb76 <__kernel_rem_pio2+0x2d6>
 800fd76:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fd78:	2b02      	cmp	r3, #2
 800fd7a:	dc0b      	bgt.n	800fd94 <__kernel_rem_pio2+0x4f4>
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	dc39      	bgt.n	800fdf4 <__kernel_rem_pio2+0x554>
 800fd80:	d05d      	beq.n	800fe3e <__kernel_rem_pio2+0x59e>
 800fd82:	9b02      	ldr	r3, [sp, #8]
 800fd84:	f003 0007 	and.w	r0, r3, #7
 800fd88:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800fd8c:	ecbd 8b02 	vpop	{d8}
 800fd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd94:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fd96:	2b03      	cmp	r3, #3
 800fd98:	d1f3      	bne.n	800fd82 <__kernel_rem_pio2+0x4e2>
 800fd9a:	9b05      	ldr	r3, [sp, #20]
 800fd9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fda0:	eb0d 0403 	add.w	r4, sp, r3
 800fda4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800fda8:	4625      	mov	r5, r4
 800fdaa:	46c2      	mov	sl, r8
 800fdac:	f1ba 0f00 	cmp.w	sl, #0
 800fdb0:	f1a5 0508 	sub.w	r5, r5, #8
 800fdb4:	dc6b      	bgt.n	800fe8e <__kernel_rem_pio2+0x5ee>
 800fdb6:	4645      	mov	r5, r8
 800fdb8:	2d01      	cmp	r5, #1
 800fdba:	f1a4 0408 	sub.w	r4, r4, #8
 800fdbe:	f300 8087 	bgt.w	800fed0 <__kernel_rem_pio2+0x630>
 800fdc2:	9c05      	ldr	r4, [sp, #20]
 800fdc4:	ab48      	add	r3, sp, #288	@ 0x120
 800fdc6:	441c      	add	r4, r3
 800fdc8:	2000      	movs	r0, #0
 800fdca:	2100      	movs	r1, #0
 800fdcc:	f1b8 0f01 	cmp.w	r8, #1
 800fdd0:	f300 809c 	bgt.w	800ff0c <__kernel_rem_pio2+0x66c>
 800fdd4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800fdd8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800fddc:	f1b9 0f00 	cmp.w	r9, #0
 800fde0:	f040 80a6 	bne.w	800ff30 <__kernel_rem_pio2+0x690>
 800fde4:	9b04      	ldr	r3, [sp, #16]
 800fde6:	e9c3 7800 	strd	r7, r8, [r3]
 800fdea:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fdee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fdf2:	e7c6      	b.n	800fd82 <__kernel_rem_pio2+0x4e2>
 800fdf4:	9d05      	ldr	r5, [sp, #20]
 800fdf6:	ab48      	add	r3, sp, #288	@ 0x120
 800fdf8:	441d      	add	r5, r3
 800fdfa:	4644      	mov	r4, r8
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	2100      	movs	r1, #0
 800fe00:	2c00      	cmp	r4, #0
 800fe02:	da35      	bge.n	800fe70 <__kernel_rem_pio2+0x5d0>
 800fe04:	f1b9 0f00 	cmp.w	r9, #0
 800fe08:	d038      	beq.n	800fe7c <__kernel_rem_pio2+0x5dc>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe10:	9c04      	ldr	r4, [sp, #16]
 800fe12:	e9c4 2300 	strd	r2, r3, [r4]
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800fe1e:	f7f0 fa43 	bl	80002a8 <__aeabi_dsub>
 800fe22:	ad4a      	add	r5, sp, #296	@ 0x128
 800fe24:	2401      	movs	r4, #1
 800fe26:	45a0      	cmp	r8, r4
 800fe28:	da2b      	bge.n	800fe82 <__kernel_rem_pio2+0x5e2>
 800fe2a:	f1b9 0f00 	cmp.w	r9, #0
 800fe2e:	d002      	beq.n	800fe36 <__kernel_rem_pio2+0x596>
 800fe30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe34:	4619      	mov	r1, r3
 800fe36:	9b04      	ldr	r3, [sp, #16]
 800fe38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fe3c:	e7a1      	b.n	800fd82 <__kernel_rem_pio2+0x4e2>
 800fe3e:	9c05      	ldr	r4, [sp, #20]
 800fe40:	ab48      	add	r3, sp, #288	@ 0x120
 800fe42:	441c      	add	r4, r3
 800fe44:	2000      	movs	r0, #0
 800fe46:	2100      	movs	r1, #0
 800fe48:	f1b8 0f00 	cmp.w	r8, #0
 800fe4c:	da09      	bge.n	800fe62 <__kernel_rem_pio2+0x5c2>
 800fe4e:	f1b9 0f00 	cmp.w	r9, #0
 800fe52:	d002      	beq.n	800fe5a <__kernel_rem_pio2+0x5ba>
 800fe54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe58:	4619      	mov	r1, r3
 800fe5a:	9b04      	ldr	r3, [sp, #16]
 800fe5c:	e9c3 0100 	strd	r0, r1, [r3]
 800fe60:	e78f      	b.n	800fd82 <__kernel_rem_pio2+0x4e2>
 800fe62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fe66:	f7f0 fa21 	bl	80002ac <__adddf3>
 800fe6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe6e:	e7eb      	b.n	800fe48 <__kernel_rem_pio2+0x5a8>
 800fe70:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fe74:	f7f0 fa1a 	bl	80002ac <__adddf3>
 800fe78:	3c01      	subs	r4, #1
 800fe7a:	e7c1      	b.n	800fe00 <__kernel_rem_pio2+0x560>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	460b      	mov	r3, r1
 800fe80:	e7c6      	b.n	800fe10 <__kernel_rem_pio2+0x570>
 800fe82:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fe86:	f7f0 fa11 	bl	80002ac <__adddf3>
 800fe8a:	3401      	adds	r4, #1
 800fe8c:	e7cb      	b.n	800fe26 <__kernel_rem_pio2+0x586>
 800fe8e:	ed95 7b00 	vldr	d7, [r5]
 800fe92:	ed8d 7b00 	vstr	d7, [sp]
 800fe96:	ed95 7b02 	vldr	d7, [r5, #8]
 800fe9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe9e:	ec53 2b17 	vmov	r2, r3, d7
 800fea2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fea6:	f7f0 fa01 	bl	80002ac <__adddf3>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800feb6:	f7f0 f9f7 	bl	80002a8 <__aeabi_dsub>
 800feba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800febe:	f7f0 f9f5 	bl	80002ac <__adddf3>
 800fec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fec6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800feca:	e9c5 6700 	strd	r6, r7, [r5]
 800fece:	e76d      	b.n	800fdac <__kernel_rem_pio2+0x50c>
 800fed0:	ed94 7b00 	vldr	d7, [r4]
 800fed4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800fed8:	ec51 0b17 	vmov	r0, r1, d7
 800fedc:	4652      	mov	r2, sl
 800fede:	465b      	mov	r3, fp
 800fee0:	ed8d 7b00 	vstr	d7, [sp]
 800fee4:	f7f0 f9e2 	bl	80002ac <__adddf3>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	4606      	mov	r6, r0
 800feee:	460f      	mov	r7, r1
 800fef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fef4:	f7f0 f9d8 	bl	80002a8 <__aeabi_dsub>
 800fef8:	4652      	mov	r2, sl
 800fefa:	465b      	mov	r3, fp
 800fefc:	f7f0 f9d6 	bl	80002ac <__adddf3>
 800ff00:	3d01      	subs	r5, #1
 800ff02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff06:	e9c4 6700 	strd	r6, r7, [r4]
 800ff0a:	e755      	b.n	800fdb8 <__kernel_rem_pio2+0x518>
 800ff0c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff10:	f7f0 f9cc 	bl	80002ac <__adddf3>
 800ff14:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff18:	e758      	b.n	800fdcc <__kernel_rem_pio2+0x52c>
 800ff1a:	bf00      	nop
 800ff1c:	f3af 8000 	nop.w
	...
 800ff28:	41700000 	.word	0x41700000
 800ff2c:	3e700000 	.word	0x3e700000
 800ff30:	9b04      	ldr	r3, [sp, #16]
 800ff32:	9a04      	ldr	r2, [sp, #16]
 800ff34:	601f      	str	r7, [r3, #0]
 800ff36:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800ff3a:	605c      	str	r4, [r3, #4]
 800ff3c:	609d      	str	r5, [r3, #8]
 800ff3e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff42:	60d3      	str	r3, [r2, #12]
 800ff44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff48:	6110      	str	r0, [r2, #16]
 800ff4a:	6153      	str	r3, [r2, #20]
 800ff4c:	e719      	b.n	800fd82 <__kernel_rem_pio2+0x4e2>
 800ff4e:	bf00      	nop

0800ff50 <scalbn>:
 800ff50:	b570      	push	{r4, r5, r6, lr}
 800ff52:	ec55 4b10 	vmov	r4, r5, d0
 800ff56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	462b      	mov	r3, r5
 800ff5e:	b991      	cbnz	r1, 800ff86 <scalbn+0x36>
 800ff60:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ff64:	4323      	orrs	r3, r4
 800ff66:	d03d      	beq.n	800ffe4 <scalbn+0x94>
 800ff68:	4b35      	ldr	r3, [pc, #212]	@ (8010040 <scalbn+0xf0>)
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f7f0 fb52 	bl	8000618 <__aeabi_dmul>
 800ff74:	4b33      	ldr	r3, [pc, #204]	@ (8010044 <scalbn+0xf4>)
 800ff76:	429e      	cmp	r6, r3
 800ff78:	4604      	mov	r4, r0
 800ff7a:	460d      	mov	r5, r1
 800ff7c:	da0f      	bge.n	800ff9e <scalbn+0x4e>
 800ff7e:	a328      	add	r3, pc, #160	@ (adr r3, 8010020 <scalbn+0xd0>)
 800ff80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff84:	e01e      	b.n	800ffc4 <scalbn+0x74>
 800ff86:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ff8a:	4291      	cmp	r1, r2
 800ff8c:	d10b      	bne.n	800ffa6 <scalbn+0x56>
 800ff8e:	4622      	mov	r2, r4
 800ff90:	4620      	mov	r0, r4
 800ff92:	4629      	mov	r1, r5
 800ff94:	f7f0 f98a 	bl	80002ac <__adddf3>
 800ff98:	4604      	mov	r4, r0
 800ff9a:	460d      	mov	r5, r1
 800ff9c:	e022      	b.n	800ffe4 <scalbn+0x94>
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ffa4:	3936      	subs	r1, #54	@ 0x36
 800ffa6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ffaa:	4296      	cmp	r6, r2
 800ffac:	dd0d      	ble.n	800ffca <scalbn+0x7a>
 800ffae:	2d00      	cmp	r5, #0
 800ffb0:	a11d      	add	r1, pc, #116	@ (adr r1, 8010028 <scalbn+0xd8>)
 800ffb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffb6:	da02      	bge.n	800ffbe <scalbn+0x6e>
 800ffb8:	a11d      	add	r1, pc, #116	@ (adr r1, 8010030 <scalbn+0xe0>)
 800ffba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffbe:	a31a      	add	r3, pc, #104	@ (adr r3, 8010028 <scalbn+0xd8>)
 800ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc4:	f7f0 fb28 	bl	8000618 <__aeabi_dmul>
 800ffc8:	e7e6      	b.n	800ff98 <scalbn+0x48>
 800ffca:	1872      	adds	r2, r6, r1
 800ffcc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ffd0:	428a      	cmp	r2, r1
 800ffd2:	dcec      	bgt.n	800ffae <scalbn+0x5e>
 800ffd4:	2a00      	cmp	r2, #0
 800ffd6:	dd08      	ble.n	800ffea <scalbn+0x9a>
 800ffd8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ffdc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ffe0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ffe4:	ec45 4b10 	vmov	d0, r4, r5
 800ffe8:	bd70      	pop	{r4, r5, r6, pc}
 800ffea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ffee:	da08      	bge.n	8010002 <scalbn+0xb2>
 800fff0:	2d00      	cmp	r5, #0
 800fff2:	a10b      	add	r1, pc, #44	@ (adr r1, 8010020 <scalbn+0xd0>)
 800fff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fff8:	dac1      	bge.n	800ff7e <scalbn+0x2e>
 800fffa:	a10f      	add	r1, pc, #60	@ (adr r1, 8010038 <scalbn+0xe8>)
 800fffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010000:	e7bd      	b.n	800ff7e <scalbn+0x2e>
 8010002:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010006:	3236      	adds	r2, #54	@ 0x36
 8010008:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801000c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010010:	4620      	mov	r0, r4
 8010012:	4b0d      	ldr	r3, [pc, #52]	@ (8010048 <scalbn+0xf8>)
 8010014:	4629      	mov	r1, r5
 8010016:	2200      	movs	r2, #0
 8010018:	e7d4      	b.n	800ffc4 <scalbn+0x74>
 801001a:	bf00      	nop
 801001c:	f3af 8000 	nop.w
 8010020:	c2f8f359 	.word	0xc2f8f359
 8010024:	01a56e1f 	.word	0x01a56e1f
 8010028:	8800759c 	.word	0x8800759c
 801002c:	7e37e43c 	.word	0x7e37e43c
 8010030:	8800759c 	.word	0x8800759c
 8010034:	fe37e43c 	.word	0xfe37e43c
 8010038:	c2f8f359 	.word	0xc2f8f359
 801003c:	81a56e1f 	.word	0x81a56e1f
 8010040:	43500000 	.word	0x43500000
 8010044:	ffff3cb0 	.word	0xffff3cb0
 8010048:	3c900000 	.word	0x3c900000
 801004c:	00000000 	.word	0x00000000

08010050 <floor>:
 8010050:	ec51 0b10 	vmov	r0, r1, d0
 8010054:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010060:	2e13      	cmp	r6, #19
 8010062:	460c      	mov	r4, r1
 8010064:	4605      	mov	r5, r0
 8010066:	4680      	mov	r8, r0
 8010068:	dc34      	bgt.n	80100d4 <floor+0x84>
 801006a:	2e00      	cmp	r6, #0
 801006c:	da17      	bge.n	801009e <floor+0x4e>
 801006e:	a332      	add	r3, pc, #200	@ (adr r3, 8010138 <floor+0xe8>)
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	f7f0 f91a 	bl	80002ac <__adddf3>
 8010078:	2200      	movs	r2, #0
 801007a:	2300      	movs	r3, #0
 801007c:	f7f0 fd5c 	bl	8000b38 <__aeabi_dcmpgt>
 8010080:	b150      	cbz	r0, 8010098 <floor+0x48>
 8010082:	2c00      	cmp	r4, #0
 8010084:	da55      	bge.n	8010132 <floor+0xe2>
 8010086:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801008a:	432c      	orrs	r4, r5
 801008c:	2500      	movs	r5, #0
 801008e:	42ac      	cmp	r4, r5
 8010090:	4c2b      	ldr	r4, [pc, #172]	@ (8010140 <floor+0xf0>)
 8010092:	bf08      	it	eq
 8010094:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010098:	4621      	mov	r1, r4
 801009a:	4628      	mov	r0, r5
 801009c:	e023      	b.n	80100e6 <floor+0x96>
 801009e:	4f29      	ldr	r7, [pc, #164]	@ (8010144 <floor+0xf4>)
 80100a0:	4137      	asrs	r7, r6
 80100a2:	ea01 0307 	and.w	r3, r1, r7
 80100a6:	4303      	orrs	r3, r0
 80100a8:	d01d      	beq.n	80100e6 <floor+0x96>
 80100aa:	a323      	add	r3, pc, #140	@ (adr r3, 8010138 <floor+0xe8>)
 80100ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b0:	f7f0 f8fc 	bl	80002ac <__adddf3>
 80100b4:	2200      	movs	r2, #0
 80100b6:	2300      	movs	r3, #0
 80100b8:	f7f0 fd3e 	bl	8000b38 <__aeabi_dcmpgt>
 80100bc:	2800      	cmp	r0, #0
 80100be:	d0eb      	beq.n	8010098 <floor+0x48>
 80100c0:	2c00      	cmp	r4, #0
 80100c2:	bfbe      	ittt	lt
 80100c4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80100c8:	4133      	asrlt	r3, r6
 80100ca:	18e4      	addlt	r4, r4, r3
 80100cc:	ea24 0407 	bic.w	r4, r4, r7
 80100d0:	2500      	movs	r5, #0
 80100d2:	e7e1      	b.n	8010098 <floor+0x48>
 80100d4:	2e33      	cmp	r6, #51	@ 0x33
 80100d6:	dd0a      	ble.n	80100ee <floor+0x9e>
 80100d8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80100dc:	d103      	bne.n	80100e6 <floor+0x96>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	f7f0 f8e3 	bl	80002ac <__adddf3>
 80100e6:	ec41 0b10 	vmov	d0, r0, r1
 80100ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80100f2:	f04f 37ff 	mov.w	r7, #4294967295
 80100f6:	40df      	lsrs	r7, r3
 80100f8:	4207      	tst	r7, r0
 80100fa:	d0f4      	beq.n	80100e6 <floor+0x96>
 80100fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8010138 <floor+0xe8>)
 80100fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010102:	f7f0 f8d3 	bl	80002ac <__adddf3>
 8010106:	2200      	movs	r2, #0
 8010108:	2300      	movs	r3, #0
 801010a:	f7f0 fd15 	bl	8000b38 <__aeabi_dcmpgt>
 801010e:	2800      	cmp	r0, #0
 8010110:	d0c2      	beq.n	8010098 <floor+0x48>
 8010112:	2c00      	cmp	r4, #0
 8010114:	da0a      	bge.n	801012c <floor+0xdc>
 8010116:	2e14      	cmp	r6, #20
 8010118:	d101      	bne.n	801011e <floor+0xce>
 801011a:	3401      	adds	r4, #1
 801011c:	e006      	b.n	801012c <floor+0xdc>
 801011e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010122:	2301      	movs	r3, #1
 8010124:	40b3      	lsls	r3, r6
 8010126:	441d      	add	r5, r3
 8010128:	4545      	cmp	r5, r8
 801012a:	d3f6      	bcc.n	801011a <floor+0xca>
 801012c:	ea25 0507 	bic.w	r5, r5, r7
 8010130:	e7b2      	b.n	8010098 <floor+0x48>
 8010132:	2500      	movs	r5, #0
 8010134:	462c      	mov	r4, r5
 8010136:	e7af      	b.n	8010098 <floor+0x48>
 8010138:	8800759c 	.word	0x8800759c
 801013c:	7e37e43c 	.word	0x7e37e43c
 8010140:	bff00000 	.word	0xbff00000
 8010144:	000fffff 	.word	0x000fffff

08010148 <_init>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	bf00      	nop
 801014c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014e:	bc08      	pop	{r3}
 8010150:	469e      	mov	lr, r3
 8010152:	4770      	bx	lr

08010154 <_fini>:
 8010154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010156:	bf00      	nop
 8010158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801015a:	bc08      	pop	{r3}
 801015c:	469e      	mov	lr, r3
 801015e:	4770      	bx	lr
