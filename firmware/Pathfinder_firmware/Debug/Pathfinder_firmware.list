
Pathfinder_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005b64  08005b64  00006b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb0  08005cb0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cb0  08005cb0  00006cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb8  08005cb8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cbc  08005cbc  00006cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005cc0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000060  08005d1c  00007060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005d1c  000073b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dcf  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231f  00000000  00000000  00017e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2e  00000000  00000000  0001b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a63  00000000  00000000  0001bd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012369  00000000  00000000  00042799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f226c  00000000  00000000  00054b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146d6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  00146db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014b14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b4c 	.word	0x08005b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08005b4c 	.word	0x08005b4c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96a 	b.w	80004c8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	460c      	mov	r4, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14e      	bne.n	80002b6 <__udivmoddi4+0xaa>
 8000218:	4694      	mov	ip, r2
 800021a:	458c      	cmp	ip, r1
 800021c:	4686      	mov	lr, r0
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	d962      	bls.n	80002ea <__udivmoddi4+0xde>
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0320 	rsb	r3, r2, #32
 800022a:	4091      	lsls	r1, r2
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	4319      	orrs	r1, r3
 8000236:	fa00 fe02 	lsl.w	lr, r0, r2
 800023a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023e:	fa1f f68c 	uxth.w	r6, ip
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024a:	fb07 1114 	mls	r1, r7, r4, r1
 800024e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000252:	fb04 f106 	mul.w	r1, r4, r6
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000262:	f080 8112 	bcs.w	800048a <__udivmoddi4+0x27e>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 810f 	bls.w	800048a <__udivmoddi4+0x27e>
 800026c:	3c02      	subs	r4, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a59      	subs	r1, r3, r1
 8000272:	fa1f f38e 	uxth.w	r3, lr
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000282:	fb00 f606 	mul.w	r6, r0, r6
 8000286:	429e      	cmp	r6, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x94>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000292:	f080 80fc 	bcs.w	800048e <__udivmoddi4+0x282>
 8000296:	429e      	cmp	r6, r3
 8000298:	f240 80f9 	bls.w	800048e <__udivmoddi4+0x282>
 800029c:	4463      	add	r3, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	1b9b      	subs	r3, r3, r6
 80002a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa6>
 80002aa:	40d3      	lsrs	r3, r2
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xba>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb4>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x150>
 80002ce:	42a3      	cmp	r3, r4
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xcc>
 80002d2:	4290      	cmp	r0, r2
 80002d4:	f0c0 80f0 	bcc.w	80004b8 <__udivmoddi4+0x2ac>
 80002d8:	1a86      	subs	r6, r0, r2
 80002da:	eb64 0303 	sbc.w	r3, r4, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d0e6      	beq.n	80002b2 <__udivmoddi4+0xa6>
 80002e4:	e9c5 6300 	strd	r6, r3, [r5]
 80002e8:	e7e3      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x204>
 80002f0:	eba1 040c 	sub.w	r4, r1, ip
 80002f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f8:	fa1f f78c 	uxth.w	r7, ip
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030e:	fb07 f006 	mul.w	r0, r7, r6
 8000312:	4298      	cmp	r0, r3
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x11c>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 34ff 	add.w	r4, r6, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x11a>
 8000320:	4298      	cmp	r0, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 8000326:	4626      	mov	r6, r4
 8000328:	1a1c      	subs	r4, r3, r0
 800032a:	fa1f f38e 	uxth.w	r3, lr
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb00 f707 	mul.w	r7, r0, r7
 800033e:	429f      	cmp	r7, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x148>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f100 34ff 	add.w	r4, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x146>
 800034c:	429f      	cmp	r7, r3
 800034e:	f200 80b0 	bhi.w	80004b2 <__udivmoddi4+0x2a6>
 8000352:	4620      	mov	r0, r4
 8000354:	1bdb      	subs	r3, r3, r7
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x9c>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa20 fc06 	lsr.w	ip, r0, r6
 800036c:	fa04 f301 	lsl.w	r3, r4, r1
 8000370:	ea43 030c 	orr.w	r3, r3, ip
 8000374:	40f4      	lsrs	r4, r6
 8000376:	fa00 f801 	lsl.w	r8, r0, r1
 800037a:	0c38      	lsrs	r0, r7, #16
 800037c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000380:	fbb4 fef0 	udiv	lr, r4, r0
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	fb00 441e 	mls	r4, r0, lr, r4
 800038c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000390:	fb0e f90c 	mul.w	r9, lr, ip
 8000394:	45a1      	cmp	r9, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x1a6>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a2:	f080 8084 	bcs.w	80004ae <__udivmoddi4+0x2a2>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f240 8081 	bls.w	80004ae <__udivmoddi4+0x2a2>
 80003ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b0:	443c      	add	r4, r7
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	fa1f f983 	uxth.w	r9, r3
 80003ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80003be:	fb00 4413 	mls	r4, r0, r3, r4
 80003c2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1d2>
 80003ce:	193c      	adds	r4, r7, r4
 80003d0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d4:	d267      	bcs.n	80004a6 <__udivmoddi4+0x29a>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d965      	bls.n	80004a6 <__udivmoddi4+0x29a>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e2:	fba0 9302 	umull	r9, r3, r0, r2
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	429c      	cmp	r4, r3
 80003ec:	46ce      	mov	lr, r9
 80003ee:	469c      	mov	ip, r3
 80003f0:	d351      	bcc.n	8000496 <__udivmoddi4+0x28a>
 80003f2:	d04e      	beq.n	8000492 <__udivmoddi4+0x286>
 80003f4:	b155      	cbz	r5, 800040c <__udivmoddi4+0x200>
 80003f6:	ebb8 030e 	subs.w	r3, r8, lr
 80003fa:	eb64 040c 	sbc.w	r4, r4, ip
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	40cb      	lsrs	r3, r1
 8000404:	431e      	orrs	r6, r3
 8000406:	40cc      	lsrs	r4, r1
 8000408:	e9c5 6400 	strd	r6, r4, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	e750      	b.n	80002b2 <__udivmoddi4+0xa6>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa24 f303 	lsr.w	r3, r4, r3
 8000420:	4094      	lsls	r4, r2
 8000422:	430c      	orrs	r4, r1
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa00 fe02 	lsl.w	lr, r0, r2
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3110 	mls	r1, r8, r0, r3
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x24c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29e>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29e>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000460:	fb08 3311 	mls	r3, r8, r1, r3
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x276>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x296>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x296>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e739      	b.n	80002fe <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f0      	b.n	8000270 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e706      	b.n	80002a0 <__udivmoddi4+0x94>
 8000492:	45c8      	cmp	r8, r9
 8000494:	d2ae      	bcs.n	80003f4 <__udivmoddi4+0x1e8>
 8000496:	ebb9 0e02 	subs.w	lr, r9, r2
 800049a:	eb63 0c07 	sbc.w	ip, r3, r7
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a8      	b.n	80003f4 <__udivmoddi4+0x1e8>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x276>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e799      	b.n	80003de <__udivmoddi4+0x1d2>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x24c>
 80004ae:	46d6      	mov	lr, sl
 80004b0:	e77f      	b.n	80003b2 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74d      	b.n	8000354 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e70f      	b.n	80002e0 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e730      	b.n	8000328 <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <setMovmentSpeed>:
	SET_MOVMENT_SPEED,
	GET_SENSOR_VALUES = 7,
	SET_LED_BRIGHTNESS

};
void setMovmentSpeed(int motorA,int motorB) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	uint8_t motorAOutput = motorA;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	73fb      	strb	r3, [r7, #15]
	uint8_t motorBOutput = motorB;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	73bb      	strb	r3, [r7, #14]
	if(motorA<=100)HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b64      	cmp	r3, #100	@ 0x64
 80004e2:	dc05      	bgt.n	80004f0 <setMovmentSpeed+0x24>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2120      	movs	r1, #32
 80004e8:	481e      	ldr	r0, [pc, #120]	@ (8000564 <setMovmentSpeed+0x98>)
 80004ea:	f001 fa63 	bl	80019b4 <HAL_GPIO_WritePin>
 80004ee:	e007      	b.n	8000500 <setMovmentSpeed+0x34>
	else
	{
		HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	481b      	ldr	r0, [pc, #108]	@ (8000564 <setMovmentSpeed+0x98>)
 80004f6:	f001 fa5d 	bl	80019b4 <HAL_GPIO_WritePin>
		motorAOutput = motorAOutput - 100;
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	3b64      	subs	r3, #100	@ 0x64
 80004fe:	73fb      	strb	r3, [r7, #15]
	}

	if(motorB<=100)HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	2b64      	cmp	r3, #100	@ 0x64
 8000504:	dc07      	bgt.n	8000516 <setMovmentSpeed+0x4a>
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800050c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000510:	f001 fa50 	bl	80019b4 <HAL_GPIO_WritePin>
 8000514:	e009      	b.n	800052a <setMovmentSpeed+0x5e>
	else
	{
		HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000520:	f001 fa48 	bl	80019b4 <HAL_GPIO_WritePin>
		motorBOutput = motorBOutput - 100;
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	3b64      	subs	r3, #100	@ 0x64
 8000528:	73bb      	strb	r3, [r7, #14]
	}

	if(motorA!=0){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d004      	beq.n	800053a <setMovmentSpeed+0x6e>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,motorAOutput);
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <setMovmentSpeed+0x9c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	7bfa      	ldrb	r2, [r7, #15]
 8000536:	635a      	str	r2, [r3, #52]	@ 0x34
 8000538:	e003      	b.n	8000542 <setMovmentSpeed+0x76>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <setMovmentSpeed+0x9c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2200      	movs	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(motorB!=0){
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d004      	beq.n	8000552 <setMovmentSpeed+0x86>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,motorBOutput);
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <setMovmentSpeed+0xa0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	7bba      	ldrb	r2, [r7, #14]
 800054e:	63da      	str	r2, [r3, #60]	@ 0x3c
	}




}
 8000550:	e003      	b.n	800055a <setMovmentSpeed+0x8e>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <setMovmentSpeed+0xa0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2200      	movs	r2, #0
 8000558:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	48000400 	.word	0x48000400
 8000568:	200000c8 	.word	0x200000c8
 800056c:	2000007c 	.word	0x2000007c

08000570 <emergencyStop>:
void emergencyStop() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2120      	movs	r1, #32
 8000578:	4809      	ldr	r0, [pc, #36]	@ (80005a0 <emergencyStop+0x30>)
 800057a:	f001 fa1b 	bl	80019b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 fa14 	bl	80019b4 <HAL_GPIO_WritePin>


	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <emergencyStop+0x34>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2200      	movs	r2, #0
 8000592:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000594:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <emergencyStop+0x38>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	48000400 	.word	0x48000400
 80005a4:	2000007c 	.word	0x2000007c
 80005a8:	200000c8 	.word	0x200000c8

080005ac <moveForward>:

void moveForward() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	4809      	ldr	r0, [pc, #36]	@ (80005dc <moveForward+0x30>)
 80005b6:	f001 f9fd 	bl	80019b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f001 f9f6 	bl	80019b4 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <moveForward+0x34>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2264      	movs	r2, #100	@ 0x64
 80005ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <moveForward+0x38>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2264      	movs	r2, #100	@ 0x64
 80005d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	48000400 	.word	0x48000400
 80005e0:	2000007c 	.word	0x2000007c
 80005e4:	200000c8 	.word	0x200000c8

080005e8 <moveReverse>:

void moveReverse() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	4809      	ldr	r0, [pc, #36]	@ (8000618 <moveReverse+0x30>)
 80005f2:	f001 f9df 	bl	80019b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f001 f9d8 	bl	80019b4 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <moveReverse+0x34>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2264      	movs	r2, #100	@ 0x64
 800060a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <moveReverse+0x38>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2264      	movs	r2, #100	@ 0x64
 8000612:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	48000400 	.word	0x48000400
 800061c:	2000007c 	.word	0x2000007c
 8000620:	200000c8 	.word	0x200000c8

08000624 <turnRight>:

void turnRight() {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2120      	movs	r1, #32
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <turnRight+0x30>)
 800062e:	f001 f9c1 	bl	80019b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063c:	f001 f9ba 	bl	80019b4 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <turnRight+0x34>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2264      	movs	r2, #100	@ 0x64
 8000646:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <turnRight+0x38>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2264      	movs	r2, #100	@ 0x64
 800064e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	48000400 	.word	0x48000400
 8000658:	2000007c 	.word	0x2000007c
 800065c:	200000c8 	.word	0x200000c8

08000660 <turnLeft>:
void turnLeft() {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2120      	movs	r1, #32
 8000668:	4809      	ldr	r0, [pc, #36]	@ (8000690 <turnLeft+0x30>)
 800066a:	f001 f9a3 	bl	80019b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000678:	f001 f99c 	bl	80019b4 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <turnLeft+0x34>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2264      	movs	r2, #100	@ 0x64
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <turnLeft+0x38>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2264      	movs	r2, #100	@ 0x64
 800068a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	48000400 	.word	0x48000400
 8000694:	2000007c 	.word	0x2000007c
 8000698:	200000c8 	.word	0x200000c8

0800069c <getSensorValues>:
void getSensorValues(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	sensorsValues[0] = HAL_GPIO_ReadPin(SENSOR_A0_GPIO_Port, SENSOR_A0_Pin) + '0';
 80006a0:	2101      	movs	r1, #1
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 f96d 	bl	8001984 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	3330      	adds	r3, #48	@ 0x30
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <getSensorValues+0x74>)
 80006b2:	701a      	strb	r2, [r3, #0]
	sensorsValues[1] = HAL_GPIO_ReadPin(SENSOR_A1_GPIO_Port, SENSOR_A1_Pin) + '0';
 80006b4:	2102      	movs	r1, #2
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 f963 	bl	8001984 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	3330      	adds	r3, #48	@ 0x30
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <getSensorValues+0x74>)
 80006c6:	705a      	strb	r2, [r3, #1]
	sensorsValues[2] = HAL_GPIO_ReadPin(SENSOR_A2_GPIO_Port, SENSOR_A2_Pin) + '0';
 80006c8:	2110      	movs	r1, #16
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f001 f959 	bl	8001984 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	3330      	adds	r3, #48	@ 0x30
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <getSensorValues+0x74>)
 80006da:	709a      	strb	r2, [r3, #2]
	sensorsValues[3] = HAL_GPIO_ReadPin(SENSOR_A3_GPIO_Port, SENSOR_A3_Pin) + '0';
 80006dc:	2101      	movs	r1, #1
 80006de:	480d      	ldr	r0, [pc, #52]	@ (8000714 <getSensorValues+0x78>)
 80006e0:	f001 f950 	bl	8001984 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	3330      	adds	r3, #48	@ 0x30
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <getSensorValues+0x74>)
 80006ec:	70da      	strb	r2, [r3, #3]
	sensorsValues[4] = HAL_GPIO_ReadPin(SENSOR_A4_GPIO_Port, SENSOR_A4_Pin) + '0';
 80006ee:	2102      	movs	r1, #2
 80006f0:	4809      	ldr	r0, [pc, #36]	@ (8000718 <getSensorValues+0x7c>)
 80006f2:	f001 f947 	bl	8001984 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	3330      	adds	r3, #48	@ 0x30
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <getSensorValues+0x74>)
 80006fe:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit_IT(&huart2, sensorsValues , 5);
 8000700:	2205      	movs	r2, #5
 8000702:	4903      	ldr	r1, [pc, #12]	@ (8000710 <getSensorValues+0x74>)
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <getSensorValues+0x80>)
 8000706:	f003 fd3b 	bl	8004180 <HAL_UART_Transmit_IT>

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000270 	.word	0x20000270
 8000714:	48000400 	.word	0x48000400
 8000718:	48000800 	.word	0x48000800
 800071c:	20000160 	.word	0x20000160

08000720 <setLedBrightness>:
void setLedBrightness(int brightness) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,brightness);
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <setLedBrightness+0x1c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	20000114 	.word	0x20000114

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fd68 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f828 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 fa0a 	bl	8000b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000750:	f000 f9d8 	bl	8000b04 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000754:	f000 f874 	bl	8000840 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000758:	f000 f8e8 	bl	800092c <MX_TIM3_Init>
  MX_TIM4_Init();
 800075c:	f000 f95c 	bl	8000a18 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	4909      	ldr	r1, [pc, #36]	@ (8000788 <main+0x48>)
 8000764:	4809      	ldr	r0, [pc, #36]	@ (800078c <main+0x4c>)
 8000766:	f003 fd69 	bl	800423c <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800076a:	2108      	movs	r1, #8
 800076c:	4808      	ldr	r0, [pc, #32]	@ (8000790 <main+0x50>)
 800076e:	f002 fd11 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000772:	2100      	movs	r1, #0
 8000774:	4807      	ldr	r0, [pc, #28]	@ (8000794 <main+0x54>)
 8000776:	f002 fd0d 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800077a:	2100      	movs	r1, #0
 800077c:	4806      	ldr	r0, [pc, #24]	@ (8000798 <main+0x58>)
 800077e:	f002 fd09 	bl	8003194 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000782:	bf00      	nop
 8000784:	e7fd      	b.n	8000782 <main+0x42>
 8000786:	bf00      	nop
 8000788:	200001e8 	.word	0x200001e8
 800078c:	20000160 	.word	0x20000160
 8000790:	2000007c 	.word	0x2000007c
 8000794:	200000c8 	.word	0x200000c8
 8000798:	20000114 	.word	0x20000114

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b096      	sub	sp, #88	@ 0x58
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2244      	movs	r2, #68	@ 0x44
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 f99c 	bl	8005ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007c2:	f001 f91d 	bl	8001a00 <HAL_PWREx_ControlVoltageScaling>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007cc:	f000 fb5c 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2310      	movs	r3, #16
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e2:	2302      	movs	r3, #2
 80007e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007ea:	230a      	movs	r3, #10
 80007ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ee:	2307      	movs	r3, #7
 80007f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f954 	bl	8001aac <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800080a:	f000 fb3d 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	2104      	movs	r1, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fd1c 	bl	8002264 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000832:	f000 fb29 	bl	8000e88 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3758      	adds	r7, #88	@ 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000874:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000878:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 800087a:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800087c:	2227      	movs	r2, #39	@ 0x27
 800087e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000886:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000888:	2263      	movs	r2, #99	@ 0x63
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800089a:	f002 fbc3 	bl	8003024 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008a4:	f000 faf0 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b2:	4619      	mov	r1, r3
 80008b4:	481c      	ldr	r0, [pc, #112]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008b6:	f002 fe87 	bl	80035c8 <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008c0:	f000 fae2 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008c4:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008c6:	f002 fc04 	bl	80030d2 <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008d0:	f000 fada 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008e4:	f003 fb76 	bl	8003fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008ee:	f000 facb 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	@ 0x60
 80008f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2208      	movs	r2, #8
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800090a:	f002 fd49 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000914:	f000 fab8 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800091a:	f000 fb25 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3738      	adds	r7, #56	@ 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000007c 	.word	0x2000007c

0800092c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000960:	4a2c      	ldr	r2, [pc, #176]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000966:	2227      	movs	r2, #39	@ 0x27
 8000968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000970:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000972:	2263      	movs	r2, #99	@ 0x63
 8000974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000982:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000984:	f002 fb4e 	bl	8003024 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800098e:	f000 fa7b 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099c:	4619      	mov	r1, r3
 800099e:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 80009a0:	f002 fe12 	bl	80035c8 <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009aa:	f000 fa6d 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ae:	4818      	ldr	r0, [pc, #96]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 80009b0:	f002 fb8f 	bl	80030d2 <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009ba:	f000 fa65 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4810      	ldr	r0, [pc, #64]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 80009ce:	f003 fb01 	bl	8003fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009d8:	f000 fa56 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2360      	movs	r3, #96	@ 0x60
 80009de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 80009f4:	f002 fcd4 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009fe:	f000 fa43 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a02:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000a04:	f000 fab0 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000a08:	bf00      	nop
 8000a0a:	3738      	adds	r7, #56	@ 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000c8 	.word	0x200000c8
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	@ 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000b00 <MX_TIM4_Init+0xe8>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a52:	2227      	movs	r2, #39	@ 0x27
 8000a54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a5e:	2263      	movs	r2, #99	@ 0x63
 8000a60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a6e:	4823      	ldr	r0, [pc, #140]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a70:	f002 fad8 	bl	8003024 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a7a:	f000 fa05 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481c      	ldr	r0, [pc, #112]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a8c:	f002 fd9c 	bl	80035c8 <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a96:	f000 f9f7 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a9c:	f002 fb19 	bl	80030d2 <HAL_TIM_PWM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000aa6:	f000 f9ef 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000aba:	f003 fa8b 	bl	8003fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ac4:	f000 f9e0 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac8:	2360      	movs	r3, #96	@ 0x60
 8000aca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000ae0:	f002 fc5e 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000aea:	f000 f9cd 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aee:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000af0:	f000 fa3a 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000af4:	bf00      	nop
 8000af6:	3738      	adds	r7, #56	@ 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000114 	.word	0x20000114
 8000b00:	40000800 	.word	0x40000800

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <MX_USART2_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b48:	f003 facc 	bl	80040e4 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 f999 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000160 	.word	0x20000160
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a47      	ldr	r2, [pc, #284]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b45      	ldr	r3, [pc, #276]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b42      	ldr	r3, [pc, #264]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a41      	ldr	r2, [pc, #260]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b3c      	ldr	r3, [pc, #240]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	4a3b      	ldr	r2, [pc, #236]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb6:	4b39      	ldr	r3, [pc, #228]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a35      	ldr	r2, [pc, #212]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b33      	ldr	r3, [pc, #204]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_B_DIRECTION_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be4:	f000 fee6 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port, MOTOR_A_DIRECTION_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	482c      	ldr	r0, [pc, #176]	@ (8000ca0 <MX_GPIO_Init+0x13c>)
 8000bee:	f000 fee1 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4826      	ldr	r0, [pc, #152]	@ (8000ca4 <MX_GPIO_Init+0x140>)
 8000c0a:	f000 fd11 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_A4_Pin */
  GPIO_InitStruct.Pin = SENSOR_A4_Pin;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_A4_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4820      	ldr	r0, [pc, #128]	@ (8000ca4 <MX_GPIO_Init+0x140>)
 8000c22:	f000 fd05 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_A0_Pin SENSOR_A1_Pin SENSOR_A2_Pin */
  GPIO_InitStruct.Pin = SENSOR_A0_Pin|SENSOR_A1_Pin|SENSOR_A2_Pin;
 8000c26:	2313      	movs	r3, #19
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f000 fcf8 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_B_DIRECTION_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_B_DIRECTION_Pin;
 8000c40:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5c:	f000 fce8 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_A3_Pin */
  GPIO_InitStruct.Pin = SENSOR_A3_Pin;
 8000c60:	2301      	movs	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_A3_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <MX_GPIO_Init+0x13c>)
 8000c74:	f000 fcdc 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_A_DIRECTION_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIRECTION_Pin;
 8000c78:	2320      	movs	r3, #32
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_A_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_GPIO_Init+0x13c>)
 8000c90:	f000 fcce 	bl	8001630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800

08000ca8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ca8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a6d      	ldr	r2, [pc, #436]	@ (8000e6c <HAL_UART_RxCpltCallback+0x1c4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	f040 80d1 	bne.w	8000e60 <HAL_UART_RxCpltCallback+0x1b8>
		if(receivedSign == '\n'){
 8000cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8000e70 <HAL_UART_RxCpltCallback+0x1c8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b0a      	cmp	r3, #10
 8000cc4:	f040 809d 	bne.w	8000e02 <HAL_UART_RxCpltCallback+0x15a>
			frameReceived[frameCursor] = atoi(messageReceived);
 8000cc8:	486a      	ldr	r0, [pc, #424]	@ (8000e74 <HAL_UART_RxCpltCallback+0x1cc>)
 8000cca:	f004 fe85 	bl	80059d8 <atoi>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a69      	ldr	r2, [pc, #420]	@ (8000e78 <HAL_UART_RxCpltCallback+0x1d0>)
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	17da      	asrs	r2, r3, #31
 8000cd8:	4698      	mov	r8, r3
 8000cda:	4691      	mov	r9, r2
 8000cdc:	4a67      	ldr	r2, [pc, #412]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000cde:	00cb      	lsls	r3, r1, #3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	e9c3 8900 	strd	r8, r9, [r3]
			if(strcmp(frameReceived[0], EMERGENCY_STOP ) == 0) emergencyStop();
 8000ce6:	4b65      	ldr	r3, [pc, #404]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	4613      	mov	r3, r2
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fa69 	bl	80001c8 <strcmp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <HAL_UART_RxCpltCallback+0x5a>
 8000cfc:	f7ff fc38 	bl	8000570 <emergencyStop>
 8000d00:	e06e      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_FORWARD) == 0)moveForward();
 8000d02:	4b5e      	ldr	r3, [pc, #376]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fa5b 	bl	80001c8 <strcmp>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <HAL_UART_RxCpltCallback+0x76>
 8000d18:	f7ff fc48 	bl	80005ac <moveForward>
 8000d1c:	e060      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_REVERSE) == 0)moveReverse();
 8000d1e:	4b57      	ldr	r3, [pc, #348]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	4613      	mov	r3, r2
 8000d26:	2102      	movs	r1, #2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa4d 	bl	80001c8 <strcmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <HAL_UART_RxCpltCallback+0x92>
 8000d34:	f7ff fc58 	bl	80005e8 <moveReverse>
 8000d38:	e052      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_LEFT) == 0)turnLeft();
 8000d3a:	4b50      	ldr	r3, [pc, #320]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d40:	4613      	mov	r3, r2
 8000d42:	2103      	movs	r1, #3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fa3f 	bl	80001c8 <strcmp>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <HAL_UART_RxCpltCallback+0xae>
 8000d50:	f7ff fc86 	bl	8000660 <turnLeft>
 8000d54:	e044      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_RIGHT) == 0)turnRight();
 8000d56:	4b49      	ldr	r3, [pc, #292]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	2104      	movs	r1, #4
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa31 	bl	80001c8 <strcmp>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <HAL_UART_RxCpltCallback+0xca>
 8000d6c:	f7ff fc5a 	bl	8000624 <turnRight>
 8000d70:	e036      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_MOVMENT_SPEED) == 0)setMovmentSpeed(frameReceived[1], frameReceived[2]);
 8000d72:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa23 	bl	80001c8 <strcmp>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <HAL_UART_RxCpltCallback+0xf8>
 8000d88:	4b3c      	ldr	r3, [pc, #240]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000d8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000d92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000d96:	4613      	mov	r3, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f7ff fb97 	bl	80004cc <setMovmentSpeed>
 8000d9e:	e01f      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], GET_SENSOR_VALUES) == 0)getSensorValues();
 8000da0:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	4613      	mov	r3, r2
 8000da8:	2107      	movs	r1, #7
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fa0c 	bl	80001c8 <strcmp>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <HAL_UART_RxCpltCallback+0x114>
 8000db6:	f7ff fc71 	bl	800069c <getSensorValues>
 8000dba:	e011      	b.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_LED_BRIGHTNESS) == 0)setLedBrightness(frameReceived[1]);
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff f9fe 	bl	80001c8 <strcmp>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <HAL_UART_RxCpltCallback+0x138>
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000dd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fca0 	bl	8000720 <setLedBrightness>
			memset(messageReceived, 0, 50);
 8000de0:	2232      	movs	r2, #50	@ 0x32
 8000de2:	2100      	movs	r1, #0
 8000de4:	4823      	ldr	r0, [pc, #140]	@ (8000e74 <HAL_UART_RxCpltCallback+0x1cc>)
 8000de6:	f004 fe7f 	bl	8005ae8 <memset>
			memset(frameReceived, 0, 10);
 8000dea:	220a      	movs	r2, #10
 8000dec:	2100      	movs	r1, #0
 8000dee:	4823      	ldr	r0, [pc, #140]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000df0:	f004 fe7a 	bl	8005ae8 <memset>
			messageCursor = 0;
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <HAL_UART_RxCpltCallback+0x1d8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
			frameCursor = 0;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <HAL_UART_RxCpltCallback+0x1d0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e029      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x1ae>
		}
		else if(receivedSign == ' '){
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_UART_RxCpltCallback+0x1c8>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b20      	cmp	r3, #32
 8000e08:	d11a      	bne.n	8000e40 <HAL_UART_RxCpltCallback+0x198>
			frameReceived[frameCursor++] = atoi(messageReceived);
 8000e0a:	481a      	ldr	r0, [pc, #104]	@ (8000e74 <HAL_UART_RxCpltCallback+0x1cc>)
 8000e0c:	f004 fde4 	bl	80059d8 <atoi>
 8000e10:	4602      	mov	r2, r0
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_UART_RxCpltCallback+0x1d0>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	1c59      	adds	r1, r3, #1
 8000e18:	b2c8      	uxtb	r0, r1
 8000e1a:	4917      	ldr	r1, [pc, #92]	@ (8000e78 <HAL_UART_RxCpltCallback+0x1d0>)
 8000e1c:	7008      	strb	r0, [r1, #0]
 8000e1e:	17d1      	asrs	r1, r2, #31
 8000e20:	4614      	mov	r4, r2
 8000e22:	460d      	mov	r5, r1
 8000e24:	4a15      	ldr	r2, [pc, #84]	@ (8000e7c <HAL_UART_RxCpltCallback+0x1d4>)
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	e9c3 4500 	strd	r4, r5, [r3]
			messageCursor = 0;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_UART_RxCpltCallback+0x1d8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
			memset(messageReceived, 0, 50);
 8000e34:	2232      	movs	r2, #50	@ 0x32
 8000e36:	2100      	movs	r1, #0
 8000e38:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <HAL_UART_RxCpltCallback+0x1cc>)
 8000e3a:	f004 fe55 	bl	8005ae8 <memset>
 8000e3e:	e00a      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x1ae>
		}
		else messageReceived[messageCursor++] = (char)receivedSign;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_UART_RxCpltCallback+0x1d8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	b2d1      	uxtb	r1, r2
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <HAL_UART_RxCpltCallback+0x1d8>)
 8000e4a:	7011      	strb	r1, [r2, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_UART_RxCpltCallback+0x1c8>)
 8000e50:	7819      	ldrb	r1, [r3, #0]
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_UART_RxCpltCallback+0x1cc>)
 8000e54:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	4905      	ldr	r1, [pc, #20]	@ (8000e70 <HAL_UART_RxCpltCallback+0x1c8>)
 8000e5a:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <HAL_UART_RxCpltCallback+0x1dc>)
 8000e5c:	f003 f9ee 	bl	800423c <HAL_UART_Receive_IT>
	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004400 	.word	0x40004400
 8000e70:	200001e8 	.word	0x200001e8
 8000e74:	200001ec 	.word	0x200001ec
 8000e78:	200001ea 	.word	0x200001ea
 8000e7c:	20000220 	.word	0x20000220
 8000e80:	200001e9 	.word	0x200001e9
 8000e84:	20000160 	.word	0x20000160

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	4a08      	ldr	r2, [pc, #32]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eec:	d10c      	bne.n	8000f08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f06:	e022      	b.n	8000f4e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <HAL_TIM_Base_MspInit+0x84>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10c      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f12:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
}
 8000f2a:	e010      	b.n	8000f4e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <HAL_TIM_Base_MspInit+0x88>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10b      	bne.n	8000f4e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_TIM_Base_MspInit+0x80>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40000800 	.word	0x40000800

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f88:	d11d      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b32      	ldr	r3, [pc, #200]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a31      	ldr	r2, [pc, #196]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b2f      	ldr	r3, [pc, #188]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_B_SPEED_Pin;
 8000fa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEED_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4826      	ldr	r0, [pc, #152]	@ (8001058 <HAL_TIM_MspPostInit+0xf0>)
 8000fc0:	f000 fb36 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fc4:	e042      	b.n	800104c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a24      	ldr	r2, [pc, #144]	@ (800105c <HAL_TIM_MspPostInit+0xf4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d11c      	bne.n	800100a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_B_SPEEDB4_Pin;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEEDB4_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	@ (8001058 <HAL_TIM_MspPostInit+0xf0>)
 8001004:	f000 fb14 	bl	8001630 <HAL_GPIO_Init>
}
 8001008:	e020      	b.n	800104c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <HAL_TIM_MspPostInit+0xf8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d11b      	bne.n	800104c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <HAL_TIM_MspPostInit+0xec>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 800102c:	2340      	movs	r3, #64	@ 0x40
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800103c:	2302      	movs	r3, #2
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4804      	ldr	r0, [pc, #16]	@ (8001058 <HAL_TIM_MspPostInit+0xf0>)
 8001048:	f000 faf2 	bl	8001630 <HAL_GPIO_Init>
}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	@ 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400
 800105c:	40000400 	.word	0x40000400
 8001060:	40000800 	.word	0x40000800

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ac      	sub	sp, #176	@ 0xb0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2288      	movs	r2, #136	@ 0x88
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f004 fd2f 	bl	8005ae8 <memset>
  if(huart->Instance==USART2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a25      	ldr	r2, [pc, #148]	@ (8001124 <HAL_UART_MspInit+0xc0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d143      	bne.n	800111c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001094:	2302      	movs	r3, #2
 8001096:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fb03 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010ac:	f7ff feec 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <HAL_UART_MspInit+0xc4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <HAL_UART_MspInit+0xc4>)
 80010b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_UART_MspInit+0xc4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_UART_MspInit+0xc4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <HAL_UART_MspInit+0xc4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_UART_MspInit+0xc4>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010e0:	230c      	movs	r3, #12
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f8:	2307      	movs	r3, #7
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f000 fa92 	bl	8001630 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2101      	movs	r1, #1
 8001110:	2026      	movs	r0, #38	@ 0x26
 8001112:	f000 f9d8 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001116:	2026      	movs	r0, #38	@ 0x26
 8001118:	f000 f9f1 	bl	80014fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800111c:	bf00      	nop
 800111e:	37b0      	adds	r7, #176	@ 0xb0
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40004400 	.word	0x40004400
 8001128:	40021000 	.word	0x40021000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <NMI_Handler+0x4>

08001134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <MemManage_Handler+0x4>

08001144 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <UsageFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001182:	f000 f8a5 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <USART2_IRQHandler+0x10>)
 8001192:	f003 f89f 	bl	80042d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000160 	.word	0x20000160

080011a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c8:	f7ff ffea 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <LoopForever+0xe>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001210 <LoopForever+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f004 fc87 	bl	8005b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f6:	f7ff faa3 	bl	8000740 <main>

080011fa <LoopForever>:

LoopForever:
    b LoopForever
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001208:	08005cc0 	.word	0x08005cc0
  ldr r2, =_sbss
 800120c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001210:	200003b4 	.word	0x200003b4

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_Init+0x3c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <HAL_Init+0x3c>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122e:	2003      	movs	r0, #3
 8001230:	f000 f93e 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f80f 	bl	8001258 <HAL_InitTick>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	e001      	b.n	800124a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001246:	f7ff fe25 	bl	8000e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124a:	79fb      	ldrb	r3, [r7, #7]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40022000 	.word	0x40022000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_InitTick+0x6c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d023      	beq.n	80012b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_InitTick+0x70>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_InitTick+0x6c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f949 	bl	800151a <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d809      	bhi.n	80012a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f913 	bl	80014c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_InitTick+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e007      	b.n	80012b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e004      	b.n	80012b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e001      	b.n	80012b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000278 	.word	0x20000278

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000278 	.word	0x20000278

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4907      	ldr	r1, [pc, #28]	@ (80013ac <__NVIC_EnableIRQ+0x38>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	@ (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	@ (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff8e 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff29 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff3e 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff8e 	bl	8001404 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff31 	bl	8001374 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d008      	beq.n	800155c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e022      	b.n	80015a2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020e 	bic.w	r2, r2, #14
 800156a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	f003 021c 	and.w	r2, r3, #28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d005      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2204      	movs	r2, #4
 80015ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e029      	b.n	8001626 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020e 	bic.w	r2, r2, #14
 80015e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f003 021c 	and.w	r2, r3, #28
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
    }
  }
  return status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e17f      	b.n	8001940 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8171 	beq.w	800193a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d005      	beq.n	8001670 <HAL_GPIO_Init+0x40>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 0201 	and.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d118      	bne.n	8001710 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b03      	cmp	r3, #3
 800171a:	d017      	beq.n	800174c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d123      	bne.n	80017a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	6939      	ldr	r1, [r7, #16]
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80ac 	beq.w	800193a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <HAL_GPIO_Init+0x330>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001960 <HAL_GPIO_Init+0x330>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001960 <HAL_GPIO_Init+0x330>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001964 <HAL_GPIO_Init+0x334>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001824:	d025      	beq.n	8001872 <HAL_GPIO_Init+0x242>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4f      	ldr	r2, [pc, #316]	@ (8001968 <HAL_GPIO_Init+0x338>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01f      	beq.n	800186e <HAL_GPIO_Init+0x23e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4e      	ldr	r2, [pc, #312]	@ (800196c <HAL_GPIO_Init+0x33c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d019      	beq.n	800186a <HAL_GPIO_Init+0x23a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4d      	ldr	r2, [pc, #308]	@ (8001970 <HAL_GPIO_Init+0x340>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0x236>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4c      	ldr	r2, [pc, #304]	@ (8001974 <HAL_GPIO_Init+0x344>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00d      	beq.n	8001862 <HAL_GPIO_Init+0x232>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4b      	ldr	r2, [pc, #300]	@ (8001978 <HAL_GPIO_Init+0x348>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x22e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4a      	ldr	r2, [pc, #296]	@ (800197c <HAL_GPIO_Init+0x34c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_GPIO_Init+0x22a>
 8001856:	2306      	movs	r3, #6
 8001858:	e00c      	b.n	8001874 <HAL_GPIO_Init+0x244>
 800185a:	2307      	movs	r3, #7
 800185c:	e00a      	b.n	8001874 <HAL_GPIO_Init+0x244>
 800185e:	2305      	movs	r3, #5
 8001860:	e008      	b.n	8001874 <HAL_GPIO_Init+0x244>
 8001862:	2304      	movs	r3, #4
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x244>
 8001866:	2303      	movs	r3, #3
 8001868:	e004      	b.n	8001874 <HAL_GPIO_Init+0x244>
 800186a:	2302      	movs	r3, #2
 800186c:	e002      	b.n	8001874 <HAL_GPIO_Init+0x244>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x244>
 8001872:	2300      	movs	r3, #0
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	f002 0203 	and.w	r2, r2, #3
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	4093      	lsls	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001884:	4937      	ldr	r1, [pc, #220]	@ (8001964 <HAL_GPIO_Init+0x334>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001892:	4b3b      	ldr	r3, [pc, #236]	@ (8001980 <HAL_GPIO_Init+0x350>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b6:	4a32      	ldr	r2, [pc, #200]	@ (8001980 <HAL_GPIO_Init+0x350>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018bc:	4b30      	ldr	r3, [pc, #192]	@ (8001980 <HAL_GPIO_Init+0x350>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e0:	4a27      	ldr	r2, [pc, #156]	@ (8001980 <HAL_GPIO_Init+0x350>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018e6:	4b26      	ldr	r3, [pc, #152]	@ (8001980 <HAL_GPIO_Init+0x350>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800190a:	4a1d      	ldr	r2, [pc, #116]	@ (8001980 <HAL_GPIO_Init+0x350>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001910:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <HAL_GPIO_Init+0x350>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <HAL_GPIO_Init+0x350>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	f47f ae78 	bne.w	8001640 <HAL_GPIO_Init+0x10>
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	48000400 	.word	0x48000400
 800196c:	48000800 	.word	0x48000800
 8001970:	48000c00 	.word	0x48000c00
 8001974:	48001000 	.word	0x48001000
 8001978:	48001400 	.word	0x48001400
 800197c:	48001800 	.word	0x48001800
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <HAL_PWREx_GetVoltageRange+0x18>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40007000 	.word	0x40007000

08001a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a0e:	d130      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a10:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a1c:	d038      	beq.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a26:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2232      	movs	r2, #50	@ 0x32
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0c9b      	lsrs	r3, r3, #18
 8001a40:	3301      	adds	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a44:	e002      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4c:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a58:	d102      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f2      	bne.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6c:	d110      	bne.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e00f      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7e:	d007      	beq.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a80:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a88:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83

08001aac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e3ca      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001abe:	4b97      	ldr	r3, [pc, #604]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac8:	4b94      	ldr	r3, [pc, #592]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80e4 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_RCC_OscConfig+0x4a>
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	f040 808b 	bne.w	8001c04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	f040 8087 	bne.w	8001c04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af6:	4b89      	ldr	r3, [pc, #548]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x62>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e3a2      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1a      	ldr	r2, [r3, #32]
 8001b12:	4b82      	ldr	r3, [pc, #520]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <HAL_RCC_OscConfig+0x7c>
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b26:	e005      	b.n	8001b34 <HAL_RCC_OscConfig+0x88>
 8001b28:	4b7c      	ldr	r3, [pc, #496]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d223      	bcs.n	8001b80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fd55 	bl	80025ec <RCC_SetFlashLatencyFromMSIRange>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e383      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4c:	4b73      	ldr	r3, [pc, #460]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a72      	ldr	r2, [pc, #456]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b70      	ldr	r3, [pc, #448]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	496d      	ldr	r1, [pc, #436]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	4968      	ldr	r1, [pc, #416]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
 8001b7e:	e025      	b.n	8001bcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b80:	4b66      	ldr	r3, [pc, #408]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a65      	ldr	r2, [pc, #404]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b63      	ldr	r3, [pc, #396]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4960      	ldr	r1, [pc, #384]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	495b      	ldr	r1, [pc, #364]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fd15 	bl	80025ec <RCC_SetFlashLatencyFromMSIRange>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e343      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bcc:	f000 fc4a 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b52      	ldr	r3, [pc, #328]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	4950      	ldr	r1, [pc, #320]	@ (8001d20 <HAL_RCC_OscConfig+0x274>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a4e      	ldr	r2, [pc, #312]	@ (8001d24 <HAL_RCC_OscConfig+0x278>)
 8001bea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bec:	4b4e      	ldr	r3, [pc, #312]	@ (8001d28 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb31 	bl	8001258 <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d052      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	e327      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d032      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c0c:	4b43      	ldr	r3, [pc, #268]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a42      	ldr	r2, [pc, #264]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fb6e 	bl	80012f8 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c20:	f7ff fb6a 	bl	80012f8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e310      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c32:	4b3a      	ldr	r3, [pc, #232]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3e:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a36      	ldr	r2, [pc, #216]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4931      	ldr	r1, [pc, #196]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	492c      	ldr	r1, [pc, #176]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	e01a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a29      	ldr	r2, [pc, #164]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fb3b 	bl	80012f8 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c86:	f7ff fb37 	bl	80012f8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e2dd      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c98:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x1da>
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ca6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d074      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x21a>
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d10e      	bne.n	8001cde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d10b      	bne.n	8001cde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d064      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d160      	bne.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e2ba      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x24a>
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0b      	ldr	r2, [pc, #44]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e026      	b.n	8001d44 <HAL_RCC_OscConfig+0x298>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cfe:	d115      	bne.n	8001d2c <HAL_RCC_OscConfig+0x280>
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001d06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a02      	ldr	r2, [pc, #8]	@ (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x298>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08005b64 	.word	0x08005b64
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000004 	.word	0x20000004
 8001d2c:	4ba0      	ldr	r3, [pc, #640]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a9f      	ldr	r2, [pc, #636]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b9d      	ldr	r3, [pc, #628]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a9c      	ldr	r2, [pc, #624]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fad4 	bl	80012f8 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fad0 	bl	80012f8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e276      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	4b92      	ldr	r3, [pc, #584]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x2a8>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7ff fac0 	bl	80012f8 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fabc 	bl	80012f8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	@ 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e262      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d8e:	4b88      	ldr	r3, [pc, #544]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2d0>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d060      	beq.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_OscConfig+0x310>
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d119      	bne.n	8001dea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d116      	bne.n	8001dea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x328>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e23f      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd4:	4b76      	ldr	r3, [pc, #472]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	061b      	lsls	r3, r3, #24
 8001de2:	4973      	ldr	r1, [pc, #460]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de8:	e040      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d023      	beq.n	8001e3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df2:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fa7b 	bl	80012f8 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff fa77 	bl	80012f8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e21d      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e18:	4b65      	ldr	r3, [pc, #404]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b62      	ldr	r3, [pc, #392]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	495f      	ldr	r1, [pc, #380]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
 8001e38:	e018      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff fa57 	bl	80012f8 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7ff fa53 	bl	80012f8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1f9      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e60:	4b53      	ldr	r3, [pc, #332]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d03c      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01c      	beq.n	8001eba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e86:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff fa32 	bl	80012f8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fa2e 	bl	80012f8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1d4      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ef      	beq.n	8001e98 <HAL_RCC_OscConfig+0x3ec>
 8001eb8:	e01b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec0:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff fa15 	bl	80012f8 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fa11 	bl	80012f8 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e1b7      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee4:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ef      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80a6 	beq.w	800204c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f04:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10d      	bne.n	8001f2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	4a26      	ldr	r2, [pc, #152]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1c:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2c:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <HAL_RCC_OscConfig+0x508>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d118      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f38:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <HAL_RCC_OscConfig+0x508>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb4 <HAL_RCC_OscConfig+0x508>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f44:	f7ff f9d8 	bl	80012f8 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4c:	f7ff f9d4 	bl	80012f8 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e17a      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_RCC_OscConfig+0x508>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4d8>
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f78:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f82:	e029      	b.n	8001fd8 <HAL_RCC_OscConfig+0x52c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d115      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x50c>
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	4a07      	ldr	r2, [pc, #28]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	4a03      	ldr	r2, [pc, #12]	@ (8001fb0 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fac:	e014      	b.n	8001fd8 <HAL_RCC_OscConfig+0x52c>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	4b9c      	ldr	r3, [pc, #624]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fbe:	4a9b      	ldr	r2, [pc, #620]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fc8:	4b98      	ldr	r3, [pc, #608]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fce:	4a97      	ldr	r2, [pc, #604]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d016      	beq.n	800200e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f98a 	bl	80012f8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f986 	bl	80012f8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e12a      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ed      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x53c>
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7ff f973 	bl	80012f8 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff f96f 	bl	80012f8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e113      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202c:	4b7f      	ldr	r3, [pc, #508]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ed      	bne.n	8002016 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203a:	7ffb      	ldrb	r3, [r7, #31]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d105      	bne.n	800204c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002040:	4b7a      	ldr	r3, [pc, #488]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	4a79      	ldr	r2, [pc, #484]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80fe 	beq.w	8002252 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	2b02      	cmp	r3, #2
 800205c:	f040 80d0 	bne.w	8002200 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002060:	4b72      	ldr	r3, [pc, #456]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	429a      	cmp	r2, r3
 8002072:	d130      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	3b01      	subs	r3, #1
 8002080:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d127      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002090:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d11f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020a0:	2a07      	cmp	r2, #7
 80020a2:	bf14      	ite	ne
 80020a4:	2201      	movne	r2, #1
 80020a6:	2200      	moveq	r2, #0
 80020a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d113      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	3b01      	subs	r3, #1
 80020bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d06e      	beq.n	80021b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d069      	beq.n	80021b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020dc:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020e8:	4b50      	ldr	r3, [pc, #320]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0ad      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020f8:	4b4c      	ldr	r3, [pc, #304]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002104:	f7ff f8f8 	bl	80012f8 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff f8f4 	bl	80012f8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e09a      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211e:	4b43      	ldr	r3, [pc, #268]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212a:	4b40      	ldr	r3, [pc, #256]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b40      	ldr	r3, [pc, #256]	@ (8002230 <HAL_RCC_OscConfig+0x784>)
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800213a:	3a01      	subs	r2, #1
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002144:	0212      	lsls	r2, r2, #8
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800214c:	0852      	lsrs	r2, r2, #1
 800214e:	3a01      	subs	r2, #1
 8002150:	0552      	lsls	r2, r2, #21
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002158:	0852      	lsrs	r2, r2, #1
 800215a:	3a01      	subs	r2, #1
 800215c:	0652      	lsls	r2, r2, #25
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002164:	0912      	lsrs	r2, r2, #4
 8002166:	0452      	lsls	r2, r2, #17
 8002168:	430a      	orrs	r2, r1
 800216a:	4930      	ldr	r1, [pc, #192]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 800216c:	4313      	orrs	r3, r2
 800216e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002170:	4b2e      	ldr	r3, [pc, #184]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800217a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800217c:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002186:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002188:	f7ff f8b6 	bl	80012f8 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff f8b2 	bl	80012f8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e058      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ae:	e050      	b.n	8002252 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e04f      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d148      	bne.n	8002252 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a16      	ldr	r2, [pc, #88]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d8:	f7ff f88e 	bl	80012f8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f88a 	bl	80012f8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e030      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x734>
 80021fe:	e028      	b.n	8002252 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d023      	beq.n	800224e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a08      	ldr	r2, [pc, #32]	@ (800222c <HAL_RCC_OscConfig+0x780>)
 800220c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f871 	bl	80012f8 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	e00c      	b.n	8002234 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff f86d 	bl	80012f8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d905      	bls.n	8002234 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e013      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
 800222c:	40021000 	.word	0x40021000
 8002230:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_RCC_OscConfig+0x7b0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ec      	bne.n	800221a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_RCC_OscConfig+0x7b0>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	4905      	ldr	r1, [pc, #20]	@ (800225c <HAL_RCC_OscConfig+0x7b0>)
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_RCC_OscConfig+0x7b4>)
 8002248:	4013      	ands	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
 800224c:	e001      	b.n	8002252 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	feeefffc 	.word	0xfeeefffc

08002264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0e7      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b75      	ldr	r3, [pc, #468]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d910      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b72      	ldr	r3, [pc, #456]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4970      	ldr	r1, [pc, #448]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b6e      	ldr	r3, [pc, #440]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0cf      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b66      	ldr	r3, [pc, #408]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d908      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b63      	ldr	r3, [pc, #396]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4960      	ldr	r1, [pc, #384]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d04c      	beq.n	800237c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d121      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0a6      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	4b54      	ldr	r3, [pc, #336]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d115      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e09a      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231a:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e08e      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232a:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e086      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b46      	ldr	r3, [pc, #280]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4943      	ldr	r1, [pc, #268]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234c:	f7fe ffd4 	bl	80012f8 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7fe ffd0 	bl	80012f8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e06e      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	4b31      	ldr	r3, [pc, #196]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002394:	429a      	cmp	r2, r3
 8002396:	d208      	bcs.n	80023aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	492b      	ldr	r1, [pc, #172]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023aa:	4b29      	ldr	r3, [pc, #164]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d210      	bcs.n	80023da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	4923      	ldr	r1, [pc, #140]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e036      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4918      	ldr	r1, [pc, #96]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4910      	ldr	r1, [pc, #64]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002418:	f000 f824 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	490b      	ldr	r1, [pc, #44]	@ (8002458 <HAL_RCC_ClockConfig+0x1f4>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	4a09      	ldr	r2, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1f8>)
 8002436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002438:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_ClockConfig+0x1fc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe ff0b 	bl	8001258 <HAL_InitTick>
 8002442:	4603      	mov	r3, r0
 8002444:	72fb      	strb	r3, [r7, #11]

  return status;
 8002446:	7afb      	ldrb	r3, [r7, #11]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	08005b64 	.word	0x08005b64
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b3e      	ldr	r3, [pc, #248]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x34>
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d121      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d11e      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002498:	4b34      	ldr	r3, [pc, #208]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024a4:	4b31      	ldr	r3, [pc, #196]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e005      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10d      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024dc:	4b25      	ldr	r3, [pc, #148]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x110>)
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e004      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e8:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d134      	bne.n	800255c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024f2:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0xa6>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d003      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0xac>
 8002508:	e005      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800250a:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x110>)
 800250c:	617b      	str	r3, [r7, #20]
      break;
 800250e:	e005      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x114>)
 8002512:	617b      	str	r3, [r7, #20]
      break;
 8002514:	e002      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	617b      	str	r3, [r7, #20]
      break;
 800251a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	3301      	adds	r3, #1
 8002528:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	fb03 f202 	mul.w	r2, r3, r2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	0e5b      	lsrs	r3, r3, #25
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	3301      	adds	r3, #1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800255c:	69bb      	ldr	r3, [r7, #24]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	08005b7c 	.word	0x08005b7c
 8002574:	00f42400 	.word	0x00f42400
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002598:	f7ff fff0 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4904      	ldr	r1, [pc, #16]	@ (80025bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08005b74 	.word	0x08005b74

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025c4:	f7ff ffda 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0adb      	lsrs	r3, r3, #11
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4904      	ldr	r1, [pc, #16]	@ (80025e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08005b74 	.word	0x08005b74

080025ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f8:	4b2a      	ldr	r3, [pc, #168]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002604:	f7ff f9ee 	bl	80019e4 <HAL_PWREx_GetVoltageRange>
 8002608:	6178      	str	r0, [r7, #20]
 800260a:	e014      	b.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	4a24      	ldr	r2, [pc, #144]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	@ 0x58
 8002618:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002624:	f7ff f9de 	bl	80019e4 <HAL_PWREx_GetVoltageRange>
 8002628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b1e      	ldr	r3, [pc, #120]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	4a1d      	ldr	r2, [pc, #116]	@ (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800263c:	d10b      	bne.n	8002656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	@ 0x80
 8002642:	d919      	bls.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2ba0      	cmp	r3, #160	@ 0xa0
 8002648:	d902      	bls.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800264a:	2302      	movs	r3, #2
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e013      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	e010      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b80      	cmp	r3, #128	@ 0x80
 800265a:	d902      	bls.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800265c:	2303      	movs	r3, #3
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e00a      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b80      	cmp	r3, #128	@ 0x80
 8002666:	d102      	bne.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002668:	2302      	movs	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e004      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b70      	cmp	r3, #112	@ 0x70
 8002672:	d101      	bne.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002674:	2301      	movs	r3, #1
 8002676:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002678:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 0207 	bic.w	r2, r3, #7
 8002680:	4909      	ldr	r1, [pc, #36]	@ (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002688:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	429a      	cmp	r2, r3
 8002694:	d001      	beq.n	800269a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40022000 	.word	0x40022000

080026ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b4:	2300      	movs	r3, #0
 80026b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b8:	2300      	movs	r3, #0
 80026ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d041      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026d0:	d02a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026d6:	d824      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026dc:	d008      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026e2:	d81e      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ec:	d010      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ee:	e018      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f0:	4b86      	ldr	r3, [pc, #536]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a85      	ldr	r2, [pc, #532]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fc:	e015      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fabb 	bl	8002c80 <RCCEx_PLLSAI1_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800270e:	e00c      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3320      	adds	r3, #32
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fba6 	bl	8002e68 <RCCEx_PLLSAI2_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002720:	e003      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	74fb      	strb	r3, [r7, #19]
      break;
 8002726:	e000      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002730:	4b76      	ldr	r3, [pc, #472]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800273e:	4973      	ldr	r1, [pc, #460]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002746:	e001      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d041      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800275c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002760:	d02a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002762:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002766:	d824      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800276c:	d008      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800276e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002772:	d81e      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800277c:	d010      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800277e:	e018      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002780:	4b62      	ldr	r3, [pc, #392]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a61      	ldr	r2, [pc, #388]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800278c:	e015      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fa73 	bl	8002c80 <RCCEx_PLLSAI1_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800279e:	e00c      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3320      	adds	r3, #32
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fb5e 	bl	8002e68 <RCCEx_PLLSAI2_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b0:	e003      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	74fb      	strb	r3, [r7, #19]
      break;
 80027b6:	e000      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c0:	4b52      	ldr	r3, [pc, #328]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ce:	494f      	ldr	r1, [pc, #316]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027d6:	e001      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a0 	beq.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ee:	4b47      	ldr	r3, [pc, #284]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b41      	ldr	r3, [pc, #260]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	4a40      	ldr	r2, [pc, #256]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002810:	4b3e      	ldr	r3, [pc, #248]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281c:	2301      	movs	r3, #1
 800281e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002820:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3a      	ldr	r2, [pc, #232]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800282c:	f7fe fd64 	bl	80012f8 <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002832:	e009      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe fd60 	bl	80012f8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	74fb      	strb	r3, [r7, #19]
        break;
 8002846:	e005      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002848:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ef      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d15c      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800285a:	4b2c      	ldr	r3, [pc, #176]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002864:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01f      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	d019      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002878:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002884:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	4a20      	ldr	r2, [pc, #128]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002894:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289a:	4a1c      	ldr	r2, [pc, #112]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028a4:	4a19      	ldr	r2, [pc, #100]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fd1f 	bl	80012f8 <HAL_GetTick>
 80028ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028bc:	e00b      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fd1b 	bl	80012f8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d902      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	74fb      	strb	r3, [r7, #19]
            break;
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d6:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ec      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028fa:	4904      	ldr	r1, [pc, #16]	@ (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002902:	e009      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
 8002908:	e006      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002918:	7c7b      	ldrb	r3, [r7, #17]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b9e      	ldr	r3, [pc, #632]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	4a9d      	ldr	r2, [pc, #628]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002928:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002936:	4b98      	ldr	r3, [pc, #608]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293c:	f023 0203 	bic.w	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002944:	4994      	ldr	r1, [pc, #592]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002958:	4b8f      	ldr	r3, [pc, #572]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	f023 020c 	bic.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002966:	498c      	ldr	r1, [pc, #560]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800297a:	4b87      	ldr	r3, [pc, #540]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	4983      	ldr	r1, [pc, #524]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800299c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	497b      	ldr	r1, [pc, #492]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029be:	4b76      	ldr	r3, [pc, #472]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029cc:	4972      	ldr	r1, [pc, #456]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	496a      	ldr	r1, [pc, #424]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a02:	4b65      	ldr	r3, [pc, #404]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	4961      	ldr	r1, [pc, #388]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a24:	4b5c      	ldr	r3, [pc, #368]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a32:	4959      	ldr	r1, [pc, #356]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a46:	4b54      	ldr	r3, [pc, #336]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a54:	4950      	ldr	r1, [pc, #320]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a68:	4b4b      	ldr	r3, [pc, #300]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	4948      	ldr	r1, [pc, #288]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a8a:	4b43      	ldr	r3, [pc, #268]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	493f      	ldr	r1, [pc, #252]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d028      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aac:	4b3a      	ldr	r3, [pc, #232]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aba:	4937      	ldr	r1, [pc, #220]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aca:	d106      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002acc:	4b32      	ldr	r3, [pc, #200]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a31      	ldr	r2, [pc, #196]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad6:	60d3      	str	r3, [r2, #12]
 8002ad8:	e011      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae2:	d10c      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f8c8 	bl	8002c80 <RCCEx_PLLSAI1_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d028      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b0a:	4b23      	ldr	r3, [pc, #140]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b18:	491f      	ldr	r1, [pc, #124]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b28:	d106      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b34:	60d3      	str	r3, [r2, #12]
 8002b36:	e011      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2101      	movs	r1, #1
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f899 	bl	8002c80 <RCCEx_PLLSAI1_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d02b      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b76:	4908      	ldr	r1, [pc, #32]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b86:	d109      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a02      	ldr	r2, [pc, #8]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
 8002b94:	e014      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f867 	bl	8002c80 <RCCEx_PLLSAI1_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02f      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bda:	4928      	ldr	r1, [pc, #160]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bea:	d10d      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f844 	bl	8002c80 <RCCEx_PLLSAI1_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d014      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	74bb      	strb	r3, [r7, #18]
 8002c06:	e011      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3320      	adds	r3, #32
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f925 	bl	8002e68 <RCCEx_PLLSAI2_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c38:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c46:	490d      	ldr	r1, [pc, #52]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c6a:	4904      	ldr	r1, [pc, #16]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c72:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000

08002c80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c8e:	4b75      	ldr	r3, [pc, #468]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d018      	beq.n	8002ccc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c9a:	4b72      	ldr	r3, [pc, #456]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d10d      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
       ||
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d047      	beq.n	8002d56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	e044      	b.n	8002d56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d018      	beq.n	8002d06 <RCCEx_PLLSAI1_Config+0x86>
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d825      	bhi.n	8002d24 <RCCEx_PLLSAI1_Config+0xa4>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d002      	beq.n	8002ce2 <RCCEx_PLLSAI1_Config+0x62>
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d009      	beq.n	8002cf4 <RCCEx_PLLSAI1_Config+0x74>
 8002ce0:	e020      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ce2:	4b60      	ldr	r3, [pc, #384]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11d      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf2:	e01a      	b.n	8002d2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d116      	bne.n	8002d2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d04:	e013      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d06:	4b57      	ldr	r3, [pc, #348]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d12:	4b54      	ldr	r3, [pc, #336]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d22:	e006      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      break;
 8002d28:	e004      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	4944      	ldr	r1, [pc, #272]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d17d      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d5c:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a40      	ldr	r2, [pc, #256]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe fac6 	bl	80012f8 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d6e:	e009      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d70:	f7fe fac2 	bl	80012f8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	73fb      	strb	r3, [r7, #15]
        break;
 8002d82:	e005      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d84:	4b37      	ldr	r3, [pc, #220]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ef      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d160      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d111      	bne.n	8002dc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d9c:	4b31      	ldr	r3, [pc, #196]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6892      	ldr	r2, [r2, #8]
 8002dac:	0211      	lsls	r1, r2, #8
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68d2      	ldr	r2, [r2, #12]
 8002db2:	0912      	lsrs	r2, r2, #4
 8002db4:	0452      	lsls	r2, r2, #17
 8002db6:	430a      	orrs	r2, r1
 8002db8:	492a      	ldr	r1, [pc, #168]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	610b      	str	r3, [r1, #16]
 8002dbe:	e027      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d112      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dc6:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002dce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	0211      	lsls	r1, r2, #8
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6912      	ldr	r2, [r2, #16]
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0552      	lsls	r2, r2, #21
 8002de2:	430a      	orrs	r2, r1
 8002de4:	491f      	ldr	r1, [pc, #124]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	610b      	str	r3, [r1, #16]
 8002dea:	e011      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dec:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002df4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6892      	ldr	r2, [r2, #8]
 8002dfc:	0211      	lsls	r1, r2, #8
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6952      	ldr	r2, [r2, #20]
 8002e02:	0852      	lsrs	r2, r2, #1
 8002e04:	3a01      	subs	r2, #1
 8002e06:	0652      	lsls	r2, r2, #25
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	4916      	ldr	r1, [pc, #88]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fa6c 	bl	80012f8 <HAL_GetTick>
 8002e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e22:	e009      	b.n	8002e38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e24:	f7fe fa68 	bl	80012f8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d902      	bls.n	8002e38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	73fb      	strb	r3, [r7, #15]
          break;
 8002e36:	e005      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e38:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ef      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	4904      	ldr	r1, [pc, #16]	@ (8002e64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000

08002e68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e76:	4b6a      	ldr	r3, [pc, #424]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d018      	beq.n	8002eb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e82:	4b67      	ldr	r3, [pc, #412]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10d      	bne.n	8002eae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
       ||
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e9a:	4b61      	ldr	r3, [pc, #388]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d047      	beq.n	8002f3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	e044      	b.n	8002f3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d018      	beq.n	8002eee <RCCEx_PLLSAI2_Config+0x86>
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d825      	bhi.n	8002f0c <RCCEx_PLLSAI2_Config+0xa4>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d002      	beq.n	8002eca <RCCEx_PLLSAI2_Config+0x62>
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d009      	beq.n	8002edc <RCCEx_PLLSAI2_Config+0x74>
 8002ec8:	e020      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eca:	4b55      	ldr	r3, [pc, #340]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11d      	bne.n	8002f12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eda:	e01a      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002edc:	4b50      	ldr	r3, [pc, #320]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e013      	b.n	8002f16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eee:	4b4c      	ldr	r3, [pc, #304]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002efa:	4b49      	ldr	r3, [pc, #292]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f0a:	e006      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e004      	b.n	8002f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f12:	bf00      	nop
 8002f14:	e002      	b.n	8002f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f16:	bf00      	nop
 8002f18:	e000      	b.n	8002f1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f22:	4b3f      	ldr	r3, [pc, #252]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	430b      	orrs	r3, r1
 8002f38:	4939      	ldr	r1, [pc, #228]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d167      	bne.n	8003014 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f44:	4b36      	ldr	r3, [pc, #216]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a35      	ldr	r2, [pc, #212]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fe f9d2 	bl	80012f8 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f56:	e009      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f58:	f7fe f9ce 	bl	80012f8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6a:	e005      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ef      	bne.n	8002f58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d14a      	bne.n	8003014 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f84:	4b26      	ldr	r3, [pc, #152]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	0211      	lsls	r1, r2, #8
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	0912      	lsrs	r2, r2, #4
 8002f9c:	0452      	lsls	r2, r2, #17
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	491f      	ldr	r1, [pc, #124]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	614b      	str	r3, [r1, #20]
 8002fa6:	e011      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6892      	ldr	r2, [r2, #8]
 8002fb8:	0211      	lsls	r1, r2, #8
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6912      	ldr	r2, [r2, #16]
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0652      	lsls	r2, r2, #25
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	4916      	ldr	r1, [pc, #88]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fcc:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe f98e 	bl	80012f8 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fde:	e009      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe0:	f7fe f98a 	bl	80012f8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ff2:	e005      	b.n	8003000 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ef      	beq.n	8002fe0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003006:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4904      	ldr	r1, [pc, #16]	@ (8003020 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000

08003024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e049      	b.n	80030ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd ff46 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f000 fb7a 	bl	800375c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e049      	b.n	8003178 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f841 	bl	8003180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 fb23 	bl	800375c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_TIM_PWM_Start+0x24>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e03c      	b.n	8003232 <HAL_TIM_PWM_Start+0x9e>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d109      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x3e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e02f      	b.n	8003232 <HAL_TIM_PWM_Start+0x9e>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d109      	bne.n	80031ec <HAL_TIM_PWM_Start+0x58>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e022      	b.n	8003232 <HAL_TIM_PWM_Start+0x9e>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b0c      	cmp	r3, #12
 80031f0:	d109      	bne.n	8003206 <HAL_TIM_PWM_Start+0x72>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	e015      	b.n	8003232 <HAL_TIM_PWM_Start+0x9e>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b10      	cmp	r3, #16
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start+0x8c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e008      	b.n	8003232 <HAL_TIM_PWM_Start+0x9e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e09c      	b.n	8003374 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <HAL_TIM_PWM_Start+0xb6>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003248:	e023      	b.n	8003292 <HAL_TIM_PWM_Start+0xfe>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d104      	bne.n	800325a <HAL_TIM_PWM_Start+0xc6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003258:	e01b      	b.n	8003292 <HAL_TIM_PWM_Start+0xfe>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d104      	bne.n	800326a <HAL_TIM_PWM_Start+0xd6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003268:	e013      	b.n	8003292 <HAL_TIM_PWM_Start+0xfe>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d104      	bne.n	800327a <HAL_TIM_PWM_Start+0xe6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003278:	e00b      	b.n	8003292 <HAL_TIM_PWM_Start+0xfe>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b10      	cmp	r3, #16
 800327e:	d104      	bne.n	800328a <HAL_TIM_PWM_Start+0xf6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003288:	e003      	b.n	8003292 <HAL_TIM_PWM_Start+0xfe>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2201      	movs	r2, #1
 8003298:	6839      	ldr	r1, [r7, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fe74 	bl	8003f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a35      	ldr	r2, [pc, #212]	@ (800337c <HAL_TIM_PWM_Start+0x1e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x13e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a34      	ldr	r2, [pc, #208]	@ (8003380 <HAL_TIM_PWM_Start+0x1ec>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x13e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a32      	ldr	r2, [pc, #200]	@ (8003384 <HAL_TIM_PWM_Start+0x1f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x13e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a31      	ldr	r2, [pc, #196]	@ (8003388 <HAL_TIM_PWM_Start+0x1f4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x13e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2f      	ldr	r2, [pc, #188]	@ (800338c <HAL_TIM_PWM_Start+0x1f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x142>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_TIM_PWM_Start+0x144>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a22      	ldr	r2, [pc, #136]	@ (800337c <HAL_TIM_PWM_Start+0x1e8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01d      	beq.n	8003332 <HAL_TIM_PWM_Start+0x19e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fe:	d018      	beq.n	8003332 <HAL_TIM_PWM_Start+0x19e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a22      	ldr	r2, [pc, #136]	@ (8003390 <HAL_TIM_PWM_Start+0x1fc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_TIM_PWM_Start+0x19e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a21      	ldr	r2, [pc, #132]	@ (8003394 <HAL_TIM_PWM_Start+0x200>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIM_PWM_Start+0x19e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1f      	ldr	r2, [pc, #124]	@ (8003398 <HAL_TIM_PWM_Start+0x204>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_TIM_PWM_Start+0x19e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a17      	ldr	r2, [pc, #92]	@ (8003380 <HAL_TIM_PWM_Start+0x1ec>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIM_PWM_Start+0x19e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a15      	ldr	r2, [pc, #84]	@ (8003384 <HAL_TIM_PWM_Start+0x1f0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d115      	bne.n	800335e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b18      	ldr	r3, [pc, #96]	@ (800339c <HAL_TIM_PWM_Start+0x208>)
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d015      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1dc>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334a:	d011      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	e008      	b.n	8003370 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e000      	b.n	8003372 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40013400 	.word	0x40013400
 8003384:	40014000 	.word	0x40014000
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	00010007 	.word	0x00010007

080033a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0ff      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b14      	cmp	r3, #20
 80033ca:	f200 80f0 	bhi.w	80035ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033ce:	a201      	add	r2, pc, #4	@ (adr r2, 80033d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	08003429 	.word	0x08003429
 80033d8:	080035af 	.word	0x080035af
 80033dc:	080035af 	.word	0x080035af
 80033e0:	080035af 	.word	0x080035af
 80033e4:	08003469 	.word	0x08003469
 80033e8:	080035af 	.word	0x080035af
 80033ec:	080035af 	.word	0x080035af
 80033f0:	080035af 	.word	0x080035af
 80033f4:	080034ab 	.word	0x080034ab
 80033f8:	080035af 	.word	0x080035af
 80033fc:	080035af 	.word	0x080035af
 8003400:	080035af 	.word	0x080035af
 8003404:	080034eb 	.word	0x080034eb
 8003408:	080035af 	.word	0x080035af
 800340c:	080035af 	.word	0x080035af
 8003410:	080035af 	.word	0x080035af
 8003414:	0800352d 	.word	0x0800352d
 8003418:	080035af 	.word	0x080035af
 800341c:	080035af 	.word	0x080035af
 8003420:	080035af 	.word	0x080035af
 8003424:	0800356d 	.word	0x0800356d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa3a 	bl	80038a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]
      break;
 8003466:	e0a5      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 faaa 	bl	80039c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
      break;
 80034a8:	e084      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fb13 	bl	8003adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
      break;
 80034e8:	e064      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb7b 	bl	8003bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	61da      	str	r2, [r3, #28]
      break;
 800352a:	e043      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fbc4 	bl	8003cc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800356a:	e023      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fc08 	bl	8003d88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003586:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035ac:	e002      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
      break;
 80035b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop

080035c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0b6      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x18a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003602:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800360e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003620:	d03e      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0xd8>
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	f200 8087 	bhi.w	8003738 <HAL_TIM_ConfigClockSource+0x170>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800362e:	f000 8086 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x176>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003636:	d87f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003638:	2b70      	cmp	r3, #112	@ 0x70
 800363a:	d01a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0xaa>
 800363c:	2b70      	cmp	r3, #112	@ 0x70
 800363e:	d87b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003640:	2b60      	cmp	r3, #96	@ 0x60
 8003642:	d050      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x11e>
 8003644:	2b60      	cmp	r3, #96	@ 0x60
 8003646:	d877      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003648:	2b50      	cmp	r3, #80	@ 0x50
 800364a:	d03c      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0xfe>
 800364c:	2b50      	cmp	r3, #80	@ 0x50
 800364e:	d873      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003650:	2b40      	cmp	r3, #64	@ 0x40
 8003652:	d058      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x13e>
 8003654:	2b40      	cmp	r3, #64	@ 0x40
 8003656:	d86f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003658:	2b30      	cmp	r3, #48	@ 0x30
 800365a:	d064      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 800365c:	2b30      	cmp	r3, #48	@ 0x30
 800365e:	d86b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d060      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d867      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05c      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d05a      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 8003670:	e062      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003682:	f000 fc61 	bl	8003f48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	609a      	str	r2, [r3, #8]
      break;
 800369e:	e04f      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036b0:	f000 fc4a 	bl	8003f48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036c2:	609a      	str	r2, [r3, #8]
      break;
 80036c4:	e03c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	461a      	mov	r2, r3
 80036d4:	f000 fbbe 	bl	8003e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2150      	movs	r1, #80	@ 0x50
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fc17 	bl	8003f12 <TIM_ITRx_SetConfig>
      break;
 80036e4:	e02c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fbdd 	bl	8003eb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2160      	movs	r1, #96	@ 0x60
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fc07 	bl	8003f12 <TIM_ITRx_SetConfig>
      break;
 8003704:	e01c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	461a      	mov	r2, r3
 8003714:	f000 fb9e 	bl	8003e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2140      	movs	r1, #64	@ 0x40
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fbf7 	bl	8003f12 <TIM_ITRx_SetConfig>
      break;
 8003724:	e00c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f000 fbee 	bl	8003f12 <TIM_ITRx_SetConfig>
      break;
 8003736:	e003      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e000      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800373e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a46      	ldr	r2, [pc, #280]	@ (8003888 <TIM_Base_SetConfig+0x12c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377a:	d00f      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a43      	ldr	r2, [pc, #268]	@ (800388c <TIM_Base_SetConfig+0x130>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00b      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a42      	ldr	r2, [pc, #264]	@ (8003890 <TIM_Base_SetConfig+0x134>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a41      	ldr	r2, [pc, #260]	@ (8003894 <TIM_Base_SetConfig+0x138>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a40      	ldr	r2, [pc, #256]	@ (8003898 <TIM_Base_SetConfig+0x13c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d108      	bne.n	80037ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a35      	ldr	r2, [pc, #212]	@ (8003888 <TIM_Base_SetConfig+0x12c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01f      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037bc:	d01b      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a32      	ldr	r2, [pc, #200]	@ (800388c <TIM_Base_SetConfig+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d017      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a31      	ldr	r2, [pc, #196]	@ (8003890 <TIM_Base_SetConfig+0x134>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a30      	ldr	r2, [pc, #192]	@ (8003894 <TIM_Base_SetConfig+0x138>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00f      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003898 <TIM_Base_SetConfig+0x13c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <TIM_Base_SetConfig+0x140>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2d      	ldr	r2, [pc, #180]	@ (80038a0 <TIM_Base_SetConfig+0x144>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_Base_SetConfig+0x9a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a2c      	ldr	r2, [pc, #176]	@ (80038a4 <TIM_Base_SetConfig+0x148>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a16      	ldr	r2, [pc, #88]	@ (8003888 <TIM_Base_SetConfig+0x12c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00f      	beq.n	8003854 <TIM_Base_SetConfig+0xf8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a18      	ldr	r2, [pc, #96]	@ (8003898 <TIM_Base_SetConfig+0x13c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0xf8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a17      	ldr	r2, [pc, #92]	@ (800389c <TIM_Base_SetConfig+0x140>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0xf8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a16      	ldr	r2, [pc, #88]	@ (80038a0 <TIM_Base_SetConfig+0x144>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0xf8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a15      	ldr	r2, [pc, #84]	@ (80038a4 <TIM_Base_SetConfig+0x148>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d103      	bne.n	800385c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]
  }
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800
 8003894:	40000c00 	.word	0x40000c00
 8003898:	40013400 	.word	0x40013400
 800389c:	40014000 	.word	0x40014000
 80038a0:	40014400 	.word	0x40014400
 80038a4:	40014800 	.word	0x40014800

080038a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f023 0201 	bic.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 0302 	bic.w	r3, r3, #2
 80038f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a2c      	ldr	r2, [pc, #176]	@ (80039b4 <TIM_OC1_SetConfig+0x10c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00f      	beq.n	8003928 <TIM_OC1_SetConfig+0x80>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a2b      	ldr	r2, [pc, #172]	@ (80039b8 <TIM_OC1_SetConfig+0x110>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_OC1_SetConfig+0x80>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a2a      	ldr	r2, [pc, #168]	@ (80039bc <TIM_OC1_SetConfig+0x114>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_OC1_SetConfig+0x80>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <TIM_OC1_SetConfig+0x118>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC1_SetConfig+0x80>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a28      	ldr	r2, [pc, #160]	@ (80039c4 <TIM_OC1_SetConfig+0x11c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10c      	bne.n	8003942 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0308 	bic.w	r3, r3, #8
 800392e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1b      	ldr	r2, [pc, #108]	@ (80039b4 <TIM_OC1_SetConfig+0x10c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00f      	beq.n	800396a <TIM_OC1_SetConfig+0xc2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1a      	ldr	r2, [pc, #104]	@ (80039b8 <TIM_OC1_SetConfig+0x110>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00b      	beq.n	800396a <TIM_OC1_SetConfig+0xc2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <TIM_OC1_SetConfig+0x114>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <TIM_OC1_SetConfig+0xc2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a18      	ldr	r2, [pc, #96]	@ (80039c0 <TIM_OC1_SetConfig+0x118>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <TIM_OC1_SetConfig+0xc2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a17      	ldr	r2, [pc, #92]	@ (80039c4 <TIM_OC1_SetConfig+0x11c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40013400 	.word	0x40013400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800

080039c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f023 0210 	bic.w	r2, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 0320 	bic.w	r3, r3, #32
 8003a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a28      	ldr	r2, [pc, #160]	@ (8003ac8 <TIM_OC2_SetConfig+0x100>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC2_SetConfig+0x6c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a27      	ldr	r2, [pc, #156]	@ (8003acc <TIM_OC2_SetConfig+0x104>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10d      	bne.n	8003a50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <TIM_OC2_SetConfig+0x100>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00f      	beq.n	8003a78 <TIM_OC2_SetConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003acc <TIM_OC2_SetConfig+0x104>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <TIM_OC2_SetConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <TIM_OC2_SetConfig+0x108>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <TIM_OC2_SetConfig+0xb0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <TIM_OC2_SetConfig+0x10c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_OC2_SetConfig+0xb0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <TIM_OC2_SetConfig+0x110>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d113      	bne.n	8003aa0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40013400 	.word	0x40013400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800

08003adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a27      	ldr	r2, [pc, #156]	@ (8003bd8 <TIM_OC3_SetConfig+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_OC3_SetConfig+0x6a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a26      	ldr	r2, [pc, #152]	@ (8003bdc <TIM_OC3_SetConfig+0x100>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <TIM_OC3_SetConfig+0xfc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <TIM_OC3_SetConfig+0xae>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bdc <TIM_OC3_SetConfig+0x100>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_OC3_SetConfig+0xae>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1a      	ldr	r2, [pc, #104]	@ (8003be0 <TIM_OC3_SetConfig+0x104>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_OC3_SetConfig+0xae>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <TIM_OC3_SetConfig+0x108>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_OC3_SetConfig+0xae>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <TIM_OC3_SetConfig+0x10c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d113      	bne.n	8003bb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	621a      	str	r2, [r3, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800

08003bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a18      	ldr	r2, [pc, #96]	@ (8003cac <TIM_OC4_SetConfig+0xc0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00f      	beq.n	8003c70 <TIM_OC4_SetConfig+0x84>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a17      	ldr	r2, [pc, #92]	@ (8003cb0 <TIM_OC4_SetConfig+0xc4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <TIM_OC4_SetConfig+0x84>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a16      	ldr	r2, [pc, #88]	@ (8003cb4 <TIM_OC4_SetConfig+0xc8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <TIM_OC4_SetConfig+0x84>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a15      	ldr	r2, [pc, #84]	@ (8003cb8 <TIM_OC4_SetConfig+0xcc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_OC4_SetConfig+0x84>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a14      	ldr	r2, [pc, #80]	@ (8003cbc <TIM_OC4_SetConfig+0xd0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d109      	bne.n	8003c84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40013400 	.word	0x40013400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800

08003cc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <TIM_OC5_SetConfig+0xb4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00f      	beq.n	8003d3a <TIM_OC5_SetConfig+0x7a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <TIM_OC5_SetConfig+0xb8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <TIM_OC5_SetConfig+0x7a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <TIM_OC5_SetConfig+0xbc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <TIM_OC5_SetConfig+0x7a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <TIM_OC5_SetConfig+0xc0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <TIM_OC5_SetConfig+0x7a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a13      	ldr	r2, [pc, #76]	@ (8003d84 <TIM_OC5_SetConfig+0xc4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d109      	bne.n	8003d4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40013400 	.word	0x40013400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800

08003d88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	051b      	lsls	r3, r3, #20
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a18      	ldr	r2, [pc, #96]	@ (8003e40 <TIM_OC6_SetConfig+0xb8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00f      	beq.n	8003e04 <TIM_OC6_SetConfig+0x7c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a17      	ldr	r2, [pc, #92]	@ (8003e44 <TIM_OC6_SetConfig+0xbc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_OC6_SetConfig+0x7c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a16      	ldr	r2, [pc, #88]	@ (8003e48 <TIM_OC6_SetConfig+0xc0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_OC6_SetConfig+0x7c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a15      	ldr	r2, [pc, #84]	@ (8003e4c <TIM_OC6_SetConfig+0xc4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_OC6_SetConfig+0x7c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a14      	ldr	r2, [pc, #80]	@ (8003e50 <TIM_OC6_SetConfig+0xc8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d109      	bne.n	8003e18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	029b      	lsls	r3, r3, #10
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40013400 	.word	0x40013400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400
 8003e50:	40014800 	.word	0x40014800

08003e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 030a 	bic.w	r3, r3, #10
 8003e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b087      	sub	sp, #28
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0210 	bic.w	r2, r3, #16
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	031b      	lsls	r3, r3, #12
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f043 0307 	orr.w	r3, r3, #7
 8003f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	021a      	lsls	r2, r3, #8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e068      	b.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2e      	ldr	r2, [pc, #184]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2d      	ldr	r2, [pc, #180]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d108      	bne.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1e      	ldr	r2, [pc, #120]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01d      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405e:	d018      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1b      	ldr	r2, [pc, #108]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1a      	ldr	r2, [pc, #104]	@ (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a13      	ldr	r2, [pc, #76]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a14      	ldr	r2, [pc, #80]	@ (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10c      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000

080040e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e040      	b.n	8004178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc ffac 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 feb0 	bl	8004e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fbf5 	bl	8004920 <UART_SetConfig>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e01b      	b.n	8004178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800414e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800415e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 ff2f 	bl	8004fd4 <UART_CheckIdleState>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004180:	b480      	push	{r7}
 8004182:	b08b      	sub	sp, #44	@ 0x2c
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004192:	2b20      	cmp	r3, #32
 8004194:	d147      	bne.n	8004226 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_UART_Transmit_IT+0x22>
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e040      	b.n	8004228 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2221      	movs	r2, #33	@ 0x21
 80041ce:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d8:	d107      	bne.n	80041ea <HAL_UART_Transmit_IT+0x6a>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a13      	ldr	r2, [pc, #76]	@ (8004234 <HAL_UART_Transmit_IT+0xb4>)
 80041e6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80041e8:	e002      	b.n	80041f0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a12      	ldr	r2, [pc, #72]	@ (8004238 <HAL_UART_Transmit_IT+0xb8>)
 80041ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	613b      	str	r3, [r7, #16]
   return(result);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	623b      	str	r3, [r7, #32]
 8004210:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	69f9      	ldr	r1, [r7, #28]
 8004214:	6a3a      	ldr	r2, [r7, #32]
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	61bb      	str	r3, [r7, #24]
   return(result);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e6      	bne.n	80041f0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	372c      	adds	r7, #44	@ 0x2c
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	08005537 	.word	0x08005537
 8004238:	08005481 	.word	0x08005481

0800423c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	@ 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004250:	2b20      	cmp	r3, #32
 8004252:	d137      	bne.n	80042c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_UART_Receive_IT+0x24>
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e030      	b.n	80042c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_UART_Receive_IT+0x94>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01f      	beq.n	80042b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	69f9      	ldr	r1, [r7, #28]
 80042a6:	6a3a      	ldr	r2, [r7, #32]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	461a      	mov	r2, r3
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 ffa0 	bl	8005200 <UART_Start_Receive_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	e000      	b.n	80042c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3728      	adds	r7, #40	@ 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40008000 	.word	0x40008000

080042d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0ba      	sub	sp, #232	@ 0xe8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004302:	4013      	ands	r3, r2
 8004304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d115      	bne.n	800433c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00f      	beq.n	800433c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 82ca 	beq.w	80048c6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
      }
      return;
 800433a:	e2c4      	b.n	80048c6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800433c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8117 	beq.w	8004574 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004352:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004356:	4b85      	ldr	r3, [pc, #532]	@ (800456c <HAL_UART_IRQHandler+0x298>)
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 810a 	beq.w	8004574 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d011      	beq.n	8004390 <HAL_UART_IRQHandler+0xbc>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004386:	f043 0201 	orr.w	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d011      	beq.n	80043c0 <HAL_UART_IRQHandler+0xec>
 800439c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2202      	movs	r2, #2
 80043ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b6:	f043 0204 	orr.w	r2, r3, #4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d011      	beq.n	80043f0 <HAL_UART_IRQHandler+0x11c>
 80043cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2204      	movs	r2, #4
 80043de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e6:	f043 0202 	orr.w	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d017      	beq.n	800442c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800440c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2208      	movs	r2, #8
 800441a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004422:	f043 0208 	orr.w	r2, r3, #8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004434:	2b00      	cmp	r3, #0
 8004436:	d012      	beq.n	800445e <HAL_UART_IRQHandler+0x18a>
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00c      	beq.n	800445e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800444c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8230 	beq.w	80048ca <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800446a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004498:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a6:	2b40      	cmp	r3, #64	@ 0x40
 80044a8:	d005      	beq.n	80044b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d04f      	beq.n	8004556 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 ff68 	bl	800538c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d141      	bne.n	800454e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004502:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800450e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1d9      	bne.n	80044ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451a:	2b00      	cmp	r3, #0
 800451c:	d013      	beq.n	8004546 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <HAL_UART_IRQHandler+0x29c>)
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452a:	4618      	mov	r0, r3
 800452c:	f7fd f83f 	bl	80015ae <HAL_DMA_Abort_IT>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d017      	beq.n	8004566 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004540:	4610      	mov	r0, r2
 8004542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e00f      	b.n	8004566 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9d4 	bl	80048f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	e00b      	b.n	8004566 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9d0 	bl	80048f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e007      	b.n	8004566 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9cc 	bl	80048f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004564:	e1b1      	b.n	80048ca <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004566:	bf00      	nop
    return;
 8004568:	e1af      	b.n	80048ca <HAL_UART_IRQHandler+0x5f6>
 800456a:	bf00      	nop
 800456c:	04000120 	.word	0x04000120
 8004570:	08005455 	.word	0x08005455

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	2b01      	cmp	r3, #1
 800457a:	f040 816a 	bne.w	8004852 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8163 	beq.w	8004852 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 815c 	beq.w	8004852 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	f040 80d4 	bne.w	800475a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80ad 	beq.w	8004722 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045d2:	429a      	cmp	r2, r3
 80045d4:	f080 80a5 	bcs.w	8004722 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 8086 	bne.w	8004700 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800460c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800461e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004622:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800462a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1da      	bne.n	80045f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800464e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3308      	adds	r3, #8
 800465e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004662:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004666:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800466a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e1      	bne.n	800463e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3308      	adds	r3, #8
 8004680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800468a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800468c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3308      	adds	r3, #8
 800469a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800469e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e4      	bne.n	80046c0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc ff19 	bl	8001532 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004712:	b29b      	uxth	r3, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	b29b      	uxth	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8f4 	bl	8004908 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004720:	e0d5      	b.n	80048ce <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800472c:	429a      	cmp	r2, r3
 800472e:	f040 80ce 	bne.w	80048ce <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	f040 80c5 	bne.w	80048ce <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8d8 	bl	8004908 <HAL_UARTEx_RxEventCallback>
      return;
 8004758:	e0b9      	b.n	80048ce <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004766:	b29b      	uxth	r3, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80ab 	beq.w	80048d2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800477c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80a6 	beq.w	80048d2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800479a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e4      	bne.n	8004786 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	623b      	str	r3, [r7, #32]
   return(result);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e3      	bne.n	80047bc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	60fb      	str	r3, [r7, #12]
   return(result);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0310 	bic.w	r3, r3, #16
 800481c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	617b      	str	r3, [r7, #20]
   return(result);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e4      	bne.n	8004808 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2202      	movs	r2, #2
 8004842:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f85c 	bl	8004908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004850:	e03f      	b.n	80048d2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00e      	beq.n	800487c <HAL_UART_IRQHandler+0x5a8>
 800485e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f001 f8a5 	bl	80059c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800487a:	e02d      	b.n	80048d8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800487c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01c      	beq.n	80048d6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
    }
    return;
 80048a4:	e017      	b.n	80048d6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_UART_IRQHandler+0x604>
 80048b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fe99 	bl	80055f6 <UART_EndTransmit_IT>
    return;
 80048c4:	e008      	b.n	80048d8 <HAL_UART_IRQHandler+0x604>
      return;
 80048c6:	bf00      	nop
 80048c8:	e006      	b.n	80048d8 <HAL_UART_IRQHandler+0x604>
    return;
 80048ca:	bf00      	nop
 80048cc:	e004      	b.n	80048d8 <HAL_UART_IRQHandler+0x604>
      return;
 80048ce:	bf00      	nop
 80048d0:	e002      	b.n	80048d8 <HAL_UART_IRQHandler+0x604>
      return;
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <HAL_UART_IRQHandler+0x604>
    return;
 80048d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048d8:	37e8      	adds	r7, #232	@ 0xe8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop

080048e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b08a      	sub	sp, #40	@ 0x28
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	431a      	orrs	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	4313      	orrs	r3, r2
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4ba4      	ldr	r3, [pc, #656]	@ (8004be0 <UART_SetConfig+0x2c0>)
 8004950:	4013      	ands	r3, r2
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004958:	430b      	orrs	r3, r1
 800495a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a99      	ldr	r2, [pc, #612]	@ (8004be4 <UART_SetConfig+0x2c4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004988:	4313      	orrs	r3, r2
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a90      	ldr	r2, [pc, #576]	@ (8004be8 <UART_SetConfig+0x2c8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d126      	bne.n	80049f8 <UART_SetConfig+0xd8>
 80049aa:	4b90      	ldr	r3, [pc, #576]	@ (8004bec <UART_SetConfig+0x2cc>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d81b      	bhi.n	80049f0 <UART_SetConfig+0xd0>
 80049b8:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <UART_SetConfig+0xa0>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049e1 	.word	0x080049e1
 80049c8:	080049d9 	.word	0x080049d9
 80049cc:	080049e9 	.word	0x080049e9
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d6:	e116      	b.n	8004c06 <UART_SetConfig+0x2e6>
 80049d8:	2302      	movs	r3, #2
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049de:	e112      	b.n	8004c06 <UART_SetConfig+0x2e6>
 80049e0:	2304      	movs	r3, #4
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e10e      	b.n	8004c06 <UART_SetConfig+0x2e6>
 80049e8:	2308      	movs	r3, #8
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e10a      	b.n	8004c06 <UART_SetConfig+0x2e6>
 80049f0:	2310      	movs	r3, #16
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e106      	b.n	8004c06 <UART_SetConfig+0x2e6>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7c      	ldr	r2, [pc, #496]	@ (8004bf0 <UART_SetConfig+0x2d0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d138      	bne.n	8004a74 <UART_SetConfig+0x154>
 8004a02:	4b7a      	ldr	r3, [pc, #488]	@ (8004bec <UART_SetConfig+0x2cc>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	d82d      	bhi.n	8004a6c <UART_SetConfig+0x14c>
 8004a10:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <UART_SetConfig+0xf8>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004a6d 	.word	0x08004a6d
 8004a20:	08004a6d 	.word	0x08004a6d
 8004a24:	08004a6d 	.word	0x08004a6d
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004a6d 	.word	0x08004a6d
 8004a30:	08004a6d 	.word	0x08004a6d
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a55 	.word	0x08004a55
 8004a3c:	08004a6d 	.word	0x08004a6d
 8004a40:	08004a6d 	.word	0x08004a6d
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a52:	e0d8      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004a54:	2302      	movs	r3, #2
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5a:	e0d4      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a62:	e0d0      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004a64:	2308      	movs	r3, #8
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6a:	e0cc      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a72:	e0c8      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a5e      	ldr	r2, [pc, #376]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d125      	bne.n	8004aca <UART_SetConfig+0x1aa>
 8004a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bec <UART_SetConfig+0x2cc>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a88:	2b30      	cmp	r3, #48	@ 0x30
 8004a8a:	d016      	beq.n	8004aba <UART_SetConfig+0x19a>
 8004a8c:	2b30      	cmp	r3, #48	@ 0x30
 8004a8e:	d818      	bhi.n	8004ac2 <UART_SetConfig+0x1a2>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d00a      	beq.n	8004aaa <UART_SetConfig+0x18a>
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d814      	bhi.n	8004ac2 <UART_SetConfig+0x1a2>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <UART_SetConfig+0x182>
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d008      	beq.n	8004ab2 <UART_SetConfig+0x192>
 8004aa0:	e00f      	b.n	8004ac2 <UART_SetConfig+0x1a2>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa8:	e0ad      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab0:	e0a9      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab8:	e0a5      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004aba:	2308      	movs	r3, #8
 8004abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac0:	e0a1      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac8:	e09d      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a4a      	ldr	r2, [pc, #296]	@ (8004bf8 <UART_SetConfig+0x2d8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d125      	bne.n	8004b20 <UART_SetConfig+0x200>
 8004ad4:	4b45      	ldr	r3, [pc, #276]	@ (8004bec <UART_SetConfig+0x2cc>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ada:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ae0:	d016      	beq.n	8004b10 <UART_SetConfig+0x1f0>
 8004ae2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ae4:	d818      	bhi.n	8004b18 <UART_SetConfig+0x1f8>
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d00a      	beq.n	8004b00 <UART_SetConfig+0x1e0>
 8004aea:	2b80      	cmp	r3, #128	@ 0x80
 8004aec:	d814      	bhi.n	8004b18 <UART_SetConfig+0x1f8>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <UART_SetConfig+0x1d8>
 8004af2:	2b40      	cmp	r3, #64	@ 0x40
 8004af4:	d008      	beq.n	8004b08 <UART_SetConfig+0x1e8>
 8004af6:	e00f      	b.n	8004b18 <UART_SetConfig+0x1f8>
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afe:	e082      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b00:	2302      	movs	r3, #2
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b06:	e07e      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0e:	e07a      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b10:	2308      	movs	r3, #8
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b16:	e076      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1e:	e072      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a35      	ldr	r2, [pc, #212]	@ (8004bfc <UART_SetConfig+0x2dc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d12a      	bne.n	8004b80 <UART_SetConfig+0x260>
 8004b2a:	4b30      	ldr	r3, [pc, #192]	@ (8004bec <UART_SetConfig+0x2cc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b38:	d01a      	beq.n	8004b70 <UART_SetConfig+0x250>
 8004b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b3e:	d81b      	bhi.n	8004b78 <UART_SetConfig+0x258>
 8004b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b44:	d00c      	beq.n	8004b60 <UART_SetConfig+0x240>
 8004b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b4a:	d815      	bhi.n	8004b78 <UART_SetConfig+0x258>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <UART_SetConfig+0x238>
 8004b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b54:	d008      	beq.n	8004b68 <UART_SetConfig+0x248>
 8004b56:	e00f      	b.n	8004b78 <UART_SetConfig+0x258>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5e:	e052      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b60:	2302      	movs	r3, #2
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b66:	e04e      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6e:	e04a      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b70:	2308      	movs	r3, #8
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b76:	e046      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e042      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <UART_SetConfig+0x2c4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d13a      	bne.n	8004c00 <UART_SetConfig+0x2e0>
 8004b8a:	4b18      	ldr	r3, [pc, #96]	@ (8004bec <UART_SetConfig+0x2cc>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b98:	d01a      	beq.n	8004bd0 <UART_SetConfig+0x2b0>
 8004b9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b9e:	d81b      	bhi.n	8004bd8 <UART_SetConfig+0x2b8>
 8004ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ba4:	d00c      	beq.n	8004bc0 <UART_SetConfig+0x2a0>
 8004ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004baa:	d815      	bhi.n	8004bd8 <UART_SetConfig+0x2b8>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <UART_SetConfig+0x298>
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb4:	d008      	beq.n	8004bc8 <UART_SetConfig+0x2a8>
 8004bb6:	e00f      	b.n	8004bd8 <UART_SetConfig+0x2b8>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bbe:	e022      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc6:	e01e      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bce:	e01a      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e016      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bde:	e012      	b.n	8004c06 <UART_SetConfig+0x2e6>
 8004be0:	efff69f3 	.word	0xefff69f3
 8004be4:	40008000 	.word	0x40008000
 8004be8:	40013800 	.word	0x40013800
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40004400 	.word	0x40004400
 8004bf4:	40004800 	.word	0x40004800
 8004bf8:	40004c00 	.word	0x40004c00
 8004bfc:	40005000 	.word	0x40005000
 8004c00:	2310      	movs	r3, #16
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a9f      	ldr	r2, [pc, #636]	@ (8004e88 <UART_SetConfig+0x568>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d17a      	bne.n	8004d06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d824      	bhi.n	8004c62 <UART_SetConfig+0x342>
 8004c18:	a201      	add	r2, pc, #4	@ (adr r2, 8004c20 <UART_SetConfig+0x300>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c63 	.word	0x08004c63
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004c63 	.word	0x08004c63
 8004c30:	08004c53 	.word	0x08004c53
 8004c34:	08004c63 	.word	0x08004c63
 8004c38:	08004c63 	.word	0x08004c63
 8004c3c:	08004c63 	.word	0x08004c63
 8004c40:	08004c5b 	.word	0x08004c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c44:	f7fd fca6 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8004c48:	61f8      	str	r0, [r7, #28]
        break;
 8004c4a:	e010      	b.n	8004c6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8004e8c <UART_SetConfig+0x56c>)
 8004c4e:	61fb      	str	r3, [r7, #28]
        break;
 8004c50:	e00d      	b.n	8004c6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fd fc07 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8004c56:	61f8      	str	r0, [r7, #28]
        break;
 8004c58:	e009      	b.n	8004c6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5e:	61fb      	str	r3, [r7, #28]
        break;
 8004c60:	e005      	b.n	8004c6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80fb 	beq.w	8004e6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d305      	bcc.n	8004c92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d903      	bls.n	8004c9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c98:	e0e8      	b.n	8004e6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	4615      	mov	r5, r2
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	022b      	lsls	r3, r5, #8
 8004cac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cb0:	0222      	lsls	r2, r4, #8
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	6849      	ldr	r1, [r1, #4]
 8004cb6:	0849      	lsrs	r1, r1, #1
 8004cb8:	2000      	movs	r0, #0
 8004cba:	4688      	mov	r8, r1
 8004cbc:	4681      	mov	r9, r0
 8004cbe:	eb12 0a08 	adds.w	sl, r2, r8
 8004cc2:	eb43 0b09 	adc.w	fp, r3, r9
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	f7fb fa80 	bl	80001dc <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cea:	d308      	bcc.n	8004cfe <UART_SetConfig+0x3de>
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf2:	d204      	bcs.n	8004cfe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	e0b6      	b.n	8004e6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d04:	e0b2      	b.n	8004e6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d0e:	d15e      	bne.n	8004dce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d828      	bhi.n	8004d6a <UART_SetConfig+0x44a>
 8004d18:	a201      	add	r2, pc, #4	@ (adr r2, 8004d20 <UART_SetConfig+0x400>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004d55 	.word	0x08004d55
 8004d2c:	08004d6b 	.word	0x08004d6b
 8004d30:	08004d5b 	.word	0x08004d5b
 8004d34:	08004d6b 	.word	0x08004d6b
 8004d38:	08004d6b 	.word	0x08004d6b
 8004d3c:	08004d6b 	.word	0x08004d6b
 8004d40:	08004d63 	.word	0x08004d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d44:	f7fd fc26 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8004d48:	61f8      	str	r0, [r7, #28]
        break;
 8004d4a:	e014      	b.n	8004d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d4c:	f7fd fc38 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8004d50:	61f8      	str	r0, [r7, #28]
        break;
 8004d52:	e010      	b.n	8004d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d54:	4b4d      	ldr	r3, [pc, #308]	@ (8004e8c <UART_SetConfig+0x56c>)
 8004d56:	61fb      	str	r3, [r7, #28]
        break;
 8004d58:	e00d      	b.n	8004d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5a:	f7fd fb83 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8004d5e:	61f8      	str	r0, [r7, #28]
        break;
 8004d60:	e009      	b.n	8004d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d66:	61fb      	str	r3, [r7, #28]
        break;
 8004d68:	e005      	b.n	8004d76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d077      	beq.n	8004e6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005a      	lsls	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	441a      	add	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b0f      	cmp	r3, #15
 8004d96:	d916      	bls.n	8004dc6 <UART_SetConfig+0x4a6>
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d9e:	d212      	bcs.n	8004dc6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f023 030f 	bic.w	r3, r3, #15
 8004da8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	8afb      	ldrh	r3, [r7, #22]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	8afa      	ldrh	r2, [r7, #22]
 8004dc2:	60da      	str	r2, [r3, #12]
 8004dc4:	e052      	b.n	8004e6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dcc:	e04e      	b.n	8004e6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d827      	bhi.n	8004e26 <UART_SetConfig+0x506>
 8004dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <UART_SetConfig+0x4bc>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	08004e27 	.word	0x08004e27
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e27 	.word	0x08004e27
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fd fbc8 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8004e04:	61f8      	str	r0, [r7, #28]
        break;
 8004e06:	e014      	b.n	8004e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fd fbda 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	61f8      	str	r0, [r7, #28]
        break;
 8004e0e:	e010      	b.n	8004e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b1e      	ldr	r3, [pc, #120]	@ (8004e8c <UART_SetConfig+0x56c>)
 8004e12:	61fb      	str	r3, [r7, #28]
        break;
 8004e14:	e00d      	b.n	8004e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fd fb25 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8004e1a:	61f8      	str	r0, [r7, #28]
        break;
 8004e1c:	e009      	b.n	8004e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e22:	61fb      	str	r3, [r7, #28]
        break;
 8004e24:	e005      	b.n	8004e32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e30:	bf00      	nop
    }

    if (pclk != 0U)
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d019      	beq.n	8004e6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	085a      	lsrs	r2, r3, #1
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0f      	cmp	r3, #15
 8004e50:	d909      	bls.n	8004e66 <UART_SetConfig+0x546>
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e58:	d205      	bcs.n	8004e66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60da      	str	r2, [r3, #12]
 8004e64:	e002      	b.n	8004e6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3728      	adds	r7, #40	@ 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e86:	bf00      	nop
 8004e88:	40008000 	.word	0x40008000
 8004e8c:	00f42400 	.word	0x00f42400

08004e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f8e:	d10a      	bne.n	8004fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b098      	sub	sp, #96	@ 0x60
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fe4:	f7fc f988 	bl	80012f8 <HAL_GetTick>
 8004fe8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d12e      	bne.n	8005056 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005000:	2200      	movs	r2, #0
 8005002:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f88c 	bl	8005124 <UART_WaitOnFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d021      	beq.n	8005056 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005026:	653b      	str	r3, [r7, #80]	@ 0x50
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005030:	647b      	str	r3, [r7, #68]	@ 0x44
 8005032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800503e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e6      	bne.n	8005012 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e062      	b.n	800511c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d149      	bne.n	80050f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506c:	2200      	movs	r2, #0
 800506e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f856 	bl	8005124 <UART_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d03c      	beq.n	80050f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	623b      	str	r3, [r7, #32]
   return(result);
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800509c:	633b      	str	r3, [r7, #48]	@ 0x30
 800509e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e6      	bne.n	800507e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3308      	adds	r3, #8
 80050b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050d0:	61fa      	str	r2, [r7, #28]
 80050d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	69b9      	ldr	r1, [r7, #24]
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	617b      	str	r3, [r7, #20]
   return(result);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e011      	b.n	800511c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3758      	adds	r7, #88	@ 0x58
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005134:	e04f      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d04b      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fc f8db 	bl	80012f8 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <UART_WaitOnFlagUntilTimeout+0x30>
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e04e      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d037      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b80      	cmp	r3, #128	@ 0x80
 800516a:	d034      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d031      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b08      	cmp	r3, #8
 800517e:	d110      	bne.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2208      	movs	r2, #8
 8005186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f8ff 	bl	800538c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2208      	movs	r2, #8
 8005192:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e029      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b0:	d111      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f8e5 	bl	800538c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e00f      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4013      	ands	r3, r2
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	bf0c      	ite	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	2300      	movne	r3, #0
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d0a0      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005200:	b480      	push	{r7}
 8005202:	b097      	sub	sp, #92	@ 0x5c
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005232:	d10e      	bne.n	8005252 <UART_Start_Receive_IT+0x52>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <UART_Start_Receive_IT+0x48>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005246:	e02d      	b.n	80052a4 <UART_Start_Receive_IT+0xa4>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	22ff      	movs	r2, #255	@ 0xff
 800524c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005250:	e028      	b.n	80052a4 <UART_Start_Receive_IT+0xa4>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10d      	bne.n	8005276 <UART_Start_Receive_IT+0x76>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <UART_Start_Receive_IT+0x6c>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	22ff      	movs	r2, #255	@ 0xff
 8005266:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800526a:	e01b      	b.n	80052a4 <UART_Start_Receive_IT+0xa4>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	227f      	movs	r2, #127	@ 0x7f
 8005270:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005274:	e016      	b.n	80052a4 <UART_Start_Receive_IT+0xa4>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800527e:	d10d      	bne.n	800529c <UART_Start_Receive_IT+0x9c>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <UART_Start_Receive_IT+0x92>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	227f      	movs	r2, #127	@ 0x7f
 800528c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005290:	e008      	b.n	80052a4 <UART_Start_Receive_IT+0xa4>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	223f      	movs	r2, #63	@ 0x3f
 8005296:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800529a:	e003      	b.n	80052a4 <UART_Start_Receive_IT+0xa4>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2222      	movs	r2, #34	@ 0x22
 80052b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052d4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f0:	d107      	bne.n	8005302 <UART_Start_Receive_IT+0x102>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4a21      	ldr	r2, [pc, #132]	@ (8005384 <UART_Start_Receive_IT+0x184>)
 80052fe:	669a      	str	r2, [r3, #104]	@ 0x68
 8005300:	e002      	b.n	8005308 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a20      	ldr	r2, [pc, #128]	@ (8005388 <UART_Start_Receive_IT+0x188>)
 8005306:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d019      	beq.n	8005344 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800532e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005330:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_Start_Receive_IT+0x110>
 8005342:	e018      	b.n	8005376 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	613b      	str	r3, [r7, #16]
   return(result);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f043 0320 	orr.w	r3, r3, #32
 8005358:	653b      	str	r3, [r7, #80]	@ 0x50
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	69f9      	ldr	r1, [r7, #28]
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	375c      	adds	r7, #92	@ 0x5c
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	08005809 	.word	0x08005809
 8005388:	0800564d 	.word	0x0800564d

0800538c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b095      	sub	sp, #84	@ 0x54
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80053b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e6      	bne.n	8005394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3308      	adds	r3, #8
 80053e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e5      	bne.n	80053c6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d118      	bne.n	8005434 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	647b      	str	r3, [r7, #68]	@ 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6979      	ldr	r1, [r7, #20]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	613b      	str	r3, [r7, #16]
   return(result);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005448:	bf00      	nop
 800544a:	3754      	adds	r7, #84	@ 0x54
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff fa3e 	bl	80048f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005480:	b480      	push	{r7}
 8005482:	b08f      	sub	sp, #60	@ 0x3c
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800548c:	2b21      	cmp	r3, #33	@ 0x21
 800548e:	d14c      	bne.n	800552a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d132      	bne.n	8005502 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60bb      	str	r3, [r7, #8]
   return(result);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6979      	ldr	r1, [r7, #20]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	613b      	str	r3, [r7, #16]
   return(result);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e6      	bne.n	80054ce <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005500:	e013      	b.n	800552a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005506:	781a      	ldrb	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800552a:	bf00      	nop
 800552c:	373c      	adds	r7, #60	@ 0x3c
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005536:	b480      	push	{r7}
 8005538:	b091      	sub	sp, #68	@ 0x44
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005542:	2b21      	cmp	r3, #33	@ 0x21
 8005544:	d151      	bne.n	80055ea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d132      	bne.n	80055b8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	623b      	str	r3, [r7, #32]
   return(result);
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005566:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	633b      	str	r3, [r7, #48]	@ 0x30
 8005572:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	60fb      	str	r3, [r7, #12]
   return(result);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	69b9      	ldr	r1, [r7, #24]
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	617b      	str	r3, [r7, #20]
   return(result);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e6      	bne.n	8005584 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80055b6:	e018      	b.n	80055ea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80055be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ca:	b292      	uxth	r2, r2
 80055cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d2:	1c9a      	adds	r2, r3, #2
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80055ea:	bf00      	nop
 80055ec:	3744      	adds	r7, #68	@ 0x44
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b088      	sub	sp, #32
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	60bb      	str	r3, [r7, #8]
   return(result);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	613b      	str	r3, [r7, #16]
   return(result);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff f94f 	bl	80048e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005642:	bf00      	nop
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b09c      	sub	sp, #112	@ 0x70
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800565a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005664:	2b22      	cmp	r3, #34	@ 0x22
 8005666:	f040 80be 	bne.w	80057e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005670:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005678:	b2d9      	uxtb	r1, r3
 800567a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005684:	400a      	ands	r2, r1
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 80a3 	bne.w	80057fa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005706:	647a      	str	r2, [r7, #68]	@ 0x44
 8005708:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800570c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a34      	ldr	r2, [pc, #208]	@ (8005804 <UART_RxISR_8BIT+0x1b8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01f      	beq.n	8005778 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	623b      	str	r3, [r7, #32]
   return(result);
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800575a:	663b      	str	r3, [r7, #96]	@ 0x60
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005764:	633b      	str	r3, [r7, #48]	@ 0x30
 8005766:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800576a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577c:	2b01      	cmp	r3, #1
 800577e:	d12e      	bne.n	80057de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	60fb      	str	r3, [r7, #12]
   return(result);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0310 	bic.w	r3, r3, #16
 800579a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	617b      	str	r3, [r7, #20]
   return(result);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d103      	bne.n	80057ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2210      	movs	r2, #16
 80057cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff f896 	bl	8004908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057dc:	e00d      	b.n	80057fa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fb fa62 	bl	8000ca8 <HAL_UART_RxCpltCallback>
}
 80057e4:	e009      	b.n	80057fa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	8b1b      	ldrh	r3, [r3, #24]
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0208 	orr.w	r2, r2, #8
 80057f6:	b292      	uxth	r2, r2
 80057f8:	831a      	strh	r2, [r3, #24]
}
 80057fa:	bf00      	nop
 80057fc:	3770      	adds	r7, #112	@ 0x70
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40008000 	.word	0x40008000

08005808 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b09c      	sub	sp, #112	@ 0x70
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005816:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005820:	2b22      	cmp	r3, #34	@ 0x22
 8005822:	f040 80be 	bne.w	80059a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800582c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005834:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005836:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800583a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800583e:	4013      	ands	r3, r2
 8005840:	b29a      	uxth	r2, r3
 8005842:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005844:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 80a3 	bne.w	80059b6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800587e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005884:	667b      	str	r3, [r7, #100]	@ 0x64
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800588e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005890:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005894:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800589c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e6      	bne.n	8005870 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3308      	adds	r3, #8
 80058c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e5      	bne.n	80058a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a34      	ldr	r2, [pc, #208]	@ (80059c0 <UART_RxISR_16BIT+0x1b8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d01f      	beq.n	8005934 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005916:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005922:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e6      	bne.n	8005902 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005938:	2b01      	cmp	r3, #1
 800593a:	d12e      	bne.n	800599a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f023 0310 	bic.w	r3, r3, #16
 8005956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	613b      	str	r3, [r7, #16]
   return(result);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e6      	bne.n	8005942 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b10      	cmp	r3, #16
 8005980:	d103      	bne.n	800598a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2210      	movs	r2, #16
 8005988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fe ffb8 	bl	8004908 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005998:	e00d      	b.n	80059b6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fb f984 	bl	8000ca8 <HAL_UART_RxCpltCallback>
}
 80059a0:	e009      	b.n	80059b6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	8b1b      	ldrh	r3, [r3, #24]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0208 	orr.w	r2, r2, #8
 80059b2:	b292      	uxth	r2, r2
 80059b4:	831a      	strh	r2, [r3, #24]
}
 80059b6:	bf00      	nop
 80059b8:	3770      	adds	r7, #112	@ 0x70
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40008000 	.word	0x40008000

080059c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <atoi>:
 80059d8:	220a      	movs	r2, #10
 80059da:	2100      	movs	r1, #0
 80059dc:	f000 b87a 	b.w	8005ad4 <strtol>

080059e0 <_strtol_l.constprop.0>:
 80059e0:	2b24      	cmp	r3, #36	@ 0x24
 80059e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e6:	4686      	mov	lr, r0
 80059e8:	4690      	mov	r8, r2
 80059ea:	d801      	bhi.n	80059f0 <_strtol_l.constprop.0+0x10>
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d106      	bne.n	80059fe <_strtol_l.constprop.0+0x1e>
 80059f0:	f000 f882 	bl	8005af8 <__errno>
 80059f4:	2316      	movs	r3, #22
 80059f6:	6003      	str	r3, [r0, #0]
 80059f8:	2000      	movs	r0, #0
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	4834      	ldr	r0, [pc, #208]	@ (8005ad0 <_strtol_l.constprop.0+0xf0>)
 8005a00:	460d      	mov	r5, r1
 8005a02:	462a      	mov	r2, r5
 8005a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a08:	5d06      	ldrb	r6, [r0, r4]
 8005a0a:	f016 0608 	ands.w	r6, r6, #8
 8005a0e:	d1f8      	bne.n	8005a02 <_strtol_l.constprop.0+0x22>
 8005a10:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a12:	d12d      	bne.n	8005a70 <_strtol_l.constprop.0+0x90>
 8005a14:	782c      	ldrb	r4, [r5, #0]
 8005a16:	2601      	movs	r6, #1
 8005a18:	1c95      	adds	r5, r2, #2
 8005a1a:	f033 0210 	bics.w	r2, r3, #16
 8005a1e:	d109      	bne.n	8005a34 <_strtol_l.constprop.0+0x54>
 8005a20:	2c30      	cmp	r4, #48	@ 0x30
 8005a22:	d12a      	bne.n	8005a7a <_strtol_l.constprop.0+0x9a>
 8005a24:	782a      	ldrb	r2, [r5, #0]
 8005a26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a2a:	2a58      	cmp	r2, #88	@ 0x58
 8005a2c:	d125      	bne.n	8005a7a <_strtol_l.constprop.0+0x9a>
 8005a2e:	786c      	ldrb	r4, [r5, #1]
 8005a30:	2310      	movs	r3, #16
 8005a32:	3502      	adds	r5, #2
 8005a34:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005a38:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	fbbc f9f3 	udiv	r9, ip, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005a4c:	2f09      	cmp	r7, #9
 8005a4e:	d81b      	bhi.n	8005a88 <_strtol_l.constprop.0+0xa8>
 8005a50:	463c      	mov	r4, r7
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	dd27      	ble.n	8005aa6 <_strtol_l.constprop.0+0xc6>
 8005a56:	1c57      	adds	r7, r2, #1
 8005a58:	d007      	beq.n	8005a6a <_strtol_l.constprop.0+0x8a>
 8005a5a:	4581      	cmp	r9, r0
 8005a5c:	d320      	bcc.n	8005aa0 <_strtol_l.constprop.0+0xc0>
 8005a5e:	d101      	bne.n	8005a64 <_strtol_l.constprop.0+0x84>
 8005a60:	45a2      	cmp	sl, r4
 8005a62:	db1d      	blt.n	8005aa0 <_strtol_l.constprop.0+0xc0>
 8005a64:	fb00 4003 	mla	r0, r0, r3, r4
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a6e:	e7eb      	b.n	8005a48 <_strtol_l.constprop.0+0x68>
 8005a70:	2c2b      	cmp	r4, #43	@ 0x2b
 8005a72:	bf04      	itt	eq
 8005a74:	782c      	ldrbeq	r4, [r5, #0]
 8005a76:	1c95      	addeq	r5, r2, #2
 8005a78:	e7cf      	b.n	8005a1a <_strtol_l.constprop.0+0x3a>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1da      	bne.n	8005a34 <_strtol_l.constprop.0+0x54>
 8005a7e:	2c30      	cmp	r4, #48	@ 0x30
 8005a80:	bf0c      	ite	eq
 8005a82:	2308      	moveq	r3, #8
 8005a84:	230a      	movne	r3, #10
 8005a86:	e7d5      	b.n	8005a34 <_strtol_l.constprop.0+0x54>
 8005a88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005a8c:	2f19      	cmp	r7, #25
 8005a8e:	d801      	bhi.n	8005a94 <_strtol_l.constprop.0+0xb4>
 8005a90:	3c37      	subs	r4, #55	@ 0x37
 8005a92:	e7de      	b.n	8005a52 <_strtol_l.constprop.0+0x72>
 8005a94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005a98:	2f19      	cmp	r7, #25
 8005a9a:	d804      	bhi.n	8005aa6 <_strtol_l.constprop.0+0xc6>
 8005a9c:	3c57      	subs	r4, #87	@ 0x57
 8005a9e:	e7d8      	b.n	8005a52 <_strtol_l.constprop.0+0x72>
 8005aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa4:	e7e1      	b.n	8005a6a <_strtol_l.constprop.0+0x8a>
 8005aa6:	1c53      	adds	r3, r2, #1
 8005aa8:	d108      	bne.n	8005abc <_strtol_l.constprop.0+0xdc>
 8005aaa:	2322      	movs	r3, #34	@ 0x22
 8005aac:	f8ce 3000 	str.w	r3, [lr]
 8005ab0:	4660      	mov	r0, ip
 8005ab2:	f1b8 0f00 	cmp.w	r8, #0
 8005ab6:	d0a0      	beq.n	80059fa <_strtol_l.constprop.0+0x1a>
 8005ab8:	1e69      	subs	r1, r5, #1
 8005aba:	e006      	b.n	8005aca <_strtol_l.constprop.0+0xea>
 8005abc:	b106      	cbz	r6, 8005ac0 <_strtol_l.constprop.0+0xe0>
 8005abe:	4240      	negs	r0, r0
 8005ac0:	f1b8 0f00 	cmp.w	r8, #0
 8005ac4:	d099      	beq.n	80059fa <_strtol_l.constprop.0+0x1a>
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d1f6      	bne.n	8005ab8 <_strtol_l.constprop.0+0xd8>
 8005aca:	f8c8 1000 	str.w	r1, [r8]
 8005ace:	e794      	b.n	80059fa <_strtol_l.constprop.0+0x1a>
 8005ad0:	08005bad 	.word	0x08005bad

08005ad4 <strtol>:
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	4601      	mov	r1, r0
 8005ada:	4802      	ldr	r0, [pc, #8]	@ (8005ae4 <strtol+0x10>)
 8005adc:	6800      	ldr	r0, [r0, #0]
 8005ade:	f7ff bf7f 	b.w	80059e0 <_strtol_l.constprop.0>
 8005ae2:	bf00      	nop
 8005ae4:	2000000c 	.word	0x2000000c

08005ae8 <memset>:
 8005ae8:	4402      	add	r2, r0
 8005aea:	4603      	mov	r3, r0
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d100      	bne.n	8005af2 <memset+0xa>
 8005af0:	4770      	bx	lr
 8005af2:	f803 1b01 	strb.w	r1, [r3], #1
 8005af6:	e7f9      	b.n	8005aec <memset+0x4>

08005af8 <__errno>:
 8005af8:	4b01      	ldr	r3, [pc, #4]	@ (8005b00 <__errno+0x8>)
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	2000000c 	.word	0x2000000c

08005b04 <__libc_init_array>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4d0d      	ldr	r5, [pc, #52]	@ (8005b3c <__libc_init_array+0x38>)
 8005b08:	4c0d      	ldr	r4, [pc, #52]	@ (8005b40 <__libc_init_array+0x3c>)
 8005b0a:	1b64      	subs	r4, r4, r5
 8005b0c:	10a4      	asrs	r4, r4, #2
 8005b0e:	2600      	movs	r6, #0
 8005b10:	42a6      	cmp	r6, r4
 8005b12:	d109      	bne.n	8005b28 <__libc_init_array+0x24>
 8005b14:	4d0b      	ldr	r5, [pc, #44]	@ (8005b44 <__libc_init_array+0x40>)
 8005b16:	4c0c      	ldr	r4, [pc, #48]	@ (8005b48 <__libc_init_array+0x44>)
 8005b18:	f000 f818 	bl	8005b4c <_init>
 8005b1c:	1b64      	subs	r4, r4, r5
 8005b1e:	10a4      	asrs	r4, r4, #2
 8005b20:	2600      	movs	r6, #0
 8005b22:	42a6      	cmp	r6, r4
 8005b24:	d105      	bne.n	8005b32 <__libc_init_array+0x2e>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2c:	4798      	blx	r3
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7ee      	b.n	8005b10 <__libc_init_array+0xc>
 8005b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b36:	4798      	blx	r3
 8005b38:	3601      	adds	r6, #1
 8005b3a:	e7f2      	b.n	8005b22 <__libc_init_array+0x1e>
 8005b3c:	08005cb8 	.word	0x08005cb8
 8005b40:	08005cb8 	.word	0x08005cb8
 8005b44:	08005cb8 	.word	0x08005cb8
 8005b48:	08005cbc 	.word	0x08005cbc

08005b4c <_init>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr

08005b58 <_fini>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr
