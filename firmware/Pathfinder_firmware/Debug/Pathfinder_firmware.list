
Pathfinder_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c56c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800c700  0800c700  0000d700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb88  0800cb88  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb88  0800cb88  0000db88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb90  0800cb90  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb90  0800cb90  0000db90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb94  0800cb94  0000db94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cb98  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001d8  0800cd6c  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800cd6c  0000e61c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159bd  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbf  00000000  00000000  00023bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00026780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc7  00000000  00000000  00027bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a00  00000000  00000000  00028b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017067  00000000  00000000  00052577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b75  00000000  00000000  000695de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c04  00000000  00000000  00171198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00177d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6e4 	.word	0x0800c6e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c6e4 	.word	0x0800c6e4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <setMovmentSpeed>:
	SET_MOVMENT_SPEED,
	GET_SENSOR_VALUES = 7,
	SET_LED_BRIGHTNESS

};
void setMovmentSpeed(int motorA,int motorB) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	uint8_t motorAOutput = motorA;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	73fb      	strb	r3, [r7, #15]
	uint8_t motorBOutput = motorB;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	73bb      	strb	r3, [r7, #14]
	if(motorA<=100)HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b64      	cmp	r3, #100	@ 0x64
 800101a:	dc05      	bgt.n	8001028 <setMovmentSpeed+0x24>
 800101c:	2200      	movs	r2, #0
 800101e:	2120      	movs	r1, #32
 8001020:	481e      	ldr	r0, [pc, #120]	@ (800109c <setMovmentSpeed+0x98>)
 8001022:	f002 ffd9 	bl	8003fd8 <HAL_GPIO_WritePin>
 8001026:	e007      	b.n	8001038 <setMovmentSpeed+0x34>
	else
	{
		HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2120      	movs	r1, #32
 800102c:	481b      	ldr	r0, [pc, #108]	@ (800109c <setMovmentSpeed+0x98>)
 800102e:	f002 ffd3 	bl	8003fd8 <HAL_GPIO_WritePin>
		motorAOutput = motorAOutput - 100;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3b64      	subs	r3, #100	@ 0x64
 8001036:	73fb      	strb	r3, [r7, #15]
	}

	if(motorB<=100)HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b64      	cmp	r3, #100	@ 0x64
 800103c:	dc07      	bgt.n	800104e <setMovmentSpeed+0x4a>
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f002 ffc6 	bl	8003fd8 <HAL_GPIO_WritePin>
 800104c:	e009      	b.n	8001062 <setMovmentSpeed+0x5e>
	else
	{
		HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f002 ffbe 	bl	8003fd8 <HAL_GPIO_WritePin>
		motorBOutput = motorBOutput - 100;
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	3b64      	subs	r3, #100	@ 0x64
 8001060:	73bb      	strb	r3, [r7, #14]
	}

	if(motorA!=0){
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <setMovmentSpeed+0x6e>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,motorAOutput);
 8001068:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <setMovmentSpeed+0x9c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001070:	e003      	b.n	800107a <setMovmentSpeed+0x76>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <setMovmentSpeed+0x9c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(motorB!=0){
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <setMovmentSpeed+0x86>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,motorBOutput);
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <setMovmentSpeed+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	7bba      	ldrb	r2, [r7, #14]
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
	}




}
 8001088:	e003      	b.n	8001092 <setMovmentSpeed+0x8e>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <setMovmentSpeed+0xa0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	48000400 	.word	0x48000400
 80010a0:	200002a4 	.word	0x200002a4
 80010a4:	20000258 	.word	0x20000258

080010a8 <emergencyStop>:
void emergencyStop() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2120      	movs	r1, #32
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <emergencyStop+0x30>)
 80010b2:	f002 ff91 	bl	8003fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f002 ff8a 	bl	8003fd8 <HAL_GPIO_WritePin>


	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <emergencyStop+0x34>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <emergencyStop+0x38>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	48000400 	.word	0x48000400
 80010dc:	20000258 	.word	0x20000258
 80010e0:	200002a4 	.word	0x200002a4

080010e4 <moveForward>:

void moveForward() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2120      	movs	r1, #32
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <moveForward+0x30>)
 80010ee:	f002 ff73 	bl	8003fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f002 ff6c 	bl	8003fd8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <moveForward+0x34>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2264      	movs	r2, #100	@ 0x64
 8001106:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <moveForward+0x38>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2264      	movs	r2, #100	@ 0x64
 800110e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	48000400 	.word	0x48000400
 8001118:	20000258 	.word	0x20000258
 800111c:	200002a4 	.word	0x200002a4

08001120 <moveReverse>:

void moveReverse() {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2120      	movs	r1, #32
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <moveReverse+0x30>)
 800112a:	f002 ff55 	bl	8003fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001138:	f002 ff4e 	bl	8003fd8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <moveReverse+0x34>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2264      	movs	r2, #100	@ 0x64
 8001142:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <moveReverse+0x38>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2264      	movs	r2, #100	@ 0x64
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400
 8001154:	20000258 	.word	0x20000258
 8001158:	200002a4 	.word	0x200002a4

0800115c <turnRight>:

void turnRight() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2120      	movs	r1, #32
 8001164:	4809      	ldr	r0, [pc, #36]	@ (800118c <turnRight+0x30>)
 8001166:	f002 ff37 	bl	8003fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001174:	f002 ff30 	bl	8003fd8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <turnRight+0x34>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2264      	movs	r2, #100	@ 0x64
 800117e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <turnRight+0x38>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2264      	movs	r2, #100	@ 0x64
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	48000400 	.word	0x48000400
 8001190:	20000258 	.word	0x20000258
 8001194:	200002a4 	.word	0x200002a4

08001198 <turnLeft>:
void turnLeft() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2120      	movs	r1, #32
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <turnLeft+0x30>)
 80011a2:	f002 ff19 	bl	8003fd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f002 ff12 	bl	8003fd8 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <turnLeft+0x34>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2264      	movs	r2, #100	@ 0x64
 80011ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <turnLeft+0x38>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2264      	movs	r2, #100	@ 0x64
 80011c2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48000400 	.word	0x48000400
 80011cc:	20000258 	.word	0x20000258
 80011d0:	200002a4 	.word	0x200002a4

080011d4 <getSensorValues>:
void getSensorValues(){
 80011d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011d8:	b08a      	sub	sp, #40	@ 0x28
 80011da:	af08      	add	r7, sp, #32
	HAL_ADC_Start(&hadc1);
 80011dc:	4844      	ldr	r0, [pc, #272]	@ (80012f0 <getSensorValues+0x11c>)
 80011de:	f001 fbe7 	bl	80029b0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 100);
 80011e2:	2164      	movs	r1, #100	@ 0x64
 80011e4:	4842      	ldr	r0, [pc, #264]	@ (80012f0 <getSensorValues+0x11c>)
 80011e6:	f001 fc9d 	bl	8002b24 <HAL_ADC_PollForConversion>
	sensorsValues[0] = HAL_ADC_GetValue(&hadc1);
 80011ea:	4841      	ldr	r0, [pc, #260]	@ (80012f0 <getSensorValues+0x11c>)
 80011ec:	f001 fd72 	bl	8002cd4 <HAL_ADC_GetValue>
 80011f0:	ee07 0a90 	vmov	s15, r0
 80011f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f8:	4b3e      	ldr	r3, [pc, #248]	@ (80012f4 <getSensorValues+0x120>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]

	HAL_ADC_PollForConversion(&hadc1, 100);
 80011fe:	2164      	movs	r1, #100	@ 0x64
 8001200:	483b      	ldr	r0, [pc, #236]	@ (80012f0 <getSensorValues+0x11c>)
 8001202:	f001 fc8f 	bl	8002b24 <HAL_ADC_PollForConversion>
	sensorsValues[1] = HAL_ADC_GetValue(&hadc1);
 8001206:	483a      	ldr	r0, [pc, #232]	@ (80012f0 <getSensorValues+0x11c>)
 8001208:	f001 fd64 	bl	8002cd4 <HAL_ADC_GetValue>
 800120c:	ee07 0a90 	vmov	s15, r0
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <getSensorValues+0x120>)
 8001216:	edc3 7a01 	vstr	s15, [r3, #4]

	HAL_ADC_PollForConversion(&hadc1, 100);
 800121a:	2164      	movs	r1, #100	@ 0x64
 800121c:	4834      	ldr	r0, [pc, #208]	@ (80012f0 <getSensorValues+0x11c>)
 800121e:	f001 fc81 	bl	8002b24 <HAL_ADC_PollForConversion>
	sensorsValues[2] = HAL_ADC_GetValue(&hadc1);
 8001222:	4833      	ldr	r0, [pc, #204]	@ (80012f0 <getSensorValues+0x11c>)
 8001224:	f001 fd56 	bl	8002cd4 <HAL_ADC_GetValue>
 8001228:	ee07 0a90 	vmov	s15, r0
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <getSensorValues+0x120>)
 8001232:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_ADC_PollForConversion(&hadc1, 100);
 8001236:	2164      	movs	r1, #100	@ 0x64
 8001238:	482d      	ldr	r0, [pc, #180]	@ (80012f0 <getSensorValues+0x11c>)
 800123a:	f001 fc73 	bl	8002b24 <HAL_ADC_PollForConversion>
	sensorsValues[3] = HAL_ADC_GetValue(&hadc1);
 800123e:	482c      	ldr	r0, [pc, #176]	@ (80012f0 <getSensorValues+0x11c>)
 8001240:	f001 fd48 	bl	8002cd4 <HAL_ADC_GetValue>
 8001244:	ee07 0a90 	vmov	s15, r0
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <getSensorValues+0x120>)
 800124e:	edc3 7a03 	vstr	s15, [r3, #12]

	HAL_ADC_PollForConversion(&hadc1, 100);
 8001252:	2164      	movs	r1, #100	@ 0x64
 8001254:	4826      	ldr	r0, [pc, #152]	@ (80012f0 <getSensorValues+0x11c>)
 8001256:	f001 fc65 	bl	8002b24 <HAL_ADC_PollForConversion>
	sensorsValues[4] = HAL_ADC_GetValue(&hadc1);
 800125a:	4825      	ldr	r0, [pc, #148]	@ (80012f0 <getSensorValues+0x11c>)
 800125c:	f001 fd3a 	bl	8002cd4 <HAL_ADC_GetValue>
 8001260:	ee07 0a90 	vmov	s15, r0
 8001264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <getSensorValues+0x120>)
 800126a:	edc3 7a04 	vstr	s15, [r3, #16]



	sprintf(msg, "%f,%f,%f,%f,%f\r\n",sensorsValues[0], sensorsValues[1], sensorsValues[2], sensorsValues[3], sensorsValues[4]);
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <getSensorValues+0x120>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f978 	bl	8000568 <__aeabi_f2d>
 8001278:	e9c7 0100 	strd	r0, r1, [r7]
 800127c:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <getSensorValues+0x120>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f971 	bl	8000568 <__aeabi_f2d>
 8001286:	4604      	mov	r4, r0
 8001288:	460d      	mov	r5, r1
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <getSensorValues+0x120>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f96a 	bl	8000568 <__aeabi_f2d>
 8001294:	4680      	mov	r8, r0
 8001296:	4689      	mov	r9, r1
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <getSensorValues+0x120>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f963 	bl	8000568 <__aeabi_f2d>
 80012a2:	4682      	mov	sl, r0
 80012a4:	468b      	mov	fp, r1
 80012a6:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <getSensorValues+0x120>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f95c 	bl	8000568 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80012b8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80012bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012c0:	e9cd 4500 	strd	r4, r5, [sp]
 80012c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012c8:	490b      	ldr	r1, [pc, #44]	@ (80012f8 <getSensorValues+0x124>)
 80012ca:	480c      	ldr	r0, [pc, #48]	@ (80012fc <getSensorValues+0x128>)
 80012cc:	f007 fe4e 	bl	8008f6c <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg , strlen(msg));
 80012d0:	480a      	ldr	r0, [pc, #40]	@ (80012fc <getSensorValues+0x128>)
 80012d2:	f7fe ffdd 	bl	8000290 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <getSensorValues+0x128>)
 80012de:	4808      	ldr	r0, [pc, #32]	@ (8001300 <getSensorValues+0x12c>)
 80012e0:	f005 fa60 	bl	80067a4 <HAL_UART_Transmit_IT>



}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012ee:	bf00      	nop
 80012f0:	200001f4 	.word	0x200001f4
 80012f4:	20000450 	.word	0x20000450
 80012f8:	0800c700 	.word	0x0800c700
 80012fc:	20000464 	.word	0x20000464
 8001300:	2000033c 	.word	0x2000033c

08001304 <setLedBrightness>:
void setLedBrightness(int brightness) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,brightness);
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <setLedBrightness+0x1c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	200002f0 	.word	0x200002f0

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 ff6c 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f830 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f000 faca 	bl	80018c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001334:	f000 fa98 	bl	8001868 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001338:	f000 f934 	bl	80015a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800133c:	f000 f9a8 	bl	8001690 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001340:	f000 fa1c 	bl	800177c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001344:	f000 f876 	bl	8001434 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	490b      	ldr	r1, [pc, #44]	@ (8001378 <main+0x54>)
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <main+0x58>)
 800134e:	f005 fa87 	bl	8006860 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001352:	2108      	movs	r1, #8
 8001354:	480a      	ldr	r0, [pc, #40]	@ (8001380 <main+0x5c>)
 8001356:	f004 fa2f 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800135a:	2100      	movs	r1, #0
 800135c:	4809      	ldr	r0, [pc, #36]	@ (8001384 <main+0x60>)
 800135e:	f004 fa2b 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001362:	2100      	movs	r1, #0
 8001364:	4808      	ldr	r0, [pc, #32]	@ (8001388 <main+0x64>)
 8001366:	f004 fa27 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800136a:	217f      	movs	r1, #127	@ 0x7f
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <main+0x68>)
 800136e:	f002 f9e9 	bl	8003744 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001372:	bf00      	nop
 8001374:	e7fd      	b.n	8001372 <main+0x4e>
 8001376:	bf00      	nop
 8001378:	200003c4 	.word	0x200003c4
 800137c:	2000033c 	.word	0x2000033c
 8001380:	20000258 	.word	0x20000258
 8001384:	200002a4 	.word	0x200002a4
 8001388:	200002f0 	.word	0x200002f0
 800138c:	200001f4 	.word	0x200001f4

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b096      	sub	sp, #88	@ 0x58
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2244      	movs	r2, #68	@ 0x44
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fe47 	bl	8009032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013b6:	f002 fe35 	bl	8004024 <HAL_PWREx_ControlVoltageScaling>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013c0:	f000 fbf0 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c4:	2302      	movs	r3, #2
 80013c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ce:	2310      	movs	r3, #16
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d6:	2302      	movs	r3, #2
 80013d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013de:	230a      	movs	r3, #10
 80013e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013e2:	2307      	movs	r3, #7
 80013e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fe6c 	bl	80040d0 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013fe:	f000 fbd1 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2303      	movs	r3, #3
 8001408:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2104      	movs	r1, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fa34 	bl	8004888 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001426:	f000 fbbd 	bl	8001ba4 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3758      	adds	r7, #88	@ 0x58
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001456:	4b4c      	ldr	r3, [pc, #304]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001458:	4a4c      	ldr	r2, [pc, #304]	@ (800158c <MX_ADC1_Init+0x158>)
 800145a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800145c:	4b4a      	ldr	r3, [pc, #296]	@ (8001588 <MX_ADC1_Init+0x154>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001462:	4b49      	ldr	r3, [pc, #292]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001468:	4b47      	ldr	r3, [pc, #284]	@ (8001588 <MX_ADC1_Init+0x154>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800146e:	4b46      	ldr	r3, [pc, #280]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001470:	2201      	movs	r2, #1
 8001472:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001474:	4b44      	ldr	r3, [pc, #272]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001476:	2204      	movs	r2, #4
 8001478:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800147a:	4b43      	ldr	r3, [pc, #268]	@ (8001588 <MX_ADC1_Init+0x154>)
 800147c:	2200      	movs	r2, #0
 800147e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001480:	4b41      	ldr	r3, [pc, #260]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001482:	2200      	movs	r2, #0
 8001484:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8001486:	4b40      	ldr	r3, [pc, #256]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001488:	2205      	movs	r2, #5
 800148a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148c:	4b3e      	ldr	r3, [pc, #248]	@ (8001588 <MX_ADC1_Init+0x154>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001494:	4b3c      	ldr	r3, [pc, #240]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149a:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <MX_ADC1_Init+0x154>)
 800149c:	2200      	movs	r2, #0
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014a0:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <MX_ADC1_Init+0x154>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014a8:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <MX_ADC1_Init+0x154>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014ae:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <MX_ADC1_Init+0x154>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b6:	4834      	ldr	r0, [pc, #208]	@ (8001588 <MX_ADC1_Init+0x154>)
 80014b8:	f001 f92a 	bl	8002710 <HAL_ADC_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014c2:	f000 fb6f 	bl	8001ba4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	482d      	ldr	r0, [pc, #180]	@ (8001588 <MX_ADC1_Init+0x154>)
 80014d2:	f002 f997 	bl	8003804 <HAL_ADCEx_MultiModeConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014dc:	f000 fb62 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <MX_ADC1_Init+0x15c>)
 80014e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014e4:	2306      	movs	r3, #6
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014e8:	2307      	movs	r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ec:	237f      	movs	r3, #127	@ 0x7f
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014f0:	2304      	movs	r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4822      	ldr	r0, [pc, #136]	@ (8001588 <MX_ADC1_Init+0x154>)
 80014fe:	f001 fbf7 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001508:	f000 fb4c 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800150c:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <MX_ADC1_Init+0x160>)
 800150e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001510:	230c      	movs	r3, #12
 8001512:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	481b      	ldr	r0, [pc, #108]	@ (8001588 <MX_ADC1_Init+0x154>)
 800151a:	f001 fbe9 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001524:	f000 fb3e 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <MX_ADC1_Init+0x164>)
 800152a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800152c:	2312      	movs	r3, #18
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4814      	ldr	r0, [pc, #80]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001536:	f001 fbdb 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001540:	f000 fb30 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <MX_ADC1_Init+0x168>)
 8001546:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001548:	2318      	movs	r3, #24
 800154a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	480d      	ldr	r0, [pc, #52]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001552:	f001 fbcd 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 800155c:	f000 fb22 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <MX_ADC1_Init+0x16c>)
 8001562:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <MX_ADC1_Init+0x154>)
 8001570:	f001 fbbe 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 800157a:	f000 fb13 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001f4 	.word	0x200001f4
 800158c:	50040000 	.word	0x50040000
 8001590:	08600004 	.word	0x08600004
 8001594:	14f00020 	.word	0x14f00020
 8001598:	19200040 	.word	0x19200040
 800159c:	25b00200 	.word	0x25b00200
 80015a0:	3ef08000 	.word	0x3ef08000

080015a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08e      	sub	sp, #56	@ 0x38
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015e0:	2227      	movs	r2, #39	@ 0x27
 80015e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80015ea:	4b28      	ldr	r3, [pc, #160]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015ec:	2263      	movs	r2, #99	@ 0x63
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b26      	ldr	r3, [pc, #152]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fc:	4823      	ldr	r0, [pc, #140]	@ (800168c <MX_TIM2_Init+0xe8>)
 80015fe:	f004 f823 	bl	8005648 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001608:	f000 facc 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001616:	4619      	mov	r1, r3
 8001618:	481c      	ldr	r0, [pc, #112]	@ (800168c <MX_TIM2_Init+0xe8>)
 800161a:	f004 fae7 	bl	8005bec <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001624:	f000 fabe 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001628:	4818      	ldr	r0, [pc, #96]	@ (800168c <MX_TIM2_Init+0xe8>)
 800162a:	f004 f864 	bl	80056f6 <HAL_TIM_PWM_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001634:	f000 fab6 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	@ (800168c <MX_TIM2_Init+0xe8>)
 8001648:	f004 ffd6 	bl	80065f8 <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001652:	f000 faa7 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001656:	2360      	movs	r3, #96	@ 0x60
 8001658:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	2208      	movs	r2, #8
 800166a:	4619      	mov	r1, r3
 800166c:	4807      	ldr	r0, [pc, #28]	@ (800168c <MX_TIM2_Init+0xe8>)
 800166e:	f004 f9a9 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001678:	f000 fa94 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800167c:	4803      	ldr	r0, [pc, #12]	@ (800168c <MX_TIM2_Init+0xe8>)
 800167e:	f000 fba3 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	@ 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000258 	.word	0x20000258

08001690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08e      	sub	sp, #56	@ 0x38
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b0:	463b      	mov	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001774 <MX_TIM3_Init+0xe4>)
 80016c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <MX_TIM3_Init+0xe8>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <MX_TIM3_Init+0xe4>)
 80016ca:	2227      	movs	r2, #39	@ 0x27
 80016cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <MX_TIM3_Init+0xe4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <MX_TIM3_Init+0xe4>)
 80016d6:	2263      	movs	r2, #99	@ 0x63
 80016d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <MX_TIM3_Init+0xe4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016e0:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <MX_TIM3_Init+0xe4>)
 80016e2:	2280      	movs	r2, #128	@ 0x80
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e6:	4823      	ldr	r0, [pc, #140]	@ (8001774 <MX_TIM3_Init+0xe4>)
 80016e8:	f003 ffae 	bl	8005648 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016f2:	f000 fa57 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001700:	4619      	mov	r1, r3
 8001702:	481c      	ldr	r0, [pc, #112]	@ (8001774 <MX_TIM3_Init+0xe4>)
 8001704:	f004 fa72 	bl	8005bec <HAL_TIM_ConfigClockSource>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800170e:	f000 fa49 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001712:	4818      	ldr	r0, [pc, #96]	@ (8001774 <MX_TIM3_Init+0xe4>)
 8001714:	f003 ffef 	bl	80056f6 <HAL_TIM_PWM_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800171e:	f000 fa41 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4810      	ldr	r0, [pc, #64]	@ (8001774 <MX_TIM3_Init+0xe4>)
 8001732:	f004 ff61 	bl	80065f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800173c:	f000 fa32 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001740:	2360      	movs	r3, #96	@ 0x60
 8001742:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <MX_TIM3_Init+0xe4>)
 8001758:	f004 f934 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001762:	f000 fa1f 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001766:	4803      	ldr	r0, [pc, #12]	@ (8001774 <MX_TIM3_Init+0xe4>)
 8001768:	f000 fb2e 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 800176c:	bf00      	nop
 800176e:	3738      	adds	r7, #56	@ 0x38
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200002a4 	.word	0x200002a4
 8001778:	40000400 	.word	0x40000400

0800177c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	@ 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	615a      	str	r2, [r3, #20]
 80017ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001864 <MX_TIM4_Init+0xe8>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017b6:	2227      	movs	r2, #39	@ 0x27
 80017b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017c2:	2263      	movs	r2, #99	@ 0x63
 80017c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017d2:	4823      	ldr	r0, [pc, #140]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017d4:	f003 ff38 	bl	8005648 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80017de:	f000 f9e1 	bl	8001ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ec:	4619      	mov	r1, r3
 80017ee:	481c      	ldr	r0, [pc, #112]	@ (8001860 <MX_TIM4_Init+0xe4>)
 80017f0:	f004 f9fc 	bl	8005bec <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80017fa:	f000 f9d3 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017fe:	4818      	ldr	r0, [pc, #96]	@ (8001860 <MX_TIM4_Init+0xe4>)
 8001800:	f003 ff79 	bl	80056f6 <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800180a:	f000 f9cb 	bl	8001ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4810      	ldr	r0, [pc, #64]	@ (8001860 <MX_TIM4_Init+0xe4>)
 800181e:	f004 feeb 	bl	80065f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001828:	f000 f9bc 	bl	8001ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	@ 0x60
 800182e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	@ (8001860 <MX_TIM4_Init+0xe4>)
 8001844:	f004 f8be 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800184e:	f000 f9a9 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001852:	4803      	ldr	r0, [pc, #12]	@ (8001860 <MX_TIM4_Init+0xe4>)
 8001854:	f000 fab8 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	@ 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200002f0 	.word	0x200002f0
 8001864:	40000800 	.word	0x40000800

08001868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 800186e:	4a15      	ldr	r2, [pc, #84]	@ (80018c4 <MX_USART2_UART_Init+0x5c>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <MX_USART2_UART_Init+0x58>)
 80018ac:	f004 ff2c 	bl	8006708 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018b6:	f000 f975 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000033c 	.word	0x2000033c
 80018c4:	40004400 	.word	0x40004400

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b36      	ldr	r3, [pc, #216]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a35      	ldr	r2, [pc, #212]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b33      	ldr	r3, [pc, #204]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f6:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	4a2f      	ldr	r2, [pc, #188]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 80018fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001902:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_GPIO_Init+0xf0>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_B_DIRECTION_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001948:	f002 fb46 	bl	8003fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port, MOTOR_A_DIRECTION_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	2120      	movs	r1, #32
 8001950:	481a      	ldr	r0, [pc, #104]	@ (80019bc <MX_GPIO_Init+0xf4>)
 8001952:	f002 fb41 	bl	8003fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800195c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4814      	ldr	r0, [pc, #80]	@ (80019c0 <MX_GPIO_Init+0xf8>)
 800196e:	f002 f989 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_B_DIRECTION_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_B_DIRECTION_Pin;
 8001972:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198e:	f002 f979 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_A_DIRECTION_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIRECTION_Pin;
 8001992:	2320      	movs	r3, #32
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_A_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_GPIO_Init+0xf4>)
 80019aa:	f002 f96b 	bl	8003c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	48000800 	.word	0x48000800

080019c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001b88 <HAL_UART_RxCpltCallback+0x1c4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	f040 80d1 	bne.w	8001b7c <HAL_UART_RxCpltCallback+0x1b8>
		if(receivedSign == '\n'){
 80019da:	4b6c      	ldr	r3, [pc, #432]	@ (8001b8c <HAL_UART_RxCpltCallback+0x1c8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	f040 809d 	bne.w	8001b1e <HAL_UART_RxCpltCallback+0x15a>
			frameReceived[frameCursor] = atoi(messageReceived);
 80019e4:	486a      	ldr	r0, [pc, #424]	@ (8001b90 <HAL_UART_RxCpltCallback+0x1cc>)
 80019e6:	f006 fb09 	bl	8007ffc <atoi>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a69      	ldr	r2, [pc, #420]	@ (8001b94 <HAL_UART_RxCpltCallback+0x1d0>)
 80019ee:	7812      	ldrb	r2, [r2, #0]
 80019f0:	4611      	mov	r1, r2
 80019f2:	17da      	asrs	r2, r3, #31
 80019f4:	4698      	mov	r8, r3
 80019f6:	4691      	mov	r9, r2
 80019f8:	4a67      	ldr	r2, [pc, #412]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 80019fa:	00cb      	lsls	r3, r1, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	e9c3 8900 	strd	r8, r9, [r3]
			if(strcmp(frameReceived[0], EMERGENCY_STOP ) == 0) emergencyStop();
 8001a02:	4b65      	ldr	r3, [pc, #404]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fbdf 	bl	80001d0 <strcmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <HAL_UART_RxCpltCallback+0x5a>
 8001a18:	f7ff fb46 	bl	80010a8 <emergencyStop>
 8001a1c:	e06e      	b.n	8001afc <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_FORWARD) == 0)moveForward();
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	4613      	mov	r3, r2
 8001a26:	2101      	movs	r1, #1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fbd1 	bl	80001d0 <strcmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <HAL_UART_RxCpltCallback+0x76>
 8001a34:	f7ff fb56 	bl	80010e4 <moveForward>
 8001a38:	e060      	b.n	8001afc <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_REVERSE) == 0)moveReverse();
 8001a3a:	4b57      	ldr	r3, [pc, #348]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	4613      	mov	r3, r2
 8001a42:	2102      	movs	r1, #2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fbc3 	bl	80001d0 <strcmp>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <HAL_UART_RxCpltCallback+0x92>
 8001a50:	f7ff fb66 	bl	8001120 <moveReverse>
 8001a54:	e052      	b.n	8001afc <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_LEFT) == 0)turnLeft();
 8001a56:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fbb5 	bl	80001d0 <strcmp>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <HAL_UART_RxCpltCallback+0xae>
 8001a6c:	f7ff fb94 	bl	8001198 <turnLeft>
 8001a70:	e044      	b.n	8001afc <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_RIGHT) == 0)turnRight();
 8001a72:	4b49      	ldr	r3, [pc, #292]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fba7 	bl	80001d0 <strcmp>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <HAL_UART_RxCpltCallback+0xca>
 8001a88:	f7ff fb68 	bl	800115c <turnRight>
 8001a8c:	e036      	b.n	8001afc <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_MOVMENT_SPEED) == 0)setMovmentSpeed(frameReceived[1], frameReceived[2]);
 8001a8e:	4b42      	ldr	r3, [pc, #264]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	4613      	mov	r3, r2
 8001a96:	2105      	movs	r1, #5
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fb99 	bl	80001d0 <strcmp>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10b      	bne.n	8001abc <HAL_UART_RxCpltCallback+0xf8>
 8001aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001aa6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4b3a      	ldr	r3, [pc, #232]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001aae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff faa5 	bl	8001004 <setMovmentSpeed>
 8001aba:	e01f      	b.n	8001afc <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], GET_SENSOR_VALUES) == 0)getSensorValues();
 8001abc:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	2107      	movs	r1, #7
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fb82 	bl	80001d0 <strcmp>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0x114>
 8001ad2:	f7ff fb7f 	bl	80011d4 <getSensorValues>
 8001ad6:	e011      	b.n	8001afc <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_LED_BRIGHTNESS) == 0)setLedBrightness(frameReceived[1]);
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fb74 	bl	80001d0 <strcmp>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_UART_RxCpltCallback+0x138>
 8001aee:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001af0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001af4:	4613      	mov	r3, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc04 	bl	8001304 <setLedBrightness>
			memset(messageReceived, 0, 50);
 8001afc:	2232      	movs	r2, #50	@ 0x32
 8001afe:	2100      	movs	r1, #0
 8001b00:	4823      	ldr	r0, [pc, #140]	@ (8001b90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b02:	f007 fa96 	bl	8009032 <memset>
			memset(frameReceived, 0, 10);
 8001b06:	220a      	movs	r2, #10
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4823      	ldr	r0, [pc, #140]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001b0c:	f007 fa91 	bl	8009032 <memset>
			messageCursor = 0;
 8001b10:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <HAL_UART_RxCpltCallback+0x1d8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
			frameCursor = 0;
 8001b16:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e029      	b.n	8001b72 <HAL_UART_RxCpltCallback+0x1ae>
		}
		else if(receivedSign == ' '){
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d11a      	bne.n	8001b5c <HAL_UART_RxCpltCallback+0x198>
			frameReceived[frameCursor++] = atoi(messageReceived);
 8001b26:	481a      	ldr	r0, [pc, #104]	@ (8001b90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b28:	f006 fa68 	bl	8007ffc <atoi>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	1c59      	adds	r1, r3, #1
 8001b34:	b2c8      	uxtb	r0, r1
 8001b36:	4917      	ldr	r1, [pc, #92]	@ (8001b94 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b38:	7008      	strb	r0, [r1, #0]
 8001b3a:	17d1      	asrs	r1, r2, #31
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	460d      	mov	r5, r1
 8001b40:	4a15      	ldr	r2, [pc, #84]	@ (8001b98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	e9c3 4500 	strd	r4, r5, [r3]
			messageCursor = 0;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <HAL_UART_RxCpltCallback+0x1d8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
			memset(messageReceived, 0, 50);
 8001b50:	2232      	movs	r2, #50	@ 0x32
 8001b52:	2100      	movs	r1, #0
 8001b54:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b56:	f007 fa6c 	bl	8009032 <memset>
 8001b5a:	e00a      	b.n	8001b72 <HAL_UART_RxCpltCallback+0x1ae>
		}
		else messageReceived[messageCursor++] = (char)receivedSign;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <HAL_UART_RxCpltCallback+0x1d8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	b2d1      	uxtb	r1, r2
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <HAL_UART_RxCpltCallback+0x1d8>)
 8001b66:	7011      	strb	r1, [r2, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001b6c:	7819      	ldrb	r1, [r3, #0]
 8001b6e:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b70:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	4905      	ldr	r1, [pc, #20]	@ (8001b8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001b76:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001b78:	f004 fe72 	bl	8006860 <HAL_UART_Receive_IT>
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b86:	bf00      	nop
 8001b88:	40004400 	.word	0x40004400
 8001b8c:	200003c4 	.word	0x200003c4
 8001b90:	200003c8 	.word	0x200003c8
 8001b94:	200003c6 	.word	0x200003c6
 8001b98:	20000400 	.word	0x20000400
 8001b9c:	200003c5 	.word	0x200003c5
 8001ba0:	2000033c 	.word	0x2000033c

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <Error_Handler+0x8>

08001bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <HAL_MspInit+0x44>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bba:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <HAL_MspInit+0x44>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <HAL_MspInit+0x44>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_MspInit+0x44>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	4a08      	ldr	r2, [pc, #32]	@ (8001bf4 <HAL_MspInit+0x44>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_MspInit+0x44>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0ae      	sub	sp, #184	@ 0xb8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2288      	movs	r2, #136	@ 0x88
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f007 fa0a 	bl	8009032 <memset>
  if(hadc->Instance==ADC1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a42      	ldr	r2, [pc, #264]	@ (8001d2c <HAL_ADC_MspInit+0x134>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d17d      	bne.n	8001d24 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c2c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001c36:	2302      	movs	r3, #2
 8001c38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c3e:	2308      	movs	r3, #8
 8001c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c42:	2307      	movs	r3, #7
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c52:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 f839 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c64:	f7ff ff9e 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c68:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	4a30      	ldr	r2, [pc, #192]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c74:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c84:	4a2a      	ldr	r2, [pc, #168]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8c:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	4a24      	ldr	r2, [pc, #144]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <HAL_ADC_MspInit+0x138>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cce:	230b      	movs	r3, #11
 8001cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <HAL_ADC_MspInit+0x13c>)
 8001ce2:	f001 ffcf 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001ce6:	2313      	movs	r3, #19
 8001ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cec:	230b      	movs	r3, #11
 8001cee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d02:	f001 ffbf 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d0c:	230b      	movs	r3, #11
 8001d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	@ (8001d38 <HAL_ADC_MspInit+0x140>)
 8001d20:	f001 ffb0 	bl	8003c84 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d24:	bf00      	nop
 8001d26:	37b8      	adds	r7, #184	@ 0xb8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	50040000 	.word	0x50040000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000800 	.word	0x48000800
 8001d38:	48000400 	.word	0x48000400

08001d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	4a1a      	ldr	r2, [pc, #104]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d66:	e022      	b.n	8001dae <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a14      	ldr	r2, [pc, #80]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10c      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
}
 8001d8a:	e010      	b.n	8001dae <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x88>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d10b      	bne.n	8001dae <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	4a08      	ldr	r2, [pc, #32]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_TIM_Base_MspInit+0x80>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800

08001dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de8:	d11d      	bne.n	8001e26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b32      	ldr	r3, [pc, #200]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	4a31      	ldr	r2, [pc, #196]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df6:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_B_SPEED_Pin;
 8001e02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e14:	2301      	movs	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEED_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4826      	ldr	r0, [pc, #152]	@ (8001eb8 <HAL_TIM_MspPostInit+0xf0>)
 8001e20:	f001 ff30 	bl	8003c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e24:	e042      	b.n	8001eac <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a24      	ldr	r2, [pc, #144]	@ (8001ebc <HAL_TIM_MspPostInit+0xf4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d11c      	bne.n	8001e6a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e34:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_B_SPEEDB4_Pin;
 8001e48:	2310      	movs	r3, #16
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEEDB4_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4815      	ldr	r0, [pc, #84]	@ (8001eb8 <HAL_TIM_MspPostInit+0xf0>)
 8001e64:	f001 ff0e 	bl	8003c84 <HAL_GPIO_Init>
}
 8001e68:	e020      	b.n	8001eac <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <HAL_TIM_MspPostInit+0xf8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d11b      	bne.n	8001eac <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <HAL_TIM_MspPostInit+0xec>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8001e8c:	2340      	movs	r3, #64	@ 0x40
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <HAL_TIM_MspPostInit+0xf0>)
 8001ea8:	f001 feec 	bl	8003c84 <HAL_GPIO_Init>
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	@ 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2288      	movs	r2, #136	@ 0x88
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f007 f8a4 	bl	8009032 <memset>
  if(huart->Instance==USART2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a25      	ldr	r2, [pc, #148]	@ (8001f84 <HAL_UART_MspInit+0xc0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d143      	bne.n	8001f7c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fee5 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f0c:	f7ff fe4a 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_UART_MspInit+0xc4>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_UART_MspInit+0xc4>)
 8001f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_UART_MspInit+0xc4>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_UART_MspInit+0xc4>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2c:	4a16      	ldr	r2, [pc, #88]	@ (8001f88 <HAL_UART_MspInit+0xc4>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_UART_MspInit+0xc4>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f40:	230c      	movs	r3, #12
 8001f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f62:	4619      	mov	r1, r3
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f68:	f001 fe8c 	bl	8003c84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2026      	movs	r0, #38	@ 0x26
 8001f72:	f001 fdd2 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f76:	2026      	movs	r0, #38	@ 0x26
 8001f78:	f001 fdeb 	bl	8003b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f7c:	bf00      	nop
 8001f7e:	37b0      	adds	r7, #176	@ 0xb0
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40004400 	.word	0x40004400
 8001f88:	40021000 	.word	0x40021000

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <NMI_Handler+0x4>

08001f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe2:	f000 f96b 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <USART2_IRQHandler+0x10>)
 8001ff2:	f004 fc81 	bl	80068f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000033c 	.word	0x2000033c

08002000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return 1;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_kill>:

int _kill(int pid, int sig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800201a:	f007 f85d 	bl	80090d8 <__errno>
 800201e:	4603      	mov	r3, r0
 8002020:	2216      	movs	r2, #22
 8002022:	601a      	str	r2, [r3, #0]
  return -1;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_exit>:

void _exit (int status)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ffe7 	bl	8002010 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002042:	bf00      	nop
 8002044:	e7fd      	b.n	8002042 <_exit+0x12>

08002046 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e00a      	b.n	800206e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002058:	f3af 8000 	nop.w
 800205c:	4601      	mov	r1, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	60ba      	str	r2, [r7, #8]
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	dbf0      	blt.n	8002058 <_read+0x12>
  }

  return len;
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e009      	b.n	80020a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	60ba      	str	r2, [r7, #8]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dbf1      	blt.n	8002092 <_write+0x12>
  }
  return len;
 80020ae:	687b      	ldr	r3, [r7, #4]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_close>:

int _close(int file)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e0:	605a      	str	r2, [r3, #4]
  return 0;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_isatty>:

int _isatty(int file)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f006 ffc2 	bl	80090d8 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20018000 	.word	0x20018000
 8002180:	00000400 	.word	0x00000400
 8002184:	200004c8 	.word	0x200004c8
 8002188:	20000620 	.word	0x20000620

0800218c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021b4:	f7ff ffea 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <LoopForever+0x6>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <LoopForever+0xe>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <LoopForever+0x16>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021de:	f006 ff81 	bl	80090e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021e2:	f7ff f89f 	bl	8001324 <main>

080021e6 <LoopForever>:

LoopForever:
    b LoopForever
 80021e6:	e7fe      	b.n	80021e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021f4:	0800cb98 	.word	0x0800cb98
  ldr r2, =_sbss
 80021f8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021fc:	2000061c 	.word	0x2000061c

08002200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC1_2_IRQHandler>
	...

08002204 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <HAL_Init+0x3c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <HAL_Init+0x3c>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002218:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	2003      	movs	r0, #3
 800221c:	f001 fc72 	bl	8003b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002220:	2000      	movs	r0, #0
 8002222:	f000 f80f 	bl	8002244 <HAL_InitTick>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	e001      	b.n	8002236 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002232:	f7ff fcbd 	bl	8001bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002236:	79fb      	ldrb	r3, [r7, #7]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <HAL_InitTick+0x6c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002258:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_InitTick+0x70>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <HAL_InitTick+0x6c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fc7d 	bl	8003b6e <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d809      	bhi.n	8002294 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002280:	2200      	movs	r2, #0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f001 fc47 	bl	8003b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800228c:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <HAL_InitTick+0x74>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e007      	b.n	80022a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e004      	b.n	80022a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e001      	b.n	80022a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000008 	.word	0x20000008
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000008 	.word	0x20000008
 80022e0:	200004cc 	.word	0x200004cc

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200004cc 	.word	0x200004cc

080022fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3360      	adds	r3, #96	@ 0x60
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <LL_ADC_SetOffset+0x44>)
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	4313      	orrs	r3, r2
 8002394:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800239c:	bf00      	nop
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	03fff000 	.word	0x03fff000

080023ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3360      	adds	r3, #96	@ 0x60
 80023ba:	461a      	mov	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3360      	adds	r3, #96	@ 0x60
 80023e8:	461a      	mov	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3330      	adds	r3, #48	@ 0x30
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	211f      	movs	r1, #31
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 011f 	and.w	r1, r3, #31
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3314      	adds	r3, #20
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	0e5b      	lsrs	r3, r3, #25
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	4413      	add	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	0d1b      	lsrs	r3, r3, #20
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2107      	movs	r1, #7
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	401a      	ands	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	0d1b      	lsrs	r3, r3, #20
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0318 	and.w	r3, r3, #24
 8002506:	4908      	ldr	r1, [pc, #32]	@ (8002528 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002508:	40d9      	lsrs	r1, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	400b      	ands	r3, r1
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	431a      	orrs	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	0007ffff 	.word	0x0007ffff

0800252c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 031f 	and.w	r3, r3, #31
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6093      	str	r3, [r2, #8]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800259c:	d101      	bne.n	80025a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025ec:	d101      	bne.n	80025f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <LL_ADC_IsEnabled+0x18>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <LL_ADC_IsEnabled+0x1a>
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d101      	bne.n	800268e <LL_ADC_IsDisableOngoing+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_ADC_IsDisableOngoing+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d101      	bne.n	80026dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d101      	bne.n	8002702 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b089      	sub	sp, #36	@ 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e130      	b.n	800298c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fa5d 	bl	8001bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff19 	bl	8002588 <LL_ADC_IsDeepPowerDownEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff feff 	bl	8002564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff34 	bl	80025d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff18 	bl	80025b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002780:	4b84      	ldr	r3, [pc, #528]	@ (8002994 <HAL_ADC_Init+0x284>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	4a84      	ldr	r2, [pc, #528]	@ (8002998 <HAL_ADC_Init+0x288>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	3301      	adds	r3, #1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002794:	e002      	b.n	800279c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3b01      	subs	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff16 	bl	80025d8 <LL_ADC_IsInternalRegulatorEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff76 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 80c9 	bne.w	800297a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 80c5 	bne.w	800297a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027f8:	f043 0202 	orr.w	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff23 	bl	8002650 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d115      	bne.n	800283c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002810:	4862      	ldr	r0, [pc, #392]	@ (800299c <HAL_ADC_Init+0x28c>)
 8002812:	f7ff ff1d 	bl	8002650 <LL_ADC_IsEnabled>
 8002816:	4604      	mov	r4, r0
 8002818:	4861      	ldr	r0, [pc, #388]	@ (80029a0 <HAL_ADC_Init+0x290>)
 800281a:	f7ff ff19 	bl	8002650 <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	431c      	orrs	r4, r3
 8002822:	4860      	ldr	r0, [pc, #384]	@ (80029a4 <HAL_ADC_Init+0x294>)
 8002824:	f7ff ff14 	bl	8002650 <LL_ADC_IsEnabled>
 8002828:	4603      	mov	r3, r0
 800282a:	4323      	orrs	r3, r4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	485c      	ldr	r0, [pc, #368]	@ (80029a8 <HAL_ADC_Init+0x298>)
 8002838:	f7ff fd60 	bl	80022fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e5b      	ldrb	r3, [r3, #25]
 8002840:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002846:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800284c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002852:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d106      	bne.n	8002878 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	3b01      	subs	r3, #1
 8002870:	045b      	lsls	r3, r3, #17
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	4b44      	ldr	r3, [pc, #272]	@ (80029ac <HAL_ADC_Init+0x29c>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff1c 	bl	80026ea <LL_ADC_INJ_IsConversionOngoing>
 80028b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d13d      	bne.n	8002936 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13a      	bne.n	8002936 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	430b      	orrs	r3, r1
 80028e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d118      	bne.n	8002926 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002916:	430a      	orrs	r2, r1
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	611a      	str	r2, [r3, #16]
 8002924:	e007      	b.n	8002936 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10c      	bne.n	8002958 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	f023 010f 	bic.w	r1, r3, #15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	631a      	str	r2, [r3, #48]	@ 0x30
 8002956:	e007      	b.n	8002968 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020f 	bic.w	r2, r2, #15
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	f023 0303 	bic.w	r3, r3, #3
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
 8002978:	e007      	b.n	800298a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800298a:	7ffb      	ldrb	r3, [r7, #31]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3724      	adds	r7, #36	@ 0x24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	20000000 	.word	0x20000000
 8002998:	053e2d63 	.word	0x053e2d63
 800299c:	50040000 	.word	0x50040000
 80029a0:	50040100 	.word	0x50040100
 80029a4:	50040200 	.word	0x50040200
 80029a8:	50040300 	.word	0x50040300
 80029ac:	fff0c007 	.word	0xfff0c007

080029b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b8:	4857      	ldr	r0, [pc, #348]	@ (8002b18 <HAL_ADC_Start+0x168>)
 80029ba:	f7ff fdb7 	bl	800252c <LL_ADC_GetMultimode>
 80029be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fe7d 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 809c 	bne.w	8002b0a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_Start+0x30>
 80029dc:	2302      	movs	r3, #2
 80029de:	e097      	b.n	8002b10 <HAL_ADC_Start+0x160>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fd73 	bl	80034d4 <ADC_Enable>
 80029ee:	4603      	mov	r3, r0
 80029f0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8083 	bne.w	8002b00 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a42      	ldr	r2, [pc, #264]	@ (8002b1c <HAL_ADC_Start+0x16c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d002      	beq.n	8002a1e <HAL_ADC_Start+0x6e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	e000      	b.n	8002a20 <HAL_ADC_Start+0x70>
 8002a1e:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <HAL_ADC_Start+0x170>)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d002      	beq.n	8002a2e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a46:	d106      	bne.n	8002a56 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	f023 0206 	bic.w	r2, r3, #6
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	221c      	movs	r2, #28
 8002a62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2a      	ldr	r2, [pc, #168]	@ (8002b1c <HAL_ADC_Start+0x16c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d002      	beq.n	8002a7c <HAL_ADC_Start+0xcc>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	e000      	b.n	8002a7e <HAL_ADC_Start+0xce>
 8002a7c:	4b28      	ldr	r3, [pc, #160]	@ (8002b20 <HAL_ADC_Start+0x170>)
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d008      	beq.n	8002a98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d002      	beq.n	8002a98 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	d114      	bne.n	8002ac2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aaa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fdee 	bl	800269c <LL_ADC_REG_StartConversion>
 8002ac0:	e025      	b.n	8002b0e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <HAL_ADC_Start+0x16c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d002      	beq.n	8002ade <HAL_ADC_Start+0x12e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	e000      	b.n	8002ae0 <HAL_ADC_Start+0x130>
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <HAL_ADC_Start+0x170>)
 8002ae0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00f      	beq.n	8002b0e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002af6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002afe:	e006      	b.n	8002b0e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002b08:	e001      	b.n	8002b0e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	50040300 	.word	0x50040300
 8002b1c:	50040100 	.word	0x50040100
 8002b20:	50040000 	.word	0x50040000

08002b24 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b2e:	4866      	ldr	r0, [pc, #408]	@ (8002cc8 <HAL_ADC_PollForConversion+0x1a4>)
 8002b30:	f7ff fcfc 	bl	800252c <LL_ADC_GetMultimode>
 8002b34:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d102      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e02a      	b.n	8002b9a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d002      	beq.n	8002b56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b09      	cmp	r3, #9
 8002b54:	d111      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0a4      	b.n	8002cbe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b74:	2304      	movs	r3, #4
 8002b76:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b78:	e00f      	b.n	8002b9a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b7a:	4853      	ldr	r0, [pc, #332]	@ (8002cc8 <HAL_ADC_PollForConversion+0x1a4>)
 8002b7c:	f7ff fce4 	bl	8002548 <LL_ADC_GetMultiDMATransfer>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0220 	orr.w	r2, r3, #32
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e093      	b.n	8002cbe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b96:	2304      	movs	r3, #4
 8002b98:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b9a:	f7ff fba3 	bl	80022e4 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ba0:	e021      	b.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d01d      	beq.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002baa:	f7ff fb9b 	bl	80022e4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <HAL_ADC_PollForConversion+0x9c>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d112      	bne.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e06b      	b.n	8002cbe <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0d6      	beq.n	8002ba2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fc02 	bl	800240e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01c      	beq.n	8002c4a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7e5b      	ldrb	r3, [r3, #25]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d118      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d111      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_ADC_PollForConversion+0x1a8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d002      	beq.n	8002c5a <HAL_ADC_PollForConversion+0x136>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e000      	b.n	8002c5c <HAL_ADC_PollForConversion+0x138>
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <HAL_ADC_PollForConversion+0x1ac>)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d008      	beq.n	8002c76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d002      	beq.n	8002c76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	d104      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e00c      	b.n	8002c9a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <HAL_ADC_PollForConversion+0x1a8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d002      	beq.n	8002c90 <HAL_ADC_PollForConversion+0x16c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e000      	b.n	8002c92 <HAL_ADC_PollForConversion+0x16e>
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <HAL_ADC_PollForConversion+0x1ac>)
 8002c92:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d104      	bne.n	8002caa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e008      	b.n	8002cbc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	220c      	movs	r2, #12
 8002cba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	50040300 	.word	0x50040300
 8002ccc:	50040100 	.word	0x50040100
 8002cd0:	50040000 	.word	0x50040000

08002cd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0b6      	sub	sp, #216	@ 0xd8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x22>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e3c9      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x7b6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fcd0 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 83aa 	bne.w	8003480 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d824      	bhi.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	3b02      	subs	r3, #2
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d81b      	bhi.n	8002d7e <HAL_ADC_ConfigChannel+0x8e>
 8002d46:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <HAL_ADC_ConfigChannel+0x5c>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d65 	.word	0x08002d65
 8002d54:	08002d6d 	.word	0x08002d6d
 8002d58:	08002d75 	.word	0x08002d75
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d62:	e010      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d64:	2312      	movs	r3, #18
 8002d66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d6a:	e00c      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d6c:	2318      	movs	r3, #24
 8002d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d72:	e008      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d7c:	e003      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d7e:	2306      	movs	r3, #6
 8002d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d84:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d94:	f7ff fb4e 	bl	8002434 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fc91 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002da2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fc9d 	bl	80026ea <LL_ADC_INJ_IsConversionOngoing>
 8002db0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 81a4 	bne.w	8003106 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 819f 	bne.w	8003106 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7ff fb59 	bl	800248c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00a      	beq.n	8002e12 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6919      	ldr	r1, [r3, #16]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e0c:	f7ff faaa 	bl	8002364 <LL_ADC_SetOffset>
 8002e10:	e179      	b.n	8003106 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fac7 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x14e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fabc 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	e01e      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x18c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fab1 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e004      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1a4>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	e018      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1d6>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e004      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d106      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fa80 	bl	80023d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fa64 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x214>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fa59 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	f003 021f 	and.w	r2, r3, #31
 8002f02:	e01e      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x252>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fa4e 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f32:	2320      	movs	r3, #32
 8002f34:	e004      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x26a>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	e018      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x29c>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f7e:	2320      	movs	r3, #32
 8002f80:	e004      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d106      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fa1d 	bl	80023d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fa01 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x2da>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f9f6 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	e01e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x318>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f9eb 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e004      	b.n	8003006 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x330>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	e014      	b.n	800304a <HAL_ADC_ConfigChannel+0x35a>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800302e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e004      	b.n	800304a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003040:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	2102      	movs	r1, #2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff f9be 	bl	80023d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2103      	movs	r1, #3
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f9a2 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x398>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2103      	movs	r1, #3
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f997 	bl	80023ac <LL_ADC_GetOffsetChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	e017      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x3c8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f98c 	bl	80023ac <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e003      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x3e0>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	e011      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x404>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80030de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80030e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	e003      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80030ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d106      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2103      	movs	r1, #3
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f969 	bl	80023d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff faa0 	bl	8002650 <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 8140 	bne.w	8003398 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	f7ff f9dd 	bl	80024e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4a8f      	ldr	r2, [pc, #572]	@ (800336c <HAL_ADC_ConfigChannel+0x67c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	f040 8131 	bne.w	8003398 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_ADC_ConfigChannel+0x46e>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	3301      	adds	r3, #1
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2b09      	cmp	r3, #9
 8003154:	bf94      	ite	ls
 8003156:	2301      	movls	r3, #1
 8003158:	2300      	movhi	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e019      	b.n	8003192 <HAL_ADC_ConfigChannel+0x4a2>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e003      	b.n	8003182 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800317a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2b09      	cmp	r3, #9
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003192:	2b00      	cmp	r3, #0
 8003194:	d079      	beq.n	800328a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x4c2>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0e9b      	lsrs	r3, r3, #26
 80031a8:	3301      	adds	r3, #1
 80031aa:	069b      	lsls	r3, r3, #26
 80031ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031b0:	e015      	b.n	80031de <HAL_ADC_ConfigChannel+0x4ee>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e003      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80031ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	069b      	lsls	r3, r3, #26
 80031da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x50e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2101      	movs	r1, #1
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	e017      	b.n	800322e <HAL_ADC_ConfigChannel+0x53e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800320c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e003      	b.n	8003222 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800321a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2101      	movs	r1, #1
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	ea42 0103 	orr.w	r1, r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x564>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	3301      	adds	r3, #1
 8003246:	f003 021f 	and.w	r2, r3, #31
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	051b      	lsls	r3, r3, #20
 8003252:	e018      	b.n	8003286 <HAL_ADC_ConfigChannel+0x596>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800326c:	2320      	movs	r3, #32
 800326e:	e003      	b.n	8003278 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f003 021f 	and.w	r2, r3, #31
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003286:	430b      	orrs	r3, r1
 8003288:	e081      	b.n	800338e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x5b6>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	0e9b      	lsrs	r3, r3, #26
 800329c:	3301      	adds	r3, #1
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032a4:	e015      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x5e2>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	069b      	lsls	r3, r3, #26
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x602>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	e017      	b.n	8003322 <HAL_ADC_ConfigChannel+0x632>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e003      	b.n	8003316 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	ea42 0103 	orr.w	r1, r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_ADC_ConfigChannel+0x65e>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0e9b      	lsrs	r3, r3, #26
 8003338:	3301      	adds	r3, #1
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	3b1e      	subs	r3, #30
 8003346:	051b      	lsls	r3, r3, #20
 8003348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800334c:	e01e      	b.n	800338c <HAL_ADC_ConfigChannel+0x69c>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	60fb      	str	r3, [r7, #12]
  return result;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003366:	2320      	movs	r3, #32
 8003368:	e006      	b.n	8003378 <HAL_ADC_ConfigChannel+0x688>
 800336a:	bf00      	nop
 800336c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	3b1e      	subs	r3, #30
 8003386:	051b      	lsls	r3, r3, #20
 8003388:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003392:	4619      	mov	r1, r3
 8003394:	f7ff f87a 	bl	800248c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b44      	ldr	r3, [pc, #272]	@ (80034b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d07a      	beq.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a4:	4843      	ldr	r0, [pc, #268]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80033a6:	f7fe ffcf 	bl	8002348 <LL_ADC_GetCommonPathInternalCh>
 80033aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a41      	ldr	r2, [pc, #260]	@ (80034b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d12c      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d126      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3c      	ldr	r2, [pc, #240]	@ (80034bc <HAL_ADC_ConfigChannel+0x7cc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_ConfigChannel+0x6e8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3b      	ldr	r2, [pc, #236]	@ (80034c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d15d      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033e0:	4619      	mov	r1, r3
 80033e2:	4834      	ldr	r0, [pc, #208]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80033e4:	f7fe ff9d 	bl	8002322 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	4a36      	ldr	r2, [pc, #216]	@ (80034c8 <HAL_ADC_ConfigChannel+0x7d8>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003402:	e002      	b.n	800340a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3b01      	subs	r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003410:	e040      	b.n	8003494 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <HAL_ADC_ConfigChannel+0x7dc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d118      	bne.n	800344e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800341c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d112      	bne.n	800344e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a23      	ldr	r2, [pc, #140]	@ (80034bc <HAL_ADC_ConfigChannel+0x7cc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_ADC_ConfigChannel+0x74c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a22      	ldr	r2, [pc, #136]	@ (80034c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d12d      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003440:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003444:	4619      	mov	r1, r3
 8003446:	481b      	ldr	r0, [pc, #108]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003448:	f7fe ff6b 	bl	8002322 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800344c:	e024      	b.n	8003498 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d120      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800345c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11a      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <HAL_ADC_ConfigChannel+0x7cc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d115      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003476:	4619      	mov	r1, r3
 8003478:	480e      	ldr	r0, [pc, #56]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 800347a:	f7fe ff52 	bl	8002322 <LL_ADC_SetCommonPathInternalCh>
 800347e:	e00c      	b.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003492:	e002      	b.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003498:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	37d8      	adds	r7, #216	@ 0xd8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	80080000 	.word	0x80080000
 80034b4:	50040300 	.word	0x50040300
 80034b8:	c7520000 	.word	0xc7520000
 80034bc:	50040000 	.word	0x50040000
 80034c0:	50040200 	.word	0x50040200
 80034c4:	20000000 	.word	0x20000000
 80034c8:	053e2d63 	.word	0x053e2d63
 80034cc:	cb840000 	.word	0xcb840000
 80034d0:	80000001 	.word	0x80000001

080034d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff f8b3 	bl	8002650 <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d169      	bne.n	80035c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4b36      	ldr	r3, [pc, #216]	@ (80035d0 <ADC_Enable+0xfc>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e055      	b.n	80035c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff f86e 	bl	8002600 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003524:	482b      	ldr	r0, [pc, #172]	@ (80035d4 <ADC_Enable+0x100>)
 8003526:	f7fe ff0f 	bl	8002348 <LL_ADC_GetCommonPathInternalCh>
 800352a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800352c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003534:	4b28      	ldr	r3, [pc, #160]	@ (80035d8 <ADC_Enable+0x104>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <ADC_Enable+0x108>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800354e:	e002      	b.n	8003556 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3b01      	subs	r3, #1
 8003554:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f9      	bne.n	8003550 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800355c:	f7fe fec2 	bl	80022e4 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003562:	e028      	b.n	80035b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f871 	bl	8002650 <LL_ADC_IsEnabled>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff f841 	bl	8002600 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800357e:	f7fe feb1 	bl	80022e4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d914      	bls.n	80035b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d00d      	beq.n	80035b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359e:	f043 0210 	orr.w	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e007      	b.n	80035c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d1cf      	bne.n	8003564 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	8000003f 	.word	0x8000003f
 80035d4:	50040300 	.word	0x50040300
 80035d8:	20000000 	.word	0x20000000
 80035dc:	053e2d63 	.word	0x053e2d63

080035e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff f842 	bl	8002676 <LL_ADC_IsDisableOngoing>
 80035f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f829 	bl	8002650 <LL_ADC_IsEnabled>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d047      	beq.n	8003694 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d144      	bne.n	8003694 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030d 	and.w	r3, r3, #13
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10c      	bne.n	8003632 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff f803 	bl	8002628 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2203      	movs	r2, #3
 8003628:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800362a:	f7fe fe5b 	bl	80022e4 <HAL_GetTick>
 800362e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003630:	e029      	b.n	8003686 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003636:	f043 0210 	orr.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e023      	b.n	8003696 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800364e:	f7fe fe49 	bl	80022e4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d914      	bls.n	8003686 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e007      	b.n	8003696 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1dc      	bne.n	800364e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <LL_ADC_IsEnabled>:
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <LL_ADC_IsEnabled+0x18>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <LL_ADC_IsEnabled+0x1a>
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_StartCalibration>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80036d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	609a      	str	r2, [r3, #8]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_IsCalibrationOnGoing>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800370a:	d101      	bne.n	8003710 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_ADC_REG_IsConversionOngoing>:
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d101      	bne.n	8003736 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_ADCEx_Calibration_Start+0x1c>
 800375c:	2302      	movs	r3, #2
 800375e:	e04d      	b.n	80037fc <HAL_ADCEx_Calibration_Start+0xb8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff39 	bl	80035e0 <ADC_Disable>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d136      	bne.n	80037e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003780:	f023 0302 	bic.w	r3, r3, #2
 8003784:	f043 0202 	orr.w	r2, r3, #2
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff96 	bl	80036c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003798:	e014      	b.n	80037c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80037a6:	d30d      	bcc.n	80037c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ac:	f023 0312 	bic.w	r3, r3, #18
 80037b0:	f043 0210 	orr.w	r2, r3, #16
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e01b      	b.n	80037fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff94 	bl	80036f6 <LL_ADC_IsCalibrationOnGoing>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e2      	bne.n	800379a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	f023 0303 	bic.w	r3, r3, #3
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80037e4:	e005      	b.n	80037f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b09f      	sub	sp, #124	@ 0x7c
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800381e:	2302      	movs	r3, #2
 8003820:	e093      	b.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800382a:	2300      	movs	r3, #0
 800382c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800382e:	2300      	movs	r3, #0
 8003830:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a47      	ldr	r2, [pc, #284]	@ (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d102      	bne.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800383c:	4b46      	ldr	r3, [pc, #280]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	e001      	b.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e072      	b.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff59 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 800386c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff53 	bl	800371e <LL_ADC_REG_IsConversionOngoing>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d154      	bne.n	8003928 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800387e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003880:	2b00      	cmp	r3, #0
 8003882:	d151      	bne.n	8003928 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003884:	4b35      	ldr	r3, [pc, #212]	@ (800395c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003886:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d02c      	beq.n	80038ea <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038a2:	035b      	lsls	r3, r3, #13
 80038a4:	430b      	orrs	r3, r1
 80038a6:	431a      	orrs	r2, r3
 80038a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ac:	4829      	ldr	r0, [pc, #164]	@ (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038ae:	f7ff fef6 	bl	800369e <LL_ADC_IsEnabled>
 80038b2:	4604      	mov	r4, r0
 80038b4:	4828      	ldr	r0, [pc, #160]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038b6:	f7ff fef2 	bl	800369e <LL_ADC_IsEnabled>
 80038ba:	4603      	mov	r3, r0
 80038bc:	431c      	orrs	r4, r3
 80038be:	4828      	ldr	r0, [pc, #160]	@ (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038c0:	f7ff feed 	bl	800369e <LL_ADC_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4323      	orrs	r3, r4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d137      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038d4:	f023 030f 	bic.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	6811      	ldr	r1, [r2, #0]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038e8:	e028      	b.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038f6:	4817      	ldr	r0, [pc, #92]	@ (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038f8:	f7ff fed1 	bl	800369e <LL_ADC_IsEnabled>
 80038fc:	4604      	mov	r4, r0
 80038fe:	4816      	ldr	r0, [pc, #88]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003900:	f7ff fecd 	bl	800369e <LL_ADC_IsEnabled>
 8003904:	4603      	mov	r3, r0
 8003906:	431c      	orrs	r4, r3
 8003908:	4815      	ldr	r0, [pc, #84]	@ (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800390a:	f7ff fec8 	bl	800369e <LL_ADC_IsEnabled>
 800390e:	4603      	mov	r3, r0
 8003910:	4323      	orrs	r3, r4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d112      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800391e:	f023 030f 	bic.w	r3, r3, #15
 8003922:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003924:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003926:	e009      	b.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800393a:	e000      	b.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800393c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003946:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800394a:	4618      	mov	r0, r3
 800394c:	377c      	adds	r7, #124	@ 0x7c
 800394e:	46bd      	mov	sp, r7
 8003950:	bd90      	pop	{r4, r7, pc}
 8003952:	bf00      	nop
 8003954:	50040000 	.word	0x50040000
 8003958:	50040100 	.word	0x50040100
 800395c:	50040300 	.word	0x50040300
 8003960:	50040200 	.word	0x50040200

08003964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	@ (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	@ (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	@ (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	@ (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	@ 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	@ 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad0:	d301      	bcc.n	8003ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00f      	b.n	8003af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <SysTick_Config+0x40>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ade:	210f      	movs	r1, #15
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	f7ff ff8e 	bl	8003a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae8:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <SysTick_Config+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aee:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <SysTick_Config+0x40>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	e000e010 	.word	0xe000e010

08003b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff29 	bl	8003964 <__NVIC_SetPriorityGrouping>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2c:	f7ff ff3e 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff8e 	bl	8003a58 <NVIC_EncodePriority>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff5d 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff31 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffa2 	bl	8003ac0 <SysTick_Config>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d008      	beq.n	8003bb0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e022      	b.n	8003bf6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 020e 	bic.w	r2, r2, #14
 8003bbe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd4:	f003 021c 	and.w	r2, r3, #28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d005      	beq.n	8003c26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	e029      	b.n	8003c7a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 020e 	bic.w	r2, r2, #14
 8003c34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	f003 021c 	and.w	r2, r3, #28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
    }
  }
  return status;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c92:	e17f      	b.n	8003f94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8171 	beq.w	8003f8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d005      	beq.n	8003cc4 <HAL_GPIO_Init+0x40>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d130      	bne.n	8003d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 0201 	and.w	r2, r3, #1
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d118      	bne.n	8003d64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	08db      	lsrs	r3, r3, #3
 8003d4e:	f003 0201 	and.w	r2, r3, #1
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d017      	beq.n	8003da0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d123      	bne.n	8003df4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	6939      	ldr	r1, [r7, #16]
 8003df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80ac 	beq.w	8003f8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb4 <HAL_GPIO_Init+0x330>)
 8003e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fb4 <HAL_GPIO_Init+0x330>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e42:	4b5c      	ldr	r3, [pc, #368]	@ (8003fb4 <HAL_GPIO_Init+0x330>)
 8003e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e4e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb8 <HAL_GPIO_Init+0x334>)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e78:	d025      	beq.n	8003ec6 <HAL_GPIO_Init+0x242>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003fbc <HAL_GPIO_Init+0x338>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01f      	beq.n	8003ec2 <HAL_GPIO_Init+0x23e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc0 <HAL_GPIO_Init+0x33c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d019      	beq.n	8003ebe <HAL_GPIO_Init+0x23a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc4 <HAL_GPIO_Init+0x340>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_GPIO_Init+0x236>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4c      	ldr	r2, [pc, #304]	@ (8003fc8 <HAL_GPIO_Init+0x344>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00d      	beq.n	8003eb6 <HAL_GPIO_Init+0x232>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003fcc <HAL_GPIO_Init+0x348>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <HAL_GPIO_Init+0x22e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd0 <HAL_GPIO_Init+0x34c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d101      	bne.n	8003eae <HAL_GPIO_Init+0x22a>
 8003eaa:	2306      	movs	r3, #6
 8003eac:	e00c      	b.n	8003ec8 <HAL_GPIO_Init+0x244>
 8003eae:	2307      	movs	r3, #7
 8003eb0:	e00a      	b.n	8003ec8 <HAL_GPIO_Init+0x244>
 8003eb2:	2305      	movs	r3, #5
 8003eb4:	e008      	b.n	8003ec8 <HAL_GPIO_Init+0x244>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x244>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e004      	b.n	8003ec8 <HAL_GPIO_Init+0x244>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_Init+0x244>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_Init+0x244>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	f002 0203 	and.w	r2, r2, #3
 8003ece:	0092      	lsls	r2, r2, #2
 8003ed0:	4093      	lsls	r3, r2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ed8:	4937      	ldr	r1, [pc, #220]	@ (8003fb8 <HAL_GPIO_Init+0x334>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f0a:	4a32      	ldr	r2, [pc, #200]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f10:	4b30      	ldr	r3, [pc, #192]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f34:	4a27      	ldr	r2, [pc, #156]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f3a:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f88:	4a12      	ldr	r2, [pc, #72]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f47f ae78 	bne.w	8003c94 <HAL_GPIO_Init+0x10>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	48000400 	.word	0x48000400
 8003fc0:	48000800 	.word	0x48000800
 8003fc4:	48000c00 	.word	0x48000c00
 8003fc8:	48001000 	.word	0x48001000
 8003fcc:	48001400 	.word	0x48001400
 8003fd0:	48001800 	.word	0x48001800
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe8:	787b      	ldrb	r3, [r7, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ff4:	e002      	b.n	8003ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <HAL_PWREx_GetVoltageRange+0x18>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40007000 	.word	0x40007000

08004024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004032:	d130      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004034:	4b23      	ldr	r3, [pc, #140]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800403c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004040:	d038      	beq.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004042:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004050:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004052:	4b1d      	ldr	r3, [pc, #116]	@ (80040c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2232      	movs	r2, #50	@ 0x32
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	0c9b      	lsrs	r3, r3, #18
 8004064:	3301      	adds	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004068:	e002      	b.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b01      	subs	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004070:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407c:	d102      	bne.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x60>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f2      	bne.n	800406a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004084:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004090:	d110      	bne.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e00f      	b.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a2:	d007      	beq.n	80040b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040a4:	4b07      	ldr	r3, [pc, #28]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040ac:	4a05      	ldr	r2, [pc, #20]	@ (80040c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40007000 	.word	0x40007000
 80040c8:	20000000 	.word	0x20000000
 80040cc:	431bde83 	.word	0x431bde83

080040d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e3ca      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e2:	4b97      	ldr	r3, [pc, #604]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ec:	4b94      	ldr	r3, [pc, #592]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80e4 	beq.w	80042cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_RCC_OscConfig+0x4a>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	f040 808b 	bne.w	8004228 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 8087 	bne.w	8004228 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800411a:	4b89      	ldr	r3, [pc, #548]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_RCC_OscConfig+0x62>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e3a2      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	4b82      	ldr	r3, [pc, #520]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_RCC_OscConfig+0x7c>
 8004142:	4b7f      	ldr	r3, [pc, #508]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800414a:	e005      	b.n	8004158 <HAL_RCC_OscConfig+0x88>
 800414c:	4b7c      	ldr	r3, [pc, #496]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004158:	4293      	cmp	r3, r2
 800415a:	d223      	bcs.n	80041a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fd55 	bl	8004c10 <RCC_SetFlashLatencyFromMSIRange>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e383      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004170:	4b73      	ldr	r3, [pc, #460]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a72      	ldr	r2, [pc, #456]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004176:	f043 0308 	orr.w	r3, r3, #8
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b70      	ldr	r3, [pc, #448]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	496d      	ldr	r1, [pc, #436]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800418e:	4b6c      	ldr	r3, [pc, #432]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	4968      	ldr	r1, [pc, #416]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
 80041a2:	e025      	b.n	80041f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a4:	4b66      	ldr	r3, [pc, #408]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a65      	ldr	r2, [pc, #404]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80041aa:	f043 0308 	orr.w	r3, r3, #8
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b63      	ldr	r3, [pc, #396]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4960      	ldr	r1, [pc, #384]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	495b      	ldr	r1, [pc, #364]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fd15 	bl	8004c10 <RCC_SetFlashLatencyFromMSIRange>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e343      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041f0:	f000 fc4a 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b52      	ldr	r3, [pc, #328]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	4950      	ldr	r1, [pc, #320]	@ (8004344 <HAL_RCC_OscConfig+0x274>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	4a4e      	ldr	r2, [pc, #312]	@ (8004348 <HAL_RCC_OscConfig+0x278>)
 800420e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004210:	4b4e      	ldr	r3, [pc, #312]	@ (800434c <HAL_RCC_OscConfig+0x27c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe f815 	bl	8002244 <HAL_InitTick>
 800421a:	4603      	mov	r3, r0
 800421c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d052      	beq.n	80042ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	e327      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d032      	beq.n	8004296 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004230:	4b43      	ldr	r3, [pc, #268]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a42      	ldr	r2, [pc, #264]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800423c:	f7fe f852 	bl	80022e4 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004244:	f7fe f84e 	bl	80022e4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e310      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004256:	4b3a      	ldr	r3, [pc, #232]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004262:	4b37      	ldr	r3, [pc, #220]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a36      	ldr	r2, [pc, #216]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004268:	f043 0308 	orr.w	r3, r3, #8
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b34      	ldr	r3, [pc, #208]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4931      	ldr	r1, [pc, #196]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004280:	4b2f      	ldr	r3, [pc, #188]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	492c      	ldr	r1, [pc, #176]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
 8004294:	e01a      	b.n	80042cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004296:	4b2a      	ldr	r3, [pc, #168]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a29      	ldr	r2, [pc, #164]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042a2:	f7fe f81f 	bl	80022e4 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042aa:	f7fe f81b 	bl	80022e4 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e2dd      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042bc:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x1da>
 80042c8:	e000      	b.n	80042cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d074      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d005      	beq.n	80042ea <HAL_RCC_OscConfig+0x21a>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d10e      	bne.n	8004302 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d10b      	bne.n	8004302 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d064      	beq.n	80043c0 <HAL_RCC_OscConfig+0x2f0>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d160      	bne.n	80043c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e2ba      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430a:	d106      	bne.n	800431a <HAL_RCC_OscConfig+0x24a>
 800430c:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0b      	ldr	r2, [pc, #44]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e026      	b.n	8004368 <HAL_RCC_OscConfig+0x298>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004322:	d115      	bne.n	8004350 <HAL_RCC_OscConfig+0x280>
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a05      	ldr	r2, [pc, #20]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 800432a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b03      	ldr	r3, [pc, #12]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a02      	ldr	r2, [pc, #8]	@ (8004340 <HAL_RCC_OscConfig+0x270>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e014      	b.n	8004368 <HAL_RCC_OscConfig+0x298>
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	0800c714 	.word	0x0800c714
 8004348:	20000000 	.word	0x20000000
 800434c:	20000004 	.word	0x20000004
 8004350:	4ba0      	ldr	r3, [pc, #640]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a9f      	ldr	r2, [pc, #636]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b9d      	ldr	r3, [pc, #628]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a9c      	ldr	r2, [pc, #624]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd ffb8 	bl	80022e4 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fd ffb4 	bl	80022e4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	@ 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e276      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800438a:	4b92      	ldr	r3, [pc, #584]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x2a8>
 8004396:	e014      	b.n	80043c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd ffa4 	bl	80022e4 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fd ffa0 	bl	80022e4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	@ 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e262      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b2:	4b88      	ldr	r3, [pc, #544]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2d0>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d060      	beq.n	8004490 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_OscConfig+0x310>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b0c      	cmp	r3, #12
 80043d8:	d119      	bne.n	800440e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d116      	bne.n	800440e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e0:	4b7c      	ldr	r3, [pc, #496]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_OscConfig+0x328>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e23f      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f8:	4b76      	ldr	r3, [pc, #472]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	4973      	ldr	r1, [pc, #460]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440c:	e040      	b.n	8004490 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d023      	beq.n	800445e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004416:	4b6f      	ldr	r3, [pc, #444]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6e      	ldr	r2, [pc, #440]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fd ff5f 	bl	80022e4 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442a:	f7fd ff5b 	bl	80022e4 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e21d      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443c:	4b65      	ldr	r3, [pc, #404]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004448:	4b62      	ldr	r3, [pc, #392]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	495f      	ldr	r1, [pc, #380]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004458:	4313      	orrs	r3, r2
 800445a:	604b      	str	r3, [r1, #4]
 800445c:	e018      	b.n	8004490 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445e:	4b5d      	ldr	r3, [pc, #372]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a5c      	ldr	r2, [pc, #368]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fd ff3b 	bl	80022e4 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004472:	f7fd ff37 	bl	80022e4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e1f9      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004484:	4b53      	ldr	r3, [pc, #332]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d03c      	beq.n	8004516 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01c      	beq.n	80044de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a4:	4b4b      	ldr	r3, [pc, #300]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044aa:	4a4a      	ldr	r2, [pc, #296]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fd ff16 	bl	80022e4 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd ff12 	bl	80022e4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1d4      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ce:	4b41      	ldr	r3, [pc, #260]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80044d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ef      	beq.n	80044bc <HAL_RCC_OscConfig+0x3ec>
 80044dc:	e01b      	b.n	8004516 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044de:	4b3d      	ldr	r3, [pc, #244]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e4:	4a3b      	ldr	r2, [pc, #236]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd fef9 	bl	80022e4 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fd fef5 	bl	80022e4 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e1b7      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004508:	4b32      	ldr	r3, [pc, #200]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800450a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1ef      	bne.n	80044f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80a6 	beq.w	8004670 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004524:	2300      	movs	r3, #0
 8004526:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004528:	4b2a      	ldr	r3, [pc, #168]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800453e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004540:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454c:	2301      	movs	r3, #1
 800454e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004550:	4b21      	ldr	r3, [pc, #132]	@ (80045d8 <HAL_RCC_OscConfig+0x508>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d118      	bne.n	800458e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800455c:	4b1e      	ldr	r3, [pc, #120]	@ (80045d8 <HAL_RCC_OscConfig+0x508>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <HAL_RCC_OscConfig+0x508>)
 8004562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004568:	f7fd febc 	bl	80022e4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004570:	f7fd feb8 	bl	80022e4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e17a      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_RCC_OscConfig+0x508>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d108      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4d8>
 8004596:	4b0f      	ldr	r3, [pc, #60]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459c:	4a0d      	ldr	r2, [pc, #52]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045a6:	e029      	b.n	80045fc <HAL_RCC_OscConfig+0x52c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d115      	bne.n	80045dc <HAL_RCC_OscConfig+0x50c>
 80045b0:	4b08      	ldr	r3, [pc, #32]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	4a07      	ldr	r2, [pc, #28]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045c0:	4b04      	ldr	r3, [pc, #16]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	4a03      	ldr	r2, [pc, #12]	@ (80045d4 <HAL_RCC_OscConfig+0x504>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045d0:	e014      	b.n	80045fc <HAL_RCC_OscConfig+0x52c>
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40007000 	.word	0x40007000
 80045dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	4a9b      	ldr	r2, [pc, #620]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045ec:	4b98      	ldr	r3, [pc, #608]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	4a97      	ldr	r2, [pc, #604]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80045f4:	f023 0304 	bic.w	r3, r3, #4
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d016      	beq.n	8004632 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004604:	f7fd fe6e 	bl	80022e4 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460a:	e00a      	b.n	8004622 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460c:	f7fd fe6a 	bl	80022e4 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e12a      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004622:	4b8b      	ldr	r3, [pc, #556]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ed      	beq.n	800460c <HAL_RCC_OscConfig+0x53c>
 8004630:	e015      	b.n	800465e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004632:	f7fd fe57 	bl	80022e4 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004638:	e00a      	b.n	8004650 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fd fe53 	bl	80022e4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e113      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004650:	4b7f      	ldr	r3, [pc, #508]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ed      	bne.n	800463a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800465e:	7ffb      	ldrb	r3, [r7, #31]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004664:	4b7a      	ldr	r3, [pc, #488]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004668:	4a79      	ldr	r2, [pc, #484]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 800466a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800466e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80fe 	beq.w	8004876 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	2b02      	cmp	r3, #2
 8004680:	f040 80d0 	bne.w	8004824 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004684:	4b72      	ldr	r3, [pc, #456]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0203 	and.w	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	429a      	cmp	r2, r3
 8004696:	d130      	bne.n	80046fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	3b01      	subs	r3, #1
 80046a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d127      	bne.n	80046fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d11f      	bne.n	80046fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046c4:	2a07      	cmp	r2, #7
 80046c6:	bf14      	ite	ne
 80046c8:	2201      	movne	r2, #1
 80046ca:	2200      	moveq	r2, #0
 80046cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d113      	bne.n	80046fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	3b01      	subs	r3, #1
 80046e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d109      	bne.n	80046fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	3b01      	subs	r3, #1
 80046f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d06e      	beq.n	80047d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b0c      	cmp	r3, #12
 80046fe:	d069      	beq.n	80047d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004700:	4b53      	ldr	r3, [pc, #332]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800470c:	4b50      	ldr	r3, [pc, #320]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0ad      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800471c:	4b4c      	ldr	r3, [pc, #304]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a4b      	ldr	r2, [pc, #300]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004726:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004728:	f7fd fddc 	bl	80022e4 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fd fdd8 	bl	80022e4 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e09a      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004742:	4b43      	ldr	r3, [pc, #268]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474e:	4b40      	ldr	r3, [pc, #256]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	4b40      	ldr	r3, [pc, #256]	@ (8004854 <HAL_RCC_OscConfig+0x784>)
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800475e:	3a01      	subs	r2, #1
 8004760:	0112      	lsls	r2, r2, #4
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004768:	0212      	lsls	r2, r2, #8
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004770:	0852      	lsrs	r2, r2, #1
 8004772:	3a01      	subs	r2, #1
 8004774:	0552      	lsls	r2, r2, #21
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800477c:	0852      	lsrs	r2, r2, #1
 800477e:	3a01      	subs	r2, #1
 8004780:	0652      	lsls	r2, r2, #25
 8004782:	4311      	orrs	r1, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004788:	0912      	lsrs	r2, r2, #4
 800478a:	0452      	lsls	r2, r2, #17
 800478c:	430a      	orrs	r2, r1
 800478e:	4930      	ldr	r1, [pc, #192]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004790:	4313      	orrs	r3, r2
 8004792:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004794:	4b2e      	ldr	r3, [pc, #184]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2d      	ldr	r2, [pc, #180]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 800479a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047ac:	f7fd fd9a 	bl	80022e4 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fd fd96 	bl	80022e4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e058      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c6:	4b22      	ldr	r3, [pc, #136]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d2:	e050      	b.n	8004876 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e04f      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d148      	bne.n	8004876 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a19      	ldr	r2, [pc, #100]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f0:	4b17      	ldr	r3, [pc, #92]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a16      	ldr	r2, [pc, #88]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047fc:	f7fd fd72 	bl	80022e4 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fd fd6e 	bl	80022e4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e030      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	4b0e      	ldr	r3, [pc, #56]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x734>
 8004822:	e028      	b.n	8004876 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d023      	beq.n	8004872 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a08      	ldr	r2, [pc, #32]	@ (8004850 <HAL_RCC_OscConfig+0x780>)
 8004830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd fd55 	bl	80022e4 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483c:	e00c      	b.n	8004858 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483e:	f7fd fd51 	bl	80022e4 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d905      	bls.n	8004858 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e013      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
 8004850:	40021000 	.word	0x40021000
 8004854:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004858:	4b09      	ldr	r3, [pc, #36]	@ (8004880 <HAL_RCC_OscConfig+0x7b0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ec      	bne.n	800483e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004864:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_OscConfig+0x7b0>)
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	4905      	ldr	r1, [pc, #20]	@ (8004880 <HAL_RCC_OscConfig+0x7b0>)
 800486a:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_RCC_OscConfig+0x7b4>)
 800486c:	4013      	ands	r3, r2
 800486e:	60cb      	str	r3, [r1, #12]
 8004870:	e001      	b.n	8004876 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	feeefffc 	.word	0xfeeefffc

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0e7      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b75      	ldr	r3, [pc, #468]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d910      	bls.n	80048cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b72      	ldr	r3, [pc, #456]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 0207 	bic.w	r2, r3, #7
 80048b2:	4970      	ldr	r1, [pc, #448]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0cf      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	4b66      	ldr	r3, [pc, #408]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d908      	bls.n	80048fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b63      	ldr	r3, [pc, #396]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4960      	ldr	r1, [pc, #384]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d04c      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b03      	cmp	r3, #3
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490e:	4b5a      	ldr	r3, [pc, #360]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d121      	bne.n	800495e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e0a6      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004926:	4b54      	ldr	r3, [pc, #336]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d115      	bne.n	800495e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e09a      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800493e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e08e      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e086      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800495e:	4b46      	ldr	r3, [pc, #280]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 0203 	bic.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4943      	ldr	r1, [pc, #268]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fd fcb8 	bl	80022e4 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7fd fcb4 	bl	80022e4 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e06e      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 020c 	and.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	429a      	cmp	r2, r3
 800499e:	d1eb      	bne.n	8004978 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d208      	bcs.n	80049ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	492b      	ldr	r1, [pc, #172]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ce:	4b29      	ldr	r3, [pc, #164]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d210      	bcs.n	80049fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049dc:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 0207 	bic.w	r2, r3, #7
 80049e4:	4923      	ldr	r1, [pc, #140]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ec:	4b21      	ldr	r3, [pc, #132]	@ (8004a74 <HAL_RCC_ClockConfig+0x1ec>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e036      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	4918      	ldr	r1, [pc, #96]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4910      	ldr	r1, [pc, #64]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a3c:	f000 f824 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b0d      	ldr	r3, [pc, #52]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	490b      	ldr	r1, [pc, #44]	@ (8004a7c <HAL_RCC_ClockConfig+0x1f4>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
 8004a58:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a5c:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_ClockConfig+0x1fc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fd fbef 	bl	8002244 <HAL_InitTick>
 8004a66:	4603      	mov	r3, r0
 8004a68:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40022000 	.word	0x40022000
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	0800c714 	.word	0x0800c714
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b089      	sub	sp, #36	@ 0x24
 8004a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a96:	4b3e      	ldr	r3, [pc, #248]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d121      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d11e      	bne.n	8004afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004abc:	4b34      	ldr	r3, [pc, #208]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ac8:	4b31      	ldr	r3, [pc, #196]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10d      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d102      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b00:	4b25      	ldr	r3, [pc, #148]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e004      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b0c:	4b23      	ldr	r3, [pc, #140]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004b0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d134      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b16:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0xa6>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d003      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0xac>
 8004b2c:	e005      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b30:	617b      	str	r3, [r7, #20]
      break;
 8004b32:	e005      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b34:	4b19      	ldr	r3, [pc, #100]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8004b36:	617b      	str	r3, [r7, #20]
      break;
 8004b38:	e002      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	617b      	str	r3, [r7, #20]
      break;
 8004b3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b40:	4b13      	ldr	r3, [pc, #76]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b4e:	4b10      	ldr	r3, [pc, #64]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	fb03 f202 	mul.w	r2, r3, r2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b66:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	0e5b      	lsrs	r3, r3, #25
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	3301      	adds	r3, #1
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b80:	69bb      	ldr	r3, [r7, #24]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
 8004b94:	0800c72c 	.word	0x0800c72c
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	007a1200 	.word	0x007a1200

08004ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	@ (8004bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000000 	.word	0x20000000

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bbc:	f7ff fff0 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4904      	ldr	r1, [pc, #16]	@ (8004be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	0800c724 	.word	0x0800c724

08004be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004be8:	f7ff ffda 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0adb      	lsrs	r3, r3, #11
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4904      	ldr	r1, [pc, #16]	@ (8004c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	0800c724 	.word	0x0800c724

08004c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c28:	f7ff f9ee 	bl	8004008 <HAL_PWREx_GetVoltageRange>
 8004c2c:	6178      	str	r0, [r7, #20]
 8004c2e:	e014      	b.n	8004c5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	4b25      	ldr	r3, [pc, #148]	@ (8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	4a24      	ldr	r2, [pc, #144]	@ (8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c3c:	4b22      	ldr	r3, [pc, #136]	@ (8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c48:	f7ff f9de 	bl	8004008 <HAL_PWREx_GetVoltageRange>
 8004c4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c52:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d10b      	bne.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b80      	cmp	r3, #128	@ 0x80
 8004c66:	d919      	bls.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c6c:	d902      	bls.n	8004c74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c6e:	2302      	movs	r3, #2
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e013      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c74:	2301      	movs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e010      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b80      	cmp	r3, #128	@ 0x80
 8004c7e:	d902      	bls.n	8004c86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c80:	2303      	movs	r3, #3
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	e00a      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b80      	cmp	r3, #128	@ 0x80
 8004c8a:	d102      	bne.n	8004c92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	e004      	b.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b70      	cmp	r3, #112	@ 0x70
 8004c96:	d101      	bne.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c98:	2301      	movs	r3, #1
 8004c9a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 0207 	bic.w	r2, r3, #7
 8004ca4:	4909      	ldr	r1, [pc, #36]	@ (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cac:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d001      	beq.n	8004cbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40022000 	.word	0x40022000

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cd8:	2300      	movs	r3, #0
 8004cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cdc:	2300      	movs	r3, #0
 8004cde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d041      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cf4:	d02a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cf6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cfa:	d824      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d00:	d008      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d06:	d81e      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d10:	d010      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d12:	e018      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d14:	4b86      	ldr	r3, [pc, #536]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a85      	ldr	r2, [pc, #532]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d20:	e015      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fabb 	bl	80052a4 <RCCEx_PLLSAI1_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d32:	e00c      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3320      	adds	r3, #32
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fba6 	bl	800548c <RCCEx_PLLSAI2_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	74fb      	strb	r3, [r7, #19]
      break;
 8004d4a:	e000      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d54:	4b76      	ldr	r3, [pc, #472]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d62:	4973      	ldr	r1, [pc, #460]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	7cfb      	ldrb	r3, [r7, #19]
 8004d6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d041      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d84:	d02a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d8a:	d824      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d90:	d008      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d96:	d81e      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004da0:	d010      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004da2:	e018      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004da4:	4b62      	ldr	r3, [pc, #392]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a61      	ldr	r2, [pc, #388]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db0:	e015      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fa73 	bl	80052a4 <RCCEx_PLLSAI1_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dc2:	e00c      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3320      	adds	r3, #32
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fb5e 	bl	800548c <RCCEx_PLLSAI2_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	74fb      	strb	r3, [r7, #19]
      break;
 8004dda:	e000      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004de4:	4b52      	ldr	r3, [pc, #328]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004df2:	494f      	ldr	r1, [pc, #316]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dfa:	e001      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80a0 	beq.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e12:	4b47      	ldr	r3, [pc, #284]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e28:	4b41      	ldr	r3, [pc, #260]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	4a40      	ldr	r2, [pc, #256]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e34:	4b3e      	ldr	r3, [pc, #248]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e40:	2301      	movs	r3, #1
 8004e42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e44:	4b3b      	ldr	r3, [pc, #236]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3a      	ldr	r2, [pc, #232]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e50:	f7fd fa48 	bl	80022e4 <HAL_GetTick>
 8004e54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e56:	e009      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e58:	f7fd fa44 	bl	80022e4 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d902      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	74fb      	strb	r3, [r7, #19]
        break;
 8004e6a:	e005      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e6c:	4b31      	ldr	r3, [pc, #196]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ef      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d15c      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d019      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e9c:	4b24      	ldr	r3, [pc, #144]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea8:	4b21      	ldr	r3, [pc, #132]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a20      	ldr	r2, [pc, #128]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec8:	4a19      	ldr	r2, [pc, #100]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fd fa03 	bl	80022e4 <HAL_GetTick>
 8004ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee0:	e00b      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fd f9ff 	bl	80022e4 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d902      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef8:	e006      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ec      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0e:	4b08      	ldr	r3, [pc, #32]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f1e:	4904      	ldr	r1, [pc, #16]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f26:	e009      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3c:	7c7b      	ldrb	r3, [r7, #17]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d105      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f42:	4b9e      	ldr	r3, [pc, #632]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	4a9d      	ldr	r2, [pc, #628]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f5a:	4b98      	ldr	r3, [pc, #608]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f023 0203 	bic.w	r2, r3, #3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	4994      	ldr	r1, [pc, #592]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f7c:	4b8f      	ldr	r3, [pc, #572]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	f023 020c 	bic.w	r2, r3, #12
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8a:	498c      	ldr	r1, [pc, #560]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f9e:	4b87      	ldr	r3, [pc, #540]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	4983      	ldr	r1, [pc, #524]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fce:	497b      	ldr	r1, [pc, #492]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fe2:	4b76      	ldr	r3, [pc, #472]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff0:	4972      	ldr	r1, [pc, #456]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005004:	4b6d      	ldr	r3, [pc, #436]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005012:	496a      	ldr	r1, [pc, #424]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005026:	4b65      	ldr	r3, [pc, #404]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005034:	4961      	ldr	r1, [pc, #388]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005048:	4b5c      	ldr	r3, [pc, #368]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005056:	4959      	ldr	r1, [pc, #356]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800506a:	4b54      	ldr	r3, [pc, #336]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005078:	4950      	ldr	r1, [pc, #320]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800508c:	4b4b      	ldr	r3, [pc, #300]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005092:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	4948      	ldr	r1, [pc, #288]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050ae:	4b43      	ldr	r3, [pc, #268]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050bc:	493f      	ldr	r1, [pc, #252]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d028      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050d0:	4b3a      	ldr	r3, [pc, #232]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050de:	4937      	ldr	r1, [pc, #220]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ee:	d106      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f0:	4b32      	ldr	r3, [pc, #200]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4a31      	ldr	r2, [pc, #196]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050fa:	60d3      	str	r3, [r2, #12]
 80050fc:	e011      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005102:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005106:	d10c      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	2101      	movs	r1, #1
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f8c8 	bl	80052a4 <RCCEx_PLLSAI1_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005118:	7cfb      	ldrb	r3, [r7, #19]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800511e:	7cfb      	ldrb	r3, [r7, #19]
 8005120:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d028      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800512e:	4b23      	ldr	r3, [pc, #140]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005134:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513c:	491f      	ldr	r1, [pc, #124]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800514c:	d106      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800514e:	4b1b      	ldr	r3, [pc, #108]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	4a1a      	ldr	r2, [pc, #104]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005158:	60d3      	str	r3, [r2, #12]
 800515a:	e011      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005164:	d10c      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	2101      	movs	r1, #1
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f899 	bl	80052a4 <RCCEx_PLLSAI1_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d02b      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800518c:	4b0b      	ldr	r3, [pc, #44]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519a:	4908      	ldr	r1, [pc, #32]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051aa:	d109      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ac:	4b03      	ldr	r3, [pc, #12]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a02      	ldr	r2, [pc, #8]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051b6:	60d3      	str	r3, [r2, #12]
 80051b8:	e014      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f867 	bl	80052a4 <RCCEx_PLLSAI1_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051da:	7cfb      	ldrb	r3, [r7, #19]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d02f      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051f0:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051fe:	4928      	ldr	r1, [pc, #160]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800520a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520e:	d10d      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	2102      	movs	r1, #2
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f844 	bl	80052a4 <RCCEx_PLLSAI1_Config>
 800521c:	4603      	mov	r3, r0
 800521e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d014      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005226:	7cfb      	ldrb	r3, [r7, #19]
 8005228:	74bb      	strb	r3, [r7, #18]
 800522a:	e011      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3320      	adds	r3, #32
 800523a:	2102      	movs	r1, #2
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f925 	bl	800548c <RCCEx_PLLSAI2_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800525c:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005262:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800526a:	490d      	ldr	r1, [pc, #52]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800527e:	4b08      	ldr	r3, [pc, #32]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005284:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800528e:	4904      	ldr	r1, [pc, #16]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005296:	7cbb      	ldrb	r3, [r7, #18]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000

080052a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052b2:	4b75      	ldr	r3, [pc, #468]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d018      	beq.n	80052f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052be:	4b72      	ldr	r3, [pc, #456]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0203 	and.w	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d10d      	bne.n	80052ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
       ||
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	091b      	lsrs	r3, r3, #4
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
       ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d047      	beq.n	800537a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
 80052ee:	e044      	b.n	800537a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d018      	beq.n	800532a <RCCEx_PLLSAI1_Config+0x86>
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d825      	bhi.n	8005348 <RCCEx_PLLSAI1_Config+0xa4>
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d002      	beq.n	8005306 <RCCEx_PLLSAI1_Config+0x62>
 8005300:	2b02      	cmp	r3, #2
 8005302:	d009      	beq.n	8005318 <RCCEx_PLLSAI1_Config+0x74>
 8005304:	e020      	b.n	8005348 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005306:	4b60      	ldr	r3, [pc, #384]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11d      	bne.n	800534e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005316:	e01a      	b.n	800534e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005318:	4b5b      	ldr	r3, [pc, #364]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005320:	2b00      	cmp	r3, #0
 8005322:	d116      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005328:	e013      	b.n	8005352 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800532a:	4b57      	ldr	r3, [pc, #348]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10f      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005336:	4b54      	ldr	r3, [pc, #336]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005346:	e006      	b.n	8005356 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      break;
 800534c:	e004      	b.n	8005358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800534e:	bf00      	nop
 8005350:	e002      	b.n	8005358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005352:	bf00      	nop
 8005354:	e000      	b.n	8005358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005356:	bf00      	nop
    }

    if(status == HAL_OK)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10d      	bne.n	800537a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800535e:	4b4a      	ldr	r3, [pc, #296]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6819      	ldr	r1, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	3b01      	subs	r3, #1
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	430b      	orrs	r3, r1
 8005374:	4944      	ldr	r1, [pc, #272]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d17d      	bne.n	800547c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005380:	4b41      	ldr	r3, [pc, #260]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a40      	ldr	r2, [pc, #256]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005386:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800538a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538c:	f7fc ffaa 	bl	80022e4 <HAL_GetTick>
 8005390:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005392:	e009      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005394:	f7fc ffa6 	bl	80022e4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d902      	bls.n	80053a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	73fb      	strb	r3, [r7, #15]
        break;
 80053a6:	e005      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053a8:	4b37      	ldr	r3, [pc, #220]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ef      	bne.n	8005394 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d160      	bne.n	800547c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d111      	bne.n	80053e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053c0:	4b31      	ldr	r3, [pc, #196]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80053c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6892      	ldr	r2, [r2, #8]
 80053d0:	0211      	lsls	r1, r2, #8
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68d2      	ldr	r2, [r2, #12]
 80053d6:	0912      	lsrs	r2, r2, #4
 80053d8:	0452      	lsls	r2, r2, #17
 80053da:	430a      	orrs	r2, r1
 80053dc:	492a      	ldr	r1, [pc, #168]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]
 80053e2:	e027      	b.n	8005434 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d112      	bne.n	8005410 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ea:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80053f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6892      	ldr	r2, [r2, #8]
 80053fa:	0211      	lsls	r1, r2, #8
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6912      	ldr	r2, [r2, #16]
 8005400:	0852      	lsrs	r2, r2, #1
 8005402:	3a01      	subs	r2, #1
 8005404:	0552      	lsls	r2, r2, #21
 8005406:	430a      	orrs	r2, r1
 8005408:	491f      	ldr	r1, [pc, #124]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540a:	4313      	orrs	r3, r2
 800540c:	610b      	str	r3, [r1, #16]
 800540e:	e011      	b.n	8005434 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005410:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005418:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6892      	ldr	r2, [r2, #8]
 8005420:	0211      	lsls	r1, r2, #8
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6952      	ldr	r2, [r2, #20]
 8005426:	0852      	lsrs	r2, r2, #1
 8005428:	3a01      	subs	r2, #1
 800542a:	0652      	lsls	r2, r2, #25
 800542c:	430a      	orrs	r2, r1
 800542e:	4916      	ldr	r1, [pc, #88]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005434:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a13      	ldr	r2, [pc, #76]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800543e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fc ff50 	bl	80022e4 <HAL_GetTick>
 8005444:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005446:	e009      	b.n	800545c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005448:	f7fc ff4c 	bl	80022e4 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d902      	bls.n	800545c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	73fb      	strb	r3, [r7, #15]
          break;
 800545a:	e005      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800545c:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ef      	beq.n	8005448 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800546e:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	4904      	ldr	r1, [pc, #16]	@ (8005488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005478:	4313      	orrs	r3, r2
 800547a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000

0800548c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800549a:	4b6a      	ldr	r3, [pc, #424]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d018      	beq.n	80054d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054a6:	4b67      	ldr	r3, [pc, #412]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0203 	and.w	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d10d      	bne.n	80054d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054be:	4b61      	ldr	r3, [pc, #388]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
       ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d047      	beq.n	8005562 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	e044      	b.n	8005562 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d018      	beq.n	8005512 <RCCEx_PLLSAI2_Config+0x86>
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d825      	bhi.n	8005530 <RCCEx_PLLSAI2_Config+0xa4>
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d002      	beq.n	80054ee <RCCEx_PLLSAI2_Config+0x62>
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d009      	beq.n	8005500 <RCCEx_PLLSAI2_Config+0x74>
 80054ec:	e020      	b.n	8005530 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ee:	4b55      	ldr	r3, [pc, #340]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11d      	bne.n	8005536 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fe:	e01a      	b.n	8005536 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005500:	4b50      	ldr	r3, [pc, #320]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005508:	2b00      	cmp	r3, #0
 800550a:	d116      	bne.n	800553a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005510:	e013      	b.n	800553a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005512:	4b4c      	ldr	r3, [pc, #304]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800551e:	4b49      	ldr	r3, [pc, #292]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800552e:	e006      	b.n	800553e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
      break;
 8005534:	e004      	b.n	8005540 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005536:	bf00      	nop
 8005538:	e002      	b.n	8005540 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800553e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005546:	4b3f      	ldr	r3, [pc, #252]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	3b01      	subs	r3, #1
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	430b      	orrs	r3, r1
 800555c:	4939      	ldr	r1, [pc, #228]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555e:	4313      	orrs	r3, r2
 8005560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d167      	bne.n	8005638 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005568:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a35      	ldr	r2, [pc, #212]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fc feb6 	bl	80022e4 <HAL_GetTick>
 8005578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800557a:	e009      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800557c:	f7fc feb2 	bl	80022e4 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	73fb      	strb	r3, [r7, #15]
        break;
 800558e:	e005      	b.n	800559c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005590:	4b2c      	ldr	r3, [pc, #176]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ef      	bne.n	800557c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d14a      	bne.n	8005638 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d111      	bne.n	80055cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055a8:	4b26      	ldr	r3, [pc, #152]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6892      	ldr	r2, [r2, #8]
 80055b8:	0211      	lsls	r1, r2, #8
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68d2      	ldr	r2, [r2, #12]
 80055be:	0912      	lsrs	r2, r2, #4
 80055c0:	0452      	lsls	r2, r2, #17
 80055c2:	430a      	orrs	r2, r1
 80055c4:	491f      	ldr	r1, [pc, #124]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	614b      	str	r3, [r1, #20]
 80055ca:	e011      	b.n	80055f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6892      	ldr	r2, [r2, #8]
 80055dc:	0211      	lsls	r1, r2, #8
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6912      	ldr	r2, [r2, #16]
 80055e2:	0852      	lsrs	r2, r2, #1
 80055e4:	3a01      	subs	r2, #1
 80055e6:	0652      	lsls	r2, r2, #25
 80055e8:	430a      	orrs	r2, r1
 80055ea:	4916      	ldr	r1, [pc, #88]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055f0:	4b14      	ldr	r3, [pc, #80]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a13      	ldr	r2, [pc, #76]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fc fe72 	bl	80022e4 <HAL_GetTick>
 8005600:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005602:	e009      	b.n	8005618 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005604:	f7fc fe6e 	bl	80022e4 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d902      	bls.n	8005618 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	73fb      	strb	r3, [r7, #15]
          break;
 8005616:	e005      	b.n	8005624 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005618:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ef      	beq.n	8005604 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800562a:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4904      	ldr	r1, [pc, #16]	@ (8005644 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005634:	4313      	orrs	r3, r2
 8005636:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000

08005648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e049      	b.n	80056ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc fb64 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f000 fb7a 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e049      	b.n	800579c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f841 	bl	80057a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 fb23 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_PWM_Start+0x24>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e03c      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d109      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x3e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e02f      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d109      	bne.n	8005810 <HAL_TIM_PWM_Start+0x58>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e022      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b0c      	cmp	r3, #12
 8005814:	d109      	bne.n	800582a <HAL_TIM_PWM_Start+0x72>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b01      	cmp	r3, #1
 8005820:	bf14      	ite	ne
 8005822:	2301      	movne	r3, #1
 8005824:	2300      	moveq	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	e015      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b10      	cmp	r3, #16
 800582e:	d109      	bne.n	8005844 <HAL_TIM_PWM_Start+0x8c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	bf14      	ite	ne
 800583c:	2301      	movne	r3, #1
 800583e:	2300      	moveq	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	e008      	b.n	8005856 <HAL_TIM_PWM_Start+0x9e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e09c      	b.n	8005998 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <HAL_TIM_PWM_Start+0xb6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800586c:	e023      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b04      	cmp	r3, #4
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Start+0xc6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800587c:	e01b      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Start+0xd6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800588c:	e013      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xe6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800589c:	e00b      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xf6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ac:	e003      	b.n	80058b6 <HAL_TIM_PWM_Start+0xfe>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fe74 	bl	80065ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a35      	ldr	r2, [pc, #212]	@ (80059a0 <HAL_TIM_PWM_Start+0x1e8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x13e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a34      	ldr	r2, [pc, #208]	@ (80059a4 <HAL_TIM_PWM_Start+0x1ec>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x13e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a32      	ldr	r2, [pc, #200]	@ (80059a8 <HAL_TIM_PWM_Start+0x1f0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x13e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a31      	ldr	r2, [pc, #196]	@ (80059ac <HAL_TIM_PWM_Start+0x1f4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x13e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2f      	ldr	r2, [pc, #188]	@ (80059b0 <HAL_TIM_PWM_Start+0x1f8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_TIM_PWM_Start+0x142>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_TIM_PWM_Start+0x144>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800590e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a22      	ldr	r2, [pc, #136]	@ (80059a0 <HAL_TIM_PWM_Start+0x1e8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01d      	beq.n	8005956 <HAL_TIM_PWM_Start+0x19e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005922:	d018      	beq.n	8005956 <HAL_TIM_PWM_Start+0x19e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a22      	ldr	r2, [pc, #136]	@ (80059b4 <HAL_TIM_PWM_Start+0x1fc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_TIM_PWM_Start+0x19e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <HAL_TIM_PWM_Start+0x200>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <HAL_TIM_PWM_Start+0x19e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1f      	ldr	r2, [pc, #124]	@ (80059bc <HAL_TIM_PWM_Start+0x204>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_TIM_PWM_Start+0x19e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a17      	ldr	r2, [pc, #92]	@ (80059a4 <HAL_TIM_PWM_Start+0x1ec>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_TIM_PWM_Start+0x19e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a15      	ldr	r2, [pc, #84]	@ (80059a8 <HAL_TIM_PWM_Start+0x1f0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d115      	bne.n	8005982 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	4b18      	ldr	r3, [pc, #96]	@ (80059c0 <HAL_TIM_PWM_Start+0x208>)
 800595e:	4013      	ands	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b06      	cmp	r3, #6
 8005966:	d015      	beq.n	8005994 <HAL_TIM_PWM_Start+0x1dc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596e:	d011      	beq.n	8005994 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005980:	e008      	b.n	8005994 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e000      	b.n	8005996 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40013400 	.word	0x40013400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	00010007 	.word	0x00010007

080059c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059de:	2302      	movs	r3, #2
 80059e0:	e0ff      	b.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b14      	cmp	r3, #20
 80059ee:	f200 80f0 	bhi.w	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005bd3 	.word	0x08005bd3
 8005a00:	08005bd3 	.word	0x08005bd3
 8005a04:	08005bd3 	.word	0x08005bd3
 8005a08:	08005a8d 	.word	0x08005a8d
 8005a0c:	08005bd3 	.word	0x08005bd3
 8005a10:	08005bd3 	.word	0x08005bd3
 8005a14:	08005bd3 	.word	0x08005bd3
 8005a18:	08005acf 	.word	0x08005acf
 8005a1c:	08005bd3 	.word	0x08005bd3
 8005a20:	08005bd3 	.word	0x08005bd3
 8005a24:	08005bd3 	.word	0x08005bd3
 8005a28:	08005b0f 	.word	0x08005b0f
 8005a2c:	08005bd3 	.word	0x08005bd3
 8005a30:	08005bd3 	.word	0x08005bd3
 8005a34:	08005bd3 	.word	0x08005bd3
 8005a38:	08005b51 	.word	0x08005b51
 8005a3c:	08005bd3 	.word	0x08005bd3
 8005a40:	08005bd3 	.word	0x08005bd3
 8005a44:	08005bd3 	.word	0x08005bd3
 8005a48:	08005b91 	.word	0x08005b91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fa3a 	bl	8005ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0208 	orr.w	r2, r2, #8
 8005a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0204 	bic.w	r2, r2, #4
 8005a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691a      	ldr	r2, [r3, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	619a      	str	r2, [r3, #24]
      break;
 8005a8a:	e0a5      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 faaa 	bl	8005fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6999      	ldr	r1, [r3, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	021a      	lsls	r2, r3, #8
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	619a      	str	r2, [r3, #24]
      break;
 8005acc:	e084      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fb13 	bl	8006100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0208 	orr.w	r2, r2, #8
 8005ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0204 	bic.w	r2, r2, #4
 8005af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69d9      	ldr	r1, [r3, #28]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	61da      	str	r2, [r3, #28]
      break;
 8005b0c:	e064      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fb7b 	bl	8006210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69d9      	ldr	r1, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	021a      	lsls	r2, r3, #8
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	61da      	str	r2, [r3, #28]
      break;
 8005b4e:	e043      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fbc4 	bl	80062e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0208 	orr.w	r2, r2, #8
 8005b6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0204 	bic.w	r2, r2, #4
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b8e:	e023      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fc08 	bl	80063ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005baa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop

08005bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_TIM_ConfigClockSource+0x1c>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e0b6      	b.n	8005d76 <HAL_TIM_ConfigClockSource+0x18a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c44:	d03e      	beq.n	8005cc4 <HAL_TIM_ConfigClockSource+0xd8>
 8005c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c4a:	f200 8087 	bhi.w	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c52:	f000 8086 	beq.w	8005d62 <HAL_TIM_ConfigClockSource+0x176>
 8005c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c5a:	d87f      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b70      	cmp	r3, #112	@ 0x70
 8005c5e:	d01a      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0xaa>
 8005c60:	2b70      	cmp	r3, #112	@ 0x70
 8005c62:	d87b      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c64:	2b60      	cmp	r3, #96	@ 0x60
 8005c66:	d050      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x11e>
 8005c68:	2b60      	cmp	r3, #96	@ 0x60
 8005c6a:	d877      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c6c:	2b50      	cmp	r3, #80	@ 0x50
 8005c6e:	d03c      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xfe>
 8005c70:	2b50      	cmp	r3, #80	@ 0x50
 8005c72:	d873      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d058      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x13e>
 8005c78:	2b40      	cmp	r3, #64	@ 0x40
 8005c7a:	d86f      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c7c:	2b30      	cmp	r3, #48	@ 0x30
 8005c7e:	d064      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15e>
 8005c80:	2b30      	cmp	r3, #48	@ 0x30
 8005c82:	d86b      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d060      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15e>
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d867      	bhi.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d05c      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15e>
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d05a      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x15e>
 8005c94:	e062      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ca6:	f000 fc61 	bl	800656c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	609a      	str	r2, [r3, #8]
      break;
 8005cc2:	e04f      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cd4:	f000 fc4a 	bl	800656c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ce6:	609a      	str	r2, [r3, #8]
      break;
 8005ce8:	e03c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 fbbe 	bl	8006478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2150      	movs	r1, #80	@ 0x50
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fc17 	bl	8006536 <TIM_ITRx_SetConfig>
      break;
 8005d08:	e02c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 fbdd 	bl	80064d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2160      	movs	r1, #96	@ 0x60
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fc07 	bl	8006536 <TIM_ITRx_SetConfig>
      break;
 8005d28:	e01c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 fb9e 	bl	8006478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2140      	movs	r1, #64	@ 0x40
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fbf7 	bl	8006536 <TIM_ITRx_SetConfig>
      break;
 8005d48:	e00c      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f000 fbee 	bl	8006536 <TIM_ITRx_SetConfig>
      break;
 8005d5a:	e003      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d60:	e000      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a46      	ldr	r2, [pc, #280]	@ (8005eac <TIM_Base_SetConfig+0x12c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d013      	beq.n	8005dc0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d9e:	d00f      	beq.n	8005dc0 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a43      	ldr	r2, [pc, #268]	@ (8005eb0 <TIM_Base_SetConfig+0x130>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00b      	beq.n	8005dc0 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a42      	ldr	r2, [pc, #264]	@ (8005eb4 <TIM_Base_SetConfig+0x134>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a41      	ldr	r2, [pc, #260]	@ (8005eb8 <TIM_Base_SetConfig+0x138>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a40      	ldr	r2, [pc, #256]	@ (8005ebc <TIM_Base_SetConfig+0x13c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d108      	bne.n	8005dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a35      	ldr	r2, [pc, #212]	@ (8005eac <TIM_Base_SetConfig+0x12c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01f      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de0:	d01b      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a32      	ldr	r2, [pc, #200]	@ (8005eb0 <TIM_Base_SetConfig+0x130>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d017      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a31      	ldr	r2, [pc, #196]	@ (8005eb4 <TIM_Base_SetConfig+0x134>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a30      	ldr	r2, [pc, #192]	@ (8005eb8 <TIM_Base_SetConfig+0x138>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00f      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8005ebc <TIM_Base_SetConfig+0x13c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec0 <TIM_Base_SetConfig+0x140>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec4 <TIM_Base_SetConfig+0x144>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_Base_SetConfig+0x9a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec8 <TIM_Base_SetConfig+0x148>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d108      	bne.n	8005e2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a16      	ldr	r2, [pc, #88]	@ (8005eac <TIM_Base_SetConfig+0x12c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00f      	beq.n	8005e78 <TIM_Base_SetConfig+0xf8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <TIM_Base_SetConfig+0x13c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_Base_SetConfig+0xf8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <TIM_Base_SetConfig+0x140>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_Base_SetConfig+0xf8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <TIM_Base_SetConfig+0x144>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_Base_SetConfig+0xf8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <TIM_Base_SetConfig+0x148>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d103      	bne.n	8005e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d105      	bne.n	8005e9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	611a      	str	r2, [r3, #16]
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f023 0201 	bic.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f023 0302 	bic.w	r3, r3, #2
 8005f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd8 <TIM_OC1_SetConfig+0x10c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <TIM_OC1_SetConfig+0x80>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fdc <TIM_OC1_SetConfig+0x110>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <TIM_OC1_SetConfig+0x80>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe0 <TIM_OC1_SetConfig+0x114>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d007      	beq.n	8005f4c <TIM_OC1_SetConfig+0x80>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a29      	ldr	r2, [pc, #164]	@ (8005fe4 <TIM_OC1_SetConfig+0x118>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC1_SetConfig+0x80>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a28      	ldr	r2, [pc, #160]	@ (8005fe8 <TIM_OC1_SetConfig+0x11c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10c      	bne.n	8005f66 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0308 	bic.w	r3, r3, #8
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <TIM_OC1_SetConfig+0x10c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_OC1_SetConfig+0xc2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1a      	ldr	r2, [pc, #104]	@ (8005fdc <TIM_OC1_SetConfig+0x110>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_OC1_SetConfig+0xc2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a19      	ldr	r2, [pc, #100]	@ (8005fe0 <TIM_OC1_SetConfig+0x114>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_OC1_SetConfig+0xc2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a18      	ldr	r2, [pc, #96]	@ (8005fe4 <TIM_OC1_SetConfig+0x118>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC1_SetConfig+0xc2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a17      	ldr	r2, [pc, #92]	@ (8005fe8 <TIM_OC1_SetConfig+0x11c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d111      	bne.n	8005fb2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	621a      	str	r2, [r3, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800

08005fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f023 0210 	bic.w	r2, r3, #16
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0320 	bic.w	r3, r3, #32
 800603a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a28      	ldr	r2, [pc, #160]	@ (80060ec <TIM_OC2_SetConfig+0x100>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC2_SetConfig+0x6c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a27      	ldr	r2, [pc, #156]	@ (80060f0 <TIM_OC2_SetConfig+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d10d      	bne.n	8006074 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a1d      	ldr	r2, [pc, #116]	@ (80060ec <TIM_OC2_SetConfig+0x100>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00f      	beq.n	800609c <TIM_OC2_SetConfig+0xb0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a1c      	ldr	r2, [pc, #112]	@ (80060f0 <TIM_OC2_SetConfig+0x104>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00b      	beq.n	800609c <TIM_OC2_SetConfig+0xb0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <TIM_OC2_SetConfig+0x108>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d007      	beq.n	800609c <TIM_OC2_SetConfig+0xb0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <TIM_OC2_SetConfig+0x10c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_OC2_SetConfig+0xb0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <TIM_OC2_SetConfig+0x110>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d113      	bne.n	80060c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40013400 	.word	0x40013400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800

08006100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800614c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a27      	ldr	r2, [pc, #156]	@ (80061fc <TIM_OC3_SetConfig+0xfc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC3_SetConfig+0x6a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a26      	ldr	r2, [pc, #152]	@ (8006200 <TIM_OC3_SetConfig+0x100>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d10d      	bne.n	8006186 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1c      	ldr	r2, [pc, #112]	@ (80061fc <TIM_OC3_SetConfig+0xfc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00f      	beq.n	80061ae <TIM_OC3_SetConfig+0xae>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1b      	ldr	r2, [pc, #108]	@ (8006200 <TIM_OC3_SetConfig+0x100>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00b      	beq.n	80061ae <TIM_OC3_SetConfig+0xae>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a1a      	ldr	r2, [pc, #104]	@ (8006204 <TIM_OC3_SetConfig+0x104>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <TIM_OC3_SetConfig+0xae>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a19      	ldr	r2, [pc, #100]	@ (8006208 <TIM_OC3_SetConfig+0x108>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <TIM_OC3_SetConfig+0xae>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a18      	ldr	r2, [pc, #96]	@ (800620c <TIM_OC3_SetConfig+0x10c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d113      	bne.n	80061d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	621a      	str	r2, [r3, #32]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40013400 	.word	0x40013400
 8006204:	40014000 	.word	0x40014000
 8006208:	40014400 	.word	0x40014400
 800620c:	40014800 	.word	0x40014800

08006210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800624a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800625e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	031b      	lsls	r3, r3, #12
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a18      	ldr	r2, [pc, #96]	@ (80062d0 <TIM_OC4_SetConfig+0xc0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00f      	beq.n	8006294 <TIM_OC4_SetConfig+0x84>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a17      	ldr	r2, [pc, #92]	@ (80062d4 <TIM_OC4_SetConfig+0xc4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_OC4_SetConfig+0x84>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <TIM_OC4_SetConfig+0xc8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_OC4_SetConfig+0x84>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a15      	ldr	r2, [pc, #84]	@ (80062dc <TIM_OC4_SetConfig+0xcc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_OC4_SetConfig+0x84>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a14      	ldr	r2, [pc, #80]	@ (80062e0 <TIM_OC4_SetConfig+0xd0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d109      	bne.n	80062a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800629a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40013400 	.word	0x40013400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800

080062e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006328:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a17      	ldr	r2, [pc, #92]	@ (8006398 <TIM_OC5_SetConfig+0xb4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00f      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a16      	ldr	r2, [pc, #88]	@ (800639c <TIM_OC5_SetConfig+0xb8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a15      	ldr	r2, [pc, #84]	@ (80063a0 <TIM_OC5_SetConfig+0xbc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a14      	ldr	r2, [pc, #80]	@ (80063a4 <TIM_OC5_SetConfig+0xc0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC5_SetConfig+0x7a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a13      	ldr	r2, [pc, #76]	@ (80063a8 <TIM_OC5_SetConfig+0xc4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d109      	bne.n	8006372 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	621a      	str	r2, [r3, #32]
}
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40013400 	.word	0x40013400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800

080063ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	051b      	lsls	r3, r3, #20
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a18      	ldr	r2, [pc, #96]	@ (8006464 <TIM_OC6_SetConfig+0xb8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00f      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a17      	ldr	r2, [pc, #92]	@ (8006468 <TIM_OC6_SetConfig+0xbc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00b      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a16      	ldr	r2, [pc, #88]	@ (800646c <TIM_OC6_SetConfig+0xc0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d007      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <TIM_OC6_SetConfig+0xc4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC6_SetConfig+0x7c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a14      	ldr	r2, [pc, #80]	@ (8006474 <TIM_OC6_SetConfig+0xc8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d109      	bne.n	800643c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800642e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40014000 	.word	0x40014000
 8006470:	40014400 	.word	0x40014400
 8006474:	40014800 	.word	0x40014800

08006478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f023 0201 	bic.w	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f023 030a 	bic.w	r3, r3, #10
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f023 0210 	bic.w	r2, r3, #16
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006512:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	f043 0307 	orr.w	r3, r3, #7
 8006558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	021a      	lsls	r2, r3, #8
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	431a      	orrs	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4313      	orrs	r3, r2
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	609a      	str	r2, [r3, #8]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	2201      	movs	r2, #1
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1a      	ldr	r2, [r3, #32]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	43db      	mvns	r3, r3
 80065ce:	401a      	ands	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1a      	ldr	r2, [r3, #32]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	fa01 f303 	lsl.w	r3, r1, r3
 80065e4:	431a      	orrs	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800660c:	2302      	movs	r3, #2
 800660e:	e068      	b.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2e      	ldr	r2, [pc, #184]	@ (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2d      	ldr	r2, [pc, #180]	@ (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d108      	bne.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800664a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800665c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1e      	ldr	r2, [pc, #120]	@ (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d01d      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006682:	d018      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1b      	ldr	r2, [pc, #108]	@ (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1a      	ldr	r2, [pc, #104]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a18      	ldr	r2, [pc, #96]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a13      	ldr	r2, [pc, #76]	@ (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a14      	ldr	r2, [pc, #80]	@ (8006704 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10c      	bne.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40013400 	.word	0x40013400
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40014000 	.word	0x40014000

08006708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e040      	b.n	800679c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb fbca 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2224      	movs	r2, #36	@ 0x24
 8006734:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 feb0 	bl	80074b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fbf5 	bl	8006f44 <UART_SetConfig>
 800675a:	4603      	mov	r3, r0
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e01b      	b.n	800679c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 ff2f 	bl	80075f8 <UART_CheckIdleState>
 800679a:	4603      	mov	r3, r0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b08b      	sub	sp, #44	@ 0x2c
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d147      	bne.n	800684a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_UART_Transmit_IT+0x22>
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e040      	b.n	800684c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	88fa      	ldrh	r2, [r7, #6]
 80067d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	88fa      	ldrh	r2, [r7, #6]
 80067dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2221      	movs	r2, #33	@ 0x21
 80067f2:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fc:	d107      	bne.n	800680e <HAL_UART_Transmit_IT+0x6a>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d103      	bne.n	800680e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <HAL_UART_Transmit_IT+0xb4>)
 800680a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800680c:	e002      	b.n	8006814 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a12      	ldr	r2, [pc, #72]	@ (800685c <HAL_UART_Transmit_IT+0xb8>)
 8006812:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	613b      	str	r3, [r7, #16]
   return(result);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006828:	627b      	str	r3, [r7, #36]	@ 0x24
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	69f9      	ldr	r1, [r7, #28]
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e6      	bne.n	8006814 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e000      	b.n	800684c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800684a:	2302      	movs	r3, #2
  }
}
 800684c:	4618      	mov	r0, r3
 800684e:	372c      	adds	r7, #44	@ 0x2c
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	08007b5b 	.word	0x08007b5b
 800685c:	08007aa5 	.word	0x08007aa5

08006860 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	@ 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006874:	2b20      	cmp	r3, #32
 8006876:	d137      	bne.n	80068e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_UART_Receive_IT+0x24>
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e030      	b.n	80068ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a18      	ldr	r2, [pc, #96]	@ (80068f4 <HAL_UART_Receive_IT+0x94>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d01f      	beq.n	80068d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d018      	beq.n	80068d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	613b      	str	r3, [r7, #16]
   return(result);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	623b      	str	r3, [r7, #32]
 80068c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	69f9      	ldr	r1, [r7, #28]
 80068ca:	6a3a      	ldr	r2, [r7, #32]
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e6      	bne.n	80068a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	461a      	mov	r2, r3
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 ffa0 	bl	8007824 <UART_Start_Receive_IT>
 80068e4:	4603      	mov	r3, r0
 80068e6:	e000      	b.n	80068ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3728      	adds	r7, #40	@ 0x28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40008000 	.word	0x40008000

080068f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b0ba      	sub	sp, #232	@ 0xe8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800691e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006922:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006926:	4013      	ands	r3, r2
 8006928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800692c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d115      	bne.n	8006960 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00f      	beq.n	8006960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 82ca 	beq.w	8006eea <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
      }
      return;
 800695e:	e2c4      	b.n	8006eea <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8117 	beq.w	8006b98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800696a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800697a:	4b85      	ldr	r3, [pc, #532]	@ (8006b90 <HAL_UART_IRQHandler+0x298>)
 800697c:	4013      	ands	r3, r2
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 810a 	beq.w	8006b98 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d011      	beq.n	80069b4 <HAL_UART_IRQHandler+0xbc>
 8006990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2201      	movs	r2, #1
 80069a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d011      	beq.n	80069e4 <HAL_UART_IRQHandler+0xec>
 80069c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2202      	movs	r2, #2
 80069d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d011      	beq.n	8006a14 <HAL_UART_IRQHandler+0x11c>
 80069f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2204      	movs	r2, #4
 8006a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0a:	f043 0202 	orr.w	r2, r3, #2
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d105      	bne.n	8006a38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a46:	f043 0208 	orr.w	r2, r3, #8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d012      	beq.n	8006a82 <HAL_UART_IRQHandler+0x18a>
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00c      	beq.n	8006a82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8230 	beq.w	8006eee <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00d      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006abc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aca:	2b40      	cmp	r3, #64	@ 0x40
 8006acc:	d005      	beq.n	8006ada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ad2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04f      	beq.n	8006b7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 ff68 	bl	80079b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d141      	bne.n	8006b72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3308      	adds	r3, #8
 8006b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1d9      	bne.n	8006aee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d013      	beq.n	8006b6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b46:	4a13      	ldr	r2, [pc, #76]	@ (8006b94 <HAL_UART_IRQHandler+0x29c>)
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fd f857 	bl	8003c02 <HAL_DMA_Abort_IT>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d017      	beq.n	8006b8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b68:	e00f      	b.n	8006b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f9d4 	bl	8006f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b70:	e00b      	b.n	8006b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9d0 	bl	8006f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	e007      	b.n	8006b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9cc 	bl	8006f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006b88:	e1b1      	b.n	8006eee <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8a:	bf00      	nop
    return;
 8006b8c:	e1af      	b.n	8006eee <HAL_UART_IRQHandler+0x5f6>
 8006b8e:	bf00      	nop
 8006b90:	04000120 	.word	0x04000120
 8006b94:	08007a79 	.word	0x08007a79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f040 816a 	bne.w	8006e76 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8163 	beq.w	8006e76 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 815c 	beq.w	8006e76 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	f040 80d4 	bne.w	8006d7e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80ad 	beq.w	8006d46 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	f080 80a5 	bcs.w	8006d46 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f040 8086 	bne.w	8006d24 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1da      	bne.n	8006c18 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c74:	f023 0301 	bic.w	r3, r3, #1
 8006c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e1      	bne.n	8006c62 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e3      	bne.n	8006c9e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cf4:	f023 0310 	bic.w	r3, r3, #16
 8006cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e4      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fc ff31 	bl	8003b86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8f4 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d44:	e0d5      	b.n	8006ef2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d50:	429a      	cmp	r2, r3
 8006d52:	f040 80ce 	bne.w	8006ef2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	f040 80c5 	bne.w	8006ef2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8d8 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
      return;
 8006d7c:	e0b9      	b.n	8006ef2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80ab 	beq.w	8006ef6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80a6 	beq.w	8006ef6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e4      	bne.n	8006daa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3308      	adds	r3, #8
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	623b      	str	r3, [r7, #32]
   return(result);
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e04:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e3      	bne.n	8006de0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	69b9      	ldr	r1, [r7, #24]
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e4      	bne.n	8006e2c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f85c 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e74:	e03f      	b.n	8006ef6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x5a8>
 8006e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f8a5 	bl	8007fe8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e9e:	e02d      	b.n	8006efc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00e      	beq.n	8006eca <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01c      	beq.n	8006efa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
    }
    return;
 8006ec8:	e017      	b.n	8006efa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d012      	beq.n	8006efc <HAL_UART_IRQHandler+0x604>
 8006ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fe99 	bl	8007c1a <UART_EndTransmit_IT>
    return;
 8006ee8:	e008      	b.n	8006efc <HAL_UART_IRQHandler+0x604>
      return;
 8006eea:	bf00      	nop
 8006eec:	e006      	b.n	8006efc <HAL_UART_IRQHandler+0x604>
    return;
 8006eee:	bf00      	nop
 8006ef0:	e004      	b.n	8006efc <HAL_UART_IRQHandler+0x604>
      return;
 8006ef2:	bf00      	nop
 8006ef4:	e002      	b.n	8006efc <HAL_UART_IRQHandler+0x604>
      return;
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <HAL_UART_IRQHandler+0x604>
    return;
 8006efa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006efc:	37e8      	adds	r7, #232	@ 0xe8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop

08006f04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f48:	b08a      	sub	sp, #40	@ 0x28
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4ba4      	ldr	r3, [pc, #656]	@ (8007204 <UART_SetConfig+0x2c0>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a99      	ldr	r2, [pc, #612]	@ (8007208 <UART_SetConfig+0x2c4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fac:	4313      	orrs	r3, r2
 8006fae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a90      	ldr	r2, [pc, #576]	@ (800720c <UART_SetConfig+0x2c8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d126      	bne.n	800701c <UART_SetConfig+0xd8>
 8006fce:	4b90      	ldr	r3, [pc, #576]	@ (8007210 <UART_SetConfig+0x2cc>)
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d81b      	bhi.n	8007014 <UART_SetConfig+0xd0>
 8006fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe4 <UART_SetConfig+0xa0>)
 8006fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe2:	bf00      	nop
 8006fe4:	08006ff5 	.word	0x08006ff5
 8006fe8:	08007005 	.word	0x08007005
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffa:	e116      	b.n	800722a <UART_SetConfig+0x2e6>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007002:	e112      	b.n	800722a <UART_SetConfig+0x2e6>
 8007004:	2304      	movs	r3, #4
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700a:	e10e      	b.n	800722a <UART_SetConfig+0x2e6>
 800700c:	2308      	movs	r3, #8
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007012:	e10a      	b.n	800722a <UART_SetConfig+0x2e6>
 8007014:	2310      	movs	r3, #16
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e106      	b.n	800722a <UART_SetConfig+0x2e6>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a7c      	ldr	r2, [pc, #496]	@ (8007214 <UART_SetConfig+0x2d0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d138      	bne.n	8007098 <UART_SetConfig+0x154>
 8007026:	4b7a      	ldr	r3, [pc, #488]	@ (8007210 <UART_SetConfig+0x2cc>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702c:	f003 030c 	and.w	r3, r3, #12
 8007030:	2b0c      	cmp	r3, #12
 8007032:	d82d      	bhi.n	8007090 <UART_SetConfig+0x14c>
 8007034:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0xf8>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007071 	.word	0x08007071
 8007040:	08007091 	.word	0x08007091
 8007044:	08007091 	.word	0x08007091
 8007048:	08007091 	.word	0x08007091
 800704c:	08007081 	.word	0x08007081
 8007050:	08007091 	.word	0x08007091
 8007054:	08007091 	.word	0x08007091
 8007058:	08007091 	.word	0x08007091
 800705c:	08007079 	.word	0x08007079
 8007060:	08007091 	.word	0x08007091
 8007064:	08007091 	.word	0x08007091
 8007068:	08007091 	.word	0x08007091
 800706c:	08007089 	.word	0x08007089
 8007070:	2300      	movs	r3, #0
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007076:	e0d8      	b.n	800722a <UART_SetConfig+0x2e6>
 8007078:	2302      	movs	r3, #2
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707e:	e0d4      	b.n	800722a <UART_SetConfig+0x2e6>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007086:	e0d0      	b.n	800722a <UART_SetConfig+0x2e6>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800708e:	e0cc      	b.n	800722a <UART_SetConfig+0x2e6>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007096:	e0c8      	b.n	800722a <UART_SetConfig+0x2e6>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a5e      	ldr	r2, [pc, #376]	@ (8007218 <UART_SetConfig+0x2d4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d125      	bne.n	80070ee <UART_SetConfig+0x1aa>
 80070a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007210 <UART_SetConfig+0x2cc>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070ac:	2b30      	cmp	r3, #48	@ 0x30
 80070ae:	d016      	beq.n	80070de <UART_SetConfig+0x19a>
 80070b0:	2b30      	cmp	r3, #48	@ 0x30
 80070b2:	d818      	bhi.n	80070e6 <UART_SetConfig+0x1a2>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d00a      	beq.n	80070ce <UART_SetConfig+0x18a>
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d814      	bhi.n	80070e6 <UART_SetConfig+0x1a2>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <UART_SetConfig+0x182>
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d008      	beq.n	80070d6 <UART_SetConfig+0x192>
 80070c4:	e00f      	b.n	80070e6 <UART_SetConfig+0x1a2>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070cc:	e0ad      	b.n	800722a <UART_SetConfig+0x2e6>
 80070ce:	2302      	movs	r3, #2
 80070d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d4:	e0a9      	b.n	800722a <UART_SetConfig+0x2e6>
 80070d6:	2304      	movs	r3, #4
 80070d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070dc:	e0a5      	b.n	800722a <UART_SetConfig+0x2e6>
 80070de:	2308      	movs	r3, #8
 80070e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e4:	e0a1      	b.n	800722a <UART_SetConfig+0x2e6>
 80070e6:	2310      	movs	r3, #16
 80070e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ec:	e09d      	b.n	800722a <UART_SetConfig+0x2e6>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4a      	ldr	r2, [pc, #296]	@ (800721c <UART_SetConfig+0x2d8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d125      	bne.n	8007144 <UART_SetConfig+0x200>
 80070f8:	4b45      	ldr	r3, [pc, #276]	@ (8007210 <UART_SetConfig+0x2cc>)
 80070fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007102:	2bc0      	cmp	r3, #192	@ 0xc0
 8007104:	d016      	beq.n	8007134 <UART_SetConfig+0x1f0>
 8007106:	2bc0      	cmp	r3, #192	@ 0xc0
 8007108:	d818      	bhi.n	800713c <UART_SetConfig+0x1f8>
 800710a:	2b80      	cmp	r3, #128	@ 0x80
 800710c:	d00a      	beq.n	8007124 <UART_SetConfig+0x1e0>
 800710e:	2b80      	cmp	r3, #128	@ 0x80
 8007110:	d814      	bhi.n	800713c <UART_SetConfig+0x1f8>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <UART_SetConfig+0x1d8>
 8007116:	2b40      	cmp	r3, #64	@ 0x40
 8007118:	d008      	beq.n	800712c <UART_SetConfig+0x1e8>
 800711a:	e00f      	b.n	800713c <UART_SetConfig+0x1f8>
 800711c:	2300      	movs	r3, #0
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007122:	e082      	b.n	800722a <UART_SetConfig+0x2e6>
 8007124:	2302      	movs	r3, #2
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712a:	e07e      	b.n	800722a <UART_SetConfig+0x2e6>
 800712c:	2304      	movs	r3, #4
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007132:	e07a      	b.n	800722a <UART_SetConfig+0x2e6>
 8007134:	2308      	movs	r3, #8
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713a:	e076      	b.n	800722a <UART_SetConfig+0x2e6>
 800713c:	2310      	movs	r3, #16
 800713e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007142:	e072      	b.n	800722a <UART_SetConfig+0x2e6>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a35      	ldr	r2, [pc, #212]	@ (8007220 <UART_SetConfig+0x2dc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d12a      	bne.n	80071a4 <UART_SetConfig+0x260>
 800714e:	4b30      	ldr	r3, [pc, #192]	@ (8007210 <UART_SetConfig+0x2cc>)
 8007150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800715c:	d01a      	beq.n	8007194 <UART_SetConfig+0x250>
 800715e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007162:	d81b      	bhi.n	800719c <UART_SetConfig+0x258>
 8007164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007168:	d00c      	beq.n	8007184 <UART_SetConfig+0x240>
 800716a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800716e:	d815      	bhi.n	800719c <UART_SetConfig+0x258>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <UART_SetConfig+0x238>
 8007174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007178:	d008      	beq.n	800718c <UART_SetConfig+0x248>
 800717a:	e00f      	b.n	800719c <UART_SetConfig+0x258>
 800717c:	2300      	movs	r3, #0
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007182:	e052      	b.n	800722a <UART_SetConfig+0x2e6>
 8007184:	2302      	movs	r3, #2
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718a:	e04e      	b.n	800722a <UART_SetConfig+0x2e6>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007192:	e04a      	b.n	800722a <UART_SetConfig+0x2e6>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800719a:	e046      	b.n	800722a <UART_SetConfig+0x2e6>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a2:	e042      	b.n	800722a <UART_SetConfig+0x2e6>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a17      	ldr	r2, [pc, #92]	@ (8007208 <UART_SetConfig+0x2c4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d13a      	bne.n	8007224 <UART_SetConfig+0x2e0>
 80071ae:	4b18      	ldr	r3, [pc, #96]	@ (8007210 <UART_SetConfig+0x2cc>)
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071bc:	d01a      	beq.n	80071f4 <UART_SetConfig+0x2b0>
 80071be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071c2:	d81b      	bhi.n	80071fc <UART_SetConfig+0x2b8>
 80071c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071c8:	d00c      	beq.n	80071e4 <UART_SetConfig+0x2a0>
 80071ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ce:	d815      	bhi.n	80071fc <UART_SetConfig+0x2b8>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <UART_SetConfig+0x298>
 80071d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071d8:	d008      	beq.n	80071ec <UART_SetConfig+0x2a8>
 80071da:	e00f      	b.n	80071fc <UART_SetConfig+0x2b8>
 80071dc:	2300      	movs	r3, #0
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e2:	e022      	b.n	800722a <UART_SetConfig+0x2e6>
 80071e4:	2302      	movs	r3, #2
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ea:	e01e      	b.n	800722a <UART_SetConfig+0x2e6>
 80071ec:	2304      	movs	r3, #4
 80071ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f2:	e01a      	b.n	800722a <UART_SetConfig+0x2e6>
 80071f4:	2308      	movs	r3, #8
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fa:	e016      	b.n	800722a <UART_SetConfig+0x2e6>
 80071fc:	2310      	movs	r3, #16
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007202:	e012      	b.n	800722a <UART_SetConfig+0x2e6>
 8007204:	efff69f3 	.word	0xefff69f3
 8007208:	40008000 	.word	0x40008000
 800720c:	40013800 	.word	0x40013800
 8007210:	40021000 	.word	0x40021000
 8007214:	40004400 	.word	0x40004400
 8007218:	40004800 	.word	0x40004800
 800721c:	40004c00 	.word	0x40004c00
 8007220:	40005000 	.word	0x40005000
 8007224:	2310      	movs	r3, #16
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a9f      	ldr	r2, [pc, #636]	@ (80074ac <UART_SetConfig+0x568>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d17a      	bne.n	800732a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007234:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007238:	2b08      	cmp	r3, #8
 800723a:	d824      	bhi.n	8007286 <UART_SetConfig+0x342>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <UART_SetConfig+0x300>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007269 	.word	0x08007269
 8007248:	08007287 	.word	0x08007287
 800724c:	08007271 	.word	0x08007271
 8007250:	08007287 	.word	0x08007287
 8007254:	08007277 	.word	0x08007277
 8007258:	08007287 	.word	0x08007287
 800725c:	08007287 	.word	0x08007287
 8007260:	08007287 	.word	0x08007287
 8007264:	0800727f 	.word	0x0800727f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fd fca6 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 800726c:	61f8      	str	r0, [r7, #28]
        break;
 800726e:	e010      	b.n	8007292 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007270:	4b8f      	ldr	r3, [pc, #572]	@ (80074b0 <UART_SetConfig+0x56c>)
 8007272:	61fb      	str	r3, [r7, #28]
        break;
 8007274:	e00d      	b.n	8007292 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007276:	f7fd fc07 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 800727a:	61f8      	str	r0, [r7, #28]
        break;
 800727c:	e009      	b.n	8007292 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007282:	61fb      	str	r3, [r7, #28]
        break;
 8007284:	e005      	b.n	8007292 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 80fb 	beq.w	8007490 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	4413      	add	r3, r2
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d305      	bcc.n	80072b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d903      	bls.n	80072be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072bc:	e0e8      	b.n	8007490 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2200      	movs	r2, #0
 80072c2:	461c      	mov	r4, r3
 80072c4:	4615      	mov	r5, r2
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	022b      	lsls	r3, r5, #8
 80072d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072d4:	0222      	lsls	r2, r4, #8
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6849      	ldr	r1, [r1, #4]
 80072da:	0849      	lsrs	r1, r1, #1
 80072dc:	2000      	movs	r0, #0
 80072de:	4688      	mov	r8, r1
 80072e0:	4681      	mov	r9, r0
 80072e2:	eb12 0a08 	adds.w	sl, r2, r8
 80072e6:	eb43 0b09 	adc.w	fp, r3, r9
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	603b      	str	r3, [r7, #0]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f8:	4650      	mov	r0, sl
 80072fa:	4659      	mov	r1, fp
 80072fc:	f7f9 fcd4 	bl	8000ca8 <__aeabi_uldivmod>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4613      	mov	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800730e:	d308      	bcc.n	8007322 <UART_SetConfig+0x3de>
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007316:	d204      	bcs.n	8007322 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	60da      	str	r2, [r3, #12]
 8007320:	e0b6      	b.n	8007490 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007328:	e0b2      	b.n	8007490 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007332:	d15e      	bne.n	80073f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007334:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007338:	2b08      	cmp	r3, #8
 800733a:	d828      	bhi.n	800738e <UART_SetConfig+0x44a>
 800733c:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x400>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007369 	.word	0x08007369
 8007348:	08007371 	.word	0x08007371
 800734c:	08007379 	.word	0x08007379
 8007350:	0800738f 	.word	0x0800738f
 8007354:	0800737f 	.word	0x0800737f
 8007358:	0800738f 	.word	0x0800738f
 800735c:	0800738f 	.word	0x0800738f
 8007360:	0800738f 	.word	0x0800738f
 8007364:	08007387 	.word	0x08007387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fd fc26 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 800736c:	61f8      	str	r0, [r7, #28]
        break;
 800736e:	e014      	b.n	800739a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007370:	f7fd fc38 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8007374:	61f8      	str	r0, [r7, #28]
        break;
 8007376:	e010      	b.n	800739a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007378:	4b4d      	ldr	r3, [pc, #308]	@ (80074b0 <UART_SetConfig+0x56c>)
 800737a:	61fb      	str	r3, [r7, #28]
        break;
 800737c:	e00d      	b.n	800739a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737e:	f7fd fb83 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8007382:	61f8      	str	r0, [r7, #28]
        break;
 8007384:	e009      	b.n	800739a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800738a:	61fb      	str	r3, [r7, #28]
        break;
 800738c:	e005      	b.n	800739a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d077      	beq.n	8007490 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	005a      	lsls	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	441a      	add	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b0f      	cmp	r3, #15
 80073ba:	d916      	bls.n	80073ea <UART_SetConfig+0x4a6>
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c2:	d212      	bcs.n	80073ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f023 030f 	bic.w	r3, r3, #15
 80073cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	b29a      	uxth	r2, r3
 80073da:	8afb      	ldrh	r3, [r7, #22]
 80073dc:	4313      	orrs	r3, r2
 80073de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	8afa      	ldrh	r2, [r7, #22]
 80073e6:	60da      	str	r2, [r3, #12]
 80073e8:	e052      	b.n	8007490 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073f0:	e04e      	b.n	8007490 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d827      	bhi.n	800744a <UART_SetConfig+0x506>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <UART_SetConfig+0x4bc>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	08007425 	.word	0x08007425
 8007404:	0800742d 	.word	0x0800742d
 8007408:	08007435 	.word	0x08007435
 800740c:	0800744b 	.word	0x0800744b
 8007410:	0800743b 	.word	0x0800743b
 8007414:	0800744b 	.word	0x0800744b
 8007418:	0800744b 	.word	0x0800744b
 800741c:	0800744b 	.word	0x0800744b
 8007420:	08007443 	.word	0x08007443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007424:	f7fd fbc8 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8007428:	61f8      	str	r0, [r7, #28]
        break;
 800742a:	e014      	b.n	8007456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fd fbda 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8007430:	61f8      	str	r0, [r7, #28]
        break;
 8007432:	e010      	b.n	8007456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007434:	4b1e      	ldr	r3, [pc, #120]	@ (80074b0 <UART_SetConfig+0x56c>)
 8007436:	61fb      	str	r3, [r7, #28]
        break;
 8007438:	e00d      	b.n	8007456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743a:	f7fd fb25 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 800743e:	61f8      	str	r0, [r7, #28]
        break;
 8007440:	e009      	b.n	8007456 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007446:	61fb      	str	r3, [r7, #28]
        break;
 8007448:	e005      	b.n	8007456 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007454:	bf00      	nop
    }

    if (pclk != 0U)
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d019      	beq.n	8007490 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	085a      	lsrs	r2, r3, #1
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	441a      	add	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	fbb2 f3f3 	udiv	r3, r2, r3
 800746e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	2b0f      	cmp	r3, #15
 8007474:	d909      	bls.n	800748a <UART_SetConfig+0x546>
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800747c:	d205      	bcs.n	800748a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60da      	str	r2, [r3, #12]
 8007488:	e002      	b.n	8007490 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800749c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3728      	adds	r7, #40	@ 0x28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074aa:	bf00      	nop
 80074ac:	40008000 	.word	0x40008000
 80074b0:	00f42400 	.word	0x00f42400

080074b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01a      	beq.n	80075ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075b2:	d10a      	bne.n	80075ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
  }
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b098      	sub	sp, #96	@ 0x60
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007608:	f7fa fe6c 	bl	80022e4 <HAL_GetTick>
 800760c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b08      	cmp	r3, #8
 800761a:	d12e      	bne.n	800767a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800761c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007624:	2200      	movs	r2, #0
 8007626:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f88c 	bl	8007748 <UART_WaitOnFlagUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d021      	beq.n	800767a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800764a:	653b      	str	r3, [r7, #80]	@ 0x50
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007654:	647b      	str	r3, [r7, #68]	@ 0x44
 8007656:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800765a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e6      	bne.n	8007636 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e062      	b.n	8007740 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b04      	cmp	r3, #4
 8007686:	d149      	bne.n	800771c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007688:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007690:	2200      	movs	r2, #0
 8007692:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f856 	bl	8007748 <UART_WaitOnFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d03c      	beq.n	800771c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	623b      	str	r3, [r7, #32]
   return(result);
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f4:	61fa      	str	r2, [r7, #28]
 80076f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	69b9      	ldr	r1, [r7, #24]
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	617b      	str	r3, [r7, #20]
   return(result);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e5      	bne.n	80076d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e011      	b.n	8007740 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3758      	adds	r7, #88	@ 0x58
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007758:	e04f      	b.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d04b      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007762:	f7fa fdbf 	bl	80022e4 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	429a      	cmp	r2, r3
 8007770:	d302      	bcc.n	8007778 <UART_WaitOnFlagUntilTimeout+0x30>
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e04e      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d037      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b80      	cmp	r3, #128	@ 0x80
 800778e:	d034      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b40      	cmp	r3, #64	@ 0x40
 8007794:	d031      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d110      	bne.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2208      	movs	r2, #8
 80077aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f8ff 	bl	80079b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2208      	movs	r2, #8
 80077b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e029      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077d4:	d111      	bne.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f8e5 	bl	80079b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e00f      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4013      	ands	r3, r2
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	bf0c      	ite	eq
 800780a:	2301      	moveq	r3, #1
 800780c:	2300      	movne	r3, #0
 800780e:	b2db      	uxtb	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	429a      	cmp	r2, r3
 8007816:	d0a0      	beq.n	800775a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007824:	b480      	push	{r7}
 8007826:	b097      	sub	sp, #92	@ 0x5c
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007856:	d10e      	bne.n	8007876 <UART_Start_Receive_IT+0x52>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d105      	bne.n	800786c <UART_Start_Receive_IT+0x48>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007866:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800786a:	e02d      	b.n	80078c8 <UART_Start_Receive_IT+0xa4>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	22ff      	movs	r2, #255	@ 0xff
 8007870:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007874:	e028      	b.n	80078c8 <UART_Start_Receive_IT+0xa4>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <UART_Start_Receive_IT+0x76>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <UART_Start_Receive_IT+0x6c>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	22ff      	movs	r2, #255	@ 0xff
 800788a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800788e:	e01b      	b.n	80078c8 <UART_Start_Receive_IT+0xa4>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	227f      	movs	r2, #127	@ 0x7f
 8007894:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007898:	e016      	b.n	80078c8 <UART_Start_Receive_IT+0xa4>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078a2:	d10d      	bne.n	80078c0 <UART_Start_Receive_IT+0x9c>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <UART_Start_Receive_IT+0x92>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	227f      	movs	r2, #127	@ 0x7f
 80078b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078b4:	e008      	b.n	80078c8 <UART_Start_Receive_IT+0xa4>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	223f      	movs	r2, #63	@ 0x3f
 80078ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078be:	e003      	b.n	80078c8 <UART_Start_Receive_IT+0xa4>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2222      	movs	r2, #34	@ 0x22
 80078d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80078fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007914:	d107      	bne.n	8007926 <UART_Start_Receive_IT+0x102>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4a21      	ldr	r2, [pc, #132]	@ (80079a8 <UART_Start_Receive_IT+0x184>)
 8007922:	669a      	str	r2, [r3, #104]	@ 0x68
 8007924:	e002      	b.n	800792c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4a20      	ldr	r2, [pc, #128]	@ (80079ac <UART_Start_Receive_IT+0x188>)
 800792a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d019      	beq.n	8007968 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
 8007954:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e6      	bne.n	8007934 <UART_Start_Receive_IT+0x110>
 8007966:	e018      	b.n	800799a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	613b      	str	r3, [r7, #16]
   return(result);
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f043 0320 	orr.w	r3, r3, #32
 800797c:	653b      	str	r3, [r7, #80]	@ 0x50
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007986:	623b      	str	r3, [r7, #32]
 8007988:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	69f9      	ldr	r1, [r7, #28]
 800798c:	6a3a      	ldr	r2, [r7, #32]
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	61bb      	str	r3, [r7, #24]
   return(result);
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e6      	bne.n	8007968 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	375c      	adds	r7, #92	@ 0x5c
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	08007e2d 	.word	0x08007e2d
 80079ac:	08007c71 	.word	0x08007c71

080079b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b095      	sub	sp, #84	@ 0x54
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80079d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d118      	bne.n	8007a58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f023 0310 	bic.w	r3, r3, #16
 8007a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	613b      	str	r3, [r7, #16]
   return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a6c:	bf00      	nop
 8007a6e:	3754      	adds	r7, #84	@ 0x54
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff fa3e 	bl	8006f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b08f      	sub	sp, #60	@ 0x3c
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ab0:	2b21      	cmp	r3, #33	@ 0x21
 8007ab2:	d14c      	bne.n	8007b4e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d132      	bne.n	8007b26 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ae0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e6      	bne.n	8007ac0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6979      	ldr	r1, [r7, #20]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	e841 2300 	strex	r3, r2, [r1]
 8007b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e6      	bne.n	8007af2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007b24:	e013      	b.n	8007b4e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007b4e:	bf00      	nop
 8007b50:	373c      	adds	r7, #60	@ 0x3c
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b091      	sub	sp, #68	@ 0x44
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b66:	2b21      	cmp	r3, #33	@ 0x21
 8007b68:	d151      	bne.n	8007c0e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d132      	bne.n	8007bdc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	623b      	str	r3, [r7, #32]
   return(result);
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e6      	bne.n	8007b76 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	69b9      	ldr	r1, [r7, #24]
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e6      	bne.n	8007ba8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007bda:	e018      	b.n	8007c0e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be4:	881a      	ldrh	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007c0e:	bf00      	nop
 8007c10:	3744      	adds	r7, #68	@ 0x44
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b088      	sub	sp, #32
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c36:	61fb      	str	r3, [r7, #28]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6979      	ldr	r1, [r7, #20]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e6      	bne.n	8007c22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff f94f 	bl	8006f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c66:	bf00      	nop
 8007c68:	3720      	adds	r7, #32
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b09c      	sub	sp, #112	@ 0x70
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c88:	2b22      	cmp	r3, #34	@ 0x22
 8007c8a:	f040 80be 	bne.w	8007e0a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c9c:	b2d9      	uxtb	r1, r3
 8007c9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca8:	400a      	ands	r2, r1
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f040 80a3 	bne.w	8007e1e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cf8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e6      	bne.n	8007cd8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3308      	adds	r3, #8
 8007d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1c:	f023 0301 	bic.w	r3, r3, #1
 8007d20:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3308      	adds	r3, #8
 8007d28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e5      	bne.n	8007d0a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a34      	ldr	r2, [pc, #208]	@ (8007e28 <UART_RxISR_8BIT+0x1b8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d01f      	beq.n	8007d9c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d018      	beq.n	8007d9c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	623b      	str	r3, [r7, #32]
   return(result);
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e6      	bne.n	8007d6a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d12e      	bne.n	8007e02 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0310 	bic.w	r3, r3, #16
 8007dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dc8:	61fb      	str	r3, [r7, #28]
 8007dca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	69b9      	ldr	r1, [r7, #24]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e6      	bne.n	8007daa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	d103      	bne.n	8007df2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2210      	movs	r2, #16
 8007df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff f896 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e00:	e00d      	b.n	8007e1e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 fdde 	bl	80019c4 <HAL_UART_RxCpltCallback>
}
 8007e08:	e009      	b.n	8007e1e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	8b1b      	ldrh	r3, [r3, #24]
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0208 	orr.w	r2, r2, #8
 8007e1a:	b292      	uxth	r2, r2
 8007e1c:	831a      	strh	r2, [r3, #24]
}
 8007e1e:	bf00      	nop
 8007e20:	3770      	adds	r7, #112	@ 0x70
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	40008000 	.word	0x40008000

08007e2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b09c      	sub	sp, #112	@ 0x70
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e44:	2b22      	cmp	r3, #34	@ 0x22
 8007e46:	f040 80be 	bne.w	8007fc6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e58:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007e5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e62:	4013      	ands	r3, r2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e6e:	1c9a      	adds	r2, r3, #2
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f040 80a3 	bne.w	8007fda <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ea8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007eb4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007eb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e6      	bne.n	8007e94 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ee6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e5      	bne.n	8007ec6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a34      	ldr	r2, [pc, #208]	@ (8007fe4 <UART_RxISR_16BIT+0x1b8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d01f      	beq.n	8007f58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d018      	beq.n	8007f58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f46:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e6      	bne.n	8007f26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d12e      	bne.n	8007fbe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f84:	61bb      	str	r3, [r7, #24]
 8007f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	2b10      	cmp	r3, #16
 8007fa4:	d103      	bne.n	8007fae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2210      	movs	r2, #16
 8007fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fe ffb8 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fbc:	e00d      	b.n	8007fda <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7f9 fd00 	bl	80019c4 <HAL_UART_RxCpltCallback>
}
 8007fc4:	e009      	b.n	8007fda <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	8b1b      	ldrh	r3, [r3, #24]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0208 	orr.w	r2, r2, #8
 8007fd6:	b292      	uxth	r2, r2
 8007fd8:	831a      	strh	r2, [r3, #24]
}
 8007fda:	bf00      	nop
 8007fdc:	3770      	adds	r7, #112	@ 0x70
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40008000 	.word	0x40008000

08007fe8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <atoi>:
 8007ffc:	220a      	movs	r2, #10
 8007ffe:	2100      	movs	r1, #0
 8008000:	f000 b87c 	b.w	80080fc <strtol>

08008004 <_strtol_l.constprop.0>:
 8008004:	2b24      	cmp	r3, #36	@ 0x24
 8008006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800a:	4686      	mov	lr, r0
 800800c:	4690      	mov	r8, r2
 800800e:	d801      	bhi.n	8008014 <_strtol_l.constprop.0+0x10>
 8008010:	2b01      	cmp	r3, #1
 8008012:	d106      	bne.n	8008022 <_strtol_l.constprop.0+0x1e>
 8008014:	f001 f860 	bl	80090d8 <__errno>
 8008018:	2316      	movs	r3, #22
 800801a:	6003      	str	r3, [r0, #0]
 800801c:	2000      	movs	r0, #0
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	4834      	ldr	r0, [pc, #208]	@ (80080f4 <_strtol_l.constprop.0+0xf0>)
 8008024:	460d      	mov	r5, r1
 8008026:	462a      	mov	r2, r5
 8008028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800802c:	5d06      	ldrb	r6, [r0, r4]
 800802e:	f016 0608 	ands.w	r6, r6, #8
 8008032:	d1f8      	bne.n	8008026 <_strtol_l.constprop.0+0x22>
 8008034:	2c2d      	cmp	r4, #45	@ 0x2d
 8008036:	d12d      	bne.n	8008094 <_strtol_l.constprop.0+0x90>
 8008038:	782c      	ldrb	r4, [r5, #0]
 800803a:	2601      	movs	r6, #1
 800803c:	1c95      	adds	r5, r2, #2
 800803e:	f033 0210 	bics.w	r2, r3, #16
 8008042:	d109      	bne.n	8008058 <_strtol_l.constprop.0+0x54>
 8008044:	2c30      	cmp	r4, #48	@ 0x30
 8008046:	d12a      	bne.n	800809e <_strtol_l.constprop.0+0x9a>
 8008048:	782a      	ldrb	r2, [r5, #0]
 800804a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800804e:	2a58      	cmp	r2, #88	@ 0x58
 8008050:	d125      	bne.n	800809e <_strtol_l.constprop.0+0x9a>
 8008052:	786c      	ldrb	r4, [r5, #1]
 8008054:	2310      	movs	r3, #16
 8008056:	3502      	adds	r5, #2
 8008058:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800805c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008060:	2200      	movs	r2, #0
 8008062:	fbbc f9f3 	udiv	r9, ip, r3
 8008066:	4610      	mov	r0, r2
 8008068:	fb03 ca19 	mls	sl, r3, r9, ip
 800806c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008070:	2f09      	cmp	r7, #9
 8008072:	d81b      	bhi.n	80080ac <_strtol_l.constprop.0+0xa8>
 8008074:	463c      	mov	r4, r7
 8008076:	42a3      	cmp	r3, r4
 8008078:	dd27      	ble.n	80080ca <_strtol_l.constprop.0+0xc6>
 800807a:	1c57      	adds	r7, r2, #1
 800807c:	d007      	beq.n	800808e <_strtol_l.constprop.0+0x8a>
 800807e:	4581      	cmp	r9, r0
 8008080:	d320      	bcc.n	80080c4 <_strtol_l.constprop.0+0xc0>
 8008082:	d101      	bne.n	8008088 <_strtol_l.constprop.0+0x84>
 8008084:	45a2      	cmp	sl, r4
 8008086:	db1d      	blt.n	80080c4 <_strtol_l.constprop.0+0xc0>
 8008088:	fb00 4003 	mla	r0, r0, r3, r4
 800808c:	2201      	movs	r2, #1
 800808e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008092:	e7eb      	b.n	800806c <_strtol_l.constprop.0+0x68>
 8008094:	2c2b      	cmp	r4, #43	@ 0x2b
 8008096:	bf04      	itt	eq
 8008098:	782c      	ldrbeq	r4, [r5, #0]
 800809a:	1c95      	addeq	r5, r2, #2
 800809c:	e7cf      	b.n	800803e <_strtol_l.constprop.0+0x3a>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1da      	bne.n	8008058 <_strtol_l.constprop.0+0x54>
 80080a2:	2c30      	cmp	r4, #48	@ 0x30
 80080a4:	bf0c      	ite	eq
 80080a6:	2308      	moveq	r3, #8
 80080a8:	230a      	movne	r3, #10
 80080aa:	e7d5      	b.n	8008058 <_strtol_l.constprop.0+0x54>
 80080ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080b0:	2f19      	cmp	r7, #25
 80080b2:	d801      	bhi.n	80080b8 <_strtol_l.constprop.0+0xb4>
 80080b4:	3c37      	subs	r4, #55	@ 0x37
 80080b6:	e7de      	b.n	8008076 <_strtol_l.constprop.0+0x72>
 80080b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080bc:	2f19      	cmp	r7, #25
 80080be:	d804      	bhi.n	80080ca <_strtol_l.constprop.0+0xc6>
 80080c0:	3c57      	subs	r4, #87	@ 0x57
 80080c2:	e7d8      	b.n	8008076 <_strtol_l.constprop.0+0x72>
 80080c4:	f04f 32ff 	mov.w	r2, #4294967295
 80080c8:	e7e1      	b.n	800808e <_strtol_l.constprop.0+0x8a>
 80080ca:	1c53      	adds	r3, r2, #1
 80080cc:	d108      	bne.n	80080e0 <_strtol_l.constprop.0+0xdc>
 80080ce:	2322      	movs	r3, #34	@ 0x22
 80080d0:	f8ce 3000 	str.w	r3, [lr]
 80080d4:	4660      	mov	r0, ip
 80080d6:	f1b8 0f00 	cmp.w	r8, #0
 80080da:	d0a0      	beq.n	800801e <_strtol_l.constprop.0+0x1a>
 80080dc:	1e69      	subs	r1, r5, #1
 80080de:	e006      	b.n	80080ee <_strtol_l.constprop.0+0xea>
 80080e0:	b106      	cbz	r6, 80080e4 <_strtol_l.constprop.0+0xe0>
 80080e2:	4240      	negs	r0, r0
 80080e4:	f1b8 0f00 	cmp.w	r8, #0
 80080e8:	d099      	beq.n	800801e <_strtol_l.constprop.0+0x1a>
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d1f6      	bne.n	80080dc <_strtol_l.constprop.0+0xd8>
 80080ee:	f8c8 1000 	str.w	r1, [r8]
 80080f2:	e794      	b.n	800801e <_strtol_l.constprop.0+0x1a>
 80080f4:	0800c75d 	.word	0x0800c75d

080080f8 <_strtol_r>:
 80080f8:	f7ff bf84 	b.w	8008004 <_strtol_l.constprop.0>

080080fc <strtol>:
 80080fc:	4613      	mov	r3, r2
 80080fe:	460a      	mov	r2, r1
 8008100:	4601      	mov	r1, r0
 8008102:	4802      	ldr	r0, [pc, #8]	@ (800810c <strtol+0x10>)
 8008104:	6800      	ldr	r0, [r0, #0]
 8008106:	f7ff bf7d 	b.w	8008004 <_strtol_l.constprop.0>
 800810a:	bf00      	nop
 800810c:	20000018 	.word	0x20000018

08008110 <__cvt>:
 8008110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	ec57 6b10 	vmov	r6, r7, d0
 8008118:	2f00      	cmp	r7, #0
 800811a:	460c      	mov	r4, r1
 800811c:	4619      	mov	r1, r3
 800811e:	463b      	mov	r3, r7
 8008120:	bfbb      	ittet	lt
 8008122:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008126:	461f      	movlt	r7, r3
 8008128:	2300      	movge	r3, #0
 800812a:	232d      	movlt	r3, #45	@ 0x2d
 800812c:	700b      	strb	r3, [r1, #0]
 800812e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008130:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008134:	4691      	mov	r9, r2
 8008136:	f023 0820 	bic.w	r8, r3, #32
 800813a:	bfbc      	itt	lt
 800813c:	4632      	movlt	r2, r6
 800813e:	4616      	movlt	r6, r2
 8008140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008144:	d005      	beq.n	8008152 <__cvt+0x42>
 8008146:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800814a:	d100      	bne.n	800814e <__cvt+0x3e>
 800814c:	3401      	adds	r4, #1
 800814e:	2102      	movs	r1, #2
 8008150:	e000      	b.n	8008154 <__cvt+0x44>
 8008152:	2103      	movs	r1, #3
 8008154:	ab03      	add	r3, sp, #12
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	ab02      	add	r3, sp, #8
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	ec47 6b10 	vmov	d0, r6, r7
 8008160:	4653      	mov	r3, sl
 8008162:	4622      	mov	r2, r4
 8008164:	f001 f874 	bl	8009250 <_dtoa_r>
 8008168:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800816c:	4605      	mov	r5, r0
 800816e:	d119      	bne.n	80081a4 <__cvt+0x94>
 8008170:	f019 0f01 	tst.w	r9, #1
 8008174:	d00e      	beq.n	8008194 <__cvt+0x84>
 8008176:	eb00 0904 	add.w	r9, r0, r4
 800817a:	2200      	movs	r2, #0
 800817c:	2300      	movs	r3, #0
 800817e:	4630      	mov	r0, r6
 8008180:	4639      	mov	r1, r7
 8008182:	f7f8 fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008186:	b108      	cbz	r0, 800818c <__cvt+0x7c>
 8008188:	f8cd 900c 	str.w	r9, [sp, #12]
 800818c:	2230      	movs	r2, #48	@ 0x30
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	454b      	cmp	r3, r9
 8008192:	d31e      	bcc.n	80081d2 <__cvt+0xc2>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008198:	1b5b      	subs	r3, r3, r5
 800819a:	4628      	mov	r0, r5
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	b004      	add	sp, #16
 80081a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081a8:	eb00 0904 	add.w	r9, r0, r4
 80081ac:	d1e5      	bne.n	800817a <__cvt+0x6a>
 80081ae:	7803      	ldrb	r3, [r0, #0]
 80081b0:	2b30      	cmp	r3, #48	@ 0x30
 80081b2:	d10a      	bne.n	80081ca <__cvt+0xba>
 80081b4:	2200      	movs	r2, #0
 80081b6:	2300      	movs	r3, #0
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 fc94 	bl	8000ae8 <__aeabi_dcmpeq>
 80081c0:	b918      	cbnz	r0, 80081ca <__cvt+0xba>
 80081c2:	f1c4 0401 	rsb	r4, r4, #1
 80081c6:	f8ca 4000 	str.w	r4, [sl]
 80081ca:	f8da 3000 	ldr.w	r3, [sl]
 80081ce:	4499      	add	r9, r3
 80081d0:	e7d3      	b.n	800817a <__cvt+0x6a>
 80081d2:	1c59      	adds	r1, r3, #1
 80081d4:	9103      	str	r1, [sp, #12]
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	e7d9      	b.n	800818e <__cvt+0x7e>

080081da <__exponent>:
 80081da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081dc:	2900      	cmp	r1, #0
 80081de:	bfba      	itte	lt
 80081e0:	4249      	neglt	r1, r1
 80081e2:	232d      	movlt	r3, #45	@ 0x2d
 80081e4:	232b      	movge	r3, #43	@ 0x2b
 80081e6:	2909      	cmp	r1, #9
 80081e8:	7002      	strb	r2, [r0, #0]
 80081ea:	7043      	strb	r3, [r0, #1]
 80081ec:	dd29      	ble.n	8008242 <__exponent+0x68>
 80081ee:	f10d 0307 	add.w	r3, sp, #7
 80081f2:	461d      	mov	r5, r3
 80081f4:	270a      	movs	r7, #10
 80081f6:	461a      	mov	r2, r3
 80081f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80081fc:	fb07 1416 	mls	r4, r7, r6, r1
 8008200:	3430      	adds	r4, #48	@ 0x30
 8008202:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008206:	460c      	mov	r4, r1
 8008208:	2c63      	cmp	r4, #99	@ 0x63
 800820a:	f103 33ff 	add.w	r3, r3, #4294967295
 800820e:	4631      	mov	r1, r6
 8008210:	dcf1      	bgt.n	80081f6 <__exponent+0x1c>
 8008212:	3130      	adds	r1, #48	@ 0x30
 8008214:	1e94      	subs	r4, r2, #2
 8008216:	f803 1c01 	strb.w	r1, [r3, #-1]
 800821a:	1c41      	adds	r1, r0, #1
 800821c:	4623      	mov	r3, r4
 800821e:	42ab      	cmp	r3, r5
 8008220:	d30a      	bcc.n	8008238 <__exponent+0x5e>
 8008222:	f10d 0309 	add.w	r3, sp, #9
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	42ac      	cmp	r4, r5
 800822a:	bf88      	it	hi
 800822c:	2300      	movhi	r3, #0
 800822e:	3302      	adds	r3, #2
 8008230:	4403      	add	r3, r0
 8008232:	1a18      	subs	r0, r3, r0
 8008234:	b003      	add	sp, #12
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	f813 6b01 	ldrb.w	r6, [r3], #1
 800823c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008240:	e7ed      	b.n	800821e <__exponent+0x44>
 8008242:	2330      	movs	r3, #48	@ 0x30
 8008244:	3130      	adds	r1, #48	@ 0x30
 8008246:	7083      	strb	r3, [r0, #2]
 8008248:	70c1      	strb	r1, [r0, #3]
 800824a:	1d03      	adds	r3, r0, #4
 800824c:	e7f1      	b.n	8008232 <__exponent+0x58>
	...

08008250 <_printf_float>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	b08d      	sub	sp, #52	@ 0x34
 8008256:	460c      	mov	r4, r1
 8008258:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800825c:	4616      	mov	r6, r2
 800825e:	461f      	mov	r7, r3
 8008260:	4605      	mov	r5, r0
 8008262:	f000 feef 	bl	8009044 <_localeconv_r>
 8008266:	6803      	ldr	r3, [r0, #0]
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	4618      	mov	r0, r3
 800826c:	f7f8 f810 	bl	8000290 <strlen>
 8008270:	2300      	movs	r3, #0
 8008272:	930a      	str	r3, [sp, #40]	@ 0x28
 8008274:	f8d8 3000 	ldr.w	r3, [r8]
 8008278:	9005      	str	r0, [sp, #20]
 800827a:	3307      	adds	r3, #7
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	f103 0208 	add.w	r2, r3, #8
 8008284:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008288:	f8d4 b000 	ldr.w	fp, [r4]
 800828c:	f8c8 2000 	str.w	r2, [r8]
 8008290:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008294:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008298:	9307      	str	r3, [sp, #28]
 800829a:	f8cd 8018 	str.w	r8, [sp, #24]
 800829e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80082a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082a6:	4b9c      	ldr	r3, [pc, #624]	@ (8008518 <_printf_float+0x2c8>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	f7f8 fc4e 	bl	8000b4c <__aeabi_dcmpun>
 80082b0:	bb70      	cbnz	r0, 8008310 <_printf_float+0xc0>
 80082b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082b6:	4b98      	ldr	r3, [pc, #608]	@ (8008518 <_printf_float+0x2c8>)
 80082b8:	f04f 32ff 	mov.w	r2, #4294967295
 80082bc:	f7f8 fc28 	bl	8000b10 <__aeabi_dcmple>
 80082c0:	bb30      	cbnz	r0, 8008310 <_printf_float+0xc0>
 80082c2:	2200      	movs	r2, #0
 80082c4:	2300      	movs	r3, #0
 80082c6:	4640      	mov	r0, r8
 80082c8:	4649      	mov	r1, r9
 80082ca:	f7f8 fc17 	bl	8000afc <__aeabi_dcmplt>
 80082ce:	b110      	cbz	r0, 80082d6 <_printf_float+0x86>
 80082d0:	232d      	movs	r3, #45	@ 0x2d
 80082d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082d6:	4a91      	ldr	r2, [pc, #580]	@ (800851c <_printf_float+0x2cc>)
 80082d8:	4b91      	ldr	r3, [pc, #580]	@ (8008520 <_printf_float+0x2d0>)
 80082da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082de:	bf94      	ite	ls
 80082e0:	4690      	movls	r8, r2
 80082e2:	4698      	movhi	r8, r3
 80082e4:	2303      	movs	r3, #3
 80082e6:	6123      	str	r3, [r4, #16]
 80082e8:	f02b 0304 	bic.w	r3, fp, #4
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	9700      	str	r7, [sp, #0]
 80082f4:	4633      	mov	r3, r6
 80082f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f9d2 	bl	80086a4 <_printf_common>
 8008300:	3001      	adds	r0, #1
 8008302:	f040 808d 	bne.w	8008420 <_printf_float+0x1d0>
 8008306:	f04f 30ff 	mov.w	r0, #4294967295
 800830a:	b00d      	add	sp, #52	@ 0x34
 800830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008310:	4642      	mov	r2, r8
 8008312:	464b      	mov	r3, r9
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f8 fc18 	bl	8000b4c <__aeabi_dcmpun>
 800831c:	b140      	cbz	r0, 8008330 <_printf_float+0xe0>
 800831e:	464b      	mov	r3, r9
 8008320:	2b00      	cmp	r3, #0
 8008322:	bfbc      	itt	lt
 8008324:	232d      	movlt	r3, #45	@ 0x2d
 8008326:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800832a:	4a7e      	ldr	r2, [pc, #504]	@ (8008524 <_printf_float+0x2d4>)
 800832c:	4b7e      	ldr	r3, [pc, #504]	@ (8008528 <_printf_float+0x2d8>)
 800832e:	e7d4      	b.n	80082da <_printf_float+0x8a>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008336:	9206      	str	r2, [sp, #24]
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	d13b      	bne.n	80083b4 <_printf_float+0x164>
 800833c:	2306      	movs	r3, #6
 800833e:	6063      	str	r3, [r4, #4]
 8008340:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008344:	2300      	movs	r3, #0
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	9303      	str	r3, [sp, #12]
 800834a:	ab0a      	add	r3, sp, #40	@ 0x28
 800834c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008350:	ab09      	add	r3, sp, #36	@ 0x24
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	6861      	ldr	r1, [r4, #4]
 8008356:	ec49 8b10 	vmov	d0, r8, r9
 800835a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800835e:	4628      	mov	r0, r5
 8008360:	f7ff fed6 	bl	8008110 <__cvt>
 8008364:	9b06      	ldr	r3, [sp, #24]
 8008366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008368:	2b47      	cmp	r3, #71	@ 0x47
 800836a:	4680      	mov	r8, r0
 800836c:	d129      	bne.n	80083c2 <_printf_float+0x172>
 800836e:	1cc8      	adds	r0, r1, #3
 8008370:	db02      	blt.n	8008378 <_printf_float+0x128>
 8008372:	6863      	ldr	r3, [r4, #4]
 8008374:	4299      	cmp	r1, r3
 8008376:	dd41      	ble.n	80083fc <_printf_float+0x1ac>
 8008378:	f1aa 0a02 	sub.w	sl, sl, #2
 800837c:	fa5f fa8a 	uxtb.w	sl, sl
 8008380:	3901      	subs	r1, #1
 8008382:	4652      	mov	r2, sl
 8008384:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008388:	9109      	str	r1, [sp, #36]	@ 0x24
 800838a:	f7ff ff26 	bl	80081da <__exponent>
 800838e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008390:	1813      	adds	r3, r2, r0
 8008392:	2a01      	cmp	r2, #1
 8008394:	4681      	mov	r9, r0
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	dc02      	bgt.n	80083a0 <_printf_float+0x150>
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	07d2      	lsls	r2, r2, #31
 800839e:	d501      	bpl.n	80083a4 <_printf_float+0x154>
 80083a0:	3301      	adds	r3, #1
 80083a2:	6123      	str	r3, [r4, #16]
 80083a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0a2      	beq.n	80082f2 <_printf_float+0xa2>
 80083ac:	232d      	movs	r3, #45	@ 0x2d
 80083ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083b2:	e79e      	b.n	80082f2 <_printf_float+0xa2>
 80083b4:	9a06      	ldr	r2, [sp, #24]
 80083b6:	2a47      	cmp	r2, #71	@ 0x47
 80083b8:	d1c2      	bne.n	8008340 <_printf_float+0xf0>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1c0      	bne.n	8008340 <_printf_float+0xf0>
 80083be:	2301      	movs	r3, #1
 80083c0:	e7bd      	b.n	800833e <_printf_float+0xee>
 80083c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083c6:	d9db      	bls.n	8008380 <_printf_float+0x130>
 80083c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083cc:	d118      	bne.n	8008400 <_printf_float+0x1b0>
 80083ce:	2900      	cmp	r1, #0
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	dd0b      	ble.n	80083ec <_printf_float+0x19c>
 80083d4:	6121      	str	r1, [r4, #16]
 80083d6:	b913      	cbnz	r3, 80083de <_printf_float+0x18e>
 80083d8:	6822      	ldr	r2, [r4, #0]
 80083da:	07d0      	lsls	r0, r2, #31
 80083dc:	d502      	bpl.n	80083e4 <_printf_float+0x194>
 80083de:	3301      	adds	r3, #1
 80083e0:	440b      	add	r3, r1
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	e7db      	b.n	80083a4 <_printf_float+0x154>
 80083ec:	b913      	cbnz	r3, 80083f4 <_printf_float+0x1a4>
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	07d2      	lsls	r2, r2, #31
 80083f2:	d501      	bpl.n	80083f8 <_printf_float+0x1a8>
 80083f4:	3302      	adds	r3, #2
 80083f6:	e7f4      	b.n	80083e2 <_printf_float+0x192>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e7f2      	b.n	80083e2 <_printf_float+0x192>
 80083fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008402:	4299      	cmp	r1, r3
 8008404:	db05      	blt.n	8008412 <_printf_float+0x1c2>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	6121      	str	r1, [r4, #16]
 800840a:	07d8      	lsls	r0, r3, #31
 800840c:	d5ea      	bpl.n	80083e4 <_printf_float+0x194>
 800840e:	1c4b      	adds	r3, r1, #1
 8008410:	e7e7      	b.n	80083e2 <_printf_float+0x192>
 8008412:	2900      	cmp	r1, #0
 8008414:	bfd4      	ite	le
 8008416:	f1c1 0202 	rsble	r2, r1, #2
 800841a:	2201      	movgt	r2, #1
 800841c:	4413      	add	r3, r2
 800841e:	e7e0      	b.n	80083e2 <_printf_float+0x192>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	055a      	lsls	r2, r3, #21
 8008424:	d407      	bmi.n	8008436 <_printf_float+0x1e6>
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	4642      	mov	r2, r8
 800842a:	4631      	mov	r1, r6
 800842c:	4628      	mov	r0, r5
 800842e:	47b8      	blx	r7
 8008430:	3001      	adds	r0, #1
 8008432:	d12b      	bne.n	800848c <_printf_float+0x23c>
 8008434:	e767      	b.n	8008306 <_printf_float+0xb6>
 8008436:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800843a:	f240 80dd 	bls.w	80085f8 <_printf_float+0x3a8>
 800843e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008442:	2200      	movs	r2, #0
 8008444:	2300      	movs	r3, #0
 8008446:	f7f8 fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800844a:	2800      	cmp	r0, #0
 800844c:	d033      	beq.n	80084b6 <_printf_float+0x266>
 800844e:	4a37      	ldr	r2, [pc, #220]	@ (800852c <_printf_float+0x2dc>)
 8008450:	2301      	movs	r3, #1
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	f43f af54 	beq.w	8008306 <_printf_float+0xb6>
 800845e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008462:	4543      	cmp	r3, r8
 8008464:	db02      	blt.n	800846c <_printf_float+0x21c>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	07d8      	lsls	r0, r3, #31
 800846a:	d50f      	bpl.n	800848c <_printf_float+0x23c>
 800846c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008470:	4631      	mov	r1, r6
 8008472:	4628      	mov	r0, r5
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f43f af45 	beq.w	8008306 <_printf_float+0xb6>
 800847c:	f04f 0900 	mov.w	r9, #0
 8008480:	f108 38ff 	add.w	r8, r8, #4294967295
 8008484:	f104 0a1a 	add.w	sl, r4, #26
 8008488:	45c8      	cmp	r8, r9
 800848a:	dc09      	bgt.n	80084a0 <_printf_float+0x250>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	079b      	lsls	r3, r3, #30
 8008490:	f100 8103 	bmi.w	800869a <_printf_float+0x44a>
 8008494:	68e0      	ldr	r0, [r4, #12]
 8008496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008498:	4298      	cmp	r0, r3
 800849a:	bfb8      	it	lt
 800849c:	4618      	movlt	r0, r3
 800849e:	e734      	b.n	800830a <_printf_float+0xba>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4652      	mov	r2, sl
 80084a4:	4631      	mov	r1, r6
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	f43f af2b 	beq.w	8008306 <_printf_float+0xb6>
 80084b0:	f109 0901 	add.w	r9, r9, #1
 80084b4:	e7e8      	b.n	8008488 <_printf_float+0x238>
 80084b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc39      	bgt.n	8008530 <_printf_float+0x2e0>
 80084bc:	4a1b      	ldr	r2, [pc, #108]	@ (800852c <_printf_float+0x2dc>)
 80084be:	2301      	movs	r3, #1
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	f43f af1d 	beq.w	8008306 <_printf_float+0xb6>
 80084cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80084d0:	ea59 0303 	orrs.w	r3, r9, r3
 80084d4:	d102      	bne.n	80084dc <_printf_float+0x28c>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	07d9      	lsls	r1, r3, #31
 80084da:	d5d7      	bpl.n	800848c <_printf_float+0x23c>
 80084dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e0:	4631      	mov	r1, r6
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	f43f af0d 	beq.w	8008306 <_printf_float+0xb6>
 80084ec:	f04f 0a00 	mov.w	sl, #0
 80084f0:	f104 0b1a 	add.w	fp, r4, #26
 80084f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f6:	425b      	negs	r3, r3
 80084f8:	4553      	cmp	r3, sl
 80084fa:	dc01      	bgt.n	8008500 <_printf_float+0x2b0>
 80084fc:	464b      	mov	r3, r9
 80084fe:	e793      	b.n	8008428 <_printf_float+0x1d8>
 8008500:	2301      	movs	r3, #1
 8008502:	465a      	mov	r2, fp
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	f43f aefb 	beq.w	8008306 <_printf_float+0xb6>
 8008510:	f10a 0a01 	add.w	sl, sl, #1
 8008514:	e7ee      	b.n	80084f4 <_printf_float+0x2a4>
 8008516:	bf00      	nop
 8008518:	7fefffff 	.word	0x7fefffff
 800851c:	0800c85d 	.word	0x0800c85d
 8008520:	0800c861 	.word	0x0800c861
 8008524:	0800c865 	.word	0x0800c865
 8008528:	0800c869 	.word	0x0800c869
 800852c:	0800c86d 	.word	0x0800c86d
 8008530:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008532:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008536:	4553      	cmp	r3, sl
 8008538:	bfa8      	it	ge
 800853a:	4653      	movge	r3, sl
 800853c:	2b00      	cmp	r3, #0
 800853e:	4699      	mov	r9, r3
 8008540:	dc36      	bgt.n	80085b0 <_printf_float+0x360>
 8008542:	f04f 0b00 	mov.w	fp, #0
 8008546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800854a:	f104 021a 	add.w	r2, r4, #26
 800854e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008550:	9306      	str	r3, [sp, #24]
 8008552:	eba3 0309 	sub.w	r3, r3, r9
 8008556:	455b      	cmp	r3, fp
 8008558:	dc31      	bgt.n	80085be <_printf_float+0x36e>
 800855a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855c:	459a      	cmp	sl, r3
 800855e:	dc3a      	bgt.n	80085d6 <_printf_float+0x386>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	07da      	lsls	r2, r3, #31
 8008564:	d437      	bmi.n	80085d6 <_printf_float+0x386>
 8008566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008568:	ebaa 0903 	sub.w	r9, sl, r3
 800856c:	9b06      	ldr	r3, [sp, #24]
 800856e:	ebaa 0303 	sub.w	r3, sl, r3
 8008572:	4599      	cmp	r9, r3
 8008574:	bfa8      	it	ge
 8008576:	4699      	movge	r9, r3
 8008578:	f1b9 0f00 	cmp.w	r9, #0
 800857c:	dc33      	bgt.n	80085e6 <_printf_float+0x396>
 800857e:	f04f 0800 	mov.w	r8, #0
 8008582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008586:	f104 0b1a 	add.w	fp, r4, #26
 800858a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858c:	ebaa 0303 	sub.w	r3, sl, r3
 8008590:	eba3 0309 	sub.w	r3, r3, r9
 8008594:	4543      	cmp	r3, r8
 8008596:	f77f af79 	ble.w	800848c <_printf_float+0x23c>
 800859a:	2301      	movs	r3, #1
 800859c:	465a      	mov	r2, fp
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f aeae 	beq.w	8008306 <_printf_float+0xb6>
 80085aa:	f108 0801 	add.w	r8, r8, #1
 80085ae:	e7ec      	b.n	800858a <_printf_float+0x33a>
 80085b0:	4642      	mov	r2, r8
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1c2      	bne.n	8008542 <_printf_float+0x2f2>
 80085bc:	e6a3      	b.n	8008306 <_printf_float+0xb6>
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	9206      	str	r2, [sp, #24]
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae9c 	beq.w	8008306 <_printf_float+0xb6>
 80085ce:	9a06      	ldr	r2, [sp, #24]
 80085d0:	f10b 0b01 	add.w	fp, fp, #1
 80085d4:	e7bb      	b.n	800854e <_printf_float+0x2fe>
 80085d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	47b8      	blx	r7
 80085e0:	3001      	adds	r0, #1
 80085e2:	d1c0      	bne.n	8008566 <_printf_float+0x316>
 80085e4:	e68f      	b.n	8008306 <_printf_float+0xb6>
 80085e6:	9a06      	ldr	r2, [sp, #24]
 80085e8:	464b      	mov	r3, r9
 80085ea:	4442      	add	r2, r8
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	d1c3      	bne.n	800857e <_printf_float+0x32e>
 80085f6:	e686      	b.n	8008306 <_printf_float+0xb6>
 80085f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085fc:	f1ba 0f01 	cmp.w	sl, #1
 8008600:	dc01      	bgt.n	8008606 <_printf_float+0x3b6>
 8008602:	07db      	lsls	r3, r3, #31
 8008604:	d536      	bpl.n	8008674 <_printf_float+0x424>
 8008606:	2301      	movs	r3, #1
 8008608:	4642      	mov	r2, r8
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	f43f ae78 	beq.w	8008306 <_printf_float+0xb6>
 8008616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	47b8      	blx	r7
 8008620:	3001      	adds	r0, #1
 8008622:	f43f ae70 	beq.w	8008306 <_printf_float+0xb6>
 8008626:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008632:	f7f8 fa59 	bl	8000ae8 <__aeabi_dcmpeq>
 8008636:	b9c0      	cbnz	r0, 800866a <_printf_float+0x41a>
 8008638:	4653      	mov	r3, sl
 800863a:	f108 0201 	add.w	r2, r8, #1
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	d10c      	bne.n	8008662 <_printf_float+0x412>
 8008648:	e65d      	b.n	8008306 <_printf_float+0xb6>
 800864a:	2301      	movs	r3, #1
 800864c:	465a      	mov	r2, fp
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	f43f ae56 	beq.w	8008306 <_printf_float+0xb6>
 800865a:	f108 0801 	add.w	r8, r8, #1
 800865e:	45d0      	cmp	r8, sl
 8008660:	dbf3      	blt.n	800864a <_printf_float+0x3fa>
 8008662:	464b      	mov	r3, r9
 8008664:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008668:	e6df      	b.n	800842a <_printf_float+0x1da>
 800866a:	f04f 0800 	mov.w	r8, #0
 800866e:	f104 0b1a 	add.w	fp, r4, #26
 8008672:	e7f4      	b.n	800865e <_printf_float+0x40e>
 8008674:	2301      	movs	r3, #1
 8008676:	4642      	mov	r2, r8
 8008678:	e7e1      	b.n	800863e <_printf_float+0x3ee>
 800867a:	2301      	movs	r3, #1
 800867c:	464a      	mov	r2, r9
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	f43f ae3e 	beq.w	8008306 <_printf_float+0xb6>
 800868a:	f108 0801 	add.w	r8, r8, #1
 800868e:	68e3      	ldr	r3, [r4, #12]
 8008690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008692:	1a5b      	subs	r3, r3, r1
 8008694:	4543      	cmp	r3, r8
 8008696:	dcf0      	bgt.n	800867a <_printf_float+0x42a>
 8008698:	e6fc      	b.n	8008494 <_printf_float+0x244>
 800869a:	f04f 0800 	mov.w	r8, #0
 800869e:	f104 0919 	add.w	r9, r4, #25
 80086a2:	e7f4      	b.n	800868e <_printf_float+0x43e>

080086a4 <_printf_common>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	4616      	mov	r6, r2
 80086aa:	4698      	mov	r8, r3
 80086ac:	688a      	ldr	r2, [r1, #8]
 80086ae:	690b      	ldr	r3, [r1, #16]
 80086b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086b4:	4293      	cmp	r3, r2
 80086b6:	bfb8      	it	lt
 80086b8:	4613      	movlt	r3, r2
 80086ba:	6033      	str	r3, [r6, #0]
 80086bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086c0:	4607      	mov	r7, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	b10a      	cbz	r2, 80086ca <_printf_common+0x26>
 80086c6:	3301      	adds	r3, #1
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	0699      	lsls	r1, r3, #26
 80086ce:	bf42      	ittt	mi
 80086d0:	6833      	ldrmi	r3, [r6, #0]
 80086d2:	3302      	addmi	r3, #2
 80086d4:	6033      	strmi	r3, [r6, #0]
 80086d6:	6825      	ldr	r5, [r4, #0]
 80086d8:	f015 0506 	ands.w	r5, r5, #6
 80086dc:	d106      	bne.n	80086ec <_printf_common+0x48>
 80086de:	f104 0a19 	add.w	sl, r4, #25
 80086e2:	68e3      	ldr	r3, [r4, #12]
 80086e4:	6832      	ldr	r2, [r6, #0]
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	dc26      	bgt.n	800873a <_printf_common+0x96>
 80086ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	3b00      	subs	r3, #0
 80086f4:	bf18      	it	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	0692      	lsls	r2, r2, #26
 80086fa:	d42b      	bmi.n	8008754 <_printf_common+0xb0>
 80086fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008700:	4641      	mov	r1, r8
 8008702:	4638      	mov	r0, r7
 8008704:	47c8      	blx	r9
 8008706:	3001      	adds	r0, #1
 8008708:	d01e      	beq.n	8008748 <_printf_common+0xa4>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	6922      	ldr	r2, [r4, #16]
 800870e:	f003 0306 	and.w	r3, r3, #6
 8008712:	2b04      	cmp	r3, #4
 8008714:	bf02      	ittt	eq
 8008716:	68e5      	ldreq	r5, [r4, #12]
 8008718:	6833      	ldreq	r3, [r6, #0]
 800871a:	1aed      	subeq	r5, r5, r3
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	bf0c      	ite	eq
 8008720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008724:	2500      	movne	r5, #0
 8008726:	4293      	cmp	r3, r2
 8008728:	bfc4      	itt	gt
 800872a:	1a9b      	subgt	r3, r3, r2
 800872c:	18ed      	addgt	r5, r5, r3
 800872e:	2600      	movs	r6, #0
 8008730:	341a      	adds	r4, #26
 8008732:	42b5      	cmp	r5, r6
 8008734:	d11a      	bne.n	800876c <_printf_common+0xc8>
 8008736:	2000      	movs	r0, #0
 8008738:	e008      	b.n	800874c <_printf_common+0xa8>
 800873a:	2301      	movs	r3, #1
 800873c:	4652      	mov	r2, sl
 800873e:	4641      	mov	r1, r8
 8008740:	4638      	mov	r0, r7
 8008742:	47c8      	blx	r9
 8008744:	3001      	adds	r0, #1
 8008746:	d103      	bne.n	8008750 <_printf_common+0xac>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008750:	3501      	adds	r5, #1
 8008752:	e7c6      	b.n	80086e2 <_printf_common+0x3e>
 8008754:	18e1      	adds	r1, r4, r3
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	2030      	movs	r0, #48	@ 0x30
 800875a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800875e:	4422      	add	r2, r4
 8008760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008768:	3302      	adds	r3, #2
 800876a:	e7c7      	b.n	80086fc <_printf_common+0x58>
 800876c:	2301      	movs	r3, #1
 800876e:	4622      	mov	r2, r4
 8008770:	4641      	mov	r1, r8
 8008772:	4638      	mov	r0, r7
 8008774:	47c8      	blx	r9
 8008776:	3001      	adds	r0, #1
 8008778:	d0e6      	beq.n	8008748 <_printf_common+0xa4>
 800877a:	3601      	adds	r6, #1
 800877c:	e7d9      	b.n	8008732 <_printf_common+0x8e>
	...

08008780 <_printf_i>:
 8008780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	7e0f      	ldrb	r7, [r1, #24]
 8008786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008788:	2f78      	cmp	r7, #120	@ 0x78
 800878a:	4691      	mov	r9, r2
 800878c:	4680      	mov	r8, r0
 800878e:	460c      	mov	r4, r1
 8008790:	469a      	mov	sl, r3
 8008792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008796:	d807      	bhi.n	80087a8 <_printf_i+0x28>
 8008798:	2f62      	cmp	r7, #98	@ 0x62
 800879a:	d80a      	bhi.n	80087b2 <_printf_i+0x32>
 800879c:	2f00      	cmp	r7, #0
 800879e:	f000 80d2 	beq.w	8008946 <_printf_i+0x1c6>
 80087a2:	2f58      	cmp	r7, #88	@ 0x58
 80087a4:	f000 80b9 	beq.w	800891a <_printf_i+0x19a>
 80087a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087b0:	e03a      	b.n	8008828 <_printf_i+0xa8>
 80087b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087b6:	2b15      	cmp	r3, #21
 80087b8:	d8f6      	bhi.n	80087a8 <_printf_i+0x28>
 80087ba:	a101      	add	r1, pc, #4	@ (adr r1, 80087c0 <_printf_i+0x40>)
 80087bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c0:	08008819 	.word	0x08008819
 80087c4:	0800882d 	.word	0x0800882d
 80087c8:	080087a9 	.word	0x080087a9
 80087cc:	080087a9 	.word	0x080087a9
 80087d0:	080087a9 	.word	0x080087a9
 80087d4:	080087a9 	.word	0x080087a9
 80087d8:	0800882d 	.word	0x0800882d
 80087dc:	080087a9 	.word	0x080087a9
 80087e0:	080087a9 	.word	0x080087a9
 80087e4:	080087a9 	.word	0x080087a9
 80087e8:	080087a9 	.word	0x080087a9
 80087ec:	0800892d 	.word	0x0800892d
 80087f0:	08008857 	.word	0x08008857
 80087f4:	080088e7 	.word	0x080088e7
 80087f8:	080087a9 	.word	0x080087a9
 80087fc:	080087a9 	.word	0x080087a9
 8008800:	0800894f 	.word	0x0800894f
 8008804:	080087a9 	.word	0x080087a9
 8008808:	08008857 	.word	0x08008857
 800880c:	080087a9 	.word	0x080087a9
 8008810:	080087a9 	.word	0x080087a9
 8008814:	080088ef 	.word	0x080088ef
 8008818:	6833      	ldr	r3, [r6, #0]
 800881a:	1d1a      	adds	r2, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6032      	str	r2, [r6, #0]
 8008820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008828:	2301      	movs	r3, #1
 800882a:	e09d      	b.n	8008968 <_printf_i+0x1e8>
 800882c:	6833      	ldr	r3, [r6, #0]
 800882e:	6820      	ldr	r0, [r4, #0]
 8008830:	1d19      	adds	r1, r3, #4
 8008832:	6031      	str	r1, [r6, #0]
 8008834:	0606      	lsls	r6, r0, #24
 8008836:	d501      	bpl.n	800883c <_printf_i+0xbc>
 8008838:	681d      	ldr	r5, [r3, #0]
 800883a:	e003      	b.n	8008844 <_printf_i+0xc4>
 800883c:	0645      	lsls	r5, r0, #25
 800883e:	d5fb      	bpl.n	8008838 <_printf_i+0xb8>
 8008840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008844:	2d00      	cmp	r5, #0
 8008846:	da03      	bge.n	8008850 <_printf_i+0xd0>
 8008848:	232d      	movs	r3, #45	@ 0x2d
 800884a:	426d      	negs	r5, r5
 800884c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008850:	4859      	ldr	r0, [pc, #356]	@ (80089b8 <_printf_i+0x238>)
 8008852:	230a      	movs	r3, #10
 8008854:	e011      	b.n	800887a <_printf_i+0xfa>
 8008856:	6821      	ldr	r1, [r4, #0]
 8008858:	6833      	ldr	r3, [r6, #0]
 800885a:	0608      	lsls	r0, r1, #24
 800885c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008860:	d402      	bmi.n	8008868 <_printf_i+0xe8>
 8008862:	0649      	lsls	r1, r1, #25
 8008864:	bf48      	it	mi
 8008866:	b2ad      	uxthmi	r5, r5
 8008868:	2f6f      	cmp	r7, #111	@ 0x6f
 800886a:	4853      	ldr	r0, [pc, #332]	@ (80089b8 <_printf_i+0x238>)
 800886c:	6033      	str	r3, [r6, #0]
 800886e:	bf14      	ite	ne
 8008870:	230a      	movne	r3, #10
 8008872:	2308      	moveq	r3, #8
 8008874:	2100      	movs	r1, #0
 8008876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800887a:	6866      	ldr	r6, [r4, #4]
 800887c:	60a6      	str	r6, [r4, #8]
 800887e:	2e00      	cmp	r6, #0
 8008880:	bfa2      	ittt	ge
 8008882:	6821      	ldrge	r1, [r4, #0]
 8008884:	f021 0104 	bicge.w	r1, r1, #4
 8008888:	6021      	strge	r1, [r4, #0]
 800888a:	b90d      	cbnz	r5, 8008890 <_printf_i+0x110>
 800888c:	2e00      	cmp	r6, #0
 800888e:	d04b      	beq.n	8008928 <_printf_i+0x1a8>
 8008890:	4616      	mov	r6, r2
 8008892:	fbb5 f1f3 	udiv	r1, r5, r3
 8008896:	fb03 5711 	mls	r7, r3, r1, r5
 800889a:	5dc7      	ldrb	r7, [r0, r7]
 800889c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088a0:	462f      	mov	r7, r5
 80088a2:	42bb      	cmp	r3, r7
 80088a4:	460d      	mov	r5, r1
 80088a6:	d9f4      	bls.n	8008892 <_printf_i+0x112>
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d10b      	bne.n	80088c4 <_printf_i+0x144>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	07df      	lsls	r7, r3, #31
 80088b0:	d508      	bpl.n	80088c4 <_printf_i+0x144>
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4299      	cmp	r1, r3
 80088b8:	bfde      	ittt	le
 80088ba:	2330      	movle	r3, #48	@ 0x30
 80088bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c4:	1b92      	subs	r2, r2, r6
 80088c6:	6122      	str	r2, [r4, #16]
 80088c8:	f8cd a000 	str.w	sl, [sp]
 80088cc:	464b      	mov	r3, r9
 80088ce:	aa03      	add	r2, sp, #12
 80088d0:	4621      	mov	r1, r4
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fee6 	bl	80086a4 <_printf_common>
 80088d8:	3001      	adds	r0, #1
 80088da:	d14a      	bne.n	8008972 <_printf_i+0x1f2>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	b004      	add	sp, #16
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f043 0320 	orr.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	4833      	ldr	r0, [pc, #204]	@ (80089bc <_printf_i+0x23c>)
 80088f0:	2778      	movs	r7, #120	@ 0x78
 80088f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	6831      	ldr	r1, [r6, #0]
 80088fa:	061f      	lsls	r7, r3, #24
 80088fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008900:	d402      	bmi.n	8008908 <_printf_i+0x188>
 8008902:	065f      	lsls	r7, r3, #25
 8008904:	bf48      	it	mi
 8008906:	b2ad      	uxthmi	r5, r5
 8008908:	6031      	str	r1, [r6, #0]
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	bf44      	itt	mi
 800890e:	f043 0320 	orrmi.w	r3, r3, #32
 8008912:	6023      	strmi	r3, [r4, #0]
 8008914:	b11d      	cbz	r5, 800891e <_printf_i+0x19e>
 8008916:	2310      	movs	r3, #16
 8008918:	e7ac      	b.n	8008874 <_printf_i+0xf4>
 800891a:	4827      	ldr	r0, [pc, #156]	@ (80089b8 <_printf_i+0x238>)
 800891c:	e7e9      	b.n	80088f2 <_printf_i+0x172>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	f023 0320 	bic.w	r3, r3, #32
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	e7f6      	b.n	8008916 <_printf_i+0x196>
 8008928:	4616      	mov	r6, r2
 800892a:	e7bd      	b.n	80088a8 <_printf_i+0x128>
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	6825      	ldr	r5, [r4, #0]
 8008930:	6961      	ldr	r1, [r4, #20]
 8008932:	1d18      	adds	r0, r3, #4
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	062e      	lsls	r6, r5, #24
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	d501      	bpl.n	8008940 <_printf_i+0x1c0>
 800893c:	6019      	str	r1, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0x1c6>
 8008940:	0668      	lsls	r0, r5, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0x1bc>
 8008944:	8019      	strh	r1, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	4616      	mov	r6, r2
 800894c:	e7bc      	b.n	80088c8 <_printf_i+0x148>
 800894e:	6833      	ldr	r3, [r6, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	6032      	str	r2, [r6, #0]
 8008954:	681e      	ldr	r6, [r3, #0]
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	2100      	movs	r1, #0
 800895a:	4630      	mov	r0, r6
 800895c:	f7f7 fc48 	bl	80001f0 <memchr>
 8008960:	b108      	cbz	r0, 8008966 <_printf_i+0x1e6>
 8008962:	1b80      	subs	r0, r0, r6
 8008964:	6060      	str	r0, [r4, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008970:	e7aa      	b.n	80088c8 <_printf_i+0x148>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	4632      	mov	r2, r6
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d0ad      	beq.n	80088dc <_printf_i+0x15c>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	d413      	bmi.n	80089ae <_printf_i+0x22e>
 8008986:	68e0      	ldr	r0, [r4, #12]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	4298      	cmp	r0, r3
 800898c:	bfb8      	it	lt
 800898e:	4618      	movlt	r0, r3
 8008990:	e7a6      	b.n	80088e0 <_printf_i+0x160>
 8008992:	2301      	movs	r3, #1
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d09d      	beq.n	80088dc <_printf_i+0x15c>
 80089a0:	3501      	adds	r5, #1
 80089a2:	68e3      	ldr	r3, [r4, #12]
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dcf2      	bgt.n	8008992 <_printf_i+0x212>
 80089ac:	e7eb      	b.n	8008986 <_printf_i+0x206>
 80089ae:	2500      	movs	r5, #0
 80089b0:	f104 0619 	add.w	r6, r4, #25
 80089b4:	e7f5      	b.n	80089a2 <_printf_i+0x222>
 80089b6:	bf00      	nop
 80089b8:	0800c86f 	.word	0x0800c86f
 80089bc:	0800c880 	.word	0x0800c880

080089c0 <_scanf_float>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	b087      	sub	sp, #28
 80089c6:	4617      	mov	r7, r2
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	688b      	ldr	r3, [r1, #8]
 80089cc:	1e5a      	subs	r2, r3, #1
 80089ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089d2:	bf81      	itttt	hi
 80089d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80089d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80089dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80089e0:	608b      	strhi	r3, [r1, #8]
 80089e2:	680b      	ldr	r3, [r1, #0]
 80089e4:	460a      	mov	r2, r1
 80089e6:	f04f 0500 	mov.w	r5, #0
 80089ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80089ee:	f842 3b1c 	str.w	r3, [r2], #28
 80089f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089f6:	4680      	mov	r8, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	bf98      	it	ls
 80089fc:	f04f 0b00 	movls.w	fp, #0
 8008a00:	9201      	str	r2, [sp, #4]
 8008a02:	4616      	mov	r6, r2
 8008a04:	46aa      	mov	sl, r5
 8008a06:	46a9      	mov	r9, r5
 8008a08:	9502      	str	r5, [sp, #8]
 8008a0a:	68a2      	ldr	r2, [r4, #8]
 8008a0c:	b152      	cbz	r2, 8008a24 <_scanf_float+0x64>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a14:	d864      	bhi.n	8008ae0 <_scanf_float+0x120>
 8008a16:	2b40      	cmp	r3, #64	@ 0x40
 8008a18:	d83c      	bhi.n	8008a94 <_scanf_float+0xd4>
 8008a1a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a1e:	b2c8      	uxtb	r0, r1
 8008a20:	280e      	cmp	r0, #14
 8008a22:	d93a      	bls.n	8008a9a <_scanf_float+0xda>
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	d003      	beq.n	8008a32 <_scanf_float+0x72>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a36:	f1ba 0f01 	cmp.w	sl, #1
 8008a3a:	f200 8117 	bhi.w	8008c6c <_scanf_float+0x2ac>
 8008a3e:	9b01      	ldr	r3, [sp, #4]
 8008a40:	429e      	cmp	r6, r3
 8008a42:	f200 8108 	bhi.w	8008c56 <_scanf_float+0x296>
 8008a46:	2001      	movs	r0, #1
 8008a48:	b007      	add	sp, #28
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a52:	2a0d      	cmp	r2, #13
 8008a54:	d8e6      	bhi.n	8008a24 <_scanf_float+0x64>
 8008a56:	a101      	add	r1, pc, #4	@ (adr r1, 8008a5c <_scanf_float+0x9c>)
 8008a58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a5c:	08008ba3 	.word	0x08008ba3
 8008a60:	08008a25 	.word	0x08008a25
 8008a64:	08008a25 	.word	0x08008a25
 8008a68:	08008a25 	.word	0x08008a25
 8008a6c:	08008c03 	.word	0x08008c03
 8008a70:	08008bdb 	.word	0x08008bdb
 8008a74:	08008a25 	.word	0x08008a25
 8008a78:	08008a25 	.word	0x08008a25
 8008a7c:	08008bb1 	.word	0x08008bb1
 8008a80:	08008a25 	.word	0x08008a25
 8008a84:	08008a25 	.word	0x08008a25
 8008a88:	08008a25 	.word	0x08008a25
 8008a8c:	08008a25 	.word	0x08008a25
 8008a90:	08008b69 	.word	0x08008b69
 8008a94:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008a98:	e7db      	b.n	8008a52 <_scanf_float+0x92>
 8008a9a:	290e      	cmp	r1, #14
 8008a9c:	d8c2      	bhi.n	8008a24 <_scanf_float+0x64>
 8008a9e:	a001      	add	r0, pc, #4	@ (adr r0, 8008aa4 <_scanf_float+0xe4>)
 8008aa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008aa4:	08008b59 	.word	0x08008b59
 8008aa8:	08008a25 	.word	0x08008a25
 8008aac:	08008b59 	.word	0x08008b59
 8008ab0:	08008bef 	.word	0x08008bef
 8008ab4:	08008a25 	.word	0x08008a25
 8008ab8:	08008b01 	.word	0x08008b01
 8008abc:	08008b3f 	.word	0x08008b3f
 8008ac0:	08008b3f 	.word	0x08008b3f
 8008ac4:	08008b3f 	.word	0x08008b3f
 8008ac8:	08008b3f 	.word	0x08008b3f
 8008acc:	08008b3f 	.word	0x08008b3f
 8008ad0:	08008b3f 	.word	0x08008b3f
 8008ad4:	08008b3f 	.word	0x08008b3f
 8008ad8:	08008b3f 	.word	0x08008b3f
 8008adc:	08008b3f 	.word	0x08008b3f
 8008ae0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008ae2:	d809      	bhi.n	8008af8 <_scanf_float+0x138>
 8008ae4:	2b60      	cmp	r3, #96	@ 0x60
 8008ae6:	d8b2      	bhi.n	8008a4e <_scanf_float+0x8e>
 8008ae8:	2b54      	cmp	r3, #84	@ 0x54
 8008aea:	d07b      	beq.n	8008be4 <_scanf_float+0x224>
 8008aec:	2b59      	cmp	r3, #89	@ 0x59
 8008aee:	d199      	bne.n	8008a24 <_scanf_float+0x64>
 8008af0:	2d07      	cmp	r5, #7
 8008af2:	d197      	bne.n	8008a24 <_scanf_float+0x64>
 8008af4:	2508      	movs	r5, #8
 8008af6:	e02c      	b.n	8008b52 <_scanf_float+0x192>
 8008af8:	2b74      	cmp	r3, #116	@ 0x74
 8008afa:	d073      	beq.n	8008be4 <_scanf_float+0x224>
 8008afc:	2b79      	cmp	r3, #121	@ 0x79
 8008afe:	e7f6      	b.n	8008aee <_scanf_float+0x12e>
 8008b00:	6821      	ldr	r1, [r4, #0]
 8008b02:	05c8      	lsls	r0, r1, #23
 8008b04:	d51b      	bpl.n	8008b3e <_scanf_float+0x17e>
 8008b06:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b0a:	6021      	str	r1, [r4, #0]
 8008b0c:	f109 0901 	add.w	r9, r9, #1
 8008b10:	f1bb 0f00 	cmp.w	fp, #0
 8008b14:	d003      	beq.n	8008b1e <_scanf_float+0x15e>
 8008b16:	3201      	adds	r2, #1
 8008b18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b1c:	60a2      	str	r2, [r4, #8]
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	60a3      	str	r3, [r4, #8]
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	3301      	adds	r3, #1
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	607b      	str	r3, [r7, #4]
 8008b32:	f340 8087 	ble.w	8008c44 <_scanf_float+0x284>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	e765      	b.n	8008a0a <_scanf_float+0x4a>
 8008b3e:	eb1a 0105 	adds.w	r1, sl, r5
 8008b42:	f47f af6f 	bne.w	8008a24 <_scanf_float+0x64>
 8008b46:	6822      	ldr	r2, [r4, #0]
 8008b48:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b4c:	6022      	str	r2, [r4, #0]
 8008b4e:	460d      	mov	r5, r1
 8008b50:	468a      	mov	sl, r1
 8008b52:	f806 3b01 	strb.w	r3, [r6], #1
 8008b56:	e7e2      	b.n	8008b1e <_scanf_float+0x15e>
 8008b58:	6822      	ldr	r2, [r4, #0]
 8008b5a:	0610      	lsls	r0, r2, #24
 8008b5c:	f57f af62 	bpl.w	8008a24 <_scanf_float+0x64>
 8008b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b64:	6022      	str	r2, [r4, #0]
 8008b66:	e7f4      	b.n	8008b52 <_scanf_float+0x192>
 8008b68:	f1ba 0f00 	cmp.w	sl, #0
 8008b6c:	d10e      	bne.n	8008b8c <_scanf_float+0x1cc>
 8008b6e:	f1b9 0f00 	cmp.w	r9, #0
 8008b72:	d10e      	bne.n	8008b92 <_scanf_float+0x1d2>
 8008b74:	6822      	ldr	r2, [r4, #0]
 8008b76:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008b7a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008b7e:	d108      	bne.n	8008b92 <_scanf_float+0x1d2>
 8008b80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008b84:	6022      	str	r2, [r4, #0]
 8008b86:	f04f 0a01 	mov.w	sl, #1
 8008b8a:	e7e2      	b.n	8008b52 <_scanf_float+0x192>
 8008b8c:	f1ba 0f02 	cmp.w	sl, #2
 8008b90:	d055      	beq.n	8008c3e <_scanf_float+0x27e>
 8008b92:	2d01      	cmp	r5, #1
 8008b94:	d002      	beq.n	8008b9c <_scanf_float+0x1dc>
 8008b96:	2d04      	cmp	r5, #4
 8008b98:	f47f af44 	bne.w	8008a24 <_scanf_float+0x64>
 8008b9c:	3501      	adds	r5, #1
 8008b9e:	b2ed      	uxtb	r5, r5
 8008ba0:	e7d7      	b.n	8008b52 <_scanf_float+0x192>
 8008ba2:	f1ba 0f01 	cmp.w	sl, #1
 8008ba6:	f47f af3d 	bne.w	8008a24 <_scanf_float+0x64>
 8008baa:	f04f 0a02 	mov.w	sl, #2
 8008bae:	e7d0      	b.n	8008b52 <_scanf_float+0x192>
 8008bb0:	b97d      	cbnz	r5, 8008bd2 <_scanf_float+0x212>
 8008bb2:	f1b9 0f00 	cmp.w	r9, #0
 8008bb6:	f47f af38 	bne.w	8008a2a <_scanf_float+0x6a>
 8008bba:	6822      	ldr	r2, [r4, #0]
 8008bbc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bc0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bc4:	f040 8108 	bne.w	8008dd8 <_scanf_float+0x418>
 8008bc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bcc:	6022      	str	r2, [r4, #0]
 8008bce:	2501      	movs	r5, #1
 8008bd0:	e7bf      	b.n	8008b52 <_scanf_float+0x192>
 8008bd2:	2d03      	cmp	r5, #3
 8008bd4:	d0e2      	beq.n	8008b9c <_scanf_float+0x1dc>
 8008bd6:	2d05      	cmp	r5, #5
 8008bd8:	e7de      	b.n	8008b98 <_scanf_float+0x1d8>
 8008bda:	2d02      	cmp	r5, #2
 8008bdc:	f47f af22 	bne.w	8008a24 <_scanf_float+0x64>
 8008be0:	2503      	movs	r5, #3
 8008be2:	e7b6      	b.n	8008b52 <_scanf_float+0x192>
 8008be4:	2d06      	cmp	r5, #6
 8008be6:	f47f af1d 	bne.w	8008a24 <_scanf_float+0x64>
 8008bea:	2507      	movs	r5, #7
 8008bec:	e7b1      	b.n	8008b52 <_scanf_float+0x192>
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	0591      	lsls	r1, r2, #22
 8008bf2:	f57f af17 	bpl.w	8008a24 <_scanf_float+0x64>
 8008bf6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008bfa:	6022      	str	r2, [r4, #0]
 8008bfc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c00:	e7a7      	b.n	8008b52 <_scanf_float+0x192>
 8008c02:	6822      	ldr	r2, [r4, #0]
 8008c04:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c08:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c0c:	d006      	beq.n	8008c1c <_scanf_float+0x25c>
 8008c0e:	0550      	lsls	r0, r2, #21
 8008c10:	f57f af08 	bpl.w	8008a24 <_scanf_float+0x64>
 8008c14:	f1b9 0f00 	cmp.w	r9, #0
 8008c18:	f000 80de 	beq.w	8008dd8 <_scanf_float+0x418>
 8008c1c:	0591      	lsls	r1, r2, #22
 8008c1e:	bf58      	it	pl
 8008c20:	9902      	ldrpl	r1, [sp, #8]
 8008c22:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c26:	bf58      	it	pl
 8008c28:	eba9 0101 	subpl.w	r1, r9, r1
 8008c2c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c30:	bf58      	it	pl
 8008c32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	f04f 0900 	mov.w	r9, #0
 8008c3c:	e789      	b.n	8008b52 <_scanf_float+0x192>
 8008c3e:	f04f 0a03 	mov.w	sl, #3
 8008c42:	e786      	b.n	8008b52 <_scanf_float+0x192>
 8008c44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c48:	4639      	mov	r1, r7
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	4798      	blx	r3
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f43f aedb 	beq.w	8008a0a <_scanf_float+0x4a>
 8008c54:	e6e6      	b.n	8008a24 <_scanf_float+0x64>
 8008c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c5e:	463a      	mov	r2, r7
 8008c60:	4640      	mov	r0, r8
 8008c62:	4798      	blx	r3
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	e6e8      	b.n	8008a3e <_scanf_float+0x7e>
 8008c6c:	1e6b      	subs	r3, r5, #1
 8008c6e:	2b06      	cmp	r3, #6
 8008c70:	d824      	bhi.n	8008cbc <_scanf_float+0x2fc>
 8008c72:	2d02      	cmp	r5, #2
 8008c74:	d836      	bhi.n	8008ce4 <_scanf_float+0x324>
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	429e      	cmp	r6, r3
 8008c7a:	f67f aee4 	bls.w	8008a46 <_scanf_float+0x86>
 8008c7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c86:	463a      	mov	r2, r7
 8008c88:	4640      	mov	r0, r8
 8008c8a:	4798      	blx	r3
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	6123      	str	r3, [r4, #16]
 8008c92:	e7f0      	b.n	8008c76 <_scanf_float+0x2b6>
 8008c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c98:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008c9c:	463a      	mov	r2, r7
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	4798      	blx	r3
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cac:	fa5f fa8a 	uxtb.w	sl, sl
 8008cb0:	f1ba 0f02 	cmp.w	sl, #2
 8008cb4:	d1ee      	bne.n	8008c94 <_scanf_float+0x2d4>
 8008cb6:	3d03      	subs	r5, #3
 8008cb8:	b2ed      	uxtb	r5, r5
 8008cba:	1b76      	subs	r6, r6, r5
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	05da      	lsls	r2, r3, #23
 8008cc0:	d530      	bpl.n	8008d24 <_scanf_float+0x364>
 8008cc2:	055b      	lsls	r3, r3, #21
 8008cc4:	d511      	bpl.n	8008cea <_scanf_float+0x32a>
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	429e      	cmp	r6, r3
 8008cca:	f67f aebc 	bls.w	8008a46 <_scanf_float+0x86>
 8008cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cd6:	463a      	mov	r2, r7
 8008cd8:	4640      	mov	r0, r8
 8008cda:	4798      	blx	r3
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	e7f0      	b.n	8008cc6 <_scanf_float+0x306>
 8008ce4:	46aa      	mov	sl, r5
 8008ce6:	46b3      	mov	fp, r6
 8008ce8:	e7de      	b.n	8008ca8 <_scanf_float+0x2e8>
 8008cea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	2965      	cmp	r1, #101	@ 0x65
 8008cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cf6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cfa:	6123      	str	r3, [r4, #16]
 8008cfc:	d00c      	beq.n	8008d18 <_scanf_float+0x358>
 8008cfe:	2945      	cmp	r1, #69	@ 0x45
 8008d00:	d00a      	beq.n	8008d18 <_scanf_float+0x358>
 8008d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d06:	463a      	mov	r2, r7
 8008d08:	4640      	mov	r0, r8
 8008d0a:	4798      	blx	r3
 8008d0c:	6923      	ldr	r3, [r4, #16]
 8008d0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	1eb5      	subs	r5, r6, #2
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d1c:	463a      	mov	r2, r7
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4798      	blx	r3
 8008d22:	462e      	mov	r6, r5
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	f012 0210 	ands.w	r2, r2, #16
 8008d2a:	d001      	beq.n	8008d30 <_scanf_float+0x370>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e68b      	b.n	8008a48 <_scanf_float+0x88>
 8008d30:	7032      	strb	r2, [r6, #0]
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3c:	d11c      	bne.n	8008d78 <_scanf_float+0x3b8>
 8008d3e:	9b02      	ldr	r3, [sp, #8]
 8008d40:	454b      	cmp	r3, r9
 8008d42:	eba3 0209 	sub.w	r2, r3, r9
 8008d46:	d123      	bne.n	8008d90 <_scanf_float+0x3d0>
 8008d48:	9901      	ldr	r1, [sp, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	f002 fbf7 	bl	800b540 <_strtod_r>
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	6821      	ldr	r1, [r4, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f011 0f02 	tst.w	r1, #2
 8008d5c:	ec57 6b10 	vmov	r6, r7, d0
 8008d60:	f103 0204 	add.w	r2, r3, #4
 8008d64:	d01f      	beq.n	8008da6 <_scanf_float+0x3e6>
 8008d66:	9903      	ldr	r1, [sp, #12]
 8008d68:	600a      	str	r2, [r1, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	e9c3 6700 	strd	r6, r7, [r3]
 8008d70:	68e3      	ldr	r3, [r4, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60e3      	str	r3, [r4, #12]
 8008d76:	e7d9      	b.n	8008d2c <_scanf_float+0x36c>
 8008d78:	9b04      	ldr	r3, [sp, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0e4      	beq.n	8008d48 <_scanf_float+0x388>
 8008d7e:	9905      	ldr	r1, [sp, #20]
 8008d80:	230a      	movs	r3, #10
 8008d82:	3101      	adds	r1, #1
 8008d84:	4640      	mov	r0, r8
 8008d86:	f7ff f9b7 	bl	80080f8 <_strtol_r>
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	9e05      	ldr	r6, [sp, #20]
 8008d8e:	1ac2      	subs	r2, r0, r3
 8008d90:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008d94:	429e      	cmp	r6, r3
 8008d96:	bf28      	it	cs
 8008d98:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008d9c:	4910      	ldr	r1, [pc, #64]	@ (8008de0 <_scanf_float+0x420>)
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f000 f8e4 	bl	8008f6c <siprintf>
 8008da4:	e7d0      	b.n	8008d48 <_scanf_float+0x388>
 8008da6:	f011 0f04 	tst.w	r1, #4
 8008daa:	9903      	ldr	r1, [sp, #12]
 8008dac:	600a      	str	r2, [r1, #0]
 8008dae:	d1dc      	bne.n	8008d6a <_scanf_float+0x3aa>
 8008db0:	681d      	ldr	r5, [r3, #0]
 8008db2:	4632      	mov	r2, r6
 8008db4:	463b      	mov	r3, r7
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fec7 	bl	8000b4c <__aeabi_dcmpun>
 8008dbe:	b128      	cbz	r0, 8008dcc <_scanf_float+0x40c>
 8008dc0:	4808      	ldr	r0, [pc, #32]	@ (8008de4 <_scanf_float+0x424>)
 8008dc2:	f000 f9b7 	bl	8009134 <nanf>
 8008dc6:	ed85 0a00 	vstr	s0, [r5]
 8008dca:	e7d1      	b.n	8008d70 <_scanf_float+0x3b0>
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 ff1a 	bl	8000c08 <__aeabi_d2f>
 8008dd4:	6028      	str	r0, [r5, #0]
 8008dd6:	e7cb      	b.n	8008d70 <_scanf_float+0x3b0>
 8008dd8:	f04f 0900 	mov.w	r9, #0
 8008ddc:	e629      	b.n	8008a32 <_scanf_float+0x72>
 8008dde:	bf00      	nop
 8008de0:	0800c891 	.word	0x0800c891
 8008de4:	0800cb24 	.word	0x0800cb24

08008de8 <std>:
 8008de8:	2300      	movs	r3, #0
 8008dea:	b510      	push	{r4, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	e9c0 3300 	strd	r3, r3, [r0]
 8008df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008df6:	6083      	str	r3, [r0, #8]
 8008df8:	8181      	strh	r1, [r0, #12]
 8008dfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dfc:	81c2      	strh	r2, [r0, #14]
 8008dfe:	6183      	str	r3, [r0, #24]
 8008e00:	4619      	mov	r1, r3
 8008e02:	2208      	movs	r2, #8
 8008e04:	305c      	adds	r0, #92	@ 0x5c
 8008e06:	f000 f914 	bl	8009032 <memset>
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <std+0x58>)
 8008e0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <std+0x5c>)
 8008e10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <std+0x60>)
 8008e14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e16:	4b0d      	ldr	r3, [pc, #52]	@ (8008e4c <std+0x64>)
 8008e18:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e50 <std+0x68>)
 8008e1c:	6224      	str	r4, [r4, #32]
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d006      	beq.n	8008e30 <std+0x48>
 8008e22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e26:	4294      	cmp	r4, r2
 8008e28:	d002      	beq.n	8008e30 <std+0x48>
 8008e2a:	33d0      	adds	r3, #208	@ 0xd0
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	d105      	bne.n	8008e3c <std+0x54>
 8008e30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e38:	f000 b978 	b.w	800912c <__retarget_lock_init_recursive>
 8008e3c:	bd10      	pop	{r4, pc}
 8008e3e:	bf00      	nop
 8008e40:	08008fad 	.word	0x08008fad
 8008e44:	08008fcf 	.word	0x08008fcf
 8008e48:	08009007 	.word	0x08009007
 8008e4c:	0800902b 	.word	0x0800902b
 8008e50:	200004d0 	.word	0x200004d0

08008e54 <stdio_exit_handler>:
 8008e54:	4a02      	ldr	r2, [pc, #8]	@ (8008e60 <stdio_exit_handler+0xc>)
 8008e56:	4903      	ldr	r1, [pc, #12]	@ (8008e64 <stdio_exit_handler+0x10>)
 8008e58:	4803      	ldr	r0, [pc, #12]	@ (8008e68 <stdio_exit_handler+0x14>)
 8008e5a:	f000 b869 	b.w	8008f30 <_fwalk_sglue>
 8008e5e:	bf00      	nop
 8008e60:	2000000c 	.word	0x2000000c
 8008e64:	0800b905 	.word	0x0800b905
 8008e68:	2000001c 	.word	0x2000001c

08008e6c <cleanup_stdio>:
 8008e6c:	6841      	ldr	r1, [r0, #4]
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea0 <cleanup_stdio+0x34>)
 8008e70:	4299      	cmp	r1, r3
 8008e72:	b510      	push	{r4, lr}
 8008e74:	4604      	mov	r4, r0
 8008e76:	d001      	beq.n	8008e7c <cleanup_stdio+0x10>
 8008e78:	f002 fd44 	bl	800b904 <_fflush_r>
 8008e7c:	68a1      	ldr	r1, [r4, #8]
 8008e7e:	4b09      	ldr	r3, [pc, #36]	@ (8008ea4 <cleanup_stdio+0x38>)
 8008e80:	4299      	cmp	r1, r3
 8008e82:	d002      	beq.n	8008e8a <cleanup_stdio+0x1e>
 8008e84:	4620      	mov	r0, r4
 8008e86:	f002 fd3d 	bl	800b904 <_fflush_r>
 8008e8a:	68e1      	ldr	r1, [r4, #12]
 8008e8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <cleanup_stdio+0x3c>)
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	d004      	beq.n	8008e9c <cleanup_stdio+0x30>
 8008e92:	4620      	mov	r0, r4
 8008e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e98:	f002 bd34 	b.w	800b904 <_fflush_r>
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	bf00      	nop
 8008ea0:	200004d0 	.word	0x200004d0
 8008ea4:	20000538 	.word	0x20000538
 8008ea8:	200005a0 	.word	0x200005a0

08008eac <global_stdio_init.part.0>:
 8008eac:	b510      	push	{r4, lr}
 8008eae:	4b0b      	ldr	r3, [pc, #44]	@ (8008edc <global_stdio_init.part.0+0x30>)
 8008eb0:	4c0b      	ldr	r4, [pc, #44]	@ (8008ee0 <global_stdio_init.part.0+0x34>)
 8008eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee4 <global_stdio_init.part.0+0x38>)
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2104      	movs	r1, #4
 8008ebc:	f7ff ff94 	bl	8008de8 <std>
 8008ec0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	2109      	movs	r1, #9
 8008ec8:	f7ff ff8e 	bl	8008de8 <std>
 8008ecc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed6:	2112      	movs	r1, #18
 8008ed8:	f7ff bf86 	b.w	8008de8 <std>
 8008edc:	20000608 	.word	0x20000608
 8008ee0:	200004d0 	.word	0x200004d0
 8008ee4:	08008e55 	.word	0x08008e55

08008ee8 <__sfp_lock_acquire>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	@ (8008ef0 <__sfp_lock_acquire+0x8>)
 8008eea:	f000 b920 	b.w	800912e <__retarget_lock_acquire_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20000611 	.word	0x20000611

08008ef4 <__sfp_lock_release>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	@ (8008efc <__sfp_lock_release+0x8>)
 8008ef6:	f000 b91b 	b.w	8009130 <__retarget_lock_release_recursive>
 8008efa:	bf00      	nop
 8008efc:	20000611 	.word	0x20000611

08008f00 <__sinit>:
 8008f00:	b510      	push	{r4, lr}
 8008f02:	4604      	mov	r4, r0
 8008f04:	f7ff fff0 	bl	8008ee8 <__sfp_lock_acquire>
 8008f08:	6a23      	ldr	r3, [r4, #32]
 8008f0a:	b11b      	cbz	r3, 8008f14 <__sinit+0x14>
 8008f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f10:	f7ff bff0 	b.w	8008ef4 <__sfp_lock_release>
 8008f14:	4b04      	ldr	r3, [pc, #16]	@ (8008f28 <__sinit+0x28>)
 8008f16:	6223      	str	r3, [r4, #32]
 8008f18:	4b04      	ldr	r3, [pc, #16]	@ (8008f2c <__sinit+0x2c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1f5      	bne.n	8008f0c <__sinit+0xc>
 8008f20:	f7ff ffc4 	bl	8008eac <global_stdio_init.part.0>
 8008f24:	e7f2      	b.n	8008f0c <__sinit+0xc>
 8008f26:	bf00      	nop
 8008f28:	08008e6d 	.word	0x08008e6d
 8008f2c:	20000608 	.word	0x20000608

08008f30 <_fwalk_sglue>:
 8008f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f34:	4607      	mov	r7, r0
 8008f36:	4688      	mov	r8, r1
 8008f38:	4614      	mov	r4, r2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f40:	f1b9 0901 	subs.w	r9, r9, #1
 8008f44:	d505      	bpl.n	8008f52 <_fwalk_sglue+0x22>
 8008f46:	6824      	ldr	r4, [r4, #0]
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d1f7      	bne.n	8008f3c <_fwalk_sglue+0xc>
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f52:	89ab      	ldrh	r3, [r5, #12]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d907      	bls.n	8008f68 <_fwalk_sglue+0x38>
 8008f58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	d003      	beq.n	8008f68 <_fwalk_sglue+0x38>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c0      	blx	r8
 8008f66:	4306      	orrs	r6, r0
 8008f68:	3568      	adds	r5, #104	@ 0x68
 8008f6a:	e7e9      	b.n	8008f40 <_fwalk_sglue+0x10>

08008f6c <siprintf>:
 8008f6c:	b40e      	push	{r1, r2, r3}
 8008f6e:	b500      	push	{lr}
 8008f70:	b09c      	sub	sp, #112	@ 0x70
 8008f72:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f74:	9002      	str	r0, [sp, #8]
 8008f76:	9006      	str	r0, [sp, #24]
 8008f78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f7c:	4809      	ldr	r0, [pc, #36]	@ (8008fa4 <siprintf+0x38>)
 8008f7e:	9107      	str	r1, [sp, #28]
 8008f80:	9104      	str	r1, [sp, #16]
 8008f82:	4909      	ldr	r1, [pc, #36]	@ (8008fa8 <siprintf+0x3c>)
 8008f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f88:	9105      	str	r1, [sp, #20]
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	a902      	add	r1, sp, #8
 8008f90:	f002 fb38 	bl	800b604 <_svfiprintf_r>
 8008f94:	9b02      	ldr	r3, [sp, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	b01c      	add	sp, #112	@ 0x70
 8008f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa0:	b003      	add	sp, #12
 8008fa2:	4770      	bx	lr
 8008fa4:	20000018 	.word	0x20000018
 8008fa8:	ffff0208 	.word	0xffff0208

08008fac <__sread>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	460c      	mov	r4, r1
 8008fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb4:	f000 f86c 	bl	8009090 <_read_r>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	bfab      	itete	ge
 8008fbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8008fc0:	181b      	addge	r3, r3, r0
 8008fc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fc6:	bfac      	ite	ge
 8008fc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fca:	81a3      	strhlt	r3, [r4, #12]
 8008fcc:	bd10      	pop	{r4, pc}

08008fce <__swrite>:
 8008fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd2:	461f      	mov	r7, r3
 8008fd4:	898b      	ldrh	r3, [r1, #12]
 8008fd6:	05db      	lsls	r3, r3, #23
 8008fd8:	4605      	mov	r5, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	4616      	mov	r6, r2
 8008fde:	d505      	bpl.n	8008fec <__swrite+0x1e>
 8008fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f000 f840 	bl	800906c <_lseek_r>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009002:	f000 b857 	b.w	80090b4 <_write_r>

08009006 <__sseek>:
 8009006:	b510      	push	{r4, lr}
 8009008:	460c      	mov	r4, r1
 800900a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900e:	f000 f82d 	bl	800906c <_lseek_r>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	bf15      	itete	ne
 8009018:	6560      	strne	r0, [r4, #84]	@ 0x54
 800901a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800901e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009022:	81a3      	strheq	r3, [r4, #12]
 8009024:	bf18      	it	ne
 8009026:	81a3      	strhne	r3, [r4, #12]
 8009028:	bd10      	pop	{r4, pc}

0800902a <__sclose>:
 800902a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902e:	f000 b80d 	b.w	800904c <_close_r>

08009032 <memset>:
 8009032:	4402      	add	r2, r0
 8009034:	4603      	mov	r3, r0
 8009036:	4293      	cmp	r3, r2
 8009038:	d100      	bne.n	800903c <memset+0xa>
 800903a:	4770      	bx	lr
 800903c:	f803 1b01 	strb.w	r1, [r3], #1
 8009040:	e7f9      	b.n	8009036 <memset+0x4>
	...

08009044 <_localeconv_r>:
 8009044:	4800      	ldr	r0, [pc, #0]	@ (8009048 <_localeconv_r+0x4>)
 8009046:	4770      	bx	lr
 8009048:	20000158 	.word	0x20000158

0800904c <_close_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d06      	ldr	r5, [pc, #24]	@ (8009068 <_close_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f9 f82e 	bl	80020b8 <_close>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_close_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_close_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	2000060c 	.word	0x2000060c

0800906c <_lseek_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	@ (800908c <_lseek_r+0x20>)
 8009070:	4604      	mov	r4, r0
 8009072:	4608      	mov	r0, r1
 8009074:	4611      	mov	r1, r2
 8009076:	2200      	movs	r2, #0
 8009078:	602a      	str	r2, [r5, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f7f9 f843 	bl	8002106 <_lseek>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_lseek_r+0x1e>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_lseek_r+0x1e>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	2000060c 	.word	0x2000060c

08009090 <_read_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d07      	ldr	r5, [pc, #28]	@ (80090b0 <_read_r+0x20>)
 8009094:	4604      	mov	r4, r0
 8009096:	4608      	mov	r0, r1
 8009098:	4611      	mov	r1, r2
 800909a:	2200      	movs	r2, #0
 800909c:	602a      	str	r2, [r5, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	f7f8 ffd1 	bl	8002046 <_read>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_read_r+0x1e>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_read_r+0x1e>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	2000060c 	.word	0x2000060c

080090b4 <_write_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d07      	ldr	r5, [pc, #28]	@ (80090d4 <_write_r+0x20>)
 80090b8:	4604      	mov	r4, r0
 80090ba:	4608      	mov	r0, r1
 80090bc:	4611      	mov	r1, r2
 80090be:	2200      	movs	r2, #0
 80090c0:	602a      	str	r2, [r5, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f7f8 ffdc 	bl	8002080 <_write>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_write_r+0x1e>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_write_r+0x1e>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	2000060c 	.word	0x2000060c

080090d8 <__errno>:
 80090d8:	4b01      	ldr	r3, [pc, #4]	@ (80090e0 <__errno+0x8>)
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	20000018 	.word	0x20000018

080090e4 <__libc_init_array>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	4d0d      	ldr	r5, [pc, #52]	@ (800911c <__libc_init_array+0x38>)
 80090e8:	4c0d      	ldr	r4, [pc, #52]	@ (8009120 <__libc_init_array+0x3c>)
 80090ea:	1b64      	subs	r4, r4, r5
 80090ec:	10a4      	asrs	r4, r4, #2
 80090ee:	2600      	movs	r6, #0
 80090f0:	42a6      	cmp	r6, r4
 80090f2:	d109      	bne.n	8009108 <__libc_init_array+0x24>
 80090f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009124 <__libc_init_array+0x40>)
 80090f6:	4c0c      	ldr	r4, [pc, #48]	@ (8009128 <__libc_init_array+0x44>)
 80090f8:	f003 faf4 	bl	800c6e4 <_init>
 80090fc:	1b64      	subs	r4, r4, r5
 80090fe:	10a4      	asrs	r4, r4, #2
 8009100:	2600      	movs	r6, #0
 8009102:	42a6      	cmp	r6, r4
 8009104:	d105      	bne.n	8009112 <__libc_init_array+0x2e>
 8009106:	bd70      	pop	{r4, r5, r6, pc}
 8009108:	f855 3b04 	ldr.w	r3, [r5], #4
 800910c:	4798      	blx	r3
 800910e:	3601      	adds	r6, #1
 8009110:	e7ee      	b.n	80090f0 <__libc_init_array+0xc>
 8009112:	f855 3b04 	ldr.w	r3, [r5], #4
 8009116:	4798      	blx	r3
 8009118:	3601      	adds	r6, #1
 800911a:	e7f2      	b.n	8009102 <__libc_init_array+0x1e>
 800911c:	0800cb90 	.word	0x0800cb90
 8009120:	0800cb90 	.word	0x0800cb90
 8009124:	0800cb90 	.word	0x0800cb90
 8009128:	0800cb94 	.word	0x0800cb94

0800912c <__retarget_lock_init_recursive>:
 800912c:	4770      	bx	lr

0800912e <__retarget_lock_acquire_recursive>:
 800912e:	4770      	bx	lr

08009130 <__retarget_lock_release_recursive>:
 8009130:	4770      	bx	lr
	...

08009134 <nanf>:
 8009134:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800913c <nanf+0x8>
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	7fc00000 	.word	0x7fc00000

08009140 <quorem>:
 8009140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	6903      	ldr	r3, [r0, #16]
 8009146:	690c      	ldr	r4, [r1, #16]
 8009148:	42a3      	cmp	r3, r4
 800914a:	4607      	mov	r7, r0
 800914c:	db7e      	blt.n	800924c <quorem+0x10c>
 800914e:	3c01      	subs	r4, #1
 8009150:	f101 0814 	add.w	r8, r1, #20
 8009154:	00a3      	lsls	r3, r4, #2
 8009156:	f100 0514 	add.w	r5, r0, #20
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800916a:	3301      	adds	r3, #1
 800916c:	429a      	cmp	r2, r3
 800916e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009172:	fbb2 f6f3 	udiv	r6, r2, r3
 8009176:	d32e      	bcc.n	80091d6 <quorem+0x96>
 8009178:	f04f 0a00 	mov.w	sl, #0
 800917c:	46c4      	mov	ip, r8
 800917e:	46ae      	mov	lr, r5
 8009180:	46d3      	mov	fp, sl
 8009182:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009186:	b298      	uxth	r0, r3
 8009188:	fb06 a000 	mla	r0, r6, r0, sl
 800918c:	0c02      	lsrs	r2, r0, #16
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	fb06 2303 	mla	r3, r6, r3, r2
 8009194:	f8de 2000 	ldr.w	r2, [lr]
 8009198:	b280      	uxth	r0, r0
 800919a:	b292      	uxth	r2, r2
 800919c:	1a12      	subs	r2, r2, r0
 800919e:	445a      	add	r2, fp
 80091a0:	f8de 0000 	ldr.w	r0, [lr]
 80091a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80091ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80091b2:	b292      	uxth	r2, r2
 80091b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80091b8:	45e1      	cmp	r9, ip
 80091ba:	f84e 2b04 	str.w	r2, [lr], #4
 80091be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80091c2:	d2de      	bcs.n	8009182 <quorem+0x42>
 80091c4:	9b00      	ldr	r3, [sp, #0]
 80091c6:	58eb      	ldr	r3, [r5, r3]
 80091c8:	b92b      	cbnz	r3, 80091d6 <quorem+0x96>
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	429d      	cmp	r5, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	d32f      	bcc.n	8009234 <quorem+0xf4>
 80091d4:	613c      	str	r4, [r7, #16]
 80091d6:	4638      	mov	r0, r7
 80091d8:	f001 f9c2 	bl	800a560 <__mcmp>
 80091dc:	2800      	cmp	r0, #0
 80091de:	db25      	blt.n	800922c <quorem+0xec>
 80091e0:	4629      	mov	r1, r5
 80091e2:	2000      	movs	r0, #0
 80091e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80091e8:	f8d1 c000 	ldr.w	ip, [r1]
 80091ec:	fa1f fe82 	uxth.w	lr, r2
 80091f0:	fa1f f38c 	uxth.w	r3, ip
 80091f4:	eba3 030e 	sub.w	r3, r3, lr
 80091f8:	4403      	add	r3, r0
 80091fa:	0c12      	lsrs	r2, r2, #16
 80091fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009200:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009204:	b29b      	uxth	r3, r3
 8009206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800920a:	45c1      	cmp	r9, r8
 800920c:	f841 3b04 	str.w	r3, [r1], #4
 8009210:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009214:	d2e6      	bcs.n	80091e4 <quorem+0xa4>
 8009216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800921a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800921e:	b922      	cbnz	r2, 800922a <quorem+0xea>
 8009220:	3b04      	subs	r3, #4
 8009222:	429d      	cmp	r5, r3
 8009224:	461a      	mov	r2, r3
 8009226:	d30b      	bcc.n	8009240 <quorem+0x100>
 8009228:	613c      	str	r4, [r7, #16]
 800922a:	3601      	adds	r6, #1
 800922c:	4630      	mov	r0, r6
 800922e:	b003      	add	sp, #12
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	3b04      	subs	r3, #4
 8009238:	2a00      	cmp	r2, #0
 800923a:	d1cb      	bne.n	80091d4 <quorem+0x94>
 800923c:	3c01      	subs	r4, #1
 800923e:	e7c6      	b.n	80091ce <quorem+0x8e>
 8009240:	6812      	ldr	r2, [r2, #0]
 8009242:	3b04      	subs	r3, #4
 8009244:	2a00      	cmp	r2, #0
 8009246:	d1ef      	bne.n	8009228 <quorem+0xe8>
 8009248:	3c01      	subs	r4, #1
 800924a:	e7ea      	b.n	8009222 <quorem+0xe2>
 800924c:	2000      	movs	r0, #0
 800924e:	e7ee      	b.n	800922e <quorem+0xee>

08009250 <_dtoa_r>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	69c7      	ldr	r7, [r0, #28]
 8009256:	b099      	sub	sp, #100	@ 0x64
 8009258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800925c:	ec55 4b10 	vmov	r4, r5, d0
 8009260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009262:	9109      	str	r1, [sp, #36]	@ 0x24
 8009264:	4683      	mov	fp, r0
 8009266:	920e      	str	r2, [sp, #56]	@ 0x38
 8009268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800926a:	b97f      	cbnz	r7, 800928c <_dtoa_r+0x3c>
 800926c:	2010      	movs	r0, #16
 800926e:	f000 fdfd 	bl	8009e6c <malloc>
 8009272:	4602      	mov	r2, r0
 8009274:	f8cb 001c 	str.w	r0, [fp, #28]
 8009278:	b920      	cbnz	r0, 8009284 <_dtoa_r+0x34>
 800927a:	4ba7      	ldr	r3, [pc, #668]	@ (8009518 <_dtoa_r+0x2c8>)
 800927c:	21ef      	movs	r1, #239	@ 0xef
 800927e:	48a7      	ldr	r0, [pc, #668]	@ (800951c <_dtoa_r+0x2cc>)
 8009280:	f002 fbba 	bl	800b9f8 <__assert_func>
 8009284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009288:	6007      	str	r7, [r0, #0]
 800928a:	60c7      	str	r7, [r0, #12]
 800928c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009290:	6819      	ldr	r1, [r3, #0]
 8009292:	b159      	cbz	r1, 80092ac <_dtoa_r+0x5c>
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	604a      	str	r2, [r1, #4]
 8009298:	2301      	movs	r3, #1
 800929a:	4093      	lsls	r3, r2
 800929c:	608b      	str	r3, [r1, #8]
 800929e:	4658      	mov	r0, fp
 80092a0:	f000 feda 	bl	800a058 <_Bfree>
 80092a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	1e2b      	subs	r3, r5, #0
 80092ae:	bfb9      	ittee	lt
 80092b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80092b4:	9303      	strlt	r3, [sp, #12]
 80092b6:	2300      	movge	r3, #0
 80092b8:	6033      	strge	r3, [r6, #0]
 80092ba:	9f03      	ldr	r7, [sp, #12]
 80092bc:	4b98      	ldr	r3, [pc, #608]	@ (8009520 <_dtoa_r+0x2d0>)
 80092be:	bfbc      	itt	lt
 80092c0:	2201      	movlt	r2, #1
 80092c2:	6032      	strlt	r2, [r6, #0]
 80092c4:	43bb      	bics	r3, r7
 80092c6:	d112      	bne.n	80092ee <_dtoa_r+0x9e>
 80092c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092d4:	4323      	orrs	r3, r4
 80092d6:	f000 854d 	beq.w	8009d74 <_dtoa_r+0xb24>
 80092da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009534 <_dtoa_r+0x2e4>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 854f 	beq.w	8009d84 <_dtoa_r+0xb34>
 80092e6:	f10a 0303 	add.w	r3, sl, #3
 80092ea:	f000 bd49 	b.w	8009d80 <_dtoa_r+0xb30>
 80092ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	ec51 0b17 	vmov	r0, r1, d7
 80092f8:	2300      	movs	r3, #0
 80092fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80092fe:	f7f7 fbf3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009302:	4680      	mov	r8, r0
 8009304:	b158      	cbz	r0, 800931e <_dtoa_r+0xce>
 8009306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009308:	2301      	movs	r3, #1
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800930e:	b113      	cbz	r3, 8009316 <_dtoa_r+0xc6>
 8009310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009312:	4b84      	ldr	r3, [pc, #528]	@ (8009524 <_dtoa_r+0x2d4>)
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009538 <_dtoa_r+0x2e8>
 800931a:	f000 bd33 	b.w	8009d84 <_dtoa_r+0xb34>
 800931e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009322:	aa16      	add	r2, sp, #88	@ 0x58
 8009324:	a917      	add	r1, sp, #92	@ 0x5c
 8009326:	4658      	mov	r0, fp
 8009328:	f001 fa3a 	bl	800a7a0 <__d2b>
 800932c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009330:	4681      	mov	r9, r0
 8009332:	2e00      	cmp	r6, #0
 8009334:	d077      	beq.n	8009426 <_dtoa_r+0x1d6>
 8009336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800933c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800934c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009350:	4619      	mov	r1, r3
 8009352:	2200      	movs	r2, #0
 8009354:	4b74      	ldr	r3, [pc, #464]	@ (8009528 <_dtoa_r+0x2d8>)
 8009356:	f7f6 ffa7 	bl	80002a8 <__aeabi_dsub>
 800935a:	a369      	add	r3, pc, #420	@ (adr r3, 8009500 <_dtoa_r+0x2b0>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f7f7 f95a 	bl	8000618 <__aeabi_dmul>
 8009364:	a368      	add	r3, pc, #416	@ (adr r3, 8009508 <_dtoa_r+0x2b8>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f7f6 ff9f 	bl	80002ac <__adddf3>
 800936e:	4604      	mov	r4, r0
 8009370:	4630      	mov	r0, r6
 8009372:	460d      	mov	r5, r1
 8009374:	f7f7 f8e6 	bl	8000544 <__aeabi_i2d>
 8009378:	a365      	add	r3, pc, #404	@ (adr r3, 8009510 <_dtoa_r+0x2c0>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f7 f94b 	bl	8000618 <__aeabi_dmul>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	f7f6 ff8f 	bl	80002ac <__adddf3>
 800938e:	4604      	mov	r4, r0
 8009390:	460d      	mov	r5, r1
 8009392:	f7f7 fbf1 	bl	8000b78 <__aeabi_d2iz>
 8009396:	2200      	movs	r2, #0
 8009398:	4607      	mov	r7, r0
 800939a:	2300      	movs	r3, #0
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 fbac 	bl	8000afc <__aeabi_dcmplt>
 80093a4:	b140      	cbz	r0, 80093b8 <_dtoa_r+0x168>
 80093a6:	4638      	mov	r0, r7
 80093a8:	f7f7 f8cc 	bl	8000544 <__aeabi_i2d>
 80093ac:	4622      	mov	r2, r4
 80093ae:	462b      	mov	r3, r5
 80093b0:	f7f7 fb9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80093b4:	b900      	cbnz	r0, 80093b8 <_dtoa_r+0x168>
 80093b6:	3f01      	subs	r7, #1
 80093b8:	2f16      	cmp	r7, #22
 80093ba:	d851      	bhi.n	8009460 <_dtoa_r+0x210>
 80093bc:	4b5b      	ldr	r3, [pc, #364]	@ (800952c <_dtoa_r+0x2dc>)
 80093be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093ca:	f7f7 fb97 	bl	8000afc <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d048      	beq.n	8009464 <_dtoa_r+0x214>
 80093d2:	3f01      	subs	r7, #1
 80093d4:	2300      	movs	r3, #0
 80093d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80093d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093da:	1b9b      	subs	r3, r3, r6
 80093dc:	1e5a      	subs	r2, r3, #1
 80093de:	bf44      	itt	mi
 80093e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80093e4:	2300      	movmi	r3, #0
 80093e6:	9208      	str	r2, [sp, #32]
 80093e8:	bf54      	ite	pl
 80093ea:	f04f 0800 	movpl.w	r8, #0
 80093ee:	9308      	strmi	r3, [sp, #32]
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	db39      	blt.n	8009468 <_dtoa_r+0x218>
 80093f4:	9b08      	ldr	r3, [sp, #32]
 80093f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80093f8:	443b      	add	r3, r7
 80093fa:	9308      	str	r3, [sp, #32]
 80093fc:	2300      	movs	r3, #0
 80093fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009402:	2b09      	cmp	r3, #9
 8009404:	d864      	bhi.n	80094d0 <_dtoa_r+0x280>
 8009406:	2b05      	cmp	r3, #5
 8009408:	bfc4      	itt	gt
 800940a:	3b04      	subgt	r3, #4
 800940c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800940e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009410:	f1a3 0302 	sub.w	r3, r3, #2
 8009414:	bfcc      	ite	gt
 8009416:	2400      	movgt	r4, #0
 8009418:	2401      	movle	r4, #1
 800941a:	2b03      	cmp	r3, #3
 800941c:	d863      	bhi.n	80094e6 <_dtoa_r+0x296>
 800941e:	e8df f003 	tbb	[pc, r3]
 8009422:	372a      	.short	0x372a
 8009424:	5535      	.short	0x5535
 8009426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800942a:	441e      	add	r6, r3
 800942c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009430:	2b20      	cmp	r3, #32
 8009432:	bfc1      	itttt	gt
 8009434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009438:	409f      	lslgt	r7, r3
 800943a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800943e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009442:	bfd6      	itet	le
 8009444:	f1c3 0320 	rsble	r3, r3, #32
 8009448:	ea47 0003 	orrgt.w	r0, r7, r3
 800944c:	fa04 f003 	lslle.w	r0, r4, r3
 8009450:	f7f7 f868 	bl	8000524 <__aeabi_ui2d>
 8009454:	2201      	movs	r2, #1
 8009456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800945a:	3e01      	subs	r6, #1
 800945c:	9214      	str	r2, [sp, #80]	@ 0x50
 800945e:	e777      	b.n	8009350 <_dtoa_r+0x100>
 8009460:	2301      	movs	r3, #1
 8009462:	e7b8      	b.n	80093d6 <_dtoa_r+0x186>
 8009464:	9012      	str	r0, [sp, #72]	@ 0x48
 8009466:	e7b7      	b.n	80093d8 <_dtoa_r+0x188>
 8009468:	427b      	negs	r3, r7
 800946a:	930a      	str	r3, [sp, #40]	@ 0x28
 800946c:	2300      	movs	r3, #0
 800946e:	eba8 0807 	sub.w	r8, r8, r7
 8009472:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009474:	e7c4      	b.n	8009400 <_dtoa_r+0x1b0>
 8009476:	2300      	movs	r3, #0
 8009478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800947a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	dc35      	bgt.n	80094ec <_dtoa_r+0x29c>
 8009480:	2301      	movs	r3, #1
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	9307      	str	r3, [sp, #28]
 8009486:	461a      	mov	r2, r3
 8009488:	920e      	str	r2, [sp, #56]	@ 0x38
 800948a:	e00b      	b.n	80094a4 <_dtoa_r+0x254>
 800948c:	2301      	movs	r3, #1
 800948e:	e7f3      	b.n	8009478 <_dtoa_r+0x228>
 8009490:	2300      	movs	r3, #0
 8009492:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009496:	18fb      	adds	r3, r7, r3
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	2b01      	cmp	r3, #1
 800949e:	9307      	str	r3, [sp, #28]
 80094a0:	bfb8      	it	lt
 80094a2:	2301      	movlt	r3, #1
 80094a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80094a8:	2100      	movs	r1, #0
 80094aa:	2204      	movs	r2, #4
 80094ac:	f102 0514 	add.w	r5, r2, #20
 80094b0:	429d      	cmp	r5, r3
 80094b2:	d91f      	bls.n	80094f4 <_dtoa_r+0x2a4>
 80094b4:	6041      	str	r1, [r0, #4]
 80094b6:	4658      	mov	r0, fp
 80094b8:	f000 fd8e 	bl	8009fd8 <_Balloc>
 80094bc:	4682      	mov	sl, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d13c      	bne.n	800953c <_dtoa_r+0x2ec>
 80094c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009530 <_dtoa_r+0x2e0>)
 80094c4:	4602      	mov	r2, r0
 80094c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80094ca:	e6d8      	b.n	800927e <_dtoa_r+0x2e>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e7e0      	b.n	8009492 <_dtoa_r+0x242>
 80094d0:	2401      	movs	r4, #1
 80094d2:	2300      	movs	r3, #0
 80094d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094d8:	f04f 33ff 	mov.w	r3, #4294967295
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	9307      	str	r3, [sp, #28]
 80094e0:	2200      	movs	r2, #0
 80094e2:	2312      	movs	r3, #18
 80094e4:	e7d0      	b.n	8009488 <_dtoa_r+0x238>
 80094e6:	2301      	movs	r3, #1
 80094e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094ea:	e7f5      	b.n	80094d8 <_dtoa_r+0x288>
 80094ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	9307      	str	r3, [sp, #28]
 80094f2:	e7d7      	b.n	80094a4 <_dtoa_r+0x254>
 80094f4:	3101      	adds	r1, #1
 80094f6:	0052      	lsls	r2, r2, #1
 80094f8:	e7d8      	b.n	80094ac <_dtoa_r+0x25c>
 80094fa:	bf00      	nop
 80094fc:	f3af 8000 	nop.w
 8009500:	636f4361 	.word	0x636f4361
 8009504:	3fd287a7 	.word	0x3fd287a7
 8009508:	8b60c8b3 	.word	0x8b60c8b3
 800950c:	3fc68a28 	.word	0x3fc68a28
 8009510:	509f79fb 	.word	0x509f79fb
 8009514:	3fd34413 	.word	0x3fd34413
 8009518:	0800c8a3 	.word	0x0800c8a3
 800951c:	0800c8ba 	.word	0x0800c8ba
 8009520:	7ff00000 	.word	0x7ff00000
 8009524:	0800c86e 	.word	0x0800c86e
 8009528:	3ff80000 	.word	0x3ff80000
 800952c:	0800c9b0 	.word	0x0800c9b0
 8009530:	0800c912 	.word	0x0800c912
 8009534:	0800c89f 	.word	0x0800c89f
 8009538:	0800c86d 	.word	0x0800c86d
 800953c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009540:	6018      	str	r0, [r3, #0]
 8009542:	9b07      	ldr	r3, [sp, #28]
 8009544:	2b0e      	cmp	r3, #14
 8009546:	f200 80a4 	bhi.w	8009692 <_dtoa_r+0x442>
 800954a:	2c00      	cmp	r4, #0
 800954c:	f000 80a1 	beq.w	8009692 <_dtoa_r+0x442>
 8009550:	2f00      	cmp	r7, #0
 8009552:	dd33      	ble.n	80095bc <_dtoa_r+0x36c>
 8009554:	4bad      	ldr	r3, [pc, #692]	@ (800980c <_dtoa_r+0x5bc>)
 8009556:	f007 020f 	and.w	r2, r7, #15
 800955a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800955e:	ed93 7b00 	vldr	d7, [r3]
 8009562:	05f8      	lsls	r0, r7, #23
 8009564:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800956c:	d516      	bpl.n	800959c <_dtoa_r+0x34c>
 800956e:	4ba8      	ldr	r3, [pc, #672]	@ (8009810 <_dtoa_r+0x5c0>)
 8009570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009578:	f7f7 f978 	bl	800086c <__aeabi_ddiv>
 800957c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009580:	f004 040f 	and.w	r4, r4, #15
 8009584:	2603      	movs	r6, #3
 8009586:	4da2      	ldr	r5, [pc, #648]	@ (8009810 <_dtoa_r+0x5c0>)
 8009588:	b954      	cbnz	r4, 80095a0 <_dtoa_r+0x350>
 800958a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800958e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009592:	f7f7 f96b 	bl	800086c <__aeabi_ddiv>
 8009596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800959a:	e028      	b.n	80095ee <_dtoa_r+0x39e>
 800959c:	2602      	movs	r6, #2
 800959e:	e7f2      	b.n	8009586 <_dtoa_r+0x336>
 80095a0:	07e1      	lsls	r1, r4, #31
 80095a2:	d508      	bpl.n	80095b6 <_dtoa_r+0x366>
 80095a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ac:	f7f7 f834 	bl	8000618 <__aeabi_dmul>
 80095b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095b4:	3601      	adds	r6, #1
 80095b6:	1064      	asrs	r4, r4, #1
 80095b8:	3508      	adds	r5, #8
 80095ba:	e7e5      	b.n	8009588 <_dtoa_r+0x338>
 80095bc:	f000 80d2 	beq.w	8009764 <_dtoa_r+0x514>
 80095c0:	427c      	negs	r4, r7
 80095c2:	4b92      	ldr	r3, [pc, #584]	@ (800980c <_dtoa_r+0x5bc>)
 80095c4:	4d92      	ldr	r5, [pc, #584]	@ (8009810 <_dtoa_r+0x5c0>)
 80095c6:	f004 020f 	and.w	r2, r4, #15
 80095ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095d6:	f7f7 f81f 	bl	8000618 <__aeabi_dmul>
 80095da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095de:	1124      	asrs	r4, r4, #4
 80095e0:	2300      	movs	r3, #0
 80095e2:	2602      	movs	r6, #2
 80095e4:	2c00      	cmp	r4, #0
 80095e6:	f040 80b2 	bne.w	800974e <_dtoa_r+0x4fe>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1d3      	bne.n	8009596 <_dtoa_r+0x346>
 80095ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 80b7 	beq.w	8009768 <_dtoa_r+0x518>
 80095fa:	4b86      	ldr	r3, [pc, #536]	@ (8009814 <_dtoa_r+0x5c4>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f7 fa7b 	bl	8000afc <__aeabi_dcmplt>
 8009606:	2800      	cmp	r0, #0
 8009608:	f000 80ae 	beq.w	8009768 <_dtoa_r+0x518>
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 80aa 	beq.w	8009768 <_dtoa_r+0x518>
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	dd37      	ble.n	800968a <_dtoa_r+0x43a>
 800961a:	1e7b      	subs	r3, r7, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	4620      	mov	r0, r4
 8009620:	4b7d      	ldr	r3, [pc, #500]	@ (8009818 <_dtoa_r+0x5c8>)
 8009622:	2200      	movs	r2, #0
 8009624:	4629      	mov	r1, r5
 8009626:	f7f6 fff7 	bl	8000618 <__aeabi_dmul>
 800962a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800962e:	9c00      	ldr	r4, [sp, #0]
 8009630:	3601      	adds	r6, #1
 8009632:	4630      	mov	r0, r6
 8009634:	f7f6 ff86 	bl	8000544 <__aeabi_i2d>
 8009638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800963c:	f7f6 ffec 	bl	8000618 <__aeabi_dmul>
 8009640:	4b76      	ldr	r3, [pc, #472]	@ (800981c <_dtoa_r+0x5cc>)
 8009642:	2200      	movs	r2, #0
 8009644:	f7f6 fe32 	bl	80002ac <__adddf3>
 8009648:	4605      	mov	r5, r0
 800964a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800964e:	2c00      	cmp	r4, #0
 8009650:	f040 808d 	bne.w	800976e <_dtoa_r+0x51e>
 8009654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009658:	4b71      	ldr	r3, [pc, #452]	@ (8009820 <_dtoa_r+0x5d0>)
 800965a:	2200      	movs	r2, #0
 800965c:	f7f6 fe24 	bl	80002a8 <__aeabi_dsub>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009668:	462a      	mov	r2, r5
 800966a:	4633      	mov	r3, r6
 800966c:	f7f7 fa64 	bl	8000b38 <__aeabi_dcmpgt>
 8009670:	2800      	cmp	r0, #0
 8009672:	f040 828b 	bne.w	8009b8c <_dtoa_r+0x93c>
 8009676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967a:	462a      	mov	r2, r5
 800967c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009680:	f7f7 fa3c 	bl	8000afc <__aeabi_dcmplt>
 8009684:	2800      	cmp	r0, #0
 8009686:	f040 8128 	bne.w	80098da <_dtoa_r+0x68a>
 800968a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800968e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009694:	2b00      	cmp	r3, #0
 8009696:	f2c0 815a 	blt.w	800994e <_dtoa_r+0x6fe>
 800969a:	2f0e      	cmp	r7, #14
 800969c:	f300 8157 	bgt.w	800994e <_dtoa_r+0x6fe>
 80096a0:	4b5a      	ldr	r3, [pc, #360]	@ (800980c <_dtoa_r+0x5bc>)
 80096a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096a6:	ed93 7b00 	vldr	d7, [r3]
 80096aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	ed8d 7b00 	vstr	d7, [sp]
 80096b2:	da03      	bge.n	80096bc <_dtoa_r+0x46c>
 80096b4:	9b07      	ldr	r3, [sp, #28]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f340 8101 	ble.w	80098be <_dtoa_r+0x66e>
 80096bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096c0:	4656      	mov	r6, sl
 80096c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 f8cf 	bl	800086c <__aeabi_ddiv>
 80096ce:	f7f7 fa53 	bl	8000b78 <__aeabi_d2iz>
 80096d2:	4680      	mov	r8, r0
 80096d4:	f7f6 ff36 	bl	8000544 <__aeabi_i2d>
 80096d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096dc:	f7f6 ff9c 	bl	8000618 <__aeabi_dmul>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4620      	mov	r0, r4
 80096e6:	4629      	mov	r1, r5
 80096e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096ec:	f7f6 fddc 	bl	80002a8 <__aeabi_dsub>
 80096f0:	f806 4b01 	strb.w	r4, [r6], #1
 80096f4:	9d07      	ldr	r5, [sp, #28]
 80096f6:	eba6 040a 	sub.w	r4, r6, sl
 80096fa:	42a5      	cmp	r5, r4
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	f040 8117 	bne.w	8009932 <_dtoa_r+0x6e2>
 8009704:	f7f6 fdd2 	bl	80002ac <__adddf3>
 8009708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800970c:	4604      	mov	r4, r0
 800970e:	460d      	mov	r5, r1
 8009710:	f7f7 fa12 	bl	8000b38 <__aeabi_dcmpgt>
 8009714:	2800      	cmp	r0, #0
 8009716:	f040 80f9 	bne.w	800990c <_dtoa_r+0x6bc>
 800971a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	f7f7 f9e1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009726:	b118      	cbz	r0, 8009730 <_dtoa_r+0x4e0>
 8009728:	f018 0f01 	tst.w	r8, #1
 800972c:	f040 80ee 	bne.w	800990c <_dtoa_r+0x6bc>
 8009730:	4649      	mov	r1, r9
 8009732:	4658      	mov	r0, fp
 8009734:	f000 fc90 	bl	800a058 <_Bfree>
 8009738:	2300      	movs	r3, #0
 800973a:	7033      	strb	r3, [r6, #0]
 800973c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800973e:	3701      	adds	r7, #1
 8009740:	601f      	str	r7, [r3, #0]
 8009742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 831d 	beq.w	8009d84 <_dtoa_r+0xb34>
 800974a:	601e      	str	r6, [r3, #0]
 800974c:	e31a      	b.n	8009d84 <_dtoa_r+0xb34>
 800974e:	07e2      	lsls	r2, r4, #31
 8009750:	d505      	bpl.n	800975e <_dtoa_r+0x50e>
 8009752:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009756:	f7f6 ff5f 	bl	8000618 <__aeabi_dmul>
 800975a:	3601      	adds	r6, #1
 800975c:	2301      	movs	r3, #1
 800975e:	1064      	asrs	r4, r4, #1
 8009760:	3508      	adds	r5, #8
 8009762:	e73f      	b.n	80095e4 <_dtoa_r+0x394>
 8009764:	2602      	movs	r6, #2
 8009766:	e742      	b.n	80095ee <_dtoa_r+0x39e>
 8009768:	9c07      	ldr	r4, [sp, #28]
 800976a:	9704      	str	r7, [sp, #16]
 800976c:	e761      	b.n	8009632 <_dtoa_r+0x3e2>
 800976e:	4b27      	ldr	r3, [pc, #156]	@ (800980c <_dtoa_r+0x5bc>)
 8009770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800977a:	4454      	add	r4, sl
 800977c:	2900      	cmp	r1, #0
 800977e:	d053      	beq.n	8009828 <_dtoa_r+0x5d8>
 8009780:	4928      	ldr	r1, [pc, #160]	@ (8009824 <_dtoa_r+0x5d4>)
 8009782:	2000      	movs	r0, #0
 8009784:	f7f7 f872 	bl	800086c <__aeabi_ddiv>
 8009788:	4633      	mov	r3, r6
 800978a:	462a      	mov	r2, r5
 800978c:	f7f6 fd8c 	bl	80002a8 <__aeabi_dsub>
 8009790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009794:	4656      	mov	r6, sl
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f7 f9ed 	bl	8000b78 <__aeabi_d2iz>
 800979e:	4605      	mov	r5, r0
 80097a0:	f7f6 fed0 	bl	8000544 <__aeabi_i2d>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ac:	f7f6 fd7c 	bl	80002a8 <__aeabi_dsub>
 80097b0:	3530      	adds	r5, #48	@ 0x30
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097ba:	f806 5b01 	strb.w	r5, [r6], #1
 80097be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097c2:	f7f7 f99b 	bl	8000afc <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d171      	bne.n	80098ae <_dtoa_r+0x65e>
 80097ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ce:	4911      	ldr	r1, [pc, #68]	@ (8009814 <_dtoa_r+0x5c4>)
 80097d0:	2000      	movs	r0, #0
 80097d2:	f7f6 fd69 	bl	80002a8 <__aeabi_dsub>
 80097d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097da:	f7f7 f98f 	bl	8000afc <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f040 8095 	bne.w	800990e <_dtoa_r+0x6be>
 80097e4:	42a6      	cmp	r6, r4
 80097e6:	f43f af50 	beq.w	800968a <_dtoa_r+0x43a>
 80097ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <_dtoa_r+0x5c8>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 ff11 	bl	8000618 <__aeabi_dmul>
 80097f6:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <_dtoa_r+0x5c8>)
 80097f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097fc:	2200      	movs	r2, #0
 80097fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009802:	f7f6 ff09 	bl	8000618 <__aeabi_dmul>
 8009806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980a:	e7c4      	b.n	8009796 <_dtoa_r+0x546>
 800980c:	0800c9b0 	.word	0x0800c9b0
 8009810:	0800c988 	.word	0x0800c988
 8009814:	3ff00000 	.word	0x3ff00000
 8009818:	40240000 	.word	0x40240000
 800981c:	401c0000 	.word	0x401c0000
 8009820:	40140000 	.word	0x40140000
 8009824:	3fe00000 	.word	0x3fe00000
 8009828:	4631      	mov	r1, r6
 800982a:	4628      	mov	r0, r5
 800982c:	f7f6 fef4 	bl	8000618 <__aeabi_dmul>
 8009830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009834:	9415      	str	r4, [sp, #84]	@ 0x54
 8009836:	4656      	mov	r6, sl
 8009838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800983c:	f7f7 f99c 	bl	8000b78 <__aeabi_d2iz>
 8009840:	4605      	mov	r5, r0
 8009842:	f7f6 fe7f 	bl	8000544 <__aeabi_i2d>
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800984e:	f7f6 fd2b 	bl	80002a8 <__aeabi_dsub>
 8009852:	3530      	adds	r5, #48	@ 0x30
 8009854:	f806 5b01 	strb.w	r5, [r6], #1
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	42a6      	cmp	r6, r4
 800985e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009862:	f04f 0200 	mov.w	r2, #0
 8009866:	d124      	bne.n	80098b2 <_dtoa_r+0x662>
 8009868:	4bac      	ldr	r3, [pc, #688]	@ (8009b1c <_dtoa_r+0x8cc>)
 800986a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800986e:	f7f6 fd1d 	bl	80002ac <__adddf3>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987a:	f7f7 f95d 	bl	8000b38 <__aeabi_dcmpgt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d145      	bne.n	800990e <_dtoa_r+0x6be>
 8009882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009886:	49a5      	ldr	r1, [pc, #660]	@ (8009b1c <_dtoa_r+0x8cc>)
 8009888:	2000      	movs	r0, #0
 800988a:	f7f6 fd0d 	bl	80002a8 <__aeabi_dsub>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009896:	f7f7 f931 	bl	8000afc <__aeabi_dcmplt>
 800989a:	2800      	cmp	r0, #0
 800989c:	f43f aef5 	beq.w	800968a <_dtoa_r+0x43a>
 80098a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80098a2:	1e73      	subs	r3, r6, #1
 80098a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80098a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098aa:	2b30      	cmp	r3, #48	@ 0x30
 80098ac:	d0f8      	beq.n	80098a0 <_dtoa_r+0x650>
 80098ae:	9f04      	ldr	r7, [sp, #16]
 80098b0:	e73e      	b.n	8009730 <_dtoa_r+0x4e0>
 80098b2:	4b9b      	ldr	r3, [pc, #620]	@ (8009b20 <_dtoa_r+0x8d0>)
 80098b4:	f7f6 feb0 	bl	8000618 <__aeabi_dmul>
 80098b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098bc:	e7bc      	b.n	8009838 <_dtoa_r+0x5e8>
 80098be:	d10c      	bne.n	80098da <_dtoa_r+0x68a>
 80098c0:	4b98      	ldr	r3, [pc, #608]	@ (8009b24 <_dtoa_r+0x8d4>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098c8:	f7f6 fea6 	bl	8000618 <__aeabi_dmul>
 80098cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098d0:	f7f7 f928 	bl	8000b24 <__aeabi_dcmpge>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f000 8157 	beq.w	8009b88 <_dtoa_r+0x938>
 80098da:	2400      	movs	r4, #0
 80098dc:	4625      	mov	r5, r4
 80098de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098e0:	43db      	mvns	r3, r3
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	4656      	mov	r6, sl
 80098e6:	2700      	movs	r7, #0
 80098e8:	4621      	mov	r1, r4
 80098ea:	4658      	mov	r0, fp
 80098ec:	f000 fbb4 	bl	800a058 <_Bfree>
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	d0dc      	beq.n	80098ae <_dtoa_r+0x65e>
 80098f4:	b12f      	cbz	r7, 8009902 <_dtoa_r+0x6b2>
 80098f6:	42af      	cmp	r7, r5
 80098f8:	d003      	beq.n	8009902 <_dtoa_r+0x6b2>
 80098fa:	4639      	mov	r1, r7
 80098fc:	4658      	mov	r0, fp
 80098fe:	f000 fbab 	bl	800a058 <_Bfree>
 8009902:	4629      	mov	r1, r5
 8009904:	4658      	mov	r0, fp
 8009906:	f000 fba7 	bl	800a058 <_Bfree>
 800990a:	e7d0      	b.n	80098ae <_dtoa_r+0x65e>
 800990c:	9704      	str	r7, [sp, #16]
 800990e:	4633      	mov	r3, r6
 8009910:	461e      	mov	r6, r3
 8009912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009916:	2a39      	cmp	r2, #57	@ 0x39
 8009918:	d107      	bne.n	800992a <_dtoa_r+0x6da>
 800991a:	459a      	cmp	sl, r3
 800991c:	d1f8      	bne.n	8009910 <_dtoa_r+0x6c0>
 800991e:	9a04      	ldr	r2, [sp, #16]
 8009920:	3201      	adds	r2, #1
 8009922:	9204      	str	r2, [sp, #16]
 8009924:	2230      	movs	r2, #48	@ 0x30
 8009926:	f88a 2000 	strb.w	r2, [sl]
 800992a:	781a      	ldrb	r2, [r3, #0]
 800992c:	3201      	adds	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	e7bd      	b.n	80098ae <_dtoa_r+0x65e>
 8009932:	4b7b      	ldr	r3, [pc, #492]	@ (8009b20 <_dtoa_r+0x8d0>)
 8009934:	2200      	movs	r2, #0
 8009936:	f7f6 fe6f 	bl	8000618 <__aeabi_dmul>
 800993a:	2200      	movs	r2, #0
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	460d      	mov	r5, r1
 8009942:	f7f7 f8d1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f aebb 	beq.w	80096c2 <_dtoa_r+0x472>
 800994c:	e6f0      	b.n	8009730 <_dtoa_r+0x4e0>
 800994e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009950:	2a00      	cmp	r2, #0
 8009952:	f000 80db 	beq.w	8009b0c <_dtoa_r+0x8bc>
 8009956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009958:	2a01      	cmp	r2, #1
 800995a:	f300 80bf 	bgt.w	8009adc <_dtoa_r+0x88c>
 800995e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009960:	2a00      	cmp	r2, #0
 8009962:	f000 80b7 	beq.w	8009ad4 <_dtoa_r+0x884>
 8009966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800996a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800996c:	4646      	mov	r6, r8
 800996e:	9a08      	ldr	r2, [sp, #32]
 8009970:	2101      	movs	r1, #1
 8009972:	441a      	add	r2, r3
 8009974:	4658      	mov	r0, fp
 8009976:	4498      	add	r8, r3
 8009978:	9208      	str	r2, [sp, #32]
 800997a:	f000 fc6b 	bl	800a254 <__i2b>
 800997e:	4605      	mov	r5, r0
 8009980:	b15e      	cbz	r6, 800999a <_dtoa_r+0x74a>
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd08      	ble.n	800999a <_dtoa_r+0x74a>
 8009988:	42b3      	cmp	r3, r6
 800998a:	9a08      	ldr	r2, [sp, #32]
 800998c:	bfa8      	it	ge
 800998e:	4633      	movge	r3, r6
 8009990:	eba8 0803 	sub.w	r8, r8, r3
 8009994:	1af6      	subs	r6, r6, r3
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800999c:	b1f3      	cbz	r3, 80099dc <_dtoa_r+0x78c>
 800999e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80b7 	beq.w	8009b14 <_dtoa_r+0x8c4>
 80099a6:	b18c      	cbz	r4, 80099cc <_dtoa_r+0x77c>
 80099a8:	4629      	mov	r1, r5
 80099aa:	4622      	mov	r2, r4
 80099ac:	4658      	mov	r0, fp
 80099ae:	f000 fd11 	bl	800a3d4 <__pow5mult>
 80099b2:	464a      	mov	r2, r9
 80099b4:	4601      	mov	r1, r0
 80099b6:	4605      	mov	r5, r0
 80099b8:	4658      	mov	r0, fp
 80099ba:	f000 fc61 	bl	800a280 <__multiply>
 80099be:	4649      	mov	r1, r9
 80099c0:	9004      	str	r0, [sp, #16]
 80099c2:	4658      	mov	r0, fp
 80099c4:	f000 fb48 	bl	800a058 <_Bfree>
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	4699      	mov	r9, r3
 80099cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ce:	1b1a      	subs	r2, r3, r4
 80099d0:	d004      	beq.n	80099dc <_dtoa_r+0x78c>
 80099d2:	4649      	mov	r1, r9
 80099d4:	4658      	mov	r0, fp
 80099d6:	f000 fcfd 	bl	800a3d4 <__pow5mult>
 80099da:	4681      	mov	r9, r0
 80099dc:	2101      	movs	r1, #1
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 fc38 	bl	800a254 <__i2b>
 80099e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e6:	4604      	mov	r4, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 81cf 	beq.w	8009d8c <_dtoa_r+0xb3c>
 80099ee:	461a      	mov	r2, r3
 80099f0:	4601      	mov	r1, r0
 80099f2:	4658      	mov	r0, fp
 80099f4:	f000 fcee 	bl	800a3d4 <__pow5mult>
 80099f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	4604      	mov	r4, r0
 80099fe:	f300 8095 	bgt.w	8009b2c <_dtoa_r+0x8dc>
 8009a02:	9b02      	ldr	r3, [sp, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f040 8087 	bne.w	8009b18 <_dtoa_r+0x8c8>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 8089 	bne.w	8009b28 <_dtoa_r+0x8d8>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a1c:	0d1b      	lsrs	r3, r3, #20
 8009a1e:	051b      	lsls	r3, r3, #20
 8009a20:	b12b      	cbz	r3, 8009a2e <_dtoa_r+0x7de>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	3301      	adds	r3, #1
 8009a26:	9308      	str	r3, [sp, #32]
 8009a28:	f108 0801 	add.w	r8, r8, #1
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 81b0 	beq.w	8009d98 <_dtoa_r+0xb48>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a3e:	6918      	ldr	r0, [r3, #16]
 8009a40:	f000 fbbc 	bl	800a1bc <__hi0bits>
 8009a44:	f1c0 0020 	rsb	r0, r0, #32
 8009a48:	9b08      	ldr	r3, [sp, #32]
 8009a4a:	4418      	add	r0, r3
 8009a4c:	f010 001f 	ands.w	r0, r0, #31
 8009a50:	d077      	beq.n	8009b42 <_dtoa_r+0x8f2>
 8009a52:	f1c0 0320 	rsb	r3, r0, #32
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	dd6b      	ble.n	8009b32 <_dtoa_r+0x8e2>
 8009a5a:	9b08      	ldr	r3, [sp, #32]
 8009a5c:	f1c0 001c 	rsb	r0, r0, #28
 8009a60:	4403      	add	r3, r0
 8009a62:	4480      	add	r8, r0
 8009a64:	4406      	add	r6, r0
 8009a66:	9308      	str	r3, [sp, #32]
 8009a68:	f1b8 0f00 	cmp.w	r8, #0
 8009a6c:	dd05      	ble.n	8009a7a <_dtoa_r+0x82a>
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4642      	mov	r2, r8
 8009a72:	4658      	mov	r0, fp
 8009a74:	f000 fd08 	bl	800a488 <__lshift>
 8009a78:	4681      	mov	r9, r0
 8009a7a:	9b08      	ldr	r3, [sp, #32]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd05      	ble.n	8009a8c <_dtoa_r+0x83c>
 8009a80:	4621      	mov	r1, r4
 8009a82:	461a      	mov	r2, r3
 8009a84:	4658      	mov	r0, fp
 8009a86:	f000 fcff 	bl	800a488 <__lshift>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d059      	beq.n	8009b46 <_dtoa_r+0x8f6>
 8009a92:	4621      	mov	r1, r4
 8009a94:	4648      	mov	r0, r9
 8009a96:	f000 fd63 	bl	800a560 <__mcmp>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	da53      	bge.n	8009b46 <_dtoa_r+0x8f6>
 8009a9e:	1e7b      	subs	r3, r7, #1
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	220a      	movs	r2, #10
 8009aa8:	4658      	mov	r0, fp
 8009aaa:	f000 faf7 	bl	800a09c <__multadd>
 8009aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ab0:	4681      	mov	r9, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 8172 	beq.w	8009d9c <_dtoa_r+0xb4c>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4629      	mov	r1, r5
 8009abc:	220a      	movs	r2, #10
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f000 faec 	bl	800a09c <__multadd>
 8009ac4:	9b00      	ldr	r3, [sp, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	4605      	mov	r5, r0
 8009aca:	dc67      	bgt.n	8009b9c <_dtoa_r+0x94c>
 8009acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	dc41      	bgt.n	8009b56 <_dtoa_r+0x906>
 8009ad2:	e063      	b.n	8009b9c <_dtoa_r+0x94c>
 8009ad4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ad6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ada:	e746      	b.n	800996a <_dtoa_r+0x71a>
 8009adc:	9b07      	ldr	r3, [sp, #28]
 8009ade:	1e5c      	subs	r4, r3, #1
 8009ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	bfbf      	itttt	lt
 8009ae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009aea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009aec:	1ae3      	sublt	r3, r4, r3
 8009aee:	bfb4      	ite	lt
 8009af0:	18d2      	addlt	r2, r2, r3
 8009af2:	1b1c      	subge	r4, r3, r4
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	bfbc      	itt	lt
 8009af8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009afa:	2400      	movlt	r4, #0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bfb5      	itete	lt
 8009b00:	eba8 0603 	sublt.w	r6, r8, r3
 8009b04:	9b07      	ldrge	r3, [sp, #28]
 8009b06:	2300      	movlt	r3, #0
 8009b08:	4646      	movge	r6, r8
 8009b0a:	e730      	b.n	800996e <_dtoa_r+0x71e>
 8009b0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009b10:	4646      	mov	r6, r8
 8009b12:	e735      	b.n	8009980 <_dtoa_r+0x730>
 8009b14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b16:	e75c      	b.n	80099d2 <_dtoa_r+0x782>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e788      	b.n	8009a2e <_dtoa_r+0x7de>
 8009b1c:	3fe00000 	.word	0x3fe00000
 8009b20:	40240000 	.word	0x40240000
 8009b24:	40140000 	.word	0x40140000
 8009b28:	9b02      	ldr	r3, [sp, #8]
 8009b2a:	e780      	b.n	8009a2e <_dtoa_r+0x7de>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b30:	e782      	b.n	8009a38 <_dtoa_r+0x7e8>
 8009b32:	d099      	beq.n	8009a68 <_dtoa_r+0x818>
 8009b34:	9a08      	ldr	r2, [sp, #32]
 8009b36:	331c      	adds	r3, #28
 8009b38:	441a      	add	r2, r3
 8009b3a:	4498      	add	r8, r3
 8009b3c:	441e      	add	r6, r3
 8009b3e:	9208      	str	r2, [sp, #32]
 8009b40:	e792      	b.n	8009a68 <_dtoa_r+0x818>
 8009b42:	4603      	mov	r3, r0
 8009b44:	e7f6      	b.n	8009b34 <_dtoa_r+0x8e4>
 8009b46:	9b07      	ldr	r3, [sp, #28]
 8009b48:	9704      	str	r7, [sp, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dc20      	bgt.n	8009b90 <_dtoa_r+0x940>
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	dd1e      	ble.n	8009b94 <_dtoa_r+0x944>
 8009b56:	9b00      	ldr	r3, [sp, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f47f aec0 	bne.w	80098de <_dtoa_r+0x68e>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	2205      	movs	r2, #5
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fa9a 	bl	800a09c <__multadd>
 8009b68:	4601      	mov	r1, r0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4648      	mov	r0, r9
 8009b6e:	f000 fcf7 	bl	800a560 <__mcmp>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f77f aeb3 	ble.w	80098de <_dtoa_r+0x68e>
 8009b78:	4656      	mov	r6, sl
 8009b7a:	2331      	movs	r3, #49	@ 0x31
 8009b7c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b80:	9b04      	ldr	r3, [sp, #16]
 8009b82:	3301      	adds	r3, #1
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	e6ae      	b.n	80098e6 <_dtoa_r+0x696>
 8009b88:	9c07      	ldr	r4, [sp, #28]
 8009b8a:	9704      	str	r7, [sp, #16]
 8009b8c:	4625      	mov	r5, r4
 8009b8e:	e7f3      	b.n	8009b78 <_dtoa_r+0x928>
 8009b90:	9b07      	ldr	r3, [sp, #28]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8104 	beq.w	8009da4 <_dtoa_r+0xb54>
 8009b9c:	2e00      	cmp	r6, #0
 8009b9e:	dd05      	ble.n	8009bac <_dtoa_r+0x95c>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4632      	mov	r2, r6
 8009ba4:	4658      	mov	r0, fp
 8009ba6:	f000 fc6f 	bl	800a488 <__lshift>
 8009baa:	4605      	mov	r5, r0
 8009bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d05a      	beq.n	8009c68 <_dtoa_r+0xa18>
 8009bb2:	6869      	ldr	r1, [r5, #4]
 8009bb4:	4658      	mov	r0, fp
 8009bb6:	f000 fa0f 	bl	8009fd8 <_Balloc>
 8009bba:	4606      	mov	r6, r0
 8009bbc:	b928      	cbnz	r0, 8009bca <_dtoa_r+0x97a>
 8009bbe:	4b84      	ldr	r3, [pc, #528]	@ (8009dd0 <_dtoa_r+0xb80>)
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009bc6:	f7ff bb5a 	b.w	800927e <_dtoa_r+0x2e>
 8009bca:	692a      	ldr	r2, [r5, #16]
 8009bcc:	3202      	adds	r2, #2
 8009bce:	0092      	lsls	r2, r2, #2
 8009bd0:	f105 010c 	add.w	r1, r5, #12
 8009bd4:	300c      	adds	r0, #12
 8009bd6:	f001 fef9 	bl	800b9cc <memcpy>
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4658      	mov	r0, fp
 8009be0:	f000 fc52 	bl	800a488 <__lshift>
 8009be4:	f10a 0301 	add.w	r3, sl, #1
 8009be8:	9307      	str	r3, [sp, #28]
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	4453      	add	r3, sl
 8009bee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	462f      	mov	r7, r5
 8009bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	9b07      	ldr	r3, [sp, #28]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	3b01      	subs	r3, #1
 8009c02:	4648      	mov	r0, r9
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	f7ff fa9b 	bl	8009140 <quorem>
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	9002      	str	r0, [sp, #8]
 8009c0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c12:	4648      	mov	r0, r9
 8009c14:	f000 fca4 	bl	800a560 <__mcmp>
 8009c18:	462a      	mov	r2, r5
 8009c1a:	9008      	str	r0, [sp, #32]
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4658      	mov	r0, fp
 8009c20:	f000 fcba 	bl	800a598 <__mdiff>
 8009c24:	68c2      	ldr	r2, [r0, #12]
 8009c26:	4606      	mov	r6, r0
 8009c28:	bb02      	cbnz	r2, 8009c6c <_dtoa_r+0xa1c>
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	4648      	mov	r0, r9
 8009c2e:	f000 fc97 	bl	800a560 <__mcmp>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4631      	mov	r1, r6
 8009c36:	4658      	mov	r0, fp
 8009c38:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c3a:	f000 fa0d 	bl	800a058 <_Bfree>
 8009c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c42:	9e07      	ldr	r6, [sp, #28]
 8009c44:	ea43 0102 	orr.w	r1, r3, r2
 8009c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c4a:	4319      	orrs	r1, r3
 8009c4c:	d110      	bne.n	8009c70 <_dtoa_r+0xa20>
 8009c4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c52:	d029      	beq.n	8009ca8 <_dtoa_r+0xa58>
 8009c54:	9b08      	ldr	r3, [sp, #32]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dd02      	ble.n	8009c60 <_dtoa_r+0xa10>
 8009c5a:	9b02      	ldr	r3, [sp, #8]
 8009c5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	f883 8000 	strb.w	r8, [r3]
 8009c66:	e63f      	b.n	80098e8 <_dtoa_r+0x698>
 8009c68:	4628      	mov	r0, r5
 8009c6a:	e7bb      	b.n	8009be4 <_dtoa_r+0x994>
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	e7e1      	b.n	8009c34 <_dtoa_r+0x9e4>
 8009c70:	9b08      	ldr	r3, [sp, #32]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	db04      	blt.n	8009c80 <_dtoa_r+0xa30>
 8009c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	d120      	bne.n	8009cc2 <_dtoa_r+0xa72>
 8009c80:	2a00      	cmp	r2, #0
 8009c82:	dded      	ble.n	8009c60 <_dtoa_r+0xa10>
 8009c84:	4649      	mov	r1, r9
 8009c86:	2201      	movs	r2, #1
 8009c88:	4658      	mov	r0, fp
 8009c8a:	f000 fbfd 	bl	800a488 <__lshift>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4681      	mov	r9, r0
 8009c92:	f000 fc65 	bl	800a560 <__mcmp>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	dc03      	bgt.n	8009ca2 <_dtoa_r+0xa52>
 8009c9a:	d1e1      	bne.n	8009c60 <_dtoa_r+0xa10>
 8009c9c:	f018 0f01 	tst.w	r8, #1
 8009ca0:	d0de      	beq.n	8009c60 <_dtoa_r+0xa10>
 8009ca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ca6:	d1d8      	bne.n	8009c5a <_dtoa_r+0xa0a>
 8009ca8:	9a00      	ldr	r2, [sp, #0]
 8009caa:	2339      	movs	r3, #57	@ 0x39
 8009cac:	7013      	strb	r3, [r2, #0]
 8009cae:	4633      	mov	r3, r6
 8009cb0:	461e      	mov	r6, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009cb8:	2a39      	cmp	r2, #57	@ 0x39
 8009cba:	d052      	beq.n	8009d62 <_dtoa_r+0xb12>
 8009cbc:	3201      	adds	r2, #1
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	e612      	b.n	80098e8 <_dtoa_r+0x698>
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	dd07      	ble.n	8009cd6 <_dtoa_r+0xa86>
 8009cc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cca:	d0ed      	beq.n	8009ca8 <_dtoa_r+0xa58>
 8009ccc:	9a00      	ldr	r2, [sp, #0]
 8009cce:	f108 0301 	add.w	r3, r8, #1
 8009cd2:	7013      	strb	r3, [r2, #0]
 8009cd4:	e608      	b.n	80098e8 <_dtoa_r+0x698>
 8009cd6:	9b07      	ldr	r3, [sp, #28]
 8009cd8:	9a07      	ldr	r2, [sp, #28]
 8009cda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d028      	beq.n	8009d36 <_dtoa_r+0xae6>
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	220a      	movs	r2, #10
 8009cea:	4658      	mov	r0, fp
 8009cec:	f000 f9d6 	bl	800a09c <__multadd>
 8009cf0:	42af      	cmp	r7, r5
 8009cf2:	4681      	mov	r9, r0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	f04f 020a 	mov.w	r2, #10
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4658      	mov	r0, fp
 8009d00:	d107      	bne.n	8009d12 <_dtoa_r+0xac2>
 8009d02:	f000 f9cb 	bl	800a09c <__multadd>
 8009d06:	4607      	mov	r7, r0
 8009d08:	4605      	mov	r5, r0
 8009d0a:	9b07      	ldr	r3, [sp, #28]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	e774      	b.n	8009bfc <_dtoa_r+0x9ac>
 8009d12:	f000 f9c3 	bl	800a09c <__multadd>
 8009d16:	4629      	mov	r1, r5
 8009d18:	4607      	mov	r7, r0
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	220a      	movs	r2, #10
 8009d1e:	4658      	mov	r0, fp
 8009d20:	f000 f9bc 	bl	800a09c <__multadd>
 8009d24:	4605      	mov	r5, r0
 8009d26:	e7f0      	b.n	8009d0a <_dtoa_r+0xaba>
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	bfcc      	ite	gt
 8009d2e:	461e      	movgt	r6, r3
 8009d30:	2601      	movle	r6, #1
 8009d32:	4456      	add	r6, sl
 8009d34:	2700      	movs	r7, #0
 8009d36:	4649      	mov	r1, r9
 8009d38:	2201      	movs	r2, #1
 8009d3a:	4658      	mov	r0, fp
 8009d3c:	f000 fba4 	bl	800a488 <__lshift>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4681      	mov	r9, r0
 8009d44:	f000 fc0c 	bl	800a560 <__mcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	dcb0      	bgt.n	8009cae <_dtoa_r+0xa5e>
 8009d4c:	d102      	bne.n	8009d54 <_dtoa_r+0xb04>
 8009d4e:	f018 0f01 	tst.w	r8, #1
 8009d52:	d1ac      	bne.n	8009cae <_dtoa_r+0xa5e>
 8009d54:	4633      	mov	r3, r6
 8009d56:	461e      	mov	r6, r3
 8009d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d5c:	2a30      	cmp	r2, #48	@ 0x30
 8009d5e:	d0fa      	beq.n	8009d56 <_dtoa_r+0xb06>
 8009d60:	e5c2      	b.n	80098e8 <_dtoa_r+0x698>
 8009d62:	459a      	cmp	sl, r3
 8009d64:	d1a4      	bne.n	8009cb0 <_dtoa_r+0xa60>
 8009d66:	9b04      	ldr	r3, [sp, #16]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	2331      	movs	r3, #49	@ 0x31
 8009d6e:	f88a 3000 	strb.w	r3, [sl]
 8009d72:	e5b9      	b.n	80098e8 <_dtoa_r+0x698>
 8009d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009dd4 <_dtoa_r+0xb84>
 8009d7a:	b11b      	cbz	r3, 8009d84 <_dtoa_r+0xb34>
 8009d7c:	f10a 0308 	add.w	r3, sl, #8
 8009d80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	4650      	mov	r0, sl
 8009d86:	b019      	add	sp, #100	@ 0x64
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	f77f ae37 	ble.w	8009a02 <_dtoa_r+0x7b2>
 8009d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d98:	2001      	movs	r0, #1
 8009d9a:	e655      	b.n	8009a48 <_dtoa_r+0x7f8>
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f77f aed6 	ble.w	8009b50 <_dtoa_r+0x900>
 8009da4:	4656      	mov	r6, sl
 8009da6:	4621      	mov	r1, r4
 8009da8:	4648      	mov	r0, r9
 8009daa:	f7ff f9c9 	bl	8009140 <quorem>
 8009dae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009db2:	f806 8b01 	strb.w	r8, [r6], #1
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	eba6 020a 	sub.w	r2, r6, sl
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	ddb3      	ble.n	8009d28 <_dtoa_r+0xad8>
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	220a      	movs	r2, #10
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f000 f968 	bl	800a09c <__multadd>
 8009dcc:	4681      	mov	r9, r0
 8009dce:	e7ea      	b.n	8009da6 <_dtoa_r+0xb56>
 8009dd0:	0800c912 	.word	0x0800c912
 8009dd4:	0800c896 	.word	0x0800c896

08009dd8 <_free_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4605      	mov	r5, r0
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	d041      	beq.n	8009e64 <_free_r+0x8c>
 8009de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de4:	1f0c      	subs	r4, r1, #4
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	bfb8      	it	lt
 8009dea:	18e4      	addlt	r4, r4, r3
 8009dec:	f000 f8e8 	bl	8009fc0 <__malloc_lock>
 8009df0:	4a1d      	ldr	r2, [pc, #116]	@ (8009e68 <_free_r+0x90>)
 8009df2:	6813      	ldr	r3, [r2, #0]
 8009df4:	b933      	cbnz	r3, 8009e04 <_free_r+0x2c>
 8009df6:	6063      	str	r3, [r4, #4]
 8009df8:	6014      	str	r4, [r2, #0]
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e00:	f000 b8e4 	b.w	8009fcc <__malloc_unlock>
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	d908      	bls.n	8009e1a <_free_r+0x42>
 8009e08:	6820      	ldr	r0, [r4, #0]
 8009e0a:	1821      	adds	r1, r4, r0
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf01      	itttt	eq
 8009e10:	6819      	ldreq	r1, [r3, #0]
 8009e12:	685b      	ldreq	r3, [r3, #4]
 8009e14:	1809      	addeq	r1, r1, r0
 8009e16:	6021      	streq	r1, [r4, #0]
 8009e18:	e7ed      	b.n	8009df6 <_free_r+0x1e>
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	b10b      	cbz	r3, 8009e24 <_free_r+0x4c>
 8009e20:	42a3      	cmp	r3, r4
 8009e22:	d9fa      	bls.n	8009e1a <_free_r+0x42>
 8009e24:	6811      	ldr	r1, [r2, #0]
 8009e26:	1850      	adds	r0, r2, r1
 8009e28:	42a0      	cmp	r0, r4
 8009e2a:	d10b      	bne.n	8009e44 <_free_r+0x6c>
 8009e2c:	6820      	ldr	r0, [r4, #0]
 8009e2e:	4401      	add	r1, r0
 8009e30:	1850      	adds	r0, r2, r1
 8009e32:	4283      	cmp	r3, r0
 8009e34:	6011      	str	r1, [r2, #0]
 8009e36:	d1e0      	bne.n	8009dfa <_free_r+0x22>
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	6053      	str	r3, [r2, #4]
 8009e3e:	4408      	add	r0, r1
 8009e40:	6010      	str	r0, [r2, #0]
 8009e42:	e7da      	b.n	8009dfa <_free_r+0x22>
 8009e44:	d902      	bls.n	8009e4c <_free_r+0x74>
 8009e46:	230c      	movs	r3, #12
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	e7d6      	b.n	8009dfa <_free_r+0x22>
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	1821      	adds	r1, r4, r0
 8009e50:	428b      	cmp	r3, r1
 8009e52:	bf04      	itt	eq
 8009e54:	6819      	ldreq	r1, [r3, #0]
 8009e56:	685b      	ldreq	r3, [r3, #4]
 8009e58:	6063      	str	r3, [r4, #4]
 8009e5a:	bf04      	itt	eq
 8009e5c:	1809      	addeq	r1, r1, r0
 8009e5e:	6021      	streq	r1, [r4, #0]
 8009e60:	6054      	str	r4, [r2, #4]
 8009e62:	e7ca      	b.n	8009dfa <_free_r+0x22>
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	bf00      	nop
 8009e68:	20000618 	.word	0x20000618

08009e6c <malloc>:
 8009e6c:	4b02      	ldr	r3, [pc, #8]	@ (8009e78 <malloc+0xc>)
 8009e6e:	4601      	mov	r1, r0
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f000 b825 	b.w	8009ec0 <_malloc_r>
 8009e76:	bf00      	nop
 8009e78:	20000018 	.word	0x20000018

08009e7c <sbrk_aligned>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8009ebc <sbrk_aligned+0x40>)
 8009e80:	460c      	mov	r4, r1
 8009e82:	6831      	ldr	r1, [r6, #0]
 8009e84:	4605      	mov	r5, r0
 8009e86:	b911      	cbnz	r1, 8009e8e <sbrk_aligned+0x12>
 8009e88:	f001 fd90 	bl	800b9ac <_sbrk_r>
 8009e8c:	6030      	str	r0, [r6, #0]
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f001 fd8b 	bl	800b9ac <_sbrk_r>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	d103      	bne.n	8009ea2 <sbrk_aligned+0x26>
 8009e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	bd70      	pop	{r4, r5, r6, pc}
 8009ea2:	1cc4      	adds	r4, r0, #3
 8009ea4:	f024 0403 	bic.w	r4, r4, #3
 8009ea8:	42a0      	cmp	r0, r4
 8009eaa:	d0f8      	beq.n	8009e9e <sbrk_aligned+0x22>
 8009eac:	1a21      	subs	r1, r4, r0
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f001 fd7c 	bl	800b9ac <_sbrk_r>
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d1f2      	bne.n	8009e9e <sbrk_aligned+0x22>
 8009eb8:	e7ef      	b.n	8009e9a <sbrk_aligned+0x1e>
 8009eba:	bf00      	nop
 8009ebc:	20000614 	.word	0x20000614

08009ec0 <_malloc_r>:
 8009ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec4:	1ccd      	adds	r5, r1, #3
 8009ec6:	f025 0503 	bic.w	r5, r5, #3
 8009eca:	3508      	adds	r5, #8
 8009ecc:	2d0c      	cmp	r5, #12
 8009ece:	bf38      	it	cc
 8009ed0:	250c      	movcc	r5, #12
 8009ed2:	2d00      	cmp	r5, #0
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	db01      	blt.n	8009edc <_malloc_r+0x1c>
 8009ed8:	42a9      	cmp	r1, r5
 8009eda:	d904      	bls.n	8009ee6 <_malloc_r+0x26>
 8009edc:	230c      	movs	r3, #12
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fbc <_malloc_r+0xfc>
 8009eea:	f000 f869 	bl	8009fc0 <__malloc_lock>
 8009eee:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef2:	461c      	mov	r4, r3
 8009ef4:	bb44      	cbnz	r4, 8009f48 <_malloc_r+0x88>
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f7ff ffbf 	bl	8009e7c <sbrk_aligned>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	4604      	mov	r4, r0
 8009f02:	d158      	bne.n	8009fb6 <_malloc_r+0xf6>
 8009f04:	f8d8 4000 	ldr.w	r4, [r8]
 8009f08:	4627      	mov	r7, r4
 8009f0a:	2f00      	cmp	r7, #0
 8009f0c:	d143      	bne.n	8009f96 <_malloc_r+0xd6>
 8009f0e:	2c00      	cmp	r4, #0
 8009f10:	d04b      	beq.n	8009faa <_malloc_r+0xea>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	4639      	mov	r1, r7
 8009f16:	4630      	mov	r0, r6
 8009f18:	eb04 0903 	add.w	r9, r4, r3
 8009f1c:	f001 fd46 	bl	800b9ac <_sbrk_r>
 8009f20:	4581      	cmp	r9, r0
 8009f22:	d142      	bne.n	8009faa <_malloc_r+0xea>
 8009f24:	6821      	ldr	r1, [r4, #0]
 8009f26:	1a6d      	subs	r5, r5, r1
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7ff ffa6 	bl	8009e7c <sbrk_aligned>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d03a      	beq.n	8009faa <_malloc_r+0xea>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	442b      	add	r3, r5
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	bb62      	cbnz	r2, 8009f9c <_malloc_r+0xdc>
 8009f42:	f8c8 7000 	str.w	r7, [r8]
 8009f46:	e00f      	b.n	8009f68 <_malloc_r+0xa8>
 8009f48:	6822      	ldr	r2, [r4, #0]
 8009f4a:	1b52      	subs	r2, r2, r5
 8009f4c:	d420      	bmi.n	8009f90 <_malloc_r+0xd0>
 8009f4e:	2a0b      	cmp	r2, #11
 8009f50:	d917      	bls.n	8009f82 <_malloc_r+0xc2>
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	6025      	str	r5, [r4, #0]
 8009f58:	bf18      	it	ne
 8009f5a:	6059      	strne	r1, [r3, #4]
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	bf08      	it	eq
 8009f60:	f8c8 1000 	streq.w	r1, [r8]
 8009f64:	5162      	str	r2, [r4, r5]
 8009f66:	604b      	str	r3, [r1, #4]
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 f82f 	bl	8009fcc <__malloc_unlock>
 8009f6e:	f104 000b 	add.w	r0, r4, #11
 8009f72:	1d23      	adds	r3, r4, #4
 8009f74:	f020 0007 	bic.w	r0, r0, #7
 8009f78:	1ac2      	subs	r2, r0, r3
 8009f7a:	bf1c      	itt	ne
 8009f7c:	1a1b      	subne	r3, r3, r0
 8009f7e:	50a3      	strne	r3, [r4, r2]
 8009f80:	e7af      	b.n	8009ee2 <_malloc_r+0x22>
 8009f82:	6862      	ldr	r2, [r4, #4]
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	bf0c      	ite	eq
 8009f88:	f8c8 2000 	streq.w	r2, [r8]
 8009f8c:	605a      	strne	r2, [r3, #4]
 8009f8e:	e7eb      	b.n	8009f68 <_malloc_r+0xa8>
 8009f90:	4623      	mov	r3, r4
 8009f92:	6864      	ldr	r4, [r4, #4]
 8009f94:	e7ae      	b.n	8009ef4 <_malloc_r+0x34>
 8009f96:	463c      	mov	r4, r7
 8009f98:	687f      	ldr	r7, [r7, #4]
 8009f9a:	e7b6      	b.n	8009f0a <_malloc_r+0x4a>
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	d1fb      	bne.n	8009f9c <_malloc_r+0xdc>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	6053      	str	r3, [r2, #4]
 8009fa8:	e7de      	b.n	8009f68 <_malloc_r+0xa8>
 8009faa:	230c      	movs	r3, #12
 8009fac:	6033      	str	r3, [r6, #0]
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f000 f80c 	bl	8009fcc <__malloc_unlock>
 8009fb4:	e794      	b.n	8009ee0 <_malloc_r+0x20>
 8009fb6:	6005      	str	r5, [r0, #0]
 8009fb8:	e7d6      	b.n	8009f68 <_malloc_r+0xa8>
 8009fba:	bf00      	nop
 8009fbc:	20000618 	.word	0x20000618

08009fc0 <__malloc_lock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	@ (8009fc8 <__malloc_lock+0x8>)
 8009fc2:	f7ff b8b4 	b.w	800912e <__retarget_lock_acquire_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20000610 	.word	0x20000610

08009fcc <__malloc_unlock>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	@ (8009fd4 <__malloc_unlock+0x8>)
 8009fce:	f7ff b8af 	b.w	8009130 <__retarget_lock_release_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	20000610 	.word	0x20000610

08009fd8 <_Balloc>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	69c6      	ldr	r6, [r0, #28]
 8009fdc:	4604      	mov	r4, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	b976      	cbnz	r6, 800a000 <_Balloc+0x28>
 8009fe2:	2010      	movs	r0, #16
 8009fe4:	f7ff ff42 	bl	8009e6c <malloc>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	61e0      	str	r0, [r4, #28]
 8009fec:	b920      	cbnz	r0, 8009ff8 <_Balloc+0x20>
 8009fee:	4b18      	ldr	r3, [pc, #96]	@ (800a050 <_Balloc+0x78>)
 8009ff0:	4818      	ldr	r0, [pc, #96]	@ (800a054 <_Balloc+0x7c>)
 8009ff2:	216b      	movs	r1, #107	@ 0x6b
 8009ff4:	f001 fd00 	bl	800b9f8 <__assert_func>
 8009ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ffc:	6006      	str	r6, [r0, #0]
 8009ffe:	60c6      	str	r6, [r0, #12]
 800a000:	69e6      	ldr	r6, [r4, #28]
 800a002:	68f3      	ldr	r3, [r6, #12]
 800a004:	b183      	cbz	r3, 800a028 <_Balloc+0x50>
 800a006:	69e3      	ldr	r3, [r4, #28]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a00e:	b9b8      	cbnz	r0, 800a040 <_Balloc+0x68>
 800a010:	2101      	movs	r1, #1
 800a012:	fa01 f605 	lsl.w	r6, r1, r5
 800a016:	1d72      	adds	r2, r6, #5
 800a018:	0092      	lsls	r2, r2, #2
 800a01a:	4620      	mov	r0, r4
 800a01c:	f001 fd0a 	bl	800ba34 <_calloc_r>
 800a020:	b160      	cbz	r0, 800a03c <_Balloc+0x64>
 800a022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a026:	e00e      	b.n	800a046 <_Balloc+0x6e>
 800a028:	2221      	movs	r2, #33	@ 0x21
 800a02a:	2104      	movs	r1, #4
 800a02c:	4620      	mov	r0, r4
 800a02e:	f001 fd01 	bl	800ba34 <_calloc_r>
 800a032:	69e3      	ldr	r3, [r4, #28]
 800a034:	60f0      	str	r0, [r6, #12]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e4      	bne.n	800a006 <_Balloc+0x2e>
 800a03c:	2000      	movs	r0, #0
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	6802      	ldr	r2, [r0, #0]
 800a042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a046:	2300      	movs	r3, #0
 800a048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a04c:	e7f7      	b.n	800a03e <_Balloc+0x66>
 800a04e:	bf00      	nop
 800a050:	0800c8a3 	.word	0x0800c8a3
 800a054:	0800c923 	.word	0x0800c923

0800a058 <_Bfree>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	69c6      	ldr	r6, [r0, #28]
 800a05c:	4605      	mov	r5, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	b976      	cbnz	r6, 800a080 <_Bfree+0x28>
 800a062:	2010      	movs	r0, #16
 800a064:	f7ff ff02 	bl	8009e6c <malloc>
 800a068:	4602      	mov	r2, r0
 800a06a:	61e8      	str	r0, [r5, #28]
 800a06c:	b920      	cbnz	r0, 800a078 <_Bfree+0x20>
 800a06e:	4b09      	ldr	r3, [pc, #36]	@ (800a094 <_Bfree+0x3c>)
 800a070:	4809      	ldr	r0, [pc, #36]	@ (800a098 <_Bfree+0x40>)
 800a072:	218f      	movs	r1, #143	@ 0x8f
 800a074:	f001 fcc0 	bl	800b9f8 <__assert_func>
 800a078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a07c:	6006      	str	r6, [r0, #0]
 800a07e:	60c6      	str	r6, [r0, #12]
 800a080:	b13c      	cbz	r4, 800a092 <_Bfree+0x3a>
 800a082:	69eb      	ldr	r3, [r5, #28]
 800a084:	6862      	ldr	r2, [r4, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a08c:	6021      	str	r1, [r4, #0]
 800a08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	0800c8a3 	.word	0x0800c8a3
 800a098:	0800c923 	.word	0x0800c923

0800a09c <__multadd>:
 800a09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a0:	690d      	ldr	r5, [r1, #16]
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	461e      	mov	r6, r3
 800a0a8:	f101 0c14 	add.w	ip, r1, #20
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a0b2:	b299      	uxth	r1, r3
 800a0b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a0b8:	0c1e      	lsrs	r6, r3, #16
 800a0ba:	0c0b      	lsrs	r3, r1, #16
 800a0bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a0c0:	b289      	uxth	r1, r1
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0c8:	4285      	cmp	r5, r0
 800a0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a0ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0d2:	dcec      	bgt.n	800a0ae <__multadd+0x12>
 800a0d4:	b30e      	cbz	r6, 800a11a <__multadd+0x7e>
 800a0d6:	68a3      	ldr	r3, [r4, #8]
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	dc19      	bgt.n	800a110 <__multadd+0x74>
 800a0dc:	6861      	ldr	r1, [r4, #4]
 800a0de:	4638      	mov	r0, r7
 800a0e0:	3101      	adds	r1, #1
 800a0e2:	f7ff ff79 	bl	8009fd8 <_Balloc>
 800a0e6:	4680      	mov	r8, r0
 800a0e8:	b928      	cbnz	r0, 800a0f6 <__multadd+0x5a>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a120 <__multadd+0x84>)
 800a0ee:	480d      	ldr	r0, [pc, #52]	@ (800a124 <__multadd+0x88>)
 800a0f0:	21ba      	movs	r1, #186	@ 0xba
 800a0f2:	f001 fc81 	bl	800b9f8 <__assert_func>
 800a0f6:	6922      	ldr	r2, [r4, #16]
 800a0f8:	3202      	adds	r2, #2
 800a0fa:	f104 010c 	add.w	r1, r4, #12
 800a0fe:	0092      	lsls	r2, r2, #2
 800a100:	300c      	adds	r0, #12
 800a102:	f001 fc63 	bl	800b9cc <memcpy>
 800a106:	4621      	mov	r1, r4
 800a108:	4638      	mov	r0, r7
 800a10a:	f7ff ffa5 	bl	800a058 <_Bfree>
 800a10e:	4644      	mov	r4, r8
 800a110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a114:	3501      	adds	r5, #1
 800a116:	615e      	str	r6, [r3, #20]
 800a118:	6125      	str	r5, [r4, #16]
 800a11a:	4620      	mov	r0, r4
 800a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a120:	0800c912 	.word	0x0800c912
 800a124:	0800c923 	.word	0x0800c923

0800a128 <__s2b>:
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	460c      	mov	r4, r1
 800a12e:	4615      	mov	r5, r2
 800a130:	461f      	mov	r7, r3
 800a132:	2209      	movs	r2, #9
 800a134:	3308      	adds	r3, #8
 800a136:	4606      	mov	r6, r0
 800a138:	fb93 f3f2 	sdiv	r3, r3, r2
 800a13c:	2100      	movs	r1, #0
 800a13e:	2201      	movs	r2, #1
 800a140:	429a      	cmp	r2, r3
 800a142:	db09      	blt.n	800a158 <__s2b+0x30>
 800a144:	4630      	mov	r0, r6
 800a146:	f7ff ff47 	bl	8009fd8 <_Balloc>
 800a14a:	b940      	cbnz	r0, 800a15e <__s2b+0x36>
 800a14c:	4602      	mov	r2, r0
 800a14e:	4b19      	ldr	r3, [pc, #100]	@ (800a1b4 <__s2b+0x8c>)
 800a150:	4819      	ldr	r0, [pc, #100]	@ (800a1b8 <__s2b+0x90>)
 800a152:	21d3      	movs	r1, #211	@ 0xd3
 800a154:	f001 fc50 	bl	800b9f8 <__assert_func>
 800a158:	0052      	lsls	r2, r2, #1
 800a15a:	3101      	adds	r1, #1
 800a15c:	e7f0      	b.n	800a140 <__s2b+0x18>
 800a15e:	9b08      	ldr	r3, [sp, #32]
 800a160:	6143      	str	r3, [r0, #20]
 800a162:	2d09      	cmp	r5, #9
 800a164:	f04f 0301 	mov.w	r3, #1
 800a168:	6103      	str	r3, [r0, #16]
 800a16a:	dd16      	ble.n	800a19a <__s2b+0x72>
 800a16c:	f104 0909 	add.w	r9, r4, #9
 800a170:	46c8      	mov	r8, r9
 800a172:	442c      	add	r4, r5
 800a174:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a178:	4601      	mov	r1, r0
 800a17a:	3b30      	subs	r3, #48	@ 0x30
 800a17c:	220a      	movs	r2, #10
 800a17e:	4630      	mov	r0, r6
 800a180:	f7ff ff8c 	bl	800a09c <__multadd>
 800a184:	45a0      	cmp	r8, r4
 800a186:	d1f5      	bne.n	800a174 <__s2b+0x4c>
 800a188:	f1a5 0408 	sub.w	r4, r5, #8
 800a18c:	444c      	add	r4, r9
 800a18e:	1b2d      	subs	r5, r5, r4
 800a190:	1963      	adds	r3, r4, r5
 800a192:	42bb      	cmp	r3, r7
 800a194:	db04      	blt.n	800a1a0 <__s2b+0x78>
 800a196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19a:	340a      	adds	r4, #10
 800a19c:	2509      	movs	r5, #9
 800a19e:	e7f6      	b.n	800a18e <__s2b+0x66>
 800a1a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	3b30      	subs	r3, #48	@ 0x30
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f7ff ff76 	bl	800a09c <__multadd>
 800a1b0:	e7ee      	b.n	800a190 <__s2b+0x68>
 800a1b2:	bf00      	nop
 800a1b4:	0800c912 	.word	0x0800c912
 800a1b8:	0800c923 	.word	0x0800c923

0800a1bc <__hi0bits>:
 800a1bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	bf36      	itet	cc
 800a1c4:	0403      	lslcc	r3, r0, #16
 800a1c6:	2000      	movcs	r0, #0
 800a1c8:	2010      	movcc	r0, #16
 800a1ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1ce:	bf3c      	itt	cc
 800a1d0:	021b      	lslcc	r3, r3, #8
 800a1d2:	3008      	addcc	r0, #8
 800a1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d8:	bf3c      	itt	cc
 800a1da:	011b      	lslcc	r3, r3, #4
 800a1dc:	3004      	addcc	r0, #4
 800a1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1e2:	bf3c      	itt	cc
 800a1e4:	009b      	lslcc	r3, r3, #2
 800a1e6:	3002      	addcc	r0, #2
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	db05      	blt.n	800a1f8 <__hi0bits+0x3c>
 800a1ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1f0:	f100 0001 	add.w	r0, r0, #1
 800a1f4:	bf08      	it	eq
 800a1f6:	2020      	moveq	r0, #32
 800a1f8:	4770      	bx	lr

0800a1fa <__lo0bits>:
 800a1fa:	6803      	ldr	r3, [r0, #0]
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	f013 0007 	ands.w	r0, r3, #7
 800a202:	d00b      	beq.n	800a21c <__lo0bits+0x22>
 800a204:	07d9      	lsls	r1, r3, #31
 800a206:	d421      	bmi.n	800a24c <__lo0bits+0x52>
 800a208:	0798      	lsls	r0, r3, #30
 800a20a:	bf49      	itett	mi
 800a20c:	085b      	lsrmi	r3, r3, #1
 800a20e:	089b      	lsrpl	r3, r3, #2
 800a210:	2001      	movmi	r0, #1
 800a212:	6013      	strmi	r3, [r2, #0]
 800a214:	bf5c      	itt	pl
 800a216:	6013      	strpl	r3, [r2, #0]
 800a218:	2002      	movpl	r0, #2
 800a21a:	4770      	bx	lr
 800a21c:	b299      	uxth	r1, r3
 800a21e:	b909      	cbnz	r1, 800a224 <__lo0bits+0x2a>
 800a220:	0c1b      	lsrs	r3, r3, #16
 800a222:	2010      	movs	r0, #16
 800a224:	b2d9      	uxtb	r1, r3
 800a226:	b909      	cbnz	r1, 800a22c <__lo0bits+0x32>
 800a228:	3008      	adds	r0, #8
 800a22a:	0a1b      	lsrs	r3, r3, #8
 800a22c:	0719      	lsls	r1, r3, #28
 800a22e:	bf04      	itt	eq
 800a230:	091b      	lsreq	r3, r3, #4
 800a232:	3004      	addeq	r0, #4
 800a234:	0799      	lsls	r1, r3, #30
 800a236:	bf04      	itt	eq
 800a238:	089b      	lsreq	r3, r3, #2
 800a23a:	3002      	addeq	r0, #2
 800a23c:	07d9      	lsls	r1, r3, #31
 800a23e:	d403      	bmi.n	800a248 <__lo0bits+0x4e>
 800a240:	085b      	lsrs	r3, r3, #1
 800a242:	f100 0001 	add.w	r0, r0, #1
 800a246:	d003      	beq.n	800a250 <__lo0bits+0x56>
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	4770      	bx	lr
 800a24c:	2000      	movs	r0, #0
 800a24e:	4770      	bx	lr
 800a250:	2020      	movs	r0, #32
 800a252:	4770      	bx	lr

0800a254 <__i2b>:
 800a254:	b510      	push	{r4, lr}
 800a256:	460c      	mov	r4, r1
 800a258:	2101      	movs	r1, #1
 800a25a:	f7ff febd 	bl	8009fd8 <_Balloc>
 800a25e:	4602      	mov	r2, r0
 800a260:	b928      	cbnz	r0, 800a26e <__i2b+0x1a>
 800a262:	4b05      	ldr	r3, [pc, #20]	@ (800a278 <__i2b+0x24>)
 800a264:	4805      	ldr	r0, [pc, #20]	@ (800a27c <__i2b+0x28>)
 800a266:	f240 1145 	movw	r1, #325	@ 0x145
 800a26a:	f001 fbc5 	bl	800b9f8 <__assert_func>
 800a26e:	2301      	movs	r3, #1
 800a270:	6144      	str	r4, [r0, #20]
 800a272:	6103      	str	r3, [r0, #16]
 800a274:	bd10      	pop	{r4, pc}
 800a276:	bf00      	nop
 800a278:	0800c912 	.word	0x0800c912
 800a27c:	0800c923 	.word	0x0800c923

0800a280 <__multiply>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	4614      	mov	r4, r2
 800a286:	690a      	ldr	r2, [r1, #16]
 800a288:	6923      	ldr	r3, [r4, #16]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	bfa8      	it	ge
 800a28e:	4623      	movge	r3, r4
 800a290:	460f      	mov	r7, r1
 800a292:	bfa4      	itt	ge
 800a294:	460c      	movge	r4, r1
 800a296:	461f      	movge	r7, r3
 800a298:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a29c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2a0:	68a3      	ldr	r3, [r4, #8]
 800a2a2:	6861      	ldr	r1, [r4, #4]
 800a2a4:	eb0a 0609 	add.w	r6, sl, r9
 800a2a8:	42b3      	cmp	r3, r6
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	bfb8      	it	lt
 800a2ae:	3101      	addlt	r1, #1
 800a2b0:	f7ff fe92 	bl	8009fd8 <_Balloc>
 800a2b4:	b930      	cbnz	r0, 800a2c4 <__multiply+0x44>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	4b44      	ldr	r3, [pc, #272]	@ (800a3cc <__multiply+0x14c>)
 800a2ba:	4845      	ldr	r0, [pc, #276]	@ (800a3d0 <__multiply+0x150>)
 800a2bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2c0:	f001 fb9a 	bl	800b9f8 <__assert_func>
 800a2c4:	f100 0514 	add.w	r5, r0, #20
 800a2c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4543      	cmp	r3, r8
 800a2d2:	d321      	bcc.n	800a318 <__multiply+0x98>
 800a2d4:	f107 0114 	add.w	r1, r7, #20
 800a2d8:	f104 0214 	add.w	r2, r4, #20
 800a2dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a2e4:	9302      	str	r3, [sp, #8]
 800a2e6:	1b13      	subs	r3, r2, r4
 800a2e8:	3b15      	subs	r3, #21
 800a2ea:	f023 0303 	bic.w	r3, r3, #3
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	f104 0715 	add.w	r7, r4, #21
 800a2f4:	42ba      	cmp	r2, r7
 800a2f6:	bf38      	it	cc
 800a2f8:	2304      	movcc	r3, #4
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	9103      	str	r1, [sp, #12]
 800a300:	428b      	cmp	r3, r1
 800a302:	d80c      	bhi.n	800a31e <__multiply+0x9e>
 800a304:	2e00      	cmp	r6, #0
 800a306:	dd03      	ble.n	800a310 <__multiply+0x90>
 800a308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d05b      	beq.n	800a3c8 <__multiply+0x148>
 800a310:	6106      	str	r6, [r0, #16]
 800a312:	b005      	add	sp, #20
 800a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	f843 2b04 	str.w	r2, [r3], #4
 800a31c:	e7d8      	b.n	800a2d0 <__multiply+0x50>
 800a31e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a322:	f1ba 0f00 	cmp.w	sl, #0
 800a326:	d024      	beq.n	800a372 <__multiply+0xf2>
 800a328:	f104 0e14 	add.w	lr, r4, #20
 800a32c:	46a9      	mov	r9, r5
 800a32e:	f04f 0c00 	mov.w	ip, #0
 800a332:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a336:	f8d9 3000 	ldr.w	r3, [r9]
 800a33a:	fa1f fb87 	uxth.w	fp, r7
 800a33e:	b29b      	uxth	r3, r3
 800a340:	fb0a 330b 	mla	r3, sl, fp, r3
 800a344:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a348:	f8d9 7000 	ldr.w	r7, [r9]
 800a34c:	4463      	add	r3, ip
 800a34e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a352:	fb0a c70b 	mla	r7, sl, fp, ip
 800a356:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a360:	4572      	cmp	r2, lr
 800a362:	f849 3b04 	str.w	r3, [r9], #4
 800a366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a36a:	d8e2      	bhi.n	800a332 <__multiply+0xb2>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	f845 c003 	str.w	ip, [r5, r3]
 800a372:	9b03      	ldr	r3, [sp, #12]
 800a374:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a378:	3104      	adds	r1, #4
 800a37a:	f1b9 0f00 	cmp.w	r9, #0
 800a37e:	d021      	beq.n	800a3c4 <__multiply+0x144>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	f104 0c14 	add.w	ip, r4, #20
 800a386:	46ae      	mov	lr, r5
 800a388:	f04f 0a00 	mov.w	sl, #0
 800a38c:	f8bc b000 	ldrh.w	fp, [ip]
 800a390:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a394:	fb09 770b 	mla	r7, r9, fp, r7
 800a398:	4457      	add	r7, sl
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3a0:	f84e 3b04 	str.w	r3, [lr], #4
 800a3a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ac:	f8be 3000 	ldrh.w	r3, [lr]
 800a3b0:	fb09 330a 	mla	r3, r9, sl, r3
 800a3b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3b8:	4562      	cmp	r2, ip
 800a3ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3be:	d8e5      	bhi.n	800a38c <__multiply+0x10c>
 800a3c0:	9f01      	ldr	r7, [sp, #4]
 800a3c2:	51eb      	str	r3, [r5, r7]
 800a3c4:	3504      	adds	r5, #4
 800a3c6:	e799      	b.n	800a2fc <__multiply+0x7c>
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	e79b      	b.n	800a304 <__multiply+0x84>
 800a3cc:	0800c912 	.word	0x0800c912
 800a3d0:	0800c923 	.word	0x0800c923

0800a3d4 <__pow5mult>:
 800a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d8:	4615      	mov	r5, r2
 800a3da:	f012 0203 	ands.w	r2, r2, #3
 800a3de:	4607      	mov	r7, r0
 800a3e0:	460e      	mov	r6, r1
 800a3e2:	d007      	beq.n	800a3f4 <__pow5mult+0x20>
 800a3e4:	4c25      	ldr	r4, [pc, #148]	@ (800a47c <__pow5mult+0xa8>)
 800a3e6:	3a01      	subs	r2, #1
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ee:	f7ff fe55 	bl	800a09c <__multadd>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	10ad      	asrs	r5, r5, #2
 800a3f6:	d03d      	beq.n	800a474 <__pow5mult+0xa0>
 800a3f8:	69fc      	ldr	r4, [r7, #28]
 800a3fa:	b97c      	cbnz	r4, 800a41c <__pow5mult+0x48>
 800a3fc:	2010      	movs	r0, #16
 800a3fe:	f7ff fd35 	bl	8009e6c <malloc>
 800a402:	4602      	mov	r2, r0
 800a404:	61f8      	str	r0, [r7, #28]
 800a406:	b928      	cbnz	r0, 800a414 <__pow5mult+0x40>
 800a408:	4b1d      	ldr	r3, [pc, #116]	@ (800a480 <__pow5mult+0xac>)
 800a40a:	481e      	ldr	r0, [pc, #120]	@ (800a484 <__pow5mult+0xb0>)
 800a40c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a410:	f001 faf2 	bl	800b9f8 <__assert_func>
 800a414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a418:	6004      	str	r4, [r0, #0]
 800a41a:	60c4      	str	r4, [r0, #12]
 800a41c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a424:	b94c      	cbnz	r4, 800a43a <__pow5mult+0x66>
 800a426:	f240 2171 	movw	r1, #625	@ 0x271
 800a42a:	4638      	mov	r0, r7
 800a42c:	f7ff ff12 	bl	800a254 <__i2b>
 800a430:	2300      	movs	r3, #0
 800a432:	f8c8 0008 	str.w	r0, [r8, #8]
 800a436:	4604      	mov	r4, r0
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	f04f 0900 	mov.w	r9, #0
 800a43e:	07eb      	lsls	r3, r5, #31
 800a440:	d50a      	bpl.n	800a458 <__pow5mult+0x84>
 800a442:	4631      	mov	r1, r6
 800a444:	4622      	mov	r2, r4
 800a446:	4638      	mov	r0, r7
 800a448:	f7ff ff1a 	bl	800a280 <__multiply>
 800a44c:	4631      	mov	r1, r6
 800a44e:	4680      	mov	r8, r0
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff fe01 	bl	800a058 <_Bfree>
 800a456:	4646      	mov	r6, r8
 800a458:	106d      	asrs	r5, r5, #1
 800a45a:	d00b      	beq.n	800a474 <__pow5mult+0xa0>
 800a45c:	6820      	ldr	r0, [r4, #0]
 800a45e:	b938      	cbnz	r0, 800a470 <__pow5mult+0x9c>
 800a460:	4622      	mov	r2, r4
 800a462:	4621      	mov	r1, r4
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff ff0b 	bl	800a280 <__multiply>
 800a46a:	6020      	str	r0, [r4, #0]
 800a46c:	f8c0 9000 	str.w	r9, [r0]
 800a470:	4604      	mov	r4, r0
 800a472:	e7e4      	b.n	800a43e <__pow5mult+0x6a>
 800a474:	4630      	mov	r0, r6
 800a476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47a:	bf00      	nop
 800a47c:	0800c97c 	.word	0x0800c97c
 800a480:	0800c8a3 	.word	0x0800c8a3
 800a484:	0800c923 	.word	0x0800c923

0800a488 <__lshift>:
 800a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a48c:	460c      	mov	r4, r1
 800a48e:	6849      	ldr	r1, [r1, #4]
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	4607      	mov	r7, r0
 800a49a:	4691      	mov	r9, r2
 800a49c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4a0:	f108 0601 	add.w	r6, r8, #1
 800a4a4:	42b3      	cmp	r3, r6
 800a4a6:	db0b      	blt.n	800a4c0 <__lshift+0x38>
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff fd95 	bl	8009fd8 <_Balloc>
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	b948      	cbnz	r0, 800a4c6 <__lshift+0x3e>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	4b28      	ldr	r3, [pc, #160]	@ (800a558 <__lshift+0xd0>)
 800a4b6:	4829      	ldr	r0, [pc, #164]	@ (800a55c <__lshift+0xd4>)
 800a4b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4bc:	f001 fa9c 	bl	800b9f8 <__assert_func>
 800a4c0:	3101      	adds	r1, #1
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	e7ee      	b.n	800a4a4 <__lshift+0x1c>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f100 0114 	add.w	r1, r0, #20
 800a4cc:	f100 0210 	add.w	r2, r0, #16
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	4553      	cmp	r3, sl
 800a4d4:	db33      	blt.n	800a53e <__lshift+0xb6>
 800a4d6:	6920      	ldr	r0, [r4, #16]
 800a4d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4dc:	f104 0314 	add.w	r3, r4, #20
 800a4e0:	f019 091f 	ands.w	r9, r9, #31
 800a4e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4ec:	d02b      	beq.n	800a546 <__lshift+0xbe>
 800a4ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a4f2:	468a      	mov	sl, r1
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a4fc:	4310      	orrs	r0, r2
 800a4fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a502:	f853 2b04 	ldr.w	r2, [r3], #4
 800a506:	459c      	cmp	ip, r3
 800a508:	fa22 f20e 	lsr.w	r2, r2, lr
 800a50c:	d8f3      	bhi.n	800a4f6 <__lshift+0x6e>
 800a50e:	ebac 0304 	sub.w	r3, ip, r4
 800a512:	3b15      	subs	r3, #21
 800a514:	f023 0303 	bic.w	r3, r3, #3
 800a518:	3304      	adds	r3, #4
 800a51a:	f104 0015 	add.w	r0, r4, #21
 800a51e:	4584      	cmp	ip, r0
 800a520:	bf38      	it	cc
 800a522:	2304      	movcc	r3, #4
 800a524:	50ca      	str	r2, [r1, r3]
 800a526:	b10a      	cbz	r2, 800a52c <__lshift+0xa4>
 800a528:	f108 0602 	add.w	r6, r8, #2
 800a52c:	3e01      	subs	r6, #1
 800a52e:	4638      	mov	r0, r7
 800a530:	612e      	str	r6, [r5, #16]
 800a532:	4621      	mov	r1, r4
 800a534:	f7ff fd90 	bl	800a058 <_Bfree>
 800a538:	4628      	mov	r0, r5
 800a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a542:	3301      	adds	r3, #1
 800a544:	e7c5      	b.n	800a4d2 <__lshift+0x4a>
 800a546:	3904      	subs	r1, #4
 800a548:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a550:	459c      	cmp	ip, r3
 800a552:	d8f9      	bhi.n	800a548 <__lshift+0xc0>
 800a554:	e7ea      	b.n	800a52c <__lshift+0xa4>
 800a556:	bf00      	nop
 800a558:	0800c912 	.word	0x0800c912
 800a55c:	0800c923 	.word	0x0800c923

0800a560 <__mcmp>:
 800a560:	690a      	ldr	r2, [r1, #16]
 800a562:	4603      	mov	r3, r0
 800a564:	6900      	ldr	r0, [r0, #16]
 800a566:	1a80      	subs	r0, r0, r2
 800a568:	b530      	push	{r4, r5, lr}
 800a56a:	d10e      	bne.n	800a58a <__mcmp+0x2a>
 800a56c:	3314      	adds	r3, #20
 800a56e:	3114      	adds	r1, #20
 800a570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a57c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a580:	4295      	cmp	r5, r2
 800a582:	d003      	beq.n	800a58c <__mcmp+0x2c>
 800a584:	d205      	bcs.n	800a592 <__mcmp+0x32>
 800a586:	f04f 30ff 	mov.w	r0, #4294967295
 800a58a:	bd30      	pop	{r4, r5, pc}
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	d3f3      	bcc.n	800a578 <__mcmp+0x18>
 800a590:	e7fb      	b.n	800a58a <__mcmp+0x2a>
 800a592:	2001      	movs	r0, #1
 800a594:	e7f9      	b.n	800a58a <__mcmp+0x2a>
	...

0800a598 <__mdiff>:
 800a598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	4689      	mov	r9, r1
 800a59e:	4606      	mov	r6, r0
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4648      	mov	r0, r9
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	f7ff ffdb 	bl	800a560 <__mcmp>
 800a5aa:	1e05      	subs	r5, r0, #0
 800a5ac:	d112      	bne.n	800a5d4 <__mdiff+0x3c>
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff fd11 	bl	8009fd8 <_Balloc>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	b928      	cbnz	r0, 800a5c6 <__mdiff+0x2e>
 800a5ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a6b8 <__mdiff+0x120>)
 800a5bc:	f240 2137 	movw	r1, #567	@ 0x237
 800a5c0:	483e      	ldr	r0, [pc, #248]	@ (800a6bc <__mdiff+0x124>)
 800a5c2:	f001 fa19 	bl	800b9f8 <__assert_func>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	b003      	add	sp, #12
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	bfbc      	itt	lt
 800a5d6:	464b      	movlt	r3, r9
 800a5d8:	46a1      	movlt	r9, r4
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5e0:	bfba      	itte	lt
 800a5e2:	461c      	movlt	r4, r3
 800a5e4:	2501      	movlt	r5, #1
 800a5e6:	2500      	movge	r5, #0
 800a5e8:	f7ff fcf6 	bl	8009fd8 <_Balloc>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	b918      	cbnz	r0, 800a5f8 <__mdiff+0x60>
 800a5f0:	4b31      	ldr	r3, [pc, #196]	@ (800a6b8 <__mdiff+0x120>)
 800a5f2:	f240 2145 	movw	r1, #581	@ 0x245
 800a5f6:	e7e3      	b.n	800a5c0 <__mdiff+0x28>
 800a5f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5fc:	6926      	ldr	r6, [r4, #16]
 800a5fe:	60c5      	str	r5, [r0, #12]
 800a600:	f109 0310 	add.w	r3, r9, #16
 800a604:	f109 0514 	add.w	r5, r9, #20
 800a608:	f104 0e14 	add.w	lr, r4, #20
 800a60c:	f100 0b14 	add.w	fp, r0, #20
 800a610:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a614:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	46d9      	mov	r9, fp
 800a61c:	f04f 0c00 	mov.w	ip, #0
 800a620:	9b01      	ldr	r3, [sp, #4]
 800a622:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a626:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	fa1f f38a 	uxth.w	r3, sl
 800a630:	4619      	mov	r1, r3
 800a632:	b283      	uxth	r3, r0
 800a634:	1acb      	subs	r3, r1, r3
 800a636:	0c00      	lsrs	r0, r0, #16
 800a638:	4463      	add	r3, ip
 800a63a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a63e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a642:	b29b      	uxth	r3, r3
 800a644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a648:	4576      	cmp	r6, lr
 800a64a:	f849 3b04 	str.w	r3, [r9], #4
 800a64e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a652:	d8e5      	bhi.n	800a620 <__mdiff+0x88>
 800a654:	1b33      	subs	r3, r6, r4
 800a656:	3b15      	subs	r3, #21
 800a658:	f023 0303 	bic.w	r3, r3, #3
 800a65c:	3415      	adds	r4, #21
 800a65e:	3304      	adds	r3, #4
 800a660:	42a6      	cmp	r6, r4
 800a662:	bf38      	it	cc
 800a664:	2304      	movcc	r3, #4
 800a666:	441d      	add	r5, r3
 800a668:	445b      	add	r3, fp
 800a66a:	461e      	mov	r6, r3
 800a66c:	462c      	mov	r4, r5
 800a66e:	4544      	cmp	r4, r8
 800a670:	d30e      	bcc.n	800a690 <__mdiff+0xf8>
 800a672:	f108 0103 	add.w	r1, r8, #3
 800a676:	1b49      	subs	r1, r1, r5
 800a678:	f021 0103 	bic.w	r1, r1, #3
 800a67c:	3d03      	subs	r5, #3
 800a67e:	45a8      	cmp	r8, r5
 800a680:	bf38      	it	cc
 800a682:	2100      	movcc	r1, #0
 800a684:	440b      	add	r3, r1
 800a686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a68a:	b191      	cbz	r1, 800a6b2 <__mdiff+0x11a>
 800a68c:	6117      	str	r7, [r2, #16]
 800a68e:	e79d      	b.n	800a5cc <__mdiff+0x34>
 800a690:	f854 1b04 	ldr.w	r1, [r4], #4
 800a694:	46e6      	mov	lr, ip
 800a696:	0c08      	lsrs	r0, r1, #16
 800a698:	fa1c fc81 	uxtah	ip, ip, r1
 800a69c:	4471      	add	r1, lr
 800a69e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6a2:	b289      	uxth	r1, r1
 800a6a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6a8:	f846 1b04 	str.w	r1, [r6], #4
 800a6ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6b0:	e7dd      	b.n	800a66e <__mdiff+0xd6>
 800a6b2:	3f01      	subs	r7, #1
 800a6b4:	e7e7      	b.n	800a686 <__mdiff+0xee>
 800a6b6:	bf00      	nop
 800a6b8:	0800c912 	.word	0x0800c912
 800a6bc:	0800c923 	.word	0x0800c923

0800a6c0 <__ulp>:
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	ed8d 0b00 	vstr	d0, [sp]
 800a6c6:	9a01      	ldr	r2, [sp, #4]
 800a6c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a708 <__ulp+0x48>)
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dc08      	bgt.n	800a6e6 <__ulp+0x26>
 800a6d4:	425b      	negs	r3, r3
 800a6d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6de:	da04      	bge.n	800a6ea <__ulp+0x2a>
 800a6e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6e4:	4113      	asrs	r3, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	e008      	b.n	800a6fc <__ulp+0x3c>
 800a6ea:	f1a2 0314 	sub.w	r3, r2, #20
 800a6ee:	2b1e      	cmp	r3, #30
 800a6f0:	bfda      	itte	le
 800a6f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a6f6:	40da      	lsrle	r2, r3
 800a6f8:	2201      	movgt	r2, #1
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4610      	mov	r0, r2
 800a700:	ec41 0b10 	vmov	d0, r0, r1
 800a704:	b002      	add	sp, #8
 800a706:	4770      	bx	lr
 800a708:	7ff00000 	.word	0x7ff00000

0800a70c <__b2d>:
 800a70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a710:	6906      	ldr	r6, [r0, #16]
 800a712:	f100 0814 	add.w	r8, r0, #20
 800a716:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a71a:	1f37      	subs	r7, r6, #4
 800a71c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a720:	4610      	mov	r0, r2
 800a722:	f7ff fd4b 	bl	800a1bc <__hi0bits>
 800a726:	f1c0 0320 	rsb	r3, r0, #32
 800a72a:	280a      	cmp	r0, #10
 800a72c:	600b      	str	r3, [r1, #0]
 800a72e:	491b      	ldr	r1, [pc, #108]	@ (800a79c <__b2d+0x90>)
 800a730:	dc15      	bgt.n	800a75e <__b2d+0x52>
 800a732:	f1c0 0c0b 	rsb	ip, r0, #11
 800a736:	fa22 f30c 	lsr.w	r3, r2, ip
 800a73a:	45b8      	cmp	r8, r7
 800a73c:	ea43 0501 	orr.w	r5, r3, r1
 800a740:	bf34      	ite	cc
 800a742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a746:	2300      	movcs	r3, #0
 800a748:	3015      	adds	r0, #21
 800a74a:	fa02 f000 	lsl.w	r0, r2, r0
 800a74e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a752:	4303      	orrs	r3, r0
 800a754:	461c      	mov	r4, r3
 800a756:	ec45 4b10 	vmov	d0, r4, r5
 800a75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75e:	45b8      	cmp	r8, r7
 800a760:	bf3a      	itte	cc
 800a762:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a766:	f1a6 0708 	subcc.w	r7, r6, #8
 800a76a:	2300      	movcs	r3, #0
 800a76c:	380b      	subs	r0, #11
 800a76e:	d012      	beq.n	800a796 <__b2d+0x8a>
 800a770:	f1c0 0120 	rsb	r1, r0, #32
 800a774:	fa23 f401 	lsr.w	r4, r3, r1
 800a778:	4082      	lsls	r2, r0
 800a77a:	4322      	orrs	r2, r4
 800a77c:	4547      	cmp	r7, r8
 800a77e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a782:	bf8c      	ite	hi
 800a784:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a788:	2200      	movls	r2, #0
 800a78a:	4083      	lsls	r3, r0
 800a78c:	40ca      	lsrs	r2, r1
 800a78e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a792:	4313      	orrs	r3, r2
 800a794:	e7de      	b.n	800a754 <__b2d+0x48>
 800a796:	ea42 0501 	orr.w	r5, r2, r1
 800a79a:	e7db      	b.n	800a754 <__b2d+0x48>
 800a79c:	3ff00000 	.word	0x3ff00000

0800a7a0 <__d2b>:
 800a7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7a4:	460f      	mov	r7, r1
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	ec59 8b10 	vmov	r8, r9, d0
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	f7ff fc13 	bl	8009fd8 <_Balloc>
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	b930      	cbnz	r0, 800a7c4 <__d2b+0x24>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	4b23      	ldr	r3, [pc, #140]	@ (800a848 <__d2b+0xa8>)
 800a7ba:	4824      	ldr	r0, [pc, #144]	@ (800a84c <__d2b+0xac>)
 800a7bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7c0:	f001 f91a 	bl	800b9f8 <__assert_func>
 800a7c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7cc:	b10d      	cbz	r5, 800a7d2 <__d2b+0x32>
 800a7ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	f1b8 0300 	subs.w	r3, r8, #0
 800a7d8:	d023      	beq.n	800a822 <__d2b+0x82>
 800a7da:	4668      	mov	r0, sp
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	f7ff fd0c 	bl	800a1fa <__lo0bits>
 800a7e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7e6:	b1d0      	cbz	r0, 800a81e <__d2b+0x7e>
 800a7e8:	f1c0 0320 	rsb	r3, r0, #32
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	430b      	orrs	r3, r1
 800a7f2:	40c2      	lsrs	r2, r0
 800a7f4:	6163      	str	r3, [r4, #20]
 800a7f6:	9201      	str	r2, [sp, #4]
 800a7f8:	9b01      	ldr	r3, [sp, #4]
 800a7fa:	61a3      	str	r3, [r4, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bf0c      	ite	eq
 800a800:	2201      	moveq	r2, #1
 800a802:	2202      	movne	r2, #2
 800a804:	6122      	str	r2, [r4, #16]
 800a806:	b1a5      	cbz	r5, 800a832 <__d2b+0x92>
 800a808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a80c:	4405      	add	r5, r0
 800a80e:	603d      	str	r5, [r7, #0]
 800a810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a814:	6030      	str	r0, [r6, #0]
 800a816:	4620      	mov	r0, r4
 800a818:	b003      	add	sp, #12
 800a81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a81e:	6161      	str	r1, [r4, #20]
 800a820:	e7ea      	b.n	800a7f8 <__d2b+0x58>
 800a822:	a801      	add	r0, sp, #4
 800a824:	f7ff fce9 	bl	800a1fa <__lo0bits>
 800a828:	9b01      	ldr	r3, [sp, #4]
 800a82a:	6163      	str	r3, [r4, #20]
 800a82c:	3020      	adds	r0, #32
 800a82e:	2201      	movs	r2, #1
 800a830:	e7e8      	b.n	800a804 <__d2b+0x64>
 800a832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a83a:	6038      	str	r0, [r7, #0]
 800a83c:	6918      	ldr	r0, [r3, #16]
 800a83e:	f7ff fcbd 	bl	800a1bc <__hi0bits>
 800a842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a846:	e7e5      	b.n	800a814 <__d2b+0x74>
 800a848:	0800c912 	.word	0x0800c912
 800a84c:	0800c923 	.word	0x0800c923

0800a850 <__ratio>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	b085      	sub	sp, #20
 800a856:	e9cd 1000 	strd	r1, r0, [sp]
 800a85a:	a902      	add	r1, sp, #8
 800a85c:	f7ff ff56 	bl	800a70c <__b2d>
 800a860:	9800      	ldr	r0, [sp, #0]
 800a862:	a903      	add	r1, sp, #12
 800a864:	ec55 4b10 	vmov	r4, r5, d0
 800a868:	f7ff ff50 	bl	800a70c <__b2d>
 800a86c:	9b01      	ldr	r3, [sp, #4]
 800a86e:	6919      	ldr	r1, [r3, #16]
 800a870:	9b00      	ldr	r3, [sp, #0]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	1ac9      	subs	r1, r1, r3
 800a876:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	ec5b ab10 	vmov	sl, fp, d0
 800a880:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a884:	2b00      	cmp	r3, #0
 800a886:	bfce      	itee	gt
 800a888:	462a      	movgt	r2, r5
 800a88a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a88e:	465a      	movle	r2, fp
 800a890:	462f      	mov	r7, r5
 800a892:	46d9      	mov	r9, fp
 800a894:	bfcc      	ite	gt
 800a896:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a89a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a89e:	464b      	mov	r3, r9
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	f7f5 ffe1 	bl	800086c <__aeabi_ddiv>
 800a8aa:	ec41 0b10 	vmov	d0, r0, r1
 800a8ae:	b005      	add	sp, #20
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8b4 <__copybits>:
 800a8b4:	3901      	subs	r1, #1
 800a8b6:	b570      	push	{r4, r5, r6, lr}
 800a8b8:	1149      	asrs	r1, r1, #5
 800a8ba:	6914      	ldr	r4, [r2, #16]
 800a8bc:	3101      	adds	r1, #1
 800a8be:	f102 0314 	add.w	r3, r2, #20
 800a8c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8ca:	1f05      	subs	r5, r0, #4
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	d30c      	bcc.n	800a8ea <__copybits+0x36>
 800a8d0:	1aa3      	subs	r3, r4, r2
 800a8d2:	3b11      	subs	r3, #17
 800a8d4:	f023 0303 	bic.w	r3, r3, #3
 800a8d8:	3211      	adds	r2, #17
 800a8da:	42a2      	cmp	r2, r4
 800a8dc:	bf88      	it	hi
 800a8de:	2300      	movhi	r3, #0
 800a8e0:	4418      	add	r0, r3
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	4288      	cmp	r0, r1
 800a8e6:	d305      	bcc.n	800a8f4 <__copybits+0x40>
 800a8e8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8f2:	e7eb      	b.n	800a8cc <__copybits+0x18>
 800a8f4:	f840 3b04 	str.w	r3, [r0], #4
 800a8f8:	e7f4      	b.n	800a8e4 <__copybits+0x30>

0800a8fa <__any_on>:
 800a8fa:	f100 0214 	add.w	r2, r0, #20
 800a8fe:	6900      	ldr	r0, [r0, #16]
 800a900:	114b      	asrs	r3, r1, #5
 800a902:	4298      	cmp	r0, r3
 800a904:	b510      	push	{r4, lr}
 800a906:	db11      	blt.n	800a92c <__any_on+0x32>
 800a908:	dd0a      	ble.n	800a920 <__any_on+0x26>
 800a90a:	f011 011f 	ands.w	r1, r1, #31
 800a90e:	d007      	beq.n	800a920 <__any_on+0x26>
 800a910:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a914:	fa24 f001 	lsr.w	r0, r4, r1
 800a918:	fa00 f101 	lsl.w	r1, r0, r1
 800a91c:	428c      	cmp	r4, r1
 800a91e:	d10b      	bne.n	800a938 <__any_on+0x3e>
 800a920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a924:	4293      	cmp	r3, r2
 800a926:	d803      	bhi.n	800a930 <__any_on+0x36>
 800a928:	2000      	movs	r0, #0
 800a92a:	bd10      	pop	{r4, pc}
 800a92c:	4603      	mov	r3, r0
 800a92e:	e7f7      	b.n	800a920 <__any_on+0x26>
 800a930:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a934:	2900      	cmp	r1, #0
 800a936:	d0f5      	beq.n	800a924 <__any_on+0x2a>
 800a938:	2001      	movs	r0, #1
 800a93a:	e7f6      	b.n	800a92a <__any_on+0x30>

0800a93c <sulp>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4604      	mov	r4, r0
 800a940:	460d      	mov	r5, r1
 800a942:	ec45 4b10 	vmov	d0, r4, r5
 800a946:	4616      	mov	r6, r2
 800a948:	f7ff feba 	bl	800a6c0 <__ulp>
 800a94c:	ec51 0b10 	vmov	r0, r1, d0
 800a950:	b17e      	cbz	r6, 800a972 <sulp+0x36>
 800a952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a956:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	dd09      	ble.n	800a972 <sulp+0x36>
 800a95e:	051b      	lsls	r3, r3, #20
 800a960:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a964:	2400      	movs	r4, #0
 800a966:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a96a:	4622      	mov	r2, r4
 800a96c:	462b      	mov	r3, r5
 800a96e:	f7f5 fe53 	bl	8000618 <__aeabi_dmul>
 800a972:	ec41 0b10 	vmov	d0, r0, r1
 800a976:	bd70      	pop	{r4, r5, r6, pc}

0800a978 <_strtod_l>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	b09f      	sub	sp, #124	@ 0x7c
 800a97e:	460c      	mov	r4, r1
 800a980:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a982:	2200      	movs	r2, #0
 800a984:	921a      	str	r2, [sp, #104]	@ 0x68
 800a986:	9005      	str	r0, [sp, #20]
 800a988:	f04f 0a00 	mov.w	sl, #0
 800a98c:	f04f 0b00 	mov.w	fp, #0
 800a990:	460a      	mov	r2, r1
 800a992:	9219      	str	r2, [sp, #100]	@ 0x64
 800a994:	7811      	ldrb	r1, [r2, #0]
 800a996:	292b      	cmp	r1, #43	@ 0x2b
 800a998:	d04a      	beq.n	800aa30 <_strtod_l+0xb8>
 800a99a:	d838      	bhi.n	800aa0e <_strtod_l+0x96>
 800a99c:	290d      	cmp	r1, #13
 800a99e:	d832      	bhi.n	800aa06 <_strtod_l+0x8e>
 800a9a0:	2908      	cmp	r1, #8
 800a9a2:	d832      	bhi.n	800aa0a <_strtod_l+0x92>
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	d03b      	beq.n	800aa20 <_strtod_l+0xa8>
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a9ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a9ae:	782a      	ldrb	r2, [r5, #0]
 800a9b0:	2a30      	cmp	r2, #48	@ 0x30
 800a9b2:	f040 80b3 	bne.w	800ab1c <_strtod_l+0x1a4>
 800a9b6:	786a      	ldrb	r2, [r5, #1]
 800a9b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9bc:	2a58      	cmp	r2, #88	@ 0x58
 800a9be:	d16e      	bne.n	800aa9e <_strtod_l+0x126>
 800a9c0:	9302      	str	r3, [sp, #8]
 800a9c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	4a8e      	ldr	r2, [pc, #568]	@ (800ac04 <_strtod_l+0x28c>)
 800a9cc:	9805      	ldr	r0, [sp, #20]
 800a9ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a9d0:	a919      	add	r1, sp, #100	@ 0x64
 800a9d2:	f001 f8ab 	bl	800bb2c <__gethex>
 800a9d6:	f010 060f 	ands.w	r6, r0, #15
 800a9da:	4604      	mov	r4, r0
 800a9dc:	d005      	beq.n	800a9ea <_strtod_l+0x72>
 800a9de:	2e06      	cmp	r6, #6
 800a9e0:	d128      	bne.n	800aa34 <_strtod_l+0xbc>
 800a9e2:	3501      	adds	r5, #1
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a9e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f040 858e 	bne.w	800b50e <_strtod_l+0xb96>
 800a9f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9f4:	b1cb      	cbz	r3, 800aa2a <_strtod_l+0xb2>
 800a9f6:	4652      	mov	r2, sl
 800a9f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a9fc:	ec43 2b10 	vmov	d0, r2, r3
 800aa00:	b01f      	add	sp, #124	@ 0x7c
 800aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	2920      	cmp	r1, #32
 800aa08:	d1ce      	bne.n	800a9a8 <_strtod_l+0x30>
 800aa0a:	3201      	adds	r2, #1
 800aa0c:	e7c1      	b.n	800a992 <_strtod_l+0x1a>
 800aa0e:	292d      	cmp	r1, #45	@ 0x2d
 800aa10:	d1ca      	bne.n	800a9a8 <_strtod_l+0x30>
 800aa12:	2101      	movs	r1, #1
 800aa14:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa16:	1c51      	adds	r1, r2, #1
 800aa18:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa1a:	7852      	ldrb	r2, [r2, #1]
 800aa1c:	2a00      	cmp	r2, #0
 800aa1e:	d1c5      	bne.n	800a9ac <_strtod_l+0x34>
 800aa20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa22:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 8570 	bne.w	800b50a <_strtod_l+0xb92>
 800aa2a:	4652      	mov	r2, sl
 800aa2c:	465b      	mov	r3, fp
 800aa2e:	e7e5      	b.n	800a9fc <_strtod_l+0x84>
 800aa30:	2100      	movs	r1, #0
 800aa32:	e7ef      	b.n	800aa14 <_strtod_l+0x9c>
 800aa34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa36:	b13a      	cbz	r2, 800aa48 <_strtod_l+0xd0>
 800aa38:	2135      	movs	r1, #53	@ 0x35
 800aa3a:	a81c      	add	r0, sp, #112	@ 0x70
 800aa3c:	f7ff ff3a 	bl	800a8b4 <__copybits>
 800aa40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa42:	9805      	ldr	r0, [sp, #20]
 800aa44:	f7ff fb08 	bl	800a058 <_Bfree>
 800aa48:	3e01      	subs	r6, #1
 800aa4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa4c:	2e04      	cmp	r6, #4
 800aa4e:	d806      	bhi.n	800aa5e <_strtod_l+0xe6>
 800aa50:	e8df f006 	tbb	[pc, r6]
 800aa54:	201d0314 	.word	0x201d0314
 800aa58:	14          	.byte	0x14
 800aa59:	00          	.byte	0x00
 800aa5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa5e:	05e1      	lsls	r1, r4, #23
 800aa60:	bf48      	it	mi
 800aa62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa6a:	0d1b      	lsrs	r3, r3, #20
 800aa6c:	051b      	lsls	r3, r3, #20
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1bb      	bne.n	800a9ea <_strtod_l+0x72>
 800aa72:	f7fe fb31 	bl	80090d8 <__errno>
 800aa76:	2322      	movs	r3, #34	@ 0x22
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	e7b6      	b.n	800a9ea <_strtod_l+0x72>
 800aa7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aa80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa8c:	e7e7      	b.n	800aa5e <_strtod_l+0xe6>
 800aa8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ac0c <_strtod_l+0x294>
 800aa92:	e7e4      	b.n	800aa5e <_strtod_l+0xe6>
 800aa94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa98:	f04f 3aff 	mov.w	sl, #4294967295
 800aa9c:	e7df      	b.n	800aa5e <_strtod_l+0xe6>
 800aa9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b30      	cmp	r3, #48	@ 0x30
 800aaa8:	d0f9      	beq.n	800aa9e <_strtod_l+0x126>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d09d      	beq.n	800a9ea <_strtod_l+0x72>
 800aaae:	2301      	movs	r3, #1
 800aab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aab4:	930c      	str	r3, [sp, #48]	@ 0x30
 800aab6:	2300      	movs	r3, #0
 800aab8:	9308      	str	r3, [sp, #32]
 800aaba:	930a      	str	r3, [sp, #40]	@ 0x28
 800aabc:	461f      	mov	r7, r3
 800aabe:	220a      	movs	r2, #10
 800aac0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aac2:	7805      	ldrb	r5, [r0, #0]
 800aac4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aac8:	b2d9      	uxtb	r1, r3
 800aaca:	2909      	cmp	r1, #9
 800aacc:	d928      	bls.n	800ab20 <_strtod_l+0x1a8>
 800aace:	494e      	ldr	r1, [pc, #312]	@ (800ac08 <_strtod_l+0x290>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	f000 ff59 	bl	800b988 <strncmp>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d032      	beq.n	800ab40 <_strtod_l+0x1c8>
 800aada:	2000      	movs	r0, #0
 800aadc:	462a      	mov	r2, r5
 800aade:	4681      	mov	r9, r0
 800aae0:	463d      	mov	r5, r7
 800aae2:	4603      	mov	r3, r0
 800aae4:	2a65      	cmp	r2, #101	@ 0x65
 800aae6:	d001      	beq.n	800aaec <_strtod_l+0x174>
 800aae8:	2a45      	cmp	r2, #69	@ 0x45
 800aaea:	d114      	bne.n	800ab16 <_strtod_l+0x19e>
 800aaec:	b91d      	cbnz	r5, 800aaf6 <_strtod_l+0x17e>
 800aaee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf0:	4302      	orrs	r2, r0
 800aaf2:	d095      	beq.n	800aa20 <_strtod_l+0xa8>
 800aaf4:	2500      	movs	r5, #0
 800aaf6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aaf8:	1c62      	adds	r2, r4, #1
 800aafa:	9219      	str	r2, [sp, #100]	@ 0x64
 800aafc:	7862      	ldrb	r2, [r4, #1]
 800aafe:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab00:	d077      	beq.n	800abf2 <_strtod_l+0x27a>
 800ab02:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab04:	d07b      	beq.n	800abfe <_strtod_l+0x286>
 800ab06:	f04f 0c00 	mov.w	ip, #0
 800ab0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab0e:	2909      	cmp	r1, #9
 800ab10:	f240 8082 	bls.w	800ac18 <_strtod_l+0x2a0>
 800ab14:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab16:	f04f 0800 	mov.w	r8, #0
 800ab1a:	e0a2      	b.n	800ac62 <_strtod_l+0x2ea>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	e7c7      	b.n	800aab0 <_strtod_l+0x138>
 800ab20:	2f08      	cmp	r7, #8
 800ab22:	bfd5      	itete	le
 800ab24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ab26:	9908      	ldrgt	r1, [sp, #32]
 800ab28:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab30:	f100 0001 	add.w	r0, r0, #1
 800ab34:	bfd4      	ite	le
 800ab36:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab38:	9308      	strgt	r3, [sp, #32]
 800ab3a:	3701      	adds	r7, #1
 800ab3c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab3e:	e7bf      	b.n	800aac0 <_strtod_l+0x148>
 800ab40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab46:	785a      	ldrb	r2, [r3, #1]
 800ab48:	b37f      	cbz	r7, 800abaa <_strtod_l+0x232>
 800ab4a:	4681      	mov	r9, r0
 800ab4c:	463d      	mov	r5, r7
 800ab4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab52:	2b09      	cmp	r3, #9
 800ab54:	d912      	bls.n	800ab7c <_strtod_l+0x204>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e7c4      	b.n	800aae4 <_strtod_l+0x16c>
 800ab5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab60:	785a      	ldrb	r2, [r3, #1]
 800ab62:	3001      	adds	r0, #1
 800ab64:	2a30      	cmp	r2, #48	@ 0x30
 800ab66:	d0f8      	beq.n	800ab5a <_strtod_l+0x1e2>
 800ab68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab6c:	2b08      	cmp	r3, #8
 800ab6e:	f200 84d3 	bhi.w	800b518 <_strtod_l+0xba0>
 800ab72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab76:	4681      	mov	r9, r0
 800ab78:	2000      	movs	r0, #0
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	3a30      	subs	r2, #48	@ 0x30
 800ab7e:	f100 0301 	add.w	r3, r0, #1
 800ab82:	d02a      	beq.n	800abda <_strtod_l+0x262>
 800ab84:	4499      	add	r9, r3
 800ab86:	eb00 0c05 	add.w	ip, r0, r5
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	210a      	movs	r1, #10
 800ab8e:	4563      	cmp	r3, ip
 800ab90:	d10d      	bne.n	800abae <_strtod_l+0x236>
 800ab92:	1c69      	adds	r1, r5, #1
 800ab94:	4401      	add	r1, r0
 800ab96:	4428      	add	r0, r5
 800ab98:	2808      	cmp	r0, #8
 800ab9a:	dc16      	bgt.n	800abca <_strtod_l+0x252>
 800ab9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab9e:	230a      	movs	r3, #10
 800aba0:	fb03 2300 	mla	r3, r3, r0, r2
 800aba4:	930a      	str	r3, [sp, #40]	@ 0x28
 800aba6:	2300      	movs	r3, #0
 800aba8:	e018      	b.n	800abdc <_strtod_l+0x264>
 800abaa:	4638      	mov	r0, r7
 800abac:	e7da      	b.n	800ab64 <_strtod_l+0x1ec>
 800abae:	2b08      	cmp	r3, #8
 800abb0:	f103 0301 	add.w	r3, r3, #1
 800abb4:	dc03      	bgt.n	800abbe <_strtod_l+0x246>
 800abb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800abb8:	434e      	muls	r6, r1
 800abba:	960a      	str	r6, [sp, #40]	@ 0x28
 800abbc:	e7e7      	b.n	800ab8e <_strtod_l+0x216>
 800abbe:	2b10      	cmp	r3, #16
 800abc0:	bfde      	ittt	le
 800abc2:	9e08      	ldrle	r6, [sp, #32]
 800abc4:	434e      	mulle	r6, r1
 800abc6:	9608      	strle	r6, [sp, #32]
 800abc8:	e7e1      	b.n	800ab8e <_strtod_l+0x216>
 800abca:	280f      	cmp	r0, #15
 800abcc:	dceb      	bgt.n	800aba6 <_strtod_l+0x22e>
 800abce:	9808      	ldr	r0, [sp, #32]
 800abd0:	230a      	movs	r3, #10
 800abd2:	fb03 2300 	mla	r3, r3, r0, r2
 800abd6:	9308      	str	r3, [sp, #32]
 800abd8:	e7e5      	b.n	800aba6 <_strtod_l+0x22e>
 800abda:	4629      	mov	r1, r5
 800abdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abde:	1c50      	adds	r0, r2, #1
 800abe0:	9019      	str	r0, [sp, #100]	@ 0x64
 800abe2:	7852      	ldrb	r2, [r2, #1]
 800abe4:	4618      	mov	r0, r3
 800abe6:	460d      	mov	r5, r1
 800abe8:	e7b1      	b.n	800ab4e <_strtod_l+0x1d6>
 800abea:	f04f 0900 	mov.w	r9, #0
 800abee:	2301      	movs	r3, #1
 800abf0:	e77d      	b.n	800aaee <_strtod_l+0x176>
 800abf2:	f04f 0c00 	mov.w	ip, #0
 800abf6:	1ca2      	adds	r2, r4, #2
 800abf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800abfa:	78a2      	ldrb	r2, [r4, #2]
 800abfc:	e785      	b.n	800ab0a <_strtod_l+0x192>
 800abfe:	f04f 0c01 	mov.w	ip, #1
 800ac02:	e7f8      	b.n	800abf6 <_strtod_l+0x27e>
 800ac04:	0800ca90 	.word	0x0800ca90
 800ac08:	0800ca78 	.word	0x0800ca78
 800ac0c:	7ff00000 	.word	0x7ff00000
 800ac10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac12:	1c51      	adds	r1, r2, #1
 800ac14:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac16:	7852      	ldrb	r2, [r2, #1]
 800ac18:	2a30      	cmp	r2, #48	@ 0x30
 800ac1a:	d0f9      	beq.n	800ac10 <_strtod_l+0x298>
 800ac1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac20:	2908      	cmp	r1, #8
 800ac22:	f63f af78 	bhi.w	800ab16 <_strtod_l+0x19e>
 800ac26:	3a30      	subs	r2, #48	@ 0x30
 800ac28:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac2e:	f04f 080a 	mov.w	r8, #10
 800ac32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac34:	1c56      	adds	r6, r2, #1
 800ac36:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac38:	7852      	ldrb	r2, [r2, #1]
 800ac3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac3e:	f1be 0f09 	cmp.w	lr, #9
 800ac42:	d939      	bls.n	800acb8 <_strtod_l+0x340>
 800ac44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac46:	1a76      	subs	r6, r6, r1
 800ac48:	2e08      	cmp	r6, #8
 800ac4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac4e:	dc03      	bgt.n	800ac58 <_strtod_l+0x2e0>
 800ac50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac52:	4588      	cmp	r8, r1
 800ac54:	bfa8      	it	ge
 800ac56:	4688      	movge	r8, r1
 800ac58:	f1bc 0f00 	cmp.w	ip, #0
 800ac5c:	d001      	beq.n	800ac62 <_strtod_l+0x2ea>
 800ac5e:	f1c8 0800 	rsb	r8, r8, #0
 800ac62:	2d00      	cmp	r5, #0
 800ac64:	d14e      	bne.n	800ad04 <_strtod_l+0x38c>
 800ac66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac68:	4308      	orrs	r0, r1
 800ac6a:	f47f aebe 	bne.w	800a9ea <_strtod_l+0x72>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f47f aed6 	bne.w	800aa20 <_strtod_l+0xa8>
 800ac74:	2a69      	cmp	r2, #105	@ 0x69
 800ac76:	d028      	beq.n	800acca <_strtod_l+0x352>
 800ac78:	dc25      	bgt.n	800acc6 <_strtod_l+0x34e>
 800ac7a:	2a49      	cmp	r2, #73	@ 0x49
 800ac7c:	d025      	beq.n	800acca <_strtod_l+0x352>
 800ac7e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac80:	f47f aece 	bne.w	800aa20 <_strtod_l+0xa8>
 800ac84:	499b      	ldr	r1, [pc, #620]	@ (800aef4 <_strtod_l+0x57c>)
 800ac86:	a819      	add	r0, sp, #100	@ 0x64
 800ac88:	f001 f972 	bl	800bf70 <__match>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f43f aec7 	beq.w	800aa20 <_strtod_l+0xa8>
 800ac92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	2b28      	cmp	r3, #40	@ 0x28
 800ac98:	d12e      	bne.n	800acf8 <_strtod_l+0x380>
 800ac9a:	4997      	ldr	r1, [pc, #604]	@ (800aef8 <_strtod_l+0x580>)
 800ac9c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac9e:	a819      	add	r0, sp, #100	@ 0x64
 800aca0:	f001 f97a 	bl	800bf98 <__hexnan>
 800aca4:	2805      	cmp	r0, #5
 800aca6:	d127      	bne.n	800acf8 <_strtod_l+0x380>
 800aca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800acaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800acae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800acb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800acb6:	e698      	b.n	800a9ea <_strtod_l+0x72>
 800acb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acba:	fb08 2101 	mla	r1, r8, r1, r2
 800acbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800acc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800acc4:	e7b5      	b.n	800ac32 <_strtod_l+0x2ba>
 800acc6:	2a6e      	cmp	r2, #110	@ 0x6e
 800acc8:	e7da      	b.n	800ac80 <_strtod_l+0x308>
 800acca:	498c      	ldr	r1, [pc, #560]	@ (800aefc <_strtod_l+0x584>)
 800accc:	a819      	add	r0, sp, #100	@ 0x64
 800acce:	f001 f94f 	bl	800bf70 <__match>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f43f aea4 	beq.w	800aa20 <_strtod_l+0xa8>
 800acd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acda:	4989      	ldr	r1, [pc, #548]	@ (800af00 <_strtod_l+0x588>)
 800acdc:	3b01      	subs	r3, #1
 800acde:	a819      	add	r0, sp, #100	@ 0x64
 800ace0:	9319      	str	r3, [sp, #100]	@ 0x64
 800ace2:	f001 f945 	bl	800bf70 <__match>
 800ace6:	b910      	cbnz	r0, 800acee <_strtod_l+0x376>
 800ace8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acea:	3301      	adds	r3, #1
 800acec:	9319      	str	r3, [sp, #100]	@ 0x64
 800acee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800af10 <_strtod_l+0x598>
 800acf2:	f04f 0a00 	mov.w	sl, #0
 800acf6:	e678      	b.n	800a9ea <_strtod_l+0x72>
 800acf8:	4882      	ldr	r0, [pc, #520]	@ (800af04 <_strtod_l+0x58c>)
 800acfa:	f000 fe75 	bl	800b9e8 <nan>
 800acfe:	ec5b ab10 	vmov	sl, fp, d0
 800ad02:	e672      	b.n	800a9ea <_strtod_l+0x72>
 800ad04:	eba8 0309 	sub.w	r3, r8, r9
 800ad08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad0c:	2f00      	cmp	r7, #0
 800ad0e:	bf08      	it	eq
 800ad10:	462f      	moveq	r7, r5
 800ad12:	2d10      	cmp	r5, #16
 800ad14:	462c      	mov	r4, r5
 800ad16:	bfa8      	it	ge
 800ad18:	2410      	movge	r4, #16
 800ad1a:	f7f5 fc03 	bl	8000524 <__aeabi_ui2d>
 800ad1e:	2d09      	cmp	r5, #9
 800ad20:	4682      	mov	sl, r0
 800ad22:	468b      	mov	fp, r1
 800ad24:	dc13      	bgt.n	800ad4e <_strtod_l+0x3d6>
 800ad26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f43f ae5e 	beq.w	800a9ea <_strtod_l+0x72>
 800ad2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad30:	dd78      	ble.n	800ae24 <_strtod_l+0x4ac>
 800ad32:	2b16      	cmp	r3, #22
 800ad34:	dc5f      	bgt.n	800adf6 <_strtod_l+0x47e>
 800ad36:	4974      	ldr	r1, [pc, #464]	@ (800af08 <_strtod_l+0x590>)
 800ad38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad40:	4652      	mov	r2, sl
 800ad42:	465b      	mov	r3, fp
 800ad44:	f7f5 fc68 	bl	8000618 <__aeabi_dmul>
 800ad48:	4682      	mov	sl, r0
 800ad4a:	468b      	mov	fp, r1
 800ad4c:	e64d      	b.n	800a9ea <_strtod_l+0x72>
 800ad4e:	4b6e      	ldr	r3, [pc, #440]	@ (800af08 <_strtod_l+0x590>)
 800ad50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad58:	f7f5 fc5e 	bl	8000618 <__aeabi_dmul>
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	9808      	ldr	r0, [sp, #32]
 800ad60:	468b      	mov	fp, r1
 800ad62:	f7f5 fbdf 	bl	8000524 <__aeabi_ui2d>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	4659      	mov	r1, fp
 800ad6e:	f7f5 fa9d 	bl	80002ac <__adddf3>
 800ad72:	2d0f      	cmp	r5, #15
 800ad74:	4682      	mov	sl, r0
 800ad76:	468b      	mov	fp, r1
 800ad78:	ddd5      	ble.n	800ad26 <_strtod_l+0x3ae>
 800ad7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad7c:	1b2c      	subs	r4, r5, r4
 800ad7e:	441c      	add	r4, r3
 800ad80:	2c00      	cmp	r4, #0
 800ad82:	f340 8096 	ble.w	800aeb2 <_strtod_l+0x53a>
 800ad86:	f014 030f 	ands.w	r3, r4, #15
 800ad8a:	d00a      	beq.n	800ada2 <_strtod_l+0x42a>
 800ad8c:	495e      	ldr	r1, [pc, #376]	@ (800af08 <_strtod_l+0x590>)
 800ad8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad92:	4652      	mov	r2, sl
 800ad94:	465b      	mov	r3, fp
 800ad96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad9a:	f7f5 fc3d 	bl	8000618 <__aeabi_dmul>
 800ad9e:	4682      	mov	sl, r0
 800ada0:	468b      	mov	fp, r1
 800ada2:	f034 040f 	bics.w	r4, r4, #15
 800ada6:	d073      	beq.n	800ae90 <_strtod_l+0x518>
 800ada8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800adac:	dd48      	ble.n	800ae40 <_strtod_l+0x4c8>
 800adae:	2400      	movs	r4, #0
 800adb0:	46a0      	mov	r8, r4
 800adb2:	940a      	str	r4, [sp, #40]	@ 0x28
 800adb4:	46a1      	mov	r9, r4
 800adb6:	9a05      	ldr	r2, [sp, #20]
 800adb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800af10 <_strtod_l+0x598>
 800adbc:	2322      	movs	r3, #34	@ 0x22
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	f04f 0a00 	mov.w	sl, #0
 800adc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f43f ae0f 	beq.w	800a9ea <_strtod_l+0x72>
 800adcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adce:	9805      	ldr	r0, [sp, #20]
 800add0:	f7ff f942 	bl	800a058 <_Bfree>
 800add4:	9805      	ldr	r0, [sp, #20]
 800add6:	4649      	mov	r1, r9
 800add8:	f7ff f93e 	bl	800a058 <_Bfree>
 800addc:	9805      	ldr	r0, [sp, #20]
 800adde:	4641      	mov	r1, r8
 800ade0:	f7ff f93a 	bl	800a058 <_Bfree>
 800ade4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ade6:	9805      	ldr	r0, [sp, #20]
 800ade8:	f7ff f936 	bl	800a058 <_Bfree>
 800adec:	9805      	ldr	r0, [sp, #20]
 800adee:	4621      	mov	r1, r4
 800adf0:	f7ff f932 	bl	800a058 <_Bfree>
 800adf4:	e5f9      	b.n	800a9ea <_strtod_l+0x72>
 800adf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800adfc:	4293      	cmp	r3, r2
 800adfe:	dbbc      	blt.n	800ad7a <_strtod_l+0x402>
 800ae00:	4c41      	ldr	r4, [pc, #260]	@ (800af08 <_strtod_l+0x590>)
 800ae02:	f1c5 050f 	rsb	r5, r5, #15
 800ae06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae0a:	4652      	mov	r2, sl
 800ae0c:	465b      	mov	r3, fp
 800ae0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae12:	f7f5 fc01 	bl	8000618 <__aeabi_dmul>
 800ae16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae18:	1b5d      	subs	r5, r3, r5
 800ae1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae22:	e78f      	b.n	800ad44 <_strtod_l+0x3cc>
 800ae24:	3316      	adds	r3, #22
 800ae26:	dba8      	blt.n	800ad7a <_strtod_l+0x402>
 800ae28:	4b37      	ldr	r3, [pc, #220]	@ (800af08 <_strtod_l+0x590>)
 800ae2a:	eba9 0808 	sub.w	r8, r9, r8
 800ae2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae32:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae36:	4650      	mov	r0, sl
 800ae38:	4659      	mov	r1, fp
 800ae3a:	f7f5 fd17 	bl	800086c <__aeabi_ddiv>
 800ae3e:	e783      	b.n	800ad48 <_strtod_l+0x3d0>
 800ae40:	4b32      	ldr	r3, [pc, #200]	@ (800af0c <_strtod_l+0x594>)
 800ae42:	9308      	str	r3, [sp, #32]
 800ae44:	2300      	movs	r3, #0
 800ae46:	1124      	asrs	r4, r4, #4
 800ae48:	4650      	mov	r0, sl
 800ae4a:	4659      	mov	r1, fp
 800ae4c:	461e      	mov	r6, r3
 800ae4e:	2c01      	cmp	r4, #1
 800ae50:	dc21      	bgt.n	800ae96 <_strtod_l+0x51e>
 800ae52:	b10b      	cbz	r3, 800ae58 <_strtod_l+0x4e0>
 800ae54:	4682      	mov	sl, r0
 800ae56:	468b      	mov	fp, r1
 800ae58:	492c      	ldr	r1, [pc, #176]	@ (800af0c <_strtod_l+0x594>)
 800ae5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae62:	4652      	mov	r2, sl
 800ae64:	465b      	mov	r3, fp
 800ae66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae6a:	f7f5 fbd5 	bl	8000618 <__aeabi_dmul>
 800ae6e:	4b28      	ldr	r3, [pc, #160]	@ (800af10 <_strtod_l+0x598>)
 800ae70:	460a      	mov	r2, r1
 800ae72:	400b      	ands	r3, r1
 800ae74:	4927      	ldr	r1, [pc, #156]	@ (800af14 <_strtod_l+0x59c>)
 800ae76:	428b      	cmp	r3, r1
 800ae78:	4682      	mov	sl, r0
 800ae7a:	d898      	bhi.n	800adae <_strtod_l+0x436>
 800ae7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ae80:	428b      	cmp	r3, r1
 800ae82:	bf86      	itte	hi
 800ae84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800af18 <_strtod_l+0x5a0>
 800ae88:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae90:	2300      	movs	r3, #0
 800ae92:	9308      	str	r3, [sp, #32]
 800ae94:	e07a      	b.n	800af8c <_strtod_l+0x614>
 800ae96:	07e2      	lsls	r2, r4, #31
 800ae98:	d505      	bpl.n	800aea6 <_strtod_l+0x52e>
 800ae9a:	9b08      	ldr	r3, [sp, #32]
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 fbba 	bl	8000618 <__aeabi_dmul>
 800aea4:	2301      	movs	r3, #1
 800aea6:	9a08      	ldr	r2, [sp, #32]
 800aea8:	3208      	adds	r2, #8
 800aeaa:	3601      	adds	r6, #1
 800aeac:	1064      	asrs	r4, r4, #1
 800aeae:	9208      	str	r2, [sp, #32]
 800aeb0:	e7cd      	b.n	800ae4e <_strtod_l+0x4d6>
 800aeb2:	d0ed      	beq.n	800ae90 <_strtod_l+0x518>
 800aeb4:	4264      	negs	r4, r4
 800aeb6:	f014 020f 	ands.w	r2, r4, #15
 800aeba:	d00a      	beq.n	800aed2 <_strtod_l+0x55a>
 800aebc:	4b12      	ldr	r3, [pc, #72]	@ (800af08 <_strtod_l+0x590>)
 800aebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aec2:	4650      	mov	r0, sl
 800aec4:	4659      	mov	r1, fp
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	f7f5 fccf 	bl	800086c <__aeabi_ddiv>
 800aece:	4682      	mov	sl, r0
 800aed0:	468b      	mov	fp, r1
 800aed2:	1124      	asrs	r4, r4, #4
 800aed4:	d0dc      	beq.n	800ae90 <_strtod_l+0x518>
 800aed6:	2c1f      	cmp	r4, #31
 800aed8:	dd20      	ble.n	800af1c <_strtod_l+0x5a4>
 800aeda:	2400      	movs	r4, #0
 800aedc:	46a0      	mov	r8, r4
 800aede:	940a      	str	r4, [sp, #40]	@ 0x28
 800aee0:	46a1      	mov	r9, r4
 800aee2:	9a05      	ldr	r2, [sp, #20]
 800aee4:	2322      	movs	r3, #34	@ 0x22
 800aee6:	f04f 0a00 	mov.w	sl, #0
 800aeea:	f04f 0b00 	mov.w	fp, #0
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	e768      	b.n	800adc4 <_strtod_l+0x44c>
 800aef2:	bf00      	nop
 800aef4:	0800c86a 	.word	0x0800c86a
 800aef8:	0800ca7c 	.word	0x0800ca7c
 800aefc:	0800c862 	.word	0x0800c862
 800af00:	0800c899 	.word	0x0800c899
 800af04:	0800cb24 	.word	0x0800cb24
 800af08:	0800c9b0 	.word	0x0800c9b0
 800af0c:	0800c988 	.word	0x0800c988
 800af10:	7ff00000 	.word	0x7ff00000
 800af14:	7ca00000 	.word	0x7ca00000
 800af18:	7fefffff 	.word	0x7fefffff
 800af1c:	f014 0310 	ands.w	r3, r4, #16
 800af20:	bf18      	it	ne
 800af22:	236a      	movne	r3, #106	@ 0x6a
 800af24:	4ea9      	ldr	r6, [pc, #676]	@ (800b1cc <_strtod_l+0x854>)
 800af26:	9308      	str	r3, [sp, #32]
 800af28:	4650      	mov	r0, sl
 800af2a:	4659      	mov	r1, fp
 800af2c:	2300      	movs	r3, #0
 800af2e:	07e2      	lsls	r2, r4, #31
 800af30:	d504      	bpl.n	800af3c <_strtod_l+0x5c4>
 800af32:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af36:	f7f5 fb6f 	bl	8000618 <__aeabi_dmul>
 800af3a:	2301      	movs	r3, #1
 800af3c:	1064      	asrs	r4, r4, #1
 800af3e:	f106 0608 	add.w	r6, r6, #8
 800af42:	d1f4      	bne.n	800af2e <_strtod_l+0x5b6>
 800af44:	b10b      	cbz	r3, 800af4a <_strtod_l+0x5d2>
 800af46:	4682      	mov	sl, r0
 800af48:	468b      	mov	fp, r1
 800af4a:	9b08      	ldr	r3, [sp, #32]
 800af4c:	b1b3      	cbz	r3, 800af7c <_strtod_l+0x604>
 800af4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af56:	2b00      	cmp	r3, #0
 800af58:	4659      	mov	r1, fp
 800af5a:	dd0f      	ble.n	800af7c <_strtod_l+0x604>
 800af5c:	2b1f      	cmp	r3, #31
 800af5e:	dd55      	ble.n	800b00c <_strtod_l+0x694>
 800af60:	2b34      	cmp	r3, #52	@ 0x34
 800af62:	bfde      	ittt	le
 800af64:	f04f 33ff 	movle.w	r3, #4294967295
 800af68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af6c:	4093      	lslle	r3, r2
 800af6e:	f04f 0a00 	mov.w	sl, #0
 800af72:	bfcc      	ite	gt
 800af74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af78:	ea03 0b01 	andle.w	fp, r3, r1
 800af7c:	2200      	movs	r2, #0
 800af7e:	2300      	movs	r3, #0
 800af80:	4650      	mov	r0, sl
 800af82:	4659      	mov	r1, fp
 800af84:	f7f5 fdb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d1a6      	bne.n	800aeda <_strtod_l+0x562>
 800af8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af92:	9805      	ldr	r0, [sp, #20]
 800af94:	462b      	mov	r3, r5
 800af96:	463a      	mov	r2, r7
 800af98:	f7ff f8c6 	bl	800a128 <__s2b>
 800af9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f43f af05 	beq.w	800adae <_strtod_l+0x436>
 800afa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	eba9 0308 	sub.w	r3, r9, r8
 800afac:	bfa8      	it	ge
 800afae:	2300      	movge	r3, #0
 800afb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800afb2:	2400      	movs	r4, #0
 800afb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800afb8:	9316      	str	r3, [sp, #88]	@ 0x58
 800afba:	46a0      	mov	r8, r4
 800afbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afbe:	9805      	ldr	r0, [sp, #20]
 800afc0:	6859      	ldr	r1, [r3, #4]
 800afc2:	f7ff f809 	bl	8009fd8 <_Balloc>
 800afc6:	4681      	mov	r9, r0
 800afc8:	2800      	cmp	r0, #0
 800afca:	f43f aef4 	beq.w	800adb6 <_strtod_l+0x43e>
 800afce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afd0:	691a      	ldr	r2, [r3, #16]
 800afd2:	3202      	adds	r2, #2
 800afd4:	f103 010c 	add.w	r1, r3, #12
 800afd8:	0092      	lsls	r2, r2, #2
 800afda:	300c      	adds	r0, #12
 800afdc:	f000 fcf6 	bl	800b9cc <memcpy>
 800afe0:	ec4b ab10 	vmov	d0, sl, fp
 800afe4:	9805      	ldr	r0, [sp, #20]
 800afe6:	aa1c      	add	r2, sp, #112	@ 0x70
 800afe8:	a91b      	add	r1, sp, #108	@ 0x6c
 800afea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800afee:	f7ff fbd7 	bl	800a7a0 <__d2b>
 800aff2:	901a      	str	r0, [sp, #104]	@ 0x68
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f43f aede 	beq.w	800adb6 <_strtod_l+0x43e>
 800affa:	9805      	ldr	r0, [sp, #20]
 800affc:	2101      	movs	r1, #1
 800affe:	f7ff f929 	bl	800a254 <__i2b>
 800b002:	4680      	mov	r8, r0
 800b004:	b948      	cbnz	r0, 800b01a <_strtod_l+0x6a2>
 800b006:	f04f 0800 	mov.w	r8, #0
 800b00a:	e6d4      	b.n	800adb6 <_strtod_l+0x43e>
 800b00c:	f04f 32ff 	mov.w	r2, #4294967295
 800b010:	fa02 f303 	lsl.w	r3, r2, r3
 800b014:	ea03 0a0a 	and.w	sl, r3, sl
 800b018:	e7b0      	b.n	800af7c <_strtod_l+0x604>
 800b01a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b01c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b01e:	2d00      	cmp	r5, #0
 800b020:	bfab      	itete	ge
 800b022:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b024:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b026:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b028:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b02a:	bfac      	ite	ge
 800b02c:	18ef      	addge	r7, r5, r3
 800b02e:	1b5e      	sublt	r6, r3, r5
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	1aed      	subs	r5, r5, r3
 800b034:	4415      	add	r5, r2
 800b036:	4b66      	ldr	r3, [pc, #408]	@ (800b1d0 <_strtod_l+0x858>)
 800b038:	3d01      	subs	r5, #1
 800b03a:	429d      	cmp	r5, r3
 800b03c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b040:	da50      	bge.n	800b0e4 <_strtod_l+0x76c>
 800b042:	1b5b      	subs	r3, r3, r5
 800b044:	2b1f      	cmp	r3, #31
 800b046:	eba2 0203 	sub.w	r2, r2, r3
 800b04a:	f04f 0101 	mov.w	r1, #1
 800b04e:	dc3d      	bgt.n	800b0cc <_strtod_l+0x754>
 800b050:	fa01 f303 	lsl.w	r3, r1, r3
 800b054:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b056:	2300      	movs	r3, #0
 800b058:	9310      	str	r3, [sp, #64]	@ 0x40
 800b05a:	18bd      	adds	r5, r7, r2
 800b05c:	9b08      	ldr	r3, [sp, #32]
 800b05e:	42af      	cmp	r7, r5
 800b060:	4416      	add	r6, r2
 800b062:	441e      	add	r6, r3
 800b064:	463b      	mov	r3, r7
 800b066:	bfa8      	it	ge
 800b068:	462b      	movge	r3, r5
 800b06a:	42b3      	cmp	r3, r6
 800b06c:	bfa8      	it	ge
 800b06e:	4633      	movge	r3, r6
 800b070:	2b00      	cmp	r3, #0
 800b072:	bfc2      	ittt	gt
 800b074:	1aed      	subgt	r5, r5, r3
 800b076:	1af6      	subgt	r6, r6, r3
 800b078:	1aff      	subgt	r7, r7, r3
 800b07a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dd16      	ble.n	800b0ae <_strtod_l+0x736>
 800b080:	4641      	mov	r1, r8
 800b082:	9805      	ldr	r0, [sp, #20]
 800b084:	461a      	mov	r2, r3
 800b086:	f7ff f9a5 	bl	800a3d4 <__pow5mult>
 800b08a:	4680      	mov	r8, r0
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d0ba      	beq.n	800b006 <_strtod_l+0x68e>
 800b090:	4601      	mov	r1, r0
 800b092:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b094:	9805      	ldr	r0, [sp, #20]
 800b096:	f7ff f8f3 	bl	800a280 <__multiply>
 800b09a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b09c:	2800      	cmp	r0, #0
 800b09e:	f43f ae8a 	beq.w	800adb6 <_strtod_l+0x43e>
 800b0a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0a4:	9805      	ldr	r0, [sp, #20]
 800b0a6:	f7fe ffd7 	bl	800a058 <_Bfree>
 800b0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	dc1d      	bgt.n	800b0ee <_strtod_l+0x776>
 800b0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd23      	ble.n	800b100 <_strtod_l+0x788>
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0bc:	9805      	ldr	r0, [sp, #20]
 800b0be:	f7ff f989 	bl	800a3d4 <__pow5mult>
 800b0c2:	4681      	mov	r9, r0
 800b0c4:	b9e0      	cbnz	r0, 800b100 <_strtod_l+0x788>
 800b0c6:	f04f 0900 	mov.w	r9, #0
 800b0ca:	e674      	b.n	800adb6 <_strtod_l+0x43e>
 800b0cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b0d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b0d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b0d8:	35e2      	adds	r5, #226	@ 0xe2
 800b0da:	fa01 f305 	lsl.w	r3, r1, r5
 800b0de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b0e2:	e7ba      	b.n	800b05a <_strtod_l+0x6e2>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0ec:	e7b5      	b.n	800b05a <_strtod_l+0x6e2>
 800b0ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0f0:	9805      	ldr	r0, [sp, #20]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	f7ff f9c8 	bl	800a488 <__lshift>
 800b0f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d1d9      	bne.n	800b0b2 <_strtod_l+0x73a>
 800b0fe:	e65a      	b.n	800adb6 <_strtod_l+0x43e>
 800b100:	2e00      	cmp	r6, #0
 800b102:	dd07      	ble.n	800b114 <_strtod_l+0x79c>
 800b104:	4649      	mov	r1, r9
 800b106:	9805      	ldr	r0, [sp, #20]
 800b108:	4632      	mov	r2, r6
 800b10a:	f7ff f9bd 	bl	800a488 <__lshift>
 800b10e:	4681      	mov	r9, r0
 800b110:	2800      	cmp	r0, #0
 800b112:	d0d8      	beq.n	800b0c6 <_strtod_l+0x74e>
 800b114:	2f00      	cmp	r7, #0
 800b116:	dd08      	ble.n	800b12a <_strtod_l+0x7b2>
 800b118:	4641      	mov	r1, r8
 800b11a:	9805      	ldr	r0, [sp, #20]
 800b11c:	463a      	mov	r2, r7
 800b11e:	f7ff f9b3 	bl	800a488 <__lshift>
 800b122:	4680      	mov	r8, r0
 800b124:	2800      	cmp	r0, #0
 800b126:	f43f ae46 	beq.w	800adb6 <_strtod_l+0x43e>
 800b12a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b12c:	9805      	ldr	r0, [sp, #20]
 800b12e:	464a      	mov	r2, r9
 800b130:	f7ff fa32 	bl	800a598 <__mdiff>
 800b134:	4604      	mov	r4, r0
 800b136:	2800      	cmp	r0, #0
 800b138:	f43f ae3d 	beq.w	800adb6 <_strtod_l+0x43e>
 800b13c:	68c3      	ldr	r3, [r0, #12]
 800b13e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b140:	2300      	movs	r3, #0
 800b142:	60c3      	str	r3, [r0, #12]
 800b144:	4641      	mov	r1, r8
 800b146:	f7ff fa0b 	bl	800a560 <__mcmp>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	da46      	bge.n	800b1dc <_strtod_l+0x864>
 800b14e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b150:	ea53 030a 	orrs.w	r3, r3, sl
 800b154:	d16c      	bne.n	800b230 <_strtod_l+0x8b8>
 800b156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d168      	bne.n	800b230 <_strtod_l+0x8b8>
 800b15e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b162:	0d1b      	lsrs	r3, r3, #20
 800b164:	051b      	lsls	r3, r3, #20
 800b166:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b16a:	d961      	bls.n	800b230 <_strtod_l+0x8b8>
 800b16c:	6963      	ldr	r3, [r4, #20]
 800b16e:	b913      	cbnz	r3, 800b176 <_strtod_l+0x7fe>
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	2b01      	cmp	r3, #1
 800b174:	dd5c      	ble.n	800b230 <_strtod_l+0x8b8>
 800b176:	4621      	mov	r1, r4
 800b178:	2201      	movs	r2, #1
 800b17a:	9805      	ldr	r0, [sp, #20]
 800b17c:	f7ff f984 	bl	800a488 <__lshift>
 800b180:	4641      	mov	r1, r8
 800b182:	4604      	mov	r4, r0
 800b184:	f7ff f9ec 	bl	800a560 <__mcmp>
 800b188:	2800      	cmp	r0, #0
 800b18a:	dd51      	ble.n	800b230 <_strtod_l+0x8b8>
 800b18c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b190:	9a08      	ldr	r2, [sp, #32]
 800b192:	0d1b      	lsrs	r3, r3, #20
 800b194:	051b      	lsls	r3, r3, #20
 800b196:	2a00      	cmp	r2, #0
 800b198:	d06b      	beq.n	800b272 <_strtod_l+0x8fa>
 800b19a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b19e:	d868      	bhi.n	800b272 <_strtod_l+0x8fa>
 800b1a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1a4:	f67f ae9d 	bls.w	800aee2 <_strtod_l+0x56a>
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <_strtod_l+0x85c>)
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	4659      	mov	r1, fp
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f7f5 fa32 	bl	8000618 <__aeabi_dmul>
 800b1b4:	4b08      	ldr	r3, [pc, #32]	@ (800b1d8 <_strtod_l+0x860>)
 800b1b6:	400b      	ands	r3, r1
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	468b      	mov	fp, r1
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f47f ae05 	bne.w	800adcc <_strtod_l+0x454>
 800b1c2:	9a05      	ldr	r2, [sp, #20]
 800b1c4:	2322      	movs	r3, #34	@ 0x22
 800b1c6:	6013      	str	r3, [r2, #0]
 800b1c8:	e600      	b.n	800adcc <_strtod_l+0x454>
 800b1ca:	bf00      	nop
 800b1cc:	0800caa8 	.word	0x0800caa8
 800b1d0:	fffffc02 	.word	0xfffffc02
 800b1d4:	39500000 	.word	0x39500000
 800b1d8:	7ff00000 	.word	0x7ff00000
 800b1dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b1e0:	d165      	bne.n	800b2ae <_strtod_l+0x936>
 800b1e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b1e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1e8:	b35a      	cbz	r2, 800b242 <_strtod_l+0x8ca>
 800b1ea:	4a9f      	ldr	r2, [pc, #636]	@ (800b468 <_strtod_l+0xaf0>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d12b      	bne.n	800b248 <_strtod_l+0x8d0>
 800b1f0:	9b08      	ldr	r3, [sp, #32]
 800b1f2:	4651      	mov	r1, sl
 800b1f4:	b303      	cbz	r3, 800b238 <_strtod_l+0x8c0>
 800b1f6:	4b9d      	ldr	r3, [pc, #628]	@ (800b46c <_strtod_l+0xaf4>)
 800b1f8:	465a      	mov	r2, fp
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b200:	f04f 32ff 	mov.w	r2, #4294967295
 800b204:	d81b      	bhi.n	800b23e <_strtod_l+0x8c6>
 800b206:	0d1b      	lsrs	r3, r3, #20
 800b208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b20c:	fa02 f303 	lsl.w	r3, r2, r3
 800b210:	4299      	cmp	r1, r3
 800b212:	d119      	bne.n	800b248 <_strtod_l+0x8d0>
 800b214:	4b96      	ldr	r3, [pc, #600]	@ (800b470 <_strtod_l+0xaf8>)
 800b216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b218:	429a      	cmp	r2, r3
 800b21a:	d102      	bne.n	800b222 <_strtod_l+0x8aa>
 800b21c:	3101      	adds	r1, #1
 800b21e:	f43f adca 	beq.w	800adb6 <_strtod_l+0x43e>
 800b222:	4b92      	ldr	r3, [pc, #584]	@ (800b46c <_strtod_l+0xaf4>)
 800b224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b226:	401a      	ands	r2, r3
 800b228:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b22c:	f04f 0a00 	mov.w	sl, #0
 800b230:	9b08      	ldr	r3, [sp, #32]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1b8      	bne.n	800b1a8 <_strtod_l+0x830>
 800b236:	e5c9      	b.n	800adcc <_strtod_l+0x454>
 800b238:	f04f 33ff 	mov.w	r3, #4294967295
 800b23c:	e7e8      	b.n	800b210 <_strtod_l+0x898>
 800b23e:	4613      	mov	r3, r2
 800b240:	e7e6      	b.n	800b210 <_strtod_l+0x898>
 800b242:	ea53 030a 	orrs.w	r3, r3, sl
 800b246:	d0a1      	beq.n	800b18c <_strtod_l+0x814>
 800b248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b24a:	b1db      	cbz	r3, 800b284 <_strtod_l+0x90c>
 800b24c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b24e:	4213      	tst	r3, r2
 800b250:	d0ee      	beq.n	800b230 <_strtod_l+0x8b8>
 800b252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b254:	9a08      	ldr	r2, [sp, #32]
 800b256:	4650      	mov	r0, sl
 800b258:	4659      	mov	r1, fp
 800b25a:	b1bb      	cbz	r3, 800b28c <_strtod_l+0x914>
 800b25c:	f7ff fb6e 	bl	800a93c <sulp>
 800b260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b264:	ec53 2b10 	vmov	r2, r3, d0
 800b268:	f7f5 f820 	bl	80002ac <__adddf3>
 800b26c:	4682      	mov	sl, r0
 800b26e:	468b      	mov	fp, r1
 800b270:	e7de      	b.n	800b230 <_strtod_l+0x8b8>
 800b272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b27a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b27e:	f04f 3aff 	mov.w	sl, #4294967295
 800b282:	e7d5      	b.n	800b230 <_strtod_l+0x8b8>
 800b284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b286:	ea13 0f0a 	tst.w	r3, sl
 800b28a:	e7e1      	b.n	800b250 <_strtod_l+0x8d8>
 800b28c:	f7ff fb56 	bl	800a93c <sulp>
 800b290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b294:	ec53 2b10 	vmov	r2, r3, d0
 800b298:	f7f5 f806 	bl	80002a8 <__aeabi_dsub>
 800b29c:	2200      	movs	r2, #0
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	468b      	mov	fp, r1
 800b2a4:	f7f5 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d0c1      	beq.n	800b230 <_strtod_l+0x8b8>
 800b2ac:	e619      	b.n	800aee2 <_strtod_l+0x56a>
 800b2ae:	4641      	mov	r1, r8
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f7ff facd 	bl	800a850 <__ratio>
 800b2b6:	ec57 6b10 	vmov	r6, r7, d0
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	f7f5 fc24 	bl	8000b10 <__aeabi_dcmple>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d06f      	beq.n	800b3ac <_strtod_l+0xa34>
 800b2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d17a      	bne.n	800b3c8 <_strtod_l+0xa50>
 800b2d2:	f1ba 0f00 	cmp.w	sl, #0
 800b2d6:	d158      	bne.n	800b38a <_strtod_l+0xa12>
 800b2d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d15a      	bne.n	800b398 <_strtod_l+0xa20>
 800b2e2:	4b64      	ldr	r3, [pc, #400]	@ (800b474 <_strtod_l+0xafc>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	f7f5 fc07 	bl	8000afc <__aeabi_dcmplt>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d159      	bne.n	800b3a6 <_strtod_l+0xa2e>
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	4b60      	ldr	r3, [pc, #384]	@ (800b478 <_strtod_l+0xb00>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f7f5 f98d 	bl	8000618 <__aeabi_dmul>
 800b2fe:	4606      	mov	r6, r0
 800b300:	460f      	mov	r7, r1
 800b302:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b306:	9606      	str	r6, [sp, #24]
 800b308:	9307      	str	r3, [sp, #28]
 800b30a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b30e:	4d57      	ldr	r5, [pc, #348]	@ (800b46c <_strtod_l+0xaf4>)
 800b310:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b316:	401d      	ands	r5, r3
 800b318:	4b58      	ldr	r3, [pc, #352]	@ (800b47c <_strtod_l+0xb04>)
 800b31a:	429d      	cmp	r5, r3
 800b31c:	f040 80b2 	bne.w	800b484 <_strtod_l+0xb0c>
 800b320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b322:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b326:	ec4b ab10 	vmov	d0, sl, fp
 800b32a:	f7ff f9c9 	bl	800a6c0 <__ulp>
 800b32e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b332:	ec51 0b10 	vmov	r0, r1, d0
 800b336:	f7f5 f96f 	bl	8000618 <__aeabi_dmul>
 800b33a:	4652      	mov	r2, sl
 800b33c:	465b      	mov	r3, fp
 800b33e:	f7f4 ffb5 	bl	80002ac <__adddf3>
 800b342:	460b      	mov	r3, r1
 800b344:	4949      	ldr	r1, [pc, #292]	@ (800b46c <_strtod_l+0xaf4>)
 800b346:	4a4e      	ldr	r2, [pc, #312]	@ (800b480 <_strtod_l+0xb08>)
 800b348:	4019      	ands	r1, r3
 800b34a:	4291      	cmp	r1, r2
 800b34c:	4682      	mov	sl, r0
 800b34e:	d942      	bls.n	800b3d6 <_strtod_l+0xa5e>
 800b350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b352:	4b47      	ldr	r3, [pc, #284]	@ (800b470 <_strtod_l+0xaf8>)
 800b354:	429a      	cmp	r2, r3
 800b356:	d103      	bne.n	800b360 <_strtod_l+0x9e8>
 800b358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b35a:	3301      	adds	r3, #1
 800b35c:	f43f ad2b 	beq.w	800adb6 <_strtod_l+0x43e>
 800b360:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b470 <_strtod_l+0xaf8>
 800b364:	f04f 3aff 	mov.w	sl, #4294967295
 800b368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b36a:	9805      	ldr	r0, [sp, #20]
 800b36c:	f7fe fe74 	bl	800a058 <_Bfree>
 800b370:	9805      	ldr	r0, [sp, #20]
 800b372:	4649      	mov	r1, r9
 800b374:	f7fe fe70 	bl	800a058 <_Bfree>
 800b378:	9805      	ldr	r0, [sp, #20]
 800b37a:	4641      	mov	r1, r8
 800b37c:	f7fe fe6c 	bl	800a058 <_Bfree>
 800b380:	9805      	ldr	r0, [sp, #20]
 800b382:	4621      	mov	r1, r4
 800b384:	f7fe fe68 	bl	800a058 <_Bfree>
 800b388:	e618      	b.n	800afbc <_strtod_l+0x644>
 800b38a:	f1ba 0f01 	cmp.w	sl, #1
 800b38e:	d103      	bne.n	800b398 <_strtod_l+0xa20>
 800b390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b392:	2b00      	cmp	r3, #0
 800b394:	f43f ada5 	beq.w	800aee2 <_strtod_l+0x56a>
 800b398:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b448 <_strtod_l+0xad0>
 800b39c:	4f35      	ldr	r7, [pc, #212]	@ (800b474 <_strtod_l+0xafc>)
 800b39e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3a2:	2600      	movs	r6, #0
 800b3a4:	e7b1      	b.n	800b30a <_strtod_l+0x992>
 800b3a6:	4f34      	ldr	r7, [pc, #208]	@ (800b478 <_strtod_l+0xb00>)
 800b3a8:	2600      	movs	r6, #0
 800b3aa:	e7aa      	b.n	800b302 <_strtod_l+0x98a>
 800b3ac:	4b32      	ldr	r3, [pc, #200]	@ (800b478 <_strtod_l+0xb00>)
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f7f5 f930 	bl	8000618 <__aeabi_dmul>
 800b3b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d09f      	beq.n	800b302 <_strtod_l+0x98a>
 800b3c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3c6:	e7a0      	b.n	800b30a <_strtod_l+0x992>
 800b3c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b450 <_strtod_l+0xad8>
 800b3cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3d0:	ec57 6b17 	vmov	r6, r7, d7
 800b3d4:	e799      	b.n	800b30a <_strtod_l+0x992>
 800b3d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b3da:	9b08      	ldr	r3, [sp, #32]
 800b3dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1c1      	bne.n	800b368 <_strtod_l+0x9f0>
 800b3e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3e8:	0d1b      	lsrs	r3, r3, #20
 800b3ea:	051b      	lsls	r3, r3, #20
 800b3ec:	429d      	cmp	r5, r3
 800b3ee:	d1bb      	bne.n	800b368 <_strtod_l+0x9f0>
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	f7f5 fc70 	bl	8000cd8 <__aeabi_d2lz>
 800b3f8:	f7f5 f8e0 	bl	80005bc <__aeabi_l2d>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4630      	mov	r0, r6
 800b402:	4639      	mov	r1, r7
 800b404:	f7f4 ff50 	bl	80002a8 <__aeabi_dsub>
 800b408:	460b      	mov	r3, r1
 800b40a:	4602      	mov	r2, r0
 800b40c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b410:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b416:	ea46 060a 	orr.w	r6, r6, sl
 800b41a:	431e      	orrs	r6, r3
 800b41c:	d06f      	beq.n	800b4fe <_strtod_l+0xb86>
 800b41e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b458 <_strtod_l+0xae0>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f5 fb6a 	bl	8000afc <__aeabi_dcmplt>
 800b428:	2800      	cmp	r0, #0
 800b42a:	f47f accf 	bne.w	800adcc <_strtod_l+0x454>
 800b42e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b460 <_strtod_l+0xae8>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b438:	f7f5 fb7e 	bl	8000b38 <__aeabi_dcmpgt>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d093      	beq.n	800b368 <_strtod_l+0x9f0>
 800b440:	e4c4      	b.n	800adcc <_strtod_l+0x454>
 800b442:	bf00      	nop
 800b444:	f3af 8000 	nop.w
 800b448:	00000000 	.word	0x00000000
 800b44c:	bff00000 	.word	0xbff00000
 800b450:	00000000 	.word	0x00000000
 800b454:	3ff00000 	.word	0x3ff00000
 800b458:	94a03595 	.word	0x94a03595
 800b45c:	3fdfffff 	.word	0x3fdfffff
 800b460:	35afe535 	.word	0x35afe535
 800b464:	3fe00000 	.word	0x3fe00000
 800b468:	000fffff 	.word	0x000fffff
 800b46c:	7ff00000 	.word	0x7ff00000
 800b470:	7fefffff 	.word	0x7fefffff
 800b474:	3ff00000 	.word	0x3ff00000
 800b478:	3fe00000 	.word	0x3fe00000
 800b47c:	7fe00000 	.word	0x7fe00000
 800b480:	7c9fffff 	.word	0x7c9fffff
 800b484:	9b08      	ldr	r3, [sp, #32]
 800b486:	b323      	cbz	r3, 800b4d2 <_strtod_l+0xb5a>
 800b488:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b48c:	d821      	bhi.n	800b4d2 <_strtod_l+0xb5a>
 800b48e:	a328      	add	r3, pc, #160	@ (adr r3, 800b530 <_strtod_l+0xbb8>)
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	4630      	mov	r0, r6
 800b496:	4639      	mov	r1, r7
 800b498:	f7f5 fb3a 	bl	8000b10 <__aeabi_dcmple>
 800b49c:	b1a0      	cbz	r0, 800b4c8 <_strtod_l+0xb50>
 800b49e:	4639      	mov	r1, r7
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f7f5 fb91 	bl	8000bc8 <__aeabi_d2uiz>
 800b4a6:	2801      	cmp	r0, #1
 800b4a8:	bf38      	it	cc
 800b4aa:	2001      	movcc	r0, #1
 800b4ac:	f7f5 f83a 	bl	8000524 <__aeabi_ui2d>
 800b4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	b9fb      	cbnz	r3, 800b4f8 <_strtod_l+0xb80>
 800b4b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b4be:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b4c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b4ce:	1b5b      	subs	r3, r3, r5
 800b4d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b4da:	f7ff f8f1 	bl	800a6c0 <__ulp>
 800b4de:	4650      	mov	r0, sl
 800b4e0:	ec53 2b10 	vmov	r2, r3, d0
 800b4e4:	4659      	mov	r1, fp
 800b4e6:	f7f5 f897 	bl	8000618 <__aeabi_dmul>
 800b4ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b4ee:	f7f4 fedd 	bl	80002ac <__adddf3>
 800b4f2:	4682      	mov	sl, r0
 800b4f4:	468b      	mov	fp, r1
 800b4f6:	e770      	b.n	800b3da <_strtod_l+0xa62>
 800b4f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b4fc:	e7e0      	b.n	800b4c0 <_strtod_l+0xb48>
 800b4fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800b538 <_strtod_l+0xbc0>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f7f5 fafa 	bl	8000afc <__aeabi_dcmplt>
 800b508:	e798      	b.n	800b43c <_strtod_l+0xac4>
 800b50a:	2300      	movs	r3, #0
 800b50c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b50e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	f7ff ba6d 	b.w	800a9f2 <_strtod_l+0x7a>
 800b518:	2a65      	cmp	r2, #101	@ 0x65
 800b51a:	f43f ab66 	beq.w	800abea <_strtod_l+0x272>
 800b51e:	2a45      	cmp	r2, #69	@ 0x45
 800b520:	f43f ab63 	beq.w	800abea <_strtod_l+0x272>
 800b524:	2301      	movs	r3, #1
 800b526:	f7ff bb9e 	b.w	800ac66 <_strtod_l+0x2ee>
 800b52a:	bf00      	nop
 800b52c:	f3af 8000 	nop.w
 800b530:	ffc00000 	.word	0xffc00000
 800b534:	41dfffff 	.word	0x41dfffff
 800b538:	94a03595 	.word	0x94a03595
 800b53c:	3fcfffff 	.word	0x3fcfffff

0800b540 <_strtod_r>:
 800b540:	4b01      	ldr	r3, [pc, #4]	@ (800b548 <_strtod_r+0x8>)
 800b542:	f7ff ba19 	b.w	800a978 <_strtod_l>
 800b546:	bf00      	nop
 800b548:	20000068 	.word	0x20000068

0800b54c <__ssputs_r>:
 800b54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b550:	688e      	ldr	r6, [r1, #8]
 800b552:	461f      	mov	r7, r3
 800b554:	42be      	cmp	r6, r7
 800b556:	680b      	ldr	r3, [r1, #0]
 800b558:	4682      	mov	sl, r0
 800b55a:	460c      	mov	r4, r1
 800b55c:	4690      	mov	r8, r2
 800b55e:	d82d      	bhi.n	800b5bc <__ssputs_r+0x70>
 800b560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b568:	d026      	beq.n	800b5b8 <__ssputs_r+0x6c>
 800b56a:	6965      	ldr	r5, [r4, #20]
 800b56c:	6909      	ldr	r1, [r1, #16]
 800b56e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b572:	eba3 0901 	sub.w	r9, r3, r1
 800b576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b57a:	1c7b      	adds	r3, r7, #1
 800b57c:	444b      	add	r3, r9
 800b57e:	106d      	asrs	r5, r5, #1
 800b580:	429d      	cmp	r5, r3
 800b582:	bf38      	it	cc
 800b584:	461d      	movcc	r5, r3
 800b586:	0553      	lsls	r3, r2, #21
 800b588:	d527      	bpl.n	800b5da <__ssputs_r+0x8e>
 800b58a:	4629      	mov	r1, r5
 800b58c:	f7fe fc98 	bl	8009ec0 <_malloc_r>
 800b590:	4606      	mov	r6, r0
 800b592:	b360      	cbz	r0, 800b5ee <__ssputs_r+0xa2>
 800b594:	6921      	ldr	r1, [r4, #16]
 800b596:	464a      	mov	r2, r9
 800b598:	f000 fa18 	bl	800b9cc <memcpy>
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	6126      	str	r6, [r4, #16]
 800b5aa:	6165      	str	r5, [r4, #20]
 800b5ac:	444e      	add	r6, r9
 800b5ae:	eba5 0509 	sub.w	r5, r5, r9
 800b5b2:	6026      	str	r6, [r4, #0]
 800b5b4:	60a5      	str	r5, [r4, #8]
 800b5b6:	463e      	mov	r6, r7
 800b5b8:	42be      	cmp	r6, r7
 800b5ba:	d900      	bls.n	800b5be <__ssputs_r+0x72>
 800b5bc:	463e      	mov	r6, r7
 800b5be:	6820      	ldr	r0, [r4, #0]
 800b5c0:	4632      	mov	r2, r6
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	f000 f9c6 	bl	800b954 <memmove>
 800b5c8:	68a3      	ldr	r3, [r4, #8]
 800b5ca:	1b9b      	subs	r3, r3, r6
 800b5cc:	60a3      	str	r3, [r4, #8]
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	4433      	add	r3, r6
 800b5d2:	6023      	str	r3, [r4, #0]
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	462a      	mov	r2, r5
 800b5dc:	f000 fd89 	bl	800c0f2 <_realloc_r>
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d1e0      	bne.n	800b5a8 <__ssputs_r+0x5c>
 800b5e6:	6921      	ldr	r1, [r4, #16]
 800b5e8:	4650      	mov	r0, sl
 800b5ea:	f7fe fbf5 	bl	8009dd8 <_free_r>
 800b5ee:	230c      	movs	r3, #12
 800b5f0:	f8ca 3000 	str.w	r3, [sl]
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	e7e9      	b.n	800b5d6 <__ssputs_r+0x8a>
	...

0800b604 <_svfiprintf_r>:
 800b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	4698      	mov	r8, r3
 800b60a:	898b      	ldrh	r3, [r1, #12]
 800b60c:	061b      	lsls	r3, r3, #24
 800b60e:	b09d      	sub	sp, #116	@ 0x74
 800b610:	4607      	mov	r7, r0
 800b612:	460d      	mov	r5, r1
 800b614:	4614      	mov	r4, r2
 800b616:	d510      	bpl.n	800b63a <_svfiprintf_r+0x36>
 800b618:	690b      	ldr	r3, [r1, #16]
 800b61a:	b973      	cbnz	r3, 800b63a <_svfiprintf_r+0x36>
 800b61c:	2140      	movs	r1, #64	@ 0x40
 800b61e:	f7fe fc4f 	bl	8009ec0 <_malloc_r>
 800b622:	6028      	str	r0, [r5, #0]
 800b624:	6128      	str	r0, [r5, #16]
 800b626:	b930      	cbnz	r0, 800b636 <_svfiprintf_r+0x32>
 800b628:	230c      	movs	r3, #12
 800b62a:	603b      	str	r3, [r7, #0]
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	b01d      	add	sp, #116	@ 0x74
 800b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b636:	2340      	movs	r3, #64	@ 0x40
 800b638:	616b      	str	r3, [r5, #20]
 800b63a:	2300      	movs	r3, #0
 800b63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b63e:	2320      	movs	r3, #32
 800b640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b644:	f8cd 800c 	str.w	r8, [sp, #12]
 800b648:	2330      	movs	r3, #48	@ 0x30
 800b64a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7e8 <_svfiprintf_r+0x1e4>
 800b64e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b652:	f04f 0901 	mov.w	r9, #1
 800b656:	4623      	mov	r3, r4
 800b658:	469a      	mov	sl, r3
 800b65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b65e:	b10a      	cbz	r2, 800b664 <_svfiprintf_r+0x60>
 800b660:	2a25      	cmp	r2, #37	@ 0x25
 800b662:	d1f9      	bne.n	800b658 <_svfiprintf_r+0x54>
 800b664:	ebba 0b04 	subs.w	fp, sl, r4
 800b668:	d00b      	beq.n	800b682 <_svfiprintf_r+0x7e>
 800b66a:	465b      	mov	r3, fp
 800b66c:	4622      	mov	r2, r4
 800b66e:	4629      	mov	r1, r5
 800b670:	4638      	mov	r0, r7
 800b672:	f7ff ff6b 	bl	800b54c <__ssputs_r>
 800b676:	3001      	adds	r0, #1
 800b678:	f000 80a7 	beq.w	800b7ca <_svfiprintf_r+0x1c6>
 800b67c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b67e:	445a      	add	r2, fp
 800b680:	9209      	str	r2, [sp, #36]	@ 0x24
 800b682:	f89a 3000 	ldrb.w	r3, [sl]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 809f 	beq.w	800b7ca <_svfiprintf_r+0x1c6>
 800b68c:	2300      	movs	r3, #0
 800b68e:	f04f 32ff 	mov.w	r2, #4294967295
 800b692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b696:	f10a 0a01 	add.w	sl, sl, #1
 800b69a:	9304      	str	r3, [sp, #16]
 800b69c:	9307      	str	r3, [sp, #28]
 800b69e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6a4:	4654      	mov	r4, sl
 800b6a6:	2205      	movs	r2, #5
 800b6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ac:	484e      	ldr	r0, [pc, #312]	@ (800b7e8 <_svfiprintf_r+0x1e4>)
 800b6ae:	f7f4 fd9f 	bl	80001f0 <memchr>
 800b6b2:	9a04      	ldr	r2, [sp, #16]
 800b6b4:	b9d8      	cbnz	r0, 800b6ee <_svfiprintf_r+0xea>
 800b6b6:	06d0      	lsls	r0, r2, #27
 800b6b8:	bf44      	itt	mi
 800b6ba:	2320      	movmi	r3, #32
 800b6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6c0:	0711      	lsls	r1, r2, #28
 800b6c2:	bf44      	itt	mi
 800b6c4:	232b      	movmi	r3, #43	@ 0x2b
 800b6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6d0:	d015      	beq.n	800b6fe <_svfiprintf_r+0xfa>
 800b6d2:	9a07      	ldr	r2, [sp, #28]
 800b6d4:	4654      	mov	r4, sl
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	f04f 0c0a 	mov.w	ip, #10
 800b6dc:	4621      	mov	r1, r4
 800b6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6e2:	3b30      	subs	r3, #48	@ 0x30
 800b6e4:	2b09      	cmp	r3, #9
 800b6e6:	d94b      	bls.n	800b780 <_svfiprintf_r+0x17c>
 800b6e8:	b1b0      	cbz	r0, 800b718 <_svfiprintf_r+0x114>
 800b6ea:	9207      	str	r2, [sp, #28]
 800b6ec:	e014      	b.n	800b718 <_svfiprintf_r+0x114>
 800b6ee:	eba0 0308 	sub.w	r3, r0, r8
 800b6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	9304      	str	r3, [sp, #16]
 800b6fa:	46a2      	mov	sl, r4
 800b6fc:	e7d2      	b.n	800b6a4 <_svfiprintf_r+0xa0>
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	1d19      	adds	r1, r3, #4
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	9103      	str	r1, [sp, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	bfbb      	ittet	lt
 800b70a:	425b      	neglt	r3, r3
 800b70c:	f042 0202 	orrlt.w	r2, r2, #2
 800b710:	9307      	strge	r3, [sp, #28]
 800b712:	9307      	strlt	r3, [sp, #28]
 800b714:	bfb8      	it	lt
 800b716:	9204      	strlt	r2, [sp, #16]
 800b718:	7823      	ldrb	r3, [r4, #0]
 800b71a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b71c:	d10a      	bne.n	800b734 <_svfiprintf_r+0x130>
 800b71e:	7863      	ldrb	r3, [r4, #1]
 800b720:	2b2a      	cmp	r3, #42	@ 0x2a
 800b722:	d132      	bne.n	800b78a <_svfiprintf_r+0x186>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	1d1a      	adds	r2, r3, #4
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	9203      	str	r2, [sp, #12]
 800b72c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b730:	3402      	adds	r4, #2
 800b732:	9305      	str	r3, [sp, #20]
 800b734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7f8 <_svfiprintf_r+0x1f4>
 800b738:	7821      	ldrb	r1, [r4, #0]
 800b73a:	2203      	movs	r2, #3
 800b73c:	4650      	mov	r0, sl
 800b73e:	f7f4 fd57 	bl	80001f0 <memchr>
 800b742:	b138      	cbz	r0, 800b754 <_svfiprintf_r+0x150>
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	eba0 000a 	sub.w	r0, r0, sl
 800b74a:	2240      	movs	r2, #64	@ 0x40
 800b74c:	4082      	lsls	r2, r0
 800b74e:	4313      	orrs	r3, r2
 800b750:	3401      	adds	r4, #1
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b758:	4824      	ldr	r0, [pc, #144]	@ (800b7ec <_svfiprintf_r+0x1e8>)
 800b75a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b75e:	2206      	movs	r2, #6
 800b760:	f7f4 fd46 	bl	80001f0 <memchr>
 800b764:	2800      	cmp	r0, #0
 800b766:	d036      	beq.n	800b7d6 <_svfiprintf_r+0x1d2>
 800b768:	4b21      	ldr	r3, [pc, #132]	@ (800b7f0 <_svfiprintf_r+0x1ec>)
 800b76a:	bb1b      	cbnz	r3, 800b7b4 <_svfiprintf_r+0x1b0>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	3307      	adds	r3, #7
 800b770:	f023 0307 	bic.w	r3, r3, #7
 800b774:	3308      	adds	r3, #8
 800b776:	9303      	str	r3, [sp, #12]
 800b778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b77a:	4433      	add	r3, r6
 800b77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b77e:	e76a      	b.n	800b656 <_svfiprintf_r+0x52>
 800b780:	fb0c 3202 	mla	r2, ip, r2, r3
 800b784:	460c      	mov	r4, r1
 800b786:	2001      	movs	r0, #1
 800b788:	e7a8      	b.n	800b6dc <_svfiprintf_r+0xd8>
 800b78a:	2300      	movs	r3, #0
 800b78c:	3401      	adds	r4, #1
 800b78e:	9305      	str	r3, [sp, #20]
 800b790:	4619      	mov	r1, r3
 800b792:	f04f 0c0a 	mov.w	ip, #10
 800b796:	4620      	mov	r0, r4
 800b798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b79c:	3a30      	subs	r2, #48	@ 0x30
 800b79e:	2a09      	cmp	r2, #9
 800b7a0:	d903      	bls.n	800b7aa <_svfiprintf_r+0x1a6>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0c6      	beq.n	800b734 <_svfiprintf_r+0x130>
 800b7a6:	9105      	str	r1, [sp, #20]
 800b7a8:	e7c4      	b.n	800b734 <_svfiprintf_r+0x130>
 800b7aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e7f0      	b.n	800b796 <_svfiprintf_r+0x192>
 800b7b4:	ab03      	add	r3, sp, #12
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	462a      	mov	r2, r5
 800b7ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f4 <_svfiprintf_r+0x1f0>)
 800b7bc:	a904      	add	r1, sp, #16
 800b7be:	4638      	mov	r0, r7
 800b7c0:	f7fc fd46 	bl	8008250 <_printf_float>
 800b7c4:	1c42      	adds	r2, r0, #1
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	d1d6      	bne.n	800b778 <_svfiprintf_r+0x174>
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	065b      	lsls	r3, r3, #25
 800b7ce:	f53f af2d 	bmi.w	800b62c <_svfiprintf_r+0x28>
 800b7d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7d4:	e72c      	b.n	800b630 <_svfiprintf_r+0x2c>
 800b7d6:	ab03      	add	r3, sp, #12
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	462a      	mov	r2, r5
 800b7dc:	4b05      	ldr	r3, [pc, #20]	@ (800b7f4 <_svfiprintf_r+0x1f0>)
 800b7de:	a904      	add	r1, sp, #16
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	f7fc ffcd 	bl	8008780 <_printf_i>
 800b7e6:	e7ed      	b.n	800b7c4 <_svfiprintf_r+0x1c0>
 800b7e8:	0800cad0 	.word	0x0800cad0
 800b7ec:	0800cada 	.word	0x0800cada
 800b7f0:	08008251 	.word	0x08008251
 800b7f4:	0800b54d 	.word	0x0800b54d
 800b7f8:	0800cad6 	.word	0x0800cad6

0800b7fc <__sflush_r>:
 800b7fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b804:	0716      	lsls	r6, r2, #28
 800b806:	4605      	mov	r5, r0
 800b808:	460c      	mov	r4, r1
 800b80a:	d454      	bmi.n	800b8b6 <__sflush_r+0xba>
 800b80c:	684b      	ldr	r3, [r1, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dc02      	bgt.n	800b818 <__sflush_r+0x1c>
 800b812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b814:	2b00      	cmp	r3, #0
 800b816:	dd48      	ble.n	800b8aa <__sflush_r+0xae>
 800b818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	d045      	beq.n	800b8aa <__sflush_r+0xae>
 800b81e:	2300      	movs	r3, #0
 800b820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b824:	682f      	ldr	r7, [r5, #0]
 800b826:	6a21      	ldr	r1, [r4, #32]
 800b828:	602b      	str	r3, [r5, #0]
 800b82a:	d030      	beq.n	800b88e <__sflush_r+0x92>
 800b82c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	0759      	lsls	r1, r3, #29
 800b832:	d505      	bpl.n	800b840 <__sflush_r+0x44>
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	1ad2      	subs	r2, r2, r3
 800b838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b83a:	b10b      	cbz	r3, 800b840 <__sflush_r+0x44>
 800b83c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	2300      	movs	r3, #0
 800b842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b844:	6a21      	ldr	r1, [r4, #32]
 800b846:	4628      	mov	r0, r5
 800b848:	47b0      	blx	r6
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	d106      	bne.n	800b85e <__sflush_r+0x62>
 800b850:	6829      	ldr	r1, [r5, #0]
 800b852:	291d      	cmp	r1, #29
 800b854:	d82b      	bhi.n	800b8ae <__sflush_r+0xb2>
 800b856:	4a2a      	ldr	r2, [pc, #168]	@ (800b900 <__sflush_r+0x104>)
 800b858:	410a      	asrs	r2, r1
 800b85a:	07d6      	lsls	r6, r2, #31
 800b85c:	d427      	bmi.n	800b8ae <__sflush_r+0xb2>
 800b85e:	2200      	movs	r2, #0
 800b860:	6062      	str	r2, [r4, #4]
 800b862:	04d9      	lsls	r1, r3, #19
 800b864:	6922      	ldr	r2, [r4, #16]
 800b866:	6022      	str	r2, [r4, #0]
 800b868:	d504      	bpl.n	800b874 <__sflush_r+0x78>
 800b86a:	1c42      	adds	r2, r0, #1
 800b86c:	d101      	bne.n	800b872 <__sflush_r+0x76>
 800b86e:	682b      	ldr	r3, [r5, #0]
 800b870:	b903      	cbnz	r3, 800b874 <__sflush_r+0x78>
 800b872:	6560      	str	r0, [r4, #84]	@ 0x54
 800b874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b876:	602f      	str	r7, [r5, #0]
 800b878:	b1b9      	cbz	r1, 800b8aa <__sflush_r+0xae>
 800b87a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b87e:	4299      	cmp	r1, r3
 800b880:	d002      	beq.n	800b888 <__sflush_r+0x8c>
 800b882:	4628      	mov	r0, r5
 800b884:	f7fe faa8 	bl	8009dd8 <_free_r>
 800b888:	2300      	movs	r3, #0
 800b88a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b88c:	e00d      	b.n	800b8aa <__sflush_r+0xae>
 800b88e:	2301      	movs	r3, #1
 800b890:	4628      	mov	r0, r5
 800b892:	47b0      	blx	r6
 800b894:	4602      	mov	r2, r0
 800b896:	1c50      	adds	r0, r2, #1
 800b898:	d1c9      	bne.n	800b82e <__sflush_r+0x32>
 800b89a:	682b      	ldr	r3, [r5, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0c6      	beq.n	800b82e <__sflush_r+0x32>
 800b8a0:	2b1d      	cmp	r3, #29
 800b8a2:	d001      	beq.n	800b8a8 <__sflush_r+0xac>
 800b8a4:	2b16      	cmp	r3, #22
 800b8a6:	d11e      	bne.n	800b8e6 <__sflush_r+0xea>
 800b8a8:	602f      	str	r7, [r5, #0]
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e022      	b.n	800b8f4 <__sflush_r+0xf8>
 800b8ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b2:	b21b      	sxth	r3, r3
 800b8b4:	e01b      	b.n	800b8ee <__sflush_r+0xf2>
 800b8b6:	690f      	ldr	r7, [r1, #16]
 800b8b8:	2f00      	cmp	r7, #0
 800b8ba:	d0f6      	beq.n	800b8aa <__sflush_r+0xae>
 800b8bc:	0793      	lsls	r3, r2, #30
 800b8be:	680e      	ldr	r6, [r1, #0]
 800b8c0:	bf08      	it	eq
 800b8c2:	694b      	ldreq	r3, [r1, #20]
 800b8c4:	600f      	str	r7, [r1, #0]
 800b8c6:	bf18      	it	ne
 800b8c8:	2300      	movne	r3, #0
 800b8ca:	eba6 0807 	sub.w	r8, r6, r7
 800b8ce:	608b      	str	r3, [r1, #8]
 800b8d0:	f1b8 0f00 	cmp.w	r8, #0
 800b8d4:	dde9      	ble.n	800b8aa <__sflush_r+0xae>
 800b8d6:	6a21      	ldr	r1, [r4, #32]
 800b8d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8da:	4643      	mov	r3, r8
 800b8dc:	463a      	mov	r2, r7
 800b8de:	4628      	mov	r0, r5
 800b8e0:	47b0      	blx	r6
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	dc08      	bgt.n	800b8f8 <__sflush_r+0xfc>
 800b8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ee:	81a3      	strh	r3, [r4, #12]
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	4407      	add	r7, r0
 800b8fa:	eba8 0800 	sub.w	r8, r8, r0
 800b8fe:	e7e7      	b.n	800b8d0 <__sflush_r+0xd4>
 800b900:	dfbffffe 	.word	0xdfbffffe

0800b904 <_fflush_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	690b      	ldr	r3, [r1, #16]
 800b908:	4605      	mov	r5, r0
 800b90a:	460c      	mov	r4, r1
 800b90c:	b913      	cbnz	r3, 800b914 <_fflush_r+0x10>
 800b90e:	2500      	movs	r5, #0
 800b910:	4628      	mov	r0, r5
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	b118      	cbz	r0, 800b91e <_fflush_r+0x1a>
 800b916:	6a03      	ldr	r3, [r0, #32]
 800b918:	b90b      	cbnz	r3, 800b91e <_fflush_r+0x1a>
 800b91a:	f7fd faf1 	bl	8008f00 <__sinit>
 800b91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0f3      	beq.n	800b90e <_fflush_r+0xa>
 800b926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b928:	07d0      	lsls	r0, r2, #31
 800b92a:	d404      	bmi.n	800b936 <_fflush_r+0x32>
 800b92c:	0599      	lsls	r1, r3, #22
 800b92e:	d402      	bmi.n	800b936 <_fflush_r+0x32>
 800b930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b932:	f7fd fbfc 	bl	800912e <__retarget_lock_acquire_recursive>
 800b936:	4628      	mov	r0, r5
 800b938:	4621      	mov	r1, r4
 800b93a:	f7ff ff5f 	bl	800b7fc <__sflush_r>
 800b93e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b940:	07da      	lsls	r2, r3, #31
 800b942:	4605      	mov	r5, r0
 800b944:	d4e4      	bmi.n	800b910 <_fflush_r+0xc>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	059b      	lsls	r3, r3, #22
 800b94a:	d4e1      	bmi.n	800b910 <_fflush_r+0xc>
 800b94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b94e:	f7fd fbef 	bl	8009130 <__retarget_lock_release_recursive>
 800b952:	e7dd      	b.n	800b910 <_fflush_r+0xc>

0800b954 <memmove>:
 800b954:	4288      	cmp	r0, r1
 800b956:	b510      	push	{r4, lr}
 800b958:	eb01 0402 	add.w	r4, r1, r2
 800b95c:	d902      	bls.n	800b964 <memmove+0x10>
 800b95e:	4284      	cmp	r4, r0
 800b960:	4623      	mov	r3, r4
 800b962:	d807      	bhi.n	800b974 <memmove+0x20>
 800b964:	1e43      	subs	r3, r0, #1
 800b966:	42a1      	cmp	r1, r4
 800b968:	d008      	beq.n	800b97c <memmove+0x28>
 800b96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b96e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b972:	e7f8      	b.n	800b966 <memmove+0x12>
 800b974:	4402      	add	r2, r0
 800b976:	4601      	mov	r1, r0
 800b978:	428a      	cmp	r2, r1
 800b97a:	d100      	bne.n	800b97e <memmove+0x2a>
 800b97c:	bd10      	pop	{r4, pc}
 800b97e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b986:	e7f7      	b.n	800b978 <memmove+0x24>

0800b988 <strncmp>:
 800b988:	b510      	push	{r4, lr}
 800b98a:	b16a      	cbz	r2, 800b9a8 <strncmp+0x20>
 800b98c:	3901      	subs	r1, #1
 800b98e:	1884      	adds	r4, r0, r2
 800b990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b994:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b998:	429a      	cmp	r2, r3
 800b99a:	d103      	bne.n	800b9a4 <strncmp+0x1c>
 800b99c:	42a0      	cmp	r0, r4
 800b99e:	d001      	beq.n	800b9a4 <strncmp+0x1c>
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	d1f5      	bne.n	800b990 <strncmp+0x8>
 800b9a4:	1ad0      	subs	r0, r2, r3
 800b9a6:	bd10      	pop	{r4, pc}
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	e7fc      	b.n	800b9a6 <strncmp+0x1e>

0800b9ac <_sbrk_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4d06      	ldr	r5, [pc, #24]	@ (800b9c8 <_sbrk_r+0x1c>)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	602b      	str	r3, [r5, #0]
 800b9b8:	f7f6 fbb2 	bl	8002120 <_sbrk>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d102      	bne.n	800b9c6 <_sbrk_r+0x1a>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	b103      	cbz	r3, 800b9c6 <_sbrk_r+0x1a>
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	2000060c 	.word	0x2000060c

0800b9cc <memcpy>:
 800b9cc:	440a      	add	r2, r1
 800b9ce:	4291      	cmp	r1, r2
 800b9d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9d4:	d100      	bne.n	800b9d8 <memcpy+0xc>
 800b9d6:	4770      	bx	lr
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9e2:	4291      	cmp	r1, r2
 800b9e4:	d1f9      	bne.n	800b9da <memcpy+0xe>
 800b9e6:	bd10      	pop	{r4, pc}

0800b9e8 <nan>:
 800b9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9f0 <nan+0x8>
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	00000000 	.word	0x00000000
 800b9f4:	7ff80000 	.word	0x7ff80000

0800b9f8 <__assert_func>:
 800b9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9fa:	4614      	mov	r4, r2
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4b09      	ldr	r3, [pc, #36]	@ (800ba24 <__assert_func+0x2c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4605      	mov	r5, r0
 800ba04:	68d8      	ldr	r0, [r3, #12]
 800ba06:	b954      	cbnz	r4, 800ba1e <__assert_func+0x26>
 800ba08:	4b07      	ldr	r3, [pc, #28]	@ (800ba28 <__assert_func+0x30>)
 800ba0a:	461c      	mov	r4, r3
 800ba0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba10:	9100      	str	r1, [sp, #0]
 800ba12:	462b      	mov	r3, r5
 800ba14:	4905      	ldr	r1, [pc, #20]	@ (800ba2c <__assert_func+0x34>)
 800ba16:	f000 fba7 	bl	800c168 <fiprintf>
 800ba1a:	f000 fbb7 	bl	800c18c <abort>
 800ba1e:	4b04      	ldr	r3, [pc, #16]	@ (800ba30 <__assert_func+0x38>)
 800ba20:	e7f4      	b.n	800ba0c <__assert_func+0x14>
 800ba22:	bf00      	nop
 800ba24:	20000018 	.word	0x20000018
 800ba28:	0800cb24 	.word	0x0800cb24
 800ba2c:	0800caf6 	.word	0x0800caf6
 800ba30:	0800cae9 	.word	0x0800cae9

0800ba34 <_calloc_r>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	fba1 5402 	umull	r5, r4, r1, r2
 800ba3a:	b93c      	cbnz	r4, 800ba4c <_calloc_r+0x18>
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	f7fe fa3f 	bl	8009ec0 <_malloc_r>
 800ba42:	4606      	mov	r6, r0
 800ba44:	b928      	cbnz	r0, 800ba52 <_calloc_r+0x1e>
 800ba46:	2600      	movs	r6, #0
 800ba48:	4630      	mov	r0, r6
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	220c      	movs	r2, #12
 800ba4e:	6002      	str	r2, [r0, #0]
 800ba50:	e7f9      	b.n	800ba46 <_calloc_r+0x12>
 800ba52:	462a      	mov	r2, r5
 800ba54:	4621      	mov	r1, r4
 800ba56:	f7fd faec 	bl	8009032 <memset>
 800ba5a:	e7f5      	b.n	800ba48 <_calloc_r+0x14>

0800ba5c <rshift>:
 800ba5c:	6903      	ldr	r3, [r0, #16]
 800ba5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba66:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba6a:	f100 0414 	add.w	r4, r0, #20
 800ba6e:	dd45      	ble.n	800bafc <rshift+0xa0>
 800ba70:	f011 011f 	ands.w	r1, r1, #31
 800ba74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba7c:	d10c      	bne.n	800ba98 <rshift+0x3c>
 800ba7e:	f100 0710 	add.w	r7, r0, #16
 800ba82:	4629      	mov	r1, r5
 800ba84:	42b1      	cmp	r1, r6
 800ba86:	d334      	bcc.n	800baf2 <rshift+0x96>
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	1eea      	subs	r2, r5, #3
 800ba8e:	4296      	cmp	r6, r2
 800ba90:	bf38      	it	cc
 800ba92:	2300      	movcc	r3, #0
 800ba94:	4423      	add	r3, r4
 800ba96:	e015      	b.n	800bac4 <rshift+0x68>
 800ba98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba9c:	f1c1 0820 	rsb	r8, r1, #32
 800baa0:	40cf      	lsrs	r7, r1
 800baa2:	f105 0e04 	add.w	lr, r5, #4
 800baa6:	46a1      	mov	r9, r4
 800baa8:	4576      	cmp	r6, lr
 800baaa:	46f4      	mov	ip, lr
 800baac:	d815      	bhi.n	800bada <rshift+0x7e>
 800baae:	1a9a      	subs	r2, r3, r2
 800bab0:	0092      	lsls	r2, r2, #2
 800bab2:	3a04      	subs	r2, #4
 800bab4:	3501      	adds	r5, #1
 800bab6:	42ae      	cmp	r6, r5
 800bab8:	bf38      	it	cc
 800baba:	2200      	movcc	r2, #0
 800babc:	18a3      	adds	r3, r4, r2
 800babe:	50a7      	str	r7, [r4, r2]
 800bac0:	b107      	cbz	r7, 800bac4 <rshift+0x68>
 800bac2:	3304      	adds	r3, #4
 800bac4:	1b1a      	subs	r2, r3, r4
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bacc:	bf08      	it	eq
 800bace:	2300      	moveq	r3, #0
 800bad0:	6102      	str	r2, [r0, #16]
 800bad2:	bf08      	it	eq
 800bad4:	6143      	streq	r3, [r0, #20]
 800bad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bada:	f8dc c000 	ldr.w	ip, [ip]
 800bade:	fa0c fc08 	lsl.w	ip, ip, r8
 800bae2:	ea4c 0707 	orr.w	r7, ip, r7
 800bae6:	f849 7b04 	str.w	r7, [r9], #4
 800baea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800baee:	40cf      	lsrs	r7, r1
 800baf0:	e7da      	b.n	800baa8 <rshift+0x4c>
 800baf2:	f851 cb04 	ldr.w	ip, [r1], #4
 800baf6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bafa:	e7c3      	b.n	800ba84 <rshift+0x28>
 800bafc:	4623      	mov	r3, r4
 800bafe:	e7e1      	b.n	800bac4 <rshift+0x68>

0800bb00 <__hexdig_fun>:
 800bb00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d802      	bhi.n	800bb0e <__hexdig_fun+0xe>
 800bb08:	3820      	subs	r0, #32
 800bb0a:	b2c0      	uxtb	r0, r0
 800bb0c:	4770      	bx	lr
 800bb0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bb12:	2b05      	cmp	r3, #5
 800bb14:	d801      	bhi.n	800bb1a <__hexdig_fun+0x1a>
 800bb16:	3847      	subs	r0, #71	@ 0x47
 800bb18:	e7f7      	b.n	800bb0a <__hexdig_fun+0xa>
 800bb1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bb1e:	2b05      	cmp	r3, #5
 800bb20:	d801      	bhi.n	800bb26 <__hexdig_fun+0x26>
 800bb22:	3827      	subs	r0, #39	@ 0x27
 800bb24:	e7f1      	b.n	800bb0a <__hexdig_fun+0xa>
 800bb26:	2000      	movs	r0, #0
 800bb28:	4770      	bx	lr
	...

0800bb2c <__gethex>:
 800bb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	b085      	sub	sp, #20
 800bb32:	468a      	mov	sl, r1
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	680b      	ldr	r3, [r1, #0]
 800bb38:	9001      	str	r0, [sp, #4]
 800bb3a:	4690      	mov	r8, r2
 800bb3c:	1c9c      	adds	r4, r3, #2
 800bb3e:	46a1      	mov	r9, r4
 800bb40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb44:	2830      	cmp	r0, #48	@ 0x30
 800bb46:	d0fa      	beq.n	800bb3e <__gethex+0x12>
 800bb48:	eba9 0303 	sub.w	r3, r9, r3
 800bb4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb50:	f7ff ffd6 	bl	800bb00 <__hexdig_fun>
 800bb54:	4605      	mov	r5, r0
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d168      	bne.n	800bc2c <__gethex+0x100>
 800bb5a:	49a0      	ldr	r1, [pc, #640]	@ (800bddc <__gethex+0x2b0>)
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	4648      	mov	r0, r9
 800bb60:	f7ff ff12 	bl	800b988 <strncmp>
 800bb64:	4607      	mov	r7, r0
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d167      	bne.n	800bc3a <__gethex+0x10e>
 800bb6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb6e:	4626      	mov	r6, r4
 800bb70:	f7ff ffc6 	bl	800bb00 <__hexdig_fun>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d062      	beq.n	800bc3e <__gethex+0x112>
 800bb78:	4623      	mov	r3, r4
 800bb7a:	7818      	ldrb	r0, [r3, #0]
 800bb7c:	2830      	cmp	r0, #48	@ 0x30
 800bb7e:	4699      	mov	r9, r3
 800bb80:	f103 0301 	add.w	r3, r3, #1
 800bb84:	d0f9      	beq.n	800bb7a <__gethex+0x4e>
 800bb86:	f7ff ffbb 	bl	800bb00 <__hexdig_fun>
 800bb8a:	fab0 f580 	clz	r5, r0
 800bb8e:	096d      	lsrs	r5, r5, #5
 800bb90:	f04f 0b01 	mov.w	fp, #1
 800bb94:	464a      	mov	r2, r9
 800bb96:	4616      	mov	r6, r2
 800bb98:	3201      	adds	r2, #1
 800bb9a:	7830      	ldrb	r0, [r6, #0]
 800bb9c:	f7ff ffb0 	bl	800bb00 <__hexdig_fun>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d1f8      	bne.n	800bb96 <__gethex+0x6a>
 800bba4:	498d      	ldr	r1, [pc, #564]	@ (800bddc <__gethex+0x2b0>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7ff feed 	bl	800b988 <strncmp>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d13f      	bne.n	800bc32 <__gethex+0x106>
 800bbb2:	b944      	cbnz	r4, 800bbc6 <__gethex+0x9a>
 800bbb4:	1c74      	adds	r4, r6, #1
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	4616      	mov	r6, r2
 800bbba:	3201      	adds	r2, #1
 800bbbc:	7830      	ldrb	r0, [r6, #0]
 800bbbe:	f7ff ff9f 	bl	800bb00 <__hexdig_fun>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d1f8      	bne.n	800bbb8 <__gethex+0x8c>
 800bbc6:	1ba4      	subs	r4, r4, r6
 800bbc8:	00a7      	lsls	r7, r4, #2
 800bbca:	7833      	ldrb	r3, [r6, #0]
 800bbcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bbd0:	2b50      	cmp	r3, #80	@ 0x50
 800bbd2:	d13e      	bne.n	800bc52 <__gethex+0x126>
 800bbd4:	7873      	ldrb	r3, [r6, #1]
 800bbd6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbd8:	d033      	beq.n	800bc42 <__gethex+0x116>
 800bbda:	2b2d      	cmp	r3, #45	@ 0x2d
 800bbdc:	d034      	beq.n	800bc48 <__gethex+0x11c>
 800bbde:	1c71      	adds	r1, r6, #1
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	7808      	ldrb	r0, [r1, #0]
 800bbe4:	f7ff ff8c 	bl	800bb00 <__hexdig_fun>
 800bbe8:	1e43      	subs	r3, r0, #1
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b18      	cmp	r3, #24
 800bbee:	d830      	bhi.n	800bc52 <__gethex+0x126>
 800bbf0:	f1a0 0210 	sub.w	r2, r0, #16
 800bbf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbf8:	f7ff ff82 	bl	800bb00 <__hexdig_fun>
 800bbfc:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc00:	fa5f fc8c 	uxtb.w	ip, ip
 800bc04:	f1bc 0f18 	cmp.w	ip, #24
 800bc08:	f04f 030a 	mov.w	r3, #10
 800bc0c:	d91e      	bls.n	800bc4c <__gethex+0x120>
 800bc0e:	b104      	cbz	r4, 800bc12 <__gethex+0xe6>
 800bc10:	4252      	negs	r2, r2
 800bc12:	4417      	add	r7, r2
 800bc14:	f8ca 1000 	str.w	r1, [sl]
 800bc18:	b1ed      	cbz	r5, 800bc56 <__gethex+0x12a>
 800bc1a:	f1bb 0f00 	cmp.w	fp, #0
 800bc1e:	bf0c      	ite	eq
 800bc20:	2506      	moveq	r5, #6
 800bc22:	2500      	movne	r5, #0
 800bc24:	4628      	mov	r0, r5
 800bc26:	b005      	add	sp, #20
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	462c      	mov	r4, r5
 800bc30:	e7b0      	b.n	800bb94 <__gethex+0x68>
 800bc32:	2c00      	cmp	r4, #0
 800bc34:	d1c7      	bne.n	800bbc6 <__gethex+0x9a>
 800bc36:	4627      	mov	r7, r4
 800bc38:	e7c7      	b.n	800bbca <__gethex+0x9e>
 800bc3a:	464e      	mov	r6, r9
 800bc3c:	462f      	mov	r7, r5
 800bc3e:	2501      	movs	r5, #1
 800bc40:	e7c3      	b.n	800bbca <__gethex+0x9e>
 800bc42:	2400      	movs	r4, #0
 800bc44:	1cb1      	adds	r1, r6, #2
 800bc46:	e7cc      	b.n	800bbe2 <__gethex+0xb6>
 800bc48:	2401      	movs	r4, #1
 800bc4a:	e7fb      	b.n	800bc44 <__gethex+0x118>
 800bc4c:	fb03 0002 	mla	r0, r3, r2, r0
 800bc50:	e7ce      	b.n	800bbf0 <__gethex+0xc4>
 800bc52:	4631      	mov	r1, r6
 800bc54:	e7de      	b.n	800bc14 <__gethex+0xe8>
 800bc56:	eba6 0309 	sub.w	r3, r6, r9
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	2b07      	cmp	r3, #7
 800bc60:	dc0a      	bgt.n	800bc78 <__gethex+0x14c>
 800bc62:	9801      	ldr	r0, [sp, #4]
 800bc64:	f7fe f9b8 	bl	8009fd8 <_Balloc>
 800bc68:	4604      	mov	r4, r0
 800bc6a:	b940      	cbnz	r0, 800bc7e <__gethex+0x152>
 800bc6c:	4b5c      	ldr	r3, [pc, #368]	@ (800bde0 <__gethex+0x2b4>)
 800bc6e:	4602      	mov	r2, r0
 800bc70:	21e4      	movs	r1, #228	@ 0xe4
 800bc72:	485c      	ldr	r0, [pc, #368]	@ (800bde4 <__gethex+0x2b8>)
 800bc74:	f7ff fec0 	bl	800b9f8 <__assert_func>
 800bc78:	3101      	adds	r1, #1
 800bc7a:	105b      	asrs	r3, r3, #1
 800bc7c:	e7ef      	b.n	800bc5e <__gethex+0x132>
 800bc7e:	f100 0a14 	add.w	sl, r0, #20
 800bc82:	2300      	movs	r3, #0
 800bc84:	4655      	mov	r5, sl
 800bc86:	469b      	mov	fp, r3
 800bc88:	45b1      	cmp	r9, r6
 800bc8a:	d337      	bcc.n	800bcfc <__gethex+0x1d0>
 800bc8c:	f845 bb04 	str.w	fp, [r5], #4
 800bc90:	eba5 050a 	sub.w	r5, r5, sl
 800bc94:	10ad      	asrs	r5, r5, #2
 800bc96:	6125      	str	r5, [r4, #16]
 800bc98:	4658      	mov	r0, fp
 800bc9a:	f7fe fa8f 	bl	800a1bc <__hi0bits>
 800bc9e:	016d      	lsls	r5, r5, #5
 800bca0:	f8d8 6000 	ldr.w	r6, [r8]
 800bca4:	1a2d      	subs	r5, r5, r0
 800bca6:	42b5      	cmp	r5, r6
 800bca8:	dd54      	ble.n	800bd54 <__gethex+0x228>
 800bcaa:	1bad      	subs	r5, r5, r6
 800bcac:	4629      	mov	r1, r5
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7fe fe23 	bl	800a8fa <__any_on>
 800bcb4:	4681      	mov	r9, r0
 800bcb6:	b178      	cbz	r0, 800bcd8 <__gethex+0x1ac>
 800bcb8:	1e6b      	subs	r3, r5, #1
 800bcba:	1159      	asrs	r1, r3, #5
 800bcbc:	f003 021f 	and.w	r2, r3, #31
 800bcc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bcc4:	f04f 0901 	mov.w	r9, #1
 800bcc8:	fa09 f202 	lsl.w	r2, r9, r2
 800bccc:	420a      	tst	r2, r1
 800bcce:	d003      	beq.n	800bcd8 <__gethex+0x1ac>
 800bcd0:	454b      	cmp	r3, r9
 800bcd2:	dc36      	bgt.n	800bd42 <__gethex+0x216>
 800bcd4:	f04f 0902 	mov.w	r9, #2
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f7ff febe 	bl	800ba5c <rshift>
 800bce0:	442f      	add	r7, r5
 800bce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bce6:	42bb      	cmp	r3, r7
 800bce8:	da42      	bge.n	800bd70 <__gethex+0x244>
 800bcea:	9801      	ldr	r0, [sp, #4]
 800bcec:	4621      	mov	r1, r4
 800bcee:	f7fe f9b3 	bl	800a058 <_Bfree>
 800bcf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	25a3      	movs	r5, #163	@ 0xa3
 800bcfa:	e793      	b.n	800bc24 <__gethex+0xf8>
 800bcfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bd00:	2a2e      	cmp	r2, #46	@ 0x2e
 800bd02:	d012      	beq.n	800bd2a <__gethex+0x1fe>
 800bd04:	2b20      	cmp	r3, #32
 800bd06:	d104      	bne.n	800bd12 <__gethex+0x1e6>
 800bd08:	f845 bb04 	str.w	fp, [r5], #4
 800bd0c:	f04f 0b00 	mov.w	fp, #0
 800bd10:	465b      	mov	r3, fp
 800bd12:	7830      	ldrb	r0, [r6, #0]
 800bd14:	9303      	str	r3, [sp, #12]
 800bd16:	f7ff fef3 	bl	800bb00 <__hexdig_fun>
 800bd1a:	9b03      	ldr	r3, [sp, #12]
 800bd1c:	f000 000f 	and.w	r0, r0, #15
 800bd20:	4098      	lsls	r0, r3
 800bd22:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd26:	3304      	adds	r3, #4
 800bd28:	e7ae      	b.n	800bc88 <__gethex+0x15c>
 800bd2a:	45b1      	cmp	r9, r6
 800bd2c:	d8ea      	bhi.n	800bd04 <__gethex+0x1d8>
 800bd2e:	492b      	ldr	r1, [pc, #172]	@ (800bddc <__gethex+0x2b0>)
 800bd30:	9303      	str	r3, [sp, #12]
 800bd32:	2201      	movs	r2, #1
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7ff fe27 	bl	800b988 <strncmp>
 800bd3a:	9b03      	ldr	r3, [sp, #12]
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d1e1      	bne.n	800bd04 <__gethex+0x1d8>
 800bd40:	e7a2      	b.n	800bc88 <__gethex+0x15c>
 800bd42:	1ea9      	subs	r1, r5, #2
 800bd44:	4620      	mov	r0, r4
 800bd46:	f7fe fdd8 	bl	800a8fa <__any_on>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d0c2      	beq.n	800bcd4 <__gethex+0x1a8>
 800bd4e:	f04f 0903 	mov.w	r9, #3
 800bd52:	e7c1      	b.n	800bcd8 <__gethex+0x1ac>
 800bd54:	da09      	bge.n	800bd6a <__gethex+0x23e>
 800bd56:	1b75      	subs	r5, r6, r5
 800bd58:	4621      	mov	r1, r4
 800bd5a:	9801      	ldr	r0, [sp, #4]
 800bd5c:	462a      	mov	r2, r5
 800bd5e:	f7fe fb93 	bl	800a488 <__lshift>
 800bd62:	1b7f      	subs	r7, r7, r5
 800bd64:	4604      	mov	r4, r0
 800bd66:	f100 0a14 	add.w	sl, r0, #20
 800bd6a:	f04f 0900 	mov.w	r9, #0
 800bd6e:	e7b8      	b.n	800bce2 <__gethex+0x1b6>
 800bd70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd74:	42bd      	cmp	r5, r7
 800bd76:	dd6f      	ble.n	800be58 <__gethex+0x32c>
 800bd78:	1bed      	subs	r5, r5, r7
 800bd7a:	42ae      	cmp	r6, r5
 800bd7c:	dc34      	bgt.n	800bde8 <__gethex+0x2bc>
 800bd7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d022      	beq.n	800bdcc <__gethex+0x2a0>
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d024      	beq.n	800bdd4 <__gethex+0x2a8>
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d115      	bne.n	800bdba <__gethex+0x28e>
 800bd8e:	42ae      	cmp	r6, r5
 800bd90:	d113      	bne.n	800bdba <__gethex+0x28e>
 800bd92:	2e01      	cmp	r6, #1
 800bd94:	d10b      	bne.n	800bdae <__gethex+0x282>
 800bd96:	9a02      	ldr	r2, [sp, #8]
 800bd98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	2301      	movs	r3, #1
 800bda0:	6123      	str	r3, [r4, #16]
 800bda2:	f8ca 3000 	str.w	r3, [sl]
 800bda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bda8:	2562      	movs	r5, #98	@ 0x62
 800bdaa:	601c      	str	r4, [r3, #0]
 800bdac:	e73a      	b.n	800bc24 <__gethex+0xf8>
 800bdae:	1e71      	subs	r1, r6, #1
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f7fe fda2 	bl	800a8fa <__any_on>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d1ed      	bne.n	800bd96 <__gethex+0x26a>
 800bdba:	9801      	ldr	r0, [sp, #4]
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f7fe f94b 	bl	800a058 <_Bfree>
 800bdc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	2550      	movs	r5, #80	@ 0x50
 800bdca:	e72b      	b.n	800bc24 <__gethex+0xf8>
 800bdcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1f3      	bne.n	800bdba <__gethex+0x28e>
 800bdd2:	e7e0      	b.n	800bd96 <__gethex+0x26a>
 800bdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1dd      	bne.n	800bd96 <__gethex+0x26a>
 800bdda:	e7ee      	b.n	800bdba <__gethex+0x28e>
 800bddc:	0800ca78 	.word	0x0800ca78
 800bde0:	0800c912 	.word	0x0800c912
 800bde4:	0800cb25 	.word	0x0800cb25
 800bde8:	1e6f      	subs	r7, r5, #1
 800bdea:	f1b9 0f00 	cmp.w	r9, #0
 800bdee:	d130      	bne.n	800be52 <__gethex+0x326>
 800bdf0:	b127      	cbz	r7, 800bdfc <__gethex+0x2d0>
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7fe fd80 	bl	800a8fa <__any_on>
 800bdfa:	4681      	mov	r9, r0
 800bdfc:	117a      	asrs	r2, r7, #5
 800bdfe:	2301      	movs	r3, #1
 800be00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be04:	f007 071f 	and.w	r7, r7, #31
 800be08:	40bb      	lsls	r3, r7
 800be0a:	4213      	tst	r3, r2
 800be0c:	4629      	mov	r1, r5
 800be0e:	4620      	mov	r0, r4
 800be10:	bf18      	it	ne
 800be12:	f049 0902 	orrne.w	r9, r9, #2
 800be16:	f7ff fe21 	bl	800ba5c <rshift>
 800be1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800be1e:	1b76      	subs	r6, r6, r5
 800be20:	2502      	movs	r5, #2
 800be22:	f1b9 0f00 	cmp.w	r9, #0
 800be26:	d047      	beq.n	800beb8 <__gethex+0x38c>
 800be28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d015      	beq.n	800be5c <__gethex+0x330>
 800be30:	2b03      	cmp	r3, #3
 800be32:	d017      	beq.n	800be64 <__gethex+0x338>
 800be34:	2b01      	cmp	r3, #1
 800be36:	d109      	bne.n	800be4c <__gethex+0x320>
 800be38:	f019 0f02 	tst.w	r9, #2
 800be3c:	d006      	beq.n	800be4c <__gethex+0x320>
 800be3e:	f8da 3000 	ldr.w	r3, [sl]
 800be42:	ea49 0903 	orr.w	r9, r9, r3
 800be46:	f019 0f01 	tst.w	r9, #1
 800be4a:	d10e      	bne.n	800be6a <__gethex+0x33e>
 800be4c:	f045 0510 	orr.w	r5, r5, #16
 800be50:	e032      	b.n	800beb8 <__gethex+0x38c>
 800be52:	f04f 0901 	mov.w	r9, #1
 800be56:	e7d1      	b.n	800bdfc <__gethex+0x2d0>
 800be58:	2501      	movs	r5, #1
 800be5a:	e7e2      	b.n	800be22 <__gethex+0x2f6>
 800be5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be5e:	f1c3 0301 	rsb	r3, r3, #1
 800be62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0f0      	beq.n	800be4c <__gethex+0x320>
 800be6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be6e:	f104 0314 	add.w	r3, r4, #20
 800be72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be7a:	f04f 0c00 	mov.w	ip, #0
 800be7e:	4618      	mov	r0, r3
 800be80:	f853 2b04 	ldr.w	r2, [r3], #4
 800be84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be88:	d01b      	beq.n	800bec2 <__gethex+0x396>
 800be8a:	3201      	adds	r2, #1
 800be8c:	6002      	str	r2, [r0, #0]
 800be8e:	2d02      	cmp	r5, #2
 800be90:	f104 0314 	add.w	r3, r4, #20
 800be94:	d13c      	bne.n	800bf10 <__gethex+0x3e4>
 800be96:	f8d8 2000 	ldr.w	r2, [r8]
 800be9a:	3a01      	subs	r2, #1
 800be9c:	42b2      	cmp	r2, r6
 800be9e:	d109      	bne.n	800beb4 <__gethex+0x388>
 800bea0:	1171      	asrs	r1, r6, #5
 800bea2:	2201      	movs	r2, #1
 800bea4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bea8:	f006 061f 	and.w	r6, r6, #31
 800beac:	fa02 f606 	lsl.w	r6, r2, r6
 800beb0:	421e      	tst	r6, r3
 800beb2:	d13a      	bne.n	800bf2a <__gethex+0x3fe>
 800beb4:	f045 0520 	orr.w	r5, r5, #32
 800beb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beba:	601c      	str	r4, [r3, #0]
 800bebc:	9b02      	ldr	r3, [sp, #8]
 800bebe:	601f      	str	r7, [r3, #0]
 800bec0:	e6b0      	b.n	800bc24 <__gethex+0xf8>
 800bec2:	4299      	cmp	r1, r3
 800bec4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bec8:	d8d9      	bhi.n	800be7e <__gethex+0x352>
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	459b      	cmp	fp, r3
 800bece:	db17      	blt.n	800bf00 <__gethex+0x3d4>
 800bed0:	6861      	ldr	r1, [r4, #4]
 800bed2:	9801      	ldr	r0, [sp, #4]
 800bed4:	3101      	adds	r1, #1
 800bed6:	f7fe f87f 	bl	8009fd8 <_Balloc>
 800beda:	4681      	mov	r9, r0
 800bedc:	b918      	cbnz	r0, 800bee6 <__gethex+0x3ba>
 800bede:	4b1a      	ldr	r3, [pc, #104]	@ (800bf48 <__gethex+0x41c>)
 800bee0:	4602      	mov	r2, r0
 800bee2:	2184      	movs	r1, #132	@ 0x84
 800bee4:	e6c5      	b.n	800bc72 <__gethex+0x146>
 800bee6:	6922      	ldr	r2, [r4, #16]
 800bee8:	3202      	adds	r2, #2
 800beea:	f104 010c 	add.w	r1, r4, #12
 800beee:	0092      	lsls	r2, r2, #2
 800bef0:	300c      	adds	r0, #12
 800bef2:	f7ff fd6b 	bl	800b9cc <memcpy>
 800bef6:	4621      	mov	r1, r4
 800bef8:	9801      	ldr	r0, [sp, #4]
 800befa:	f7fe f8ad 	bl	800a058 <_Bfree>
 800befe:	464c      	mov	r4, r9
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf08:	6122      	str	r2, [r4, #16]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	615a      	str	r2, [r3, #20]
 800bf0e:	e7be      	b.n	800be8e <__gethex+0x362>
 800bf10:	6922      	ldr	r2, [r4, #16]
 800bf12:	455a      	cmp	r2, fp
 800bf14:	dd0b      	ble.n	800bf2e <__gethex+0x402>
 800bf16:	2101      	movs	r1, #1
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f7ff fd9f 	bl	800ba5c <rshift>
 800bf1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf22:	3701      	adds	r7, #1
 800bf24:	42bb      	cmp	r3, r7
 800bf26:	f6ff aee0 	blt.w	800bcea <__gethex+0x1be>
 800bf2a:	2501      	movs	r5, #1
 800bf2c:	e7c2      	b.n	800beb4 <__gethex+0x388>
 800bf2e:	f016 061f 	ands.w	r6, r6, #31
 800bf32:	d0fa      	beq.n	800bf2a <__gethex+0x3fe>
 800bf34:	4453      	add	r3, sl
 800bf36:	f1c6 0620 	rsb	r6, r6, #32
 800bf3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf3e:	f7fe f93d 	bl	800a1bc <__hi0bits>
 800bf42:	42b0      	cmp	r0, r6
 800bf44:	dbe7      	blt.n	800bf16 <__gethex+0x3ea>
 800bf46:	e7f0      	b.n	800bf2a <__gethex+0x3fe>
 800bf48:	0800c912 	.word	0x0800c912

0800bf4c <L_shift>:
 800bf4c:	f1c2 0208 	rsb	r2, r2, #8
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	b570      	push	{r4, r5, r6, lr}
 800bf54:	f1c2 0620 	rsb	r6, r2, #32
 800bf58:	6843      	ldr	r3, [r0, #4]
 800bf5a:	6804      	ldr	r4, [r0, #0]
 800bf5c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf60:	432c      	orrs	r4, r5
 800bf62:	40d3      	lsrs	r3, r2
 800bf64:	6004      	str	r4, [r0, #0]
 800bf66:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf6a:	4288      	cmp	r0, r1
 800bf6c:	d3f4      	bcc.n	800bf58 <L_shift+0xc>
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}

0800bf70 <__match>:
 800bf70:	b530      	push	{r4, r5, lr}
 800bf72:	6803      	ldr	r3, [r0, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf7a:	b914      	cbnz	r4, 800bf82 <__match+0x12>
 800bf7c:	6003      	str	r3, [r0, #0]
 800bf7e:	2001      	movs	r0, #1
 800bf80:	bd30      	pop	{r4, r5, pc}
 800bf82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bf8a:	2d19      	cmp	r5, #25
 800bf8c:	bf98      	it	ls
 800bf8e:	3220      	addls	r2, #32
 800bf90:	42a2      	cmp	r2, r4
 800bf92:	d0f0      	beq.n	800bf76 <__match+0x6>
 800bf94:	2000      	movs	r0, #0
 800bf96:	e7f3      	b.n	800bf80 <__match+0x10>

0800bf98 <__hexnan>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	680b      	ldr	r3, [r1, #0]
 800bf9e:	6801      	ldr	r1, [r0, #0]
 800bfa0:	115e      	asrs	r6, r3, #5
 800bfa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfa6:	f013 031f 	ands.w	r3, r3, #31
 800bfaa:	b087      	sub	sp, #28
 800bfac:	bf18      	it	ne
 800bfae:	3604      	addne	r6, #4
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	1f37      	subs	r7, r6, #4
 800bfb4:	4682      	mov	sl, r0
 800bfb6:	4690      	mov	r8, r2
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfbe:	46b9      	mov	r9, r7
 800bfc0:	463c      	mov	r4, r7
 800bfc2:	9502      	str	r5, [sp, #8]
 800bfc4:	46ab      	mov	fp, r5
 800bfc6:	784a      	ldrb	r2, [r1, #1]
 800bfc8:	1c4b      	adds	r3, r1, #1
 800bfca:	9303      	str	r3, [sp, #12]
 800bfcc:	b342      	cbz	r2, 800c020 <__hexnan+0x88>
 800bfce:	4610      	mov	r0, r2
 800bfd0:	9105      	str	r1, [sp, #20]
 800bfd2:	9204      	str	r2, [sp, #16]
 800bfd4:	f7ff fd94 	bl	800bb00 <__hexdig_fun>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d151      	bne.n	800c080 <__hexnan+0xe8>
 800bfdc:	9a04      	ldr	r2, [sp, #16]
 800bfde:	9905      	ldr	r1, [sp, #20]
 800bfe0:	2a20      	cmp	r2, #32
 800bfe2:	d818      	bhi.n	800c016 <__hexnan+0x7e>
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	459b      	cmp	fp, r3
 800bfe8:	dd13      	ble.n	800c012 <__hexnan+0x7a>
 800bfea:	454c      	cmp	r4, r9
 800bfec:	d206      	bcs.n	800bffc <__hexnan+0x64>
 800bfee:	2d07      	cmp	r5, #7
 800bff0:	dc04      	bgt.n	800bffc <__hexnan+0x64>
 800bff2:	462a      	mov	r2, r5
 800bff4:	4649      	mov	r1, r9
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff ffa8 	bl	800bf4c <L_shift>
 800bffc:	4544      	cmp	r4, r8
 800bffe:	d952      	bls.n	800c0a6 <__hexnan+0x10e>
 800c000:	2300      	movs	r3, #0
 800c002:	f1a4 0904 	sub.w	r9, r4, #4
 800c006:	f844 3c04 	str.w	r3, [r4, #-4]
 800c00a:	f8cd b008 	str.w	fp, [sp, #8]
 800c00e:	464c      	mov	r4, r9
 800c010:	461d      	mov	r5, r3
 800c012:	9903      	ldr	r1, [sp, #12]
 800c014:	e7d7      	b.n	800bfc6 <__hexnan+0x2e>
 800c016:	2a29      	cmp	r2, #41	@ 0x29
 800c018:	d157      	bne.n	800c0ca <__hexnan+0x132>
 800c01a:	3102      	adds	r1, #2
 800c01c:	f8ca 1000 	str.w	r1, [sl]
 800c020:	f1bb 0f00 	cmp.w	fp, #0
 800c024:	d051      	beq.n	800c0ca <__hexnan+0x132>
 800c026:	454c      	cmp	r4, r9
 800c028:	d206      	bcs.n	800c038 <__hexnan+0xa0>
 800c02a:	2d07      	cmp	r5, #7
 800c02c:	dc04      	bgt.n	800c038 <__hexnan+0xa0>
 800c02e:	462a      	mov	r2, r5
 800c030:	4649      	mov	r1, r9
 800c032:	4620      	mov	r0, r4
 800c034:	f7ff ff8a 	bl	800bf4c <L_shift>
 800c038:	4544      	cmp	r4, r8
 800c03a:	d936      	bls.n	800c0aa <__hexnan+0x112>
 800c03c:	f1a8 0204 	sub.w	r2, r8, #4
 800c040:	4623      	mov	r3, r4
 800c042:	f853 1b04 	ldr.w	r1, [r3], #4
 800c046:	f842 1f04 	str.w	r1, [r2, #4]!
 800c04a:	429f      	cmp	r7, r3
 800c04c:	d2f9      	bcs.n	800c042 <__hexnan+0xaa>
 800c04e:	1b3b      	subs	r3, r7, r4
 800c050:	f023 0303 	bic.w	r3, r3, #3
 800c054:	3304      	adds	r3, #4
 800c056:	3401      	adds	r4, #1
 800c058:	3e03      	subs	r6, #3
 800c05a:	42b4      	cmp	r4, r6
 800c05c:	bf88      	it	hi
 800c05e:	2304      	movhi	r3, #4
 800c060:	4443      	add	r3, r8
 800c062:	2200      	movs	r2, #0
 800c064:	f843 2b04 	str.w	r2, [r3], #4
 800c068:	429f      	cmp	r7, r3
 800c06a:	d2fb      	bcs.n	800c064 <__hexnan+0xcc>
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	b91b      	cbnz	r3, 800c078 <__hexnan+0xe0>
 800c070:	4547      	cmp	r7, r8
 800c072:	d128      	bne.n	800c0c6 <__hexnan+0x12e>
 800c074:	2301      	movs	r3, #1
 800c076:	603b      	str	r3, [r7, #0]
 800c078:	2005      	movs	r0, #5
 800c07a:	b007      	add	sp, #28
 800c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c080:	3501      	adds	r5, #1
 800c082:	2d08      	cmp	r5, #8
 800c084:	f10b 0b01 	add.w	fp, fp, #1
 800c088:	dd06      	ble.n	800c098 <__hexnan+0x100>
 800c08a:	4544      	cmp	r4, r8
 800c08c:	d9c1      	bls.n	800c012 <__hexnan+0x7a>
 800c08e:	2300      	movs	r3, #0
 800c090:	f844 3c04 	str.w	r3, [r4, #-4]
 800c094:	2501      	movs	r5, #1
 800c096:	3c04      	subs	r4, #4
 800c098:	6822      	ldr	r2, [r4, #0]
 800c09a:	f000 000f 	and.w	r0, r0, #15
 800c09e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c0a2:	6020      	str	r0, [r4, #0]
 800c0a4:	e7b5      	b.n	800c012 <__hexnan+0x7a>
 800c0a6:	2508      	movs	r5, #8
 800c0a8:	e7b3      	b.n	800c012 <__hexnan+0x7a>
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0dd      	beq.n	800c06c <__hexnan+0xd4>
 800c0b0:	f1c3 0320 	rsb	r3, r3, #32
 800c0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b8:	40da      	lsrs	r2, r3
 800c0ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0be:	4013      	ands	r3, r2
 800c0c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0c4:	e7d2      	b.n	800c06c <__hexnan+0xd4>
 800c0c6:	3f04      	subs	r7, #4
 800c0c8:	e7d0      	b.n	800c06c <__hexnan+0xd4>
 800c0ca:	2004      	movs	r0, #4
 800c0cc:	e7d5      	b.n	800c07a <__hexnan+0xe2>

0800c0ce <__ascii_mbtowc>:
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	b901      	cbnz	r1, 800c0d4 <__ascii_mbtowc+0x6>
 800c0d2:	a901      	add	r1, sp, #4
 800c0d4:	b142      	cbz	r2, 800c0e8 <__ascii_mbtowc+0x1a>
 800c0d6:	b14b      	cbz	r3, 800c0ec <__ascii_mbtowc+0x1e>
 800c0d8:	7813      	ldrb	r3, [r2, #0]
 800c0da:	600b      	str	r3, [r1, #0]
 800c0dc:	7812      	ldrb	r2, [r2, #0]
 800c0de:	1e10      	subs	r0, r2, #0
 800c0e0:	bf18      	it	ne
 800c0e2:	2001      	movne	r0, #1
 800c0e4:	b002      	add	sp, #8
 800c0e6:	4770      	bx	lr
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	e7fb      	b.n	800c0e4 <__ascii_mbtowc+0x16>
 800c0ec:	f06f 0001 	mvn.w	r0, #1
 800c0f0:	e7f8      	b.n	800c0e4 <__ascii_mbtowc+0x16>

0800c0f2 <_realloc_r>:
 800c0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	4615      	mov	r5, r2
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	b921      	cbnz	r1, 800c108 <_realloc_r+0x16>
 800c0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c102:	4611      	mov	r1, r2
 800c104:	f7fd bedc 	b.w	8009ec0 <_malloc_r>
 800c108:	b92a      	cbnz	r2, 800c116 <_realloc_r+0x24>
 800c10a:	f7fd fe65 	bl	8009dd8 <_free_r>
 800c10e:	2400      	movs	r4, #0
 800c110:	4620      	mov	r0, r4
 800c112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c116:	f000 f840 	bl	800c19a <_malloc_usable_size_r>
 800c11a:	4285      	cmp	r5, r0
 800c11c:	4606      	mov	r6, r0
 800c11e:	d802      	bhi.n	800c126 <_realloc_r+0x34>
 800c120:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c124:	d8f4      	bhi.n	800c110 <_realloc_r+0x1e>
 800c126:	4629      	mov	r1, r5
 800c128:	4640      	mov	r0, r8
 800c12a:	f7fd fec9 	bl	8009ec0 <_malloc_r>
 800c12e:	4607      	mov	r7, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d0ec      	beq.n	800c10e <_realloc_r+0x1c>
 800c134:	42b5      	cmp	r5, r6
 800c136:	462a      	mov	r2, r5
 800c138:	4621      	mov	r1, r4
 800c13a:	bf28      	it	cs
 800c13c:	4632      	movcs	r2, r6
 800c13e:	f7ff fc45 	bl	800b9cc <memcpy>
 800c142:	4621      	mov	r1, r4
 800c144:	4640      	mov	r0, r8
 800c146:	f7fd fe47 	bl	8009dd8 <_free_r>
 800c14a:	463c      	mov	r4, r7
 800c14c:	e7e0      	b.n	800c110 <_realloc_r+0x1e>

0800c14e <__ascii_wctomb>:
 800c14e:	4603      	mov	r3, r0
 800c150:	4608      	mov	r0, r1
 800c152:	b141      	cbz	r1, 800c166 <__ascii_wctomb+0x18>
 800c154:	2aff      	cmp	r2, #255	@ 0xff
 800c156:	d904      	bls.n	800c162 <__ascii_wctomb+0x14>
 800c158:	228a      	movs	r2, #138	@ 0x8a
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295
 800c160:	4770      	bx	lr
 800c162:	700a      	strb	r2, [r1, #0]
 800c164:	2001      	movs	r0, #1
 800c166:	4770      	bx	lr

0800c168 <fiprintf>:
 800c168:	b40e      	push	{r1, r2, r3}
 800c16a:	b503      	push	{r0, r1, lr}
 800c16c:	4601      	mov	r1, r0
 800c16e:	ab03      	add	r3, sp, #12
 800c170:	4805      	ldr	r0, [pc, #20]	@ (800c188 <fiprintf+0x20>)
 800c172:	f853 2b04 	ldr.w	r2, [r3], #4
 800c176:	6800      	ldr	r0, [r0, #0]
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	f000 f83f 	bl	800c1fc <_vfiprintf_r>
 800c17e:	b002      	add	sp, #8
 800c180:	f85d eb04 	ldr.w	lr, [sp], #4
 800c184:	b003      	add	sp, #12
 800c186:	4770      	bx	lr
 800c188:	20000018 	.word	0x20000018

0800c18c <abort>:
 800c18c:	b508      	push	{r3, lr}
 800c18e:	2006      	movs	r0, #6
 800c190:	f000 fa08 	bl	800c5a4 <raise>
 800c194:	2001      	movs	r0, #1
 800c196:	f7f5 ff4b 	bl	8002030 <_exit>

0800c19a <_malloc_usable_size_r>:
 800c19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c19e:	1f18      	subs	r0, r3, #4
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	bfbc      	itt	lt
 800c1a4:	580b      	ldrlt	r3, [r1, r0]
 800c1a6:	18c0      	addlt	r0, r0, r3
 800c1a8:	4770      	bx	lr

0800c1aa <__sfputc_r>:
 800c1aa:	6893      	ldr	r3, [r2, #8]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	b410      	push	{r4}
 800c1b2:	6093      	str	r3, [r2, #8]
 800c1b4:	da08      	bge.n	800c1c8 <__sfputc_r+0x1e>
 800c1b6:	6994      	ldr	r4, [r2, #24]
 800c1b8:	42a3      	cmp	r3, r4
 800c1ba:	db01      	blt.n	800c1c0 <__sfputc_r+0x16>
 800c1bc:	290a      	cmp	r1, #10
 800c1be:	d103      	bne.n	800c1c8 <__sfputc_r+0x1e>
 800c1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1c4:	f000 b932 	b.w	800c42c <__swbuf_r>
 800c1c8:	6813      	ldr	r3, [r2, #0]
 800c1ca:	1c58      	adds	r0, r3, #1
 800c1cc:	6010      	str	r0, [r2, #0]
 800c1ce:	7019      	strb	r1, [r3, #0]
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <__sfputs_r>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	4606      	mov	r6, r0
 800c1dc:	460f      	mov	r7, r1
 800c1de:	4614      	mov	r4, r2
 800c1e0:	18d5      	adds	r5, r2, r3
 800c1e2:	42ac      	cmp	r4, r5
 800c1e4:	d101      	bne.n	800c1ea <__sfputs_r+0x12>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	e007      	b.n	800c1fa <__sfputs_r+0x22>
 800c1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ee:	463a      	mov	r2, r7
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f7ff ffda 	bl	800c1aa <__sfputc_r>
 800c1f6:	1c43      	adds	r3, r0, #1
 800c1f8:	d1f3      	bne.n	800c1e2 <__sfputs_r+0xa>
 800c1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1fc <_vfiprintf_r>:
 800c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c200:	460d      	mov	r5, r1
 800c202:	b09d      	sub	sp, #116	@ 0x74
 800c204:	4614      	mov	r4, r2
 800c206:	4698      	mov	r8, r3
 800c208:	4606      	mov	r6, r0
 800c20a:	b118      	cbz	r0, 800c214 <_vfiprintf_r+0x18>
 800c20c:	6a03      	ldr	r3, [r0, #32]
 800c20e:	b90b      	cbnz	r3, 800c214 <_vfiprintf_r+0x18>
 800c210:	f7fc fe76 	bl	8008f00 <__sinit>
 800c214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c216:	07d9      	lsls	r1, r3, #31
 800c218:	d405      	bmi.n	800c226 <_vfiprintf_r+0x2a>
 800c21a:	89ab      	ldrh	r3, [r5, #12]
 800c21c:	059a      	lsls	r2, r3, #22
 800c21e:	d402      	bmi.n	800c226 <_vfiprintf_r+0x2a>
 800c220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c222:	f7fc ff84 	bl	800912e <__retarget_lock_acquire_recursive>
 800c226:	89ab      	ldrh	r3, [r5, #12]
 800c228:	071b      	lsls	r3, r3, #28
 800c22a:	d501      	bpl.n	800c230 <_vfiprintf_r+0x34>
 800c22c:	692b      	ldr	r3, [r5, #16]
 800c22e:	b99b      	cbnz	r3, 800c258 <_vfiprintf_r+0x5c>
 800c230:	4629      	mov	r1, r5
 800c232:	4630      	mov	r0, r6
 800c234:	f000 f938 	bl	800c4a8 <__swsetup_r>
 800c238:	b170      	cbz	r0, 800c258 <_vfiprintf_r+0x5c>
 800c23a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c23c:	07dc      	lsls	r4, r3, #31
 800c23e:	d504      	bpl.n	800c24a <_vfiprintf_r+0x4e>
 800c240:	f04f 30ff 	mov.w	r0, #4294967295
 800c244:	b01d      	add	sp, #116	@ 0x74
 800c246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24a:	89ab      	ldrh	r3, [r5, #12]
 800c24c:	0598      	lsls	r0, r3, #22
 800c24e:	d4f7      	bmi.n	800c240 <_vfiprintf_r+0x44>
 800c250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c252:	f7fc ff6d 	bl	8009130 <__retarget_lock_release_recursive>
 800c256:	e7f3      	b.n	800c240 <_vfiprintf_r+0x44>
 800c258:	2300      	movs	r3, #0
 800c25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c25c:	2320      	movs	r3, #32
 800c25e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c262:	f8cd 800c 	str.w	r8, [sp, #12]
 800c266:	2330      	movs	r3, #48	@ 0x30
 800c268:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c418 <_vfiprintf_r+0x21c>
 800c26c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c270:	f04f 0901 	mov.w	r9, #1
 800c274:	4623      	mov	r3, r4
 800c276:	469a      	mov	sl, r3
 800c278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c27c:	b10a      	cbz	r2, 800c282 <_vfiprintf_r+0x86>
 800c27e:	2a25      	cmp	r2, #37	@ 0x25
 800c280:	d1f9      	bne.n	800c276 <_vfiprintf_r+0x7a>
 800c282:	ebba 0b04 	subs.w	fp, sl, r4
 800c286:	d00b      	beq.n	800c2a0 <_vfiprintf_r+0xa4>
 800c288:	465b      	mov	r3, fp
 800c28a:	4622      	mov	r2, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff ffa2 	bl	800c1d8 <__sfputs_r>
 800c294:	3001      	adds	r0, #1
 800c296:	f000 80a7 	beq.w	800c3e8 <_vfiprintf_r+0x1ec>
 800c29a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c29c:	445a      	add	r2, fp
 800c29e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 809f 	beq.w	800c3e8 <_vfiprintf_r+0x1ec>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b4:	f10a 0a01 	add.w	sl, sl, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	9307      	str	r3, [sp, #28]
 800c2bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2c2:	4654      	mov	r4, sl
 800c2c4:	2205      	movs	r2, #5
 800c2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ca:	4853      	ldr	r0, [pc, #332]	@ (800c418 <_vfiprintf_r+0x21c>)
 800c2cc:	f7f3 ff90 	bl	80001f0 <memchr>
 800c2d0:	9a04      	ldr	r2, [sp, #16]
 800c2d2:	b9d8      	cbnz	r0, 800c30c <_vfiprintf_r+0x110>
 800c2d4:	06d1      	lsls	r1, r2, #27
 800c2d6:	bf44      	itt	mi
 800c2d8:	2320      	movmi	r3, #32
 800c2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2de:	0713      	lsls	r3, r2, #28
 800c2e0:	bf44      	itt	mi
 800c2e2:	232b      	movmi	r3, #43	@ 0x2b
 800c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2ee:	d015      	beq.n	800c31c <_vfiprintf_r+0x120>
 800c2f0:	9a07      	ldr	r2, [sp, #28]
 800c2f2:	4654      	mov	r4, sl
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	f04f 0c0a 	mov.w	ip, #10
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c300:	3b30      	subs	r3, #48	@ 0x30
 800c302:	2b09      	cmp	r3, #9
 800c304:	d94b      	bls.n	800c39e <_vfiprintf_r+0x1a2>
 800c306:	b1b0      	cbz	r0, 800c336 <_vfiprintf_r+0x13a>
 800c308:	9207      	str	r2, [sp, #28]
 800c30a:	e014      	b.n	800c336 <_vfiprintf_r+0x13a>
 800c30c:	eba0 0308 	sub.w	r3, r0, r8
 800c310:	fa09 f303 	lsl.w	r3, r9, r3
 800c314:	4313      	orrs	r3, r2
 800c316:	9304      	str	r3, [sp, #16]
 800c318:	46a2      	mov	sl, r4
 800c31a:	e7d2      	b.n	800c2c2 <_vfiprintf_r+0xc6>
 800c31c:	9b03      	ldr	r3, [sp, #12]
 800c31e:	1d19      	adds	r1, r3, #4
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	9103      	str	r1, [sp, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	bfbb      	ittet	lt
 800c328:	425b      	neglt	r3, r3
 800c32a:	f042 0202 	orrlt.w	r2, r2, #2
 800c32e:	9307      	strge	r3, [sp, #28]
 800c330:	9307      	strlt	r3, [sp, #28]
 800c332:	bfb8      	it	lt
 800c334:	9204      	strlt	r2, [sp, #16]
 800c336:	7823      	ldrb	r3, [r4, #0]
 800c338:	2b2e      	cmp	r3, #46	@ 0x2e
 800c33a:	d10a      	bne.n	800c352 <_vfiprintf_r+0x156>
 800c33c:	7863      	ldrb	r3, [r4, #1]
 800c33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c340:	d132      	bne.n	800c3a8 <_vfiprintf_r+0x1ac>
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	1d1a      	adds	r2, r3, #4
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	9203      	str	r2, [sp, #12]
 800c34a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c34e:	3402      	adds	r4, #2
 800c350:	9305      	str	r3, [sp, #20]
 800c352:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c428 <_vfiprintf_r+0x22c>
 800c356:	7821      	ldrb	r1, [r4, #0]
 800c358:	2203      	movs	r2, #3
 800c35a:	4650      	mov	r0, sl
 800c35c:	f7f3 ff48 	bl	80001f0 <memchr>
 800c360:	b138      	cbz	r0, 800c372 <_vfiprintf_r+0x176>
 800c362:	9b04      	ldr	r3, [sp, #16]
 800c364:	eba0 000a 	sub.w	r0, r0, sl
 800c368:	2240      	movs	r2, #64	@ 0x40
 800c36a:	4082      	lsls	r2, r0
 800c36c:	4313      	orrs	r3, r2
 800c36e:	3401      	adds	r4, #1
 800c370:	9304      	str	r3, [sp, #16]
 800c372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c376:	4829      	ldr	r0, [pc, #164]	@ (800c41c <_vfiprintf_r+0x220>)
 800c378:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c37c:	2206      	movs	r2, #6
 800c37e:	f7f3 ff37 	bl	80001f0 <memchr>
 800c382:	2800      	cmp	r0, #0
 800c384:	d03f      	beq.n	800c406 <_vfiprintf_r+0x20a>
 800c386:	4b26      	ldr	r3, [pc, #152]	@ (800c420 <_vfiprintf_r+0x224>)
 800c388:	bb1b      	cbnz	r3, 800c3d2 <_vfiprintf_r+0x1d6>
 800c38a:	9b03      	ldr	r3, [sp, #12]
 800c38c:	3307      	adds	r3, #7
 800c38e:	f023 0307 	bic.w	r3, r3, #7
 800c392:	3308      	adds	r3, #8
 800c394:	9303      	str	r3, [sp, #12]
 800c396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c398:	443b      	add	r3, r7
 800c39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c39c:	e76a      	b.n	800c274 <_vfiprintf_r+0x78>
 800c39e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	e7a8      	b.n	800c2fa <_vfiprintf_r+0xfe>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	3401      	adds	r4, #1
 800c3ac:	9305      	str	r3, [sp, #20]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f04f 0c0a 	mov.w	ip, #10
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ba:	3a30      	subs	r2, #48	@ 0x30
 800c3bc:	2a09      	cmp	r2, #9
 800c3be:	d903      	bls.n	800c3c8 <_vfiprintf_r+0x1cc>
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d0c6      	beq.n	800c352 <_vfiprintf_r+0x156>
 800c3c4:	9105      	str	r1, [sp, #20]
 800c3c6:	e7c4      	b.n	800c352 <_vfiprintf_r+0x156>
 800c3c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e7f0      	b.n	800c3b4 <_vfiprintf_r+0x1b8>
 800c3d2:	ab03      	add	r3, sp, #12
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	462a      	mov	r2, r5
 800c3d8:	4b12      	ldr	r3, [pc, #72]	@ (800c424 <_vfiprintf_r+0x228>)
 800c3da:	a904      	add	r1, sp, #16
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7fb ff37 	bl	8008250 <_printf_float>
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	1c78      	adds	r0, r7, #1
 800c3e6:	d1d6      	bne.n	800c396 <_vfiprintf_r+0x19a>
 800c3e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3ea:	07d9      	lsls	r1, r3, #31
 800c3ec:	d405      	bmi.n	800c3fa <_vfiprintf_r+0x1fe>
 800c3ee:	89ab      	ldrh	r3, [r5, #12]
 800c3f0:	059a      	lsls	r2, r3, #22
 800c3f2:	d402      	bmi.n	800c3fa <_vfiprintf_r+0x1fe>
 800c3f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3f6:	f7fc fe9b 	bl	8009130 <__retarget_lock_release_recursive>
 800c3fa:	89ab      	ldrh	r3, [r5, #12]
 800c3fc:	065b      	lsls	r3, r3, #25
 800c3fe:	f53f af1f 	bmi.w	800c240 <_vfiprintf_r+0x44>
 800c402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c404:	e71e      	b.n	800c244 <_vfiprintf_r+0x48>
 800c406:	ab03      	add	r3, sp, #12
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	462a      	mov	r2, r5
 800c40c:	4b05      	ldr	r3, [pc, #20]	@ (800c424 <_vfiprintf_r+0x228>)
 800c40e:	a904      	add	r1, sp, #16
 800c410:	4630      	mov	r0, r6
 800c412:	f7fc f9b5 	bl	8008780 <_printf_i>
 800c416:	e7e4      	b.n	800c3e2 <_vfiprintf_r+0x1e6>
 800c418:	0800cad0 	.word	0x0800cad0
 800c41c:	0800cada 	.word	0x0800cada
 800c420:	08008251 	.word	0x08008251
 800c424:	0800c1d9 	.word	0x0800c1d9
 800c428:	0800cad6 	.word	0x0800cad6

0800c42c <__swbuf_r>:
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42e:	460e      	mov	r6, r1
 800c430:	4614      	mov	r4, r2
 800c432:	4605      	mov	r5, r0
 800c434:	b118      	cbz	r0, 800c43e <__swbuf_r+0x12>
 800c436:	6a03      	ldr	r3, [r0, #32]
 800c438:	b90b      	cbnz	r3, 800c43e <__swbuf_r+0x12>
 800c43a:	f7fc fd61 	bl	8008f00 <__sinit>
 800c43e:	69a3      	ldr	r3, [r4, #24]
 800c440:	60a3      	str	r3, [r4, #8]
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	071a      	lsls	r2, r3, #28
 800c446:	d501      	bpl.n	800c44c <__swbuf_r+0x20>
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	b943      	cbnz	r3, 800c45e <__swbuf_r+0x32>
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f82a 	bl	800c4a8 <__swsetup_r>
 800c454:	b118      	cbz	r0, 800c45e <__swbuf_r+0x32>
 800c456:	f04f 37ff 	mov.w	r7, #4294967295
 800c45a:	4638      	mov	r0, r7
 800c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	6922      	ldr	r2, [r4, #16]
 800c462:	1a98      	subs	r0, r3, r2
 800c464:	6963      	ldr	r3, [r4, #20]
 800c466:	b2f6      	uxtb	r6, r6
 800c468:	4283      	cmp	r3, r0
 800c46a:	4637      	mov	r7, r6
 800c46c:	dc05      	bgt.n	800c47a <__swbuf_r+0x4e>
 800c46e:	4621      	mov	r1, r4
 800c470:	4628      	mov	r0, r5
 800c472:	f7ff fa47 	bl	800b904 <_fflush_r>
 800c476:	2800      	cmp	r0, #0
 800c478:	d1ed      	bne.n	800c456 <__swbuf_r+0x2a>
 800c47a:	68a3      	ldr	r3, [r4, #8]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	60a3      	str	r3, [r4, #8]
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	1c5a      	adds	r2, r3, #1
 800c484:	6022      	str	r2, [r4, #0]
 800c486:	701e      	strb	r6, [r3, #0]
 800c488:	6962      	ldr	r2, [r4, #20]
 800c48a:	1c43      	adds	r3, r0, #1
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d004      	beq.n	800c49a <__swbuf_r+0x6e>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	07db      	lsls	r3, r3, #31
 800c494:	d5e1      	bpl.n	800c45a <__swbuf_r+0x2e>
 800c496:	2e0a      	cmp	r6, #10
 800c498:	d1df      	bne.n	800c45a <__swbuf_r+0x2e>
 800c49a:	4621      	mov	r1, r4
 800c49c:	4628      	mov	r0, r5
 800c49e:	f7ff fa31 	bl	800b904 <_fflush_r>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d0d9      	beq.n	800c45a <__swbuf_r+0x2e>
 800c4a6:	e7d6      	b.n	800c456 <__swbuf_r+0x2a>

0800c4a8 <__swsetup_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4b29      	ldr	r3, [pc, #164]	@ (800c550 <__swsetup_r+0xa8>)
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	6818      	ldr	r0, [r3, #0]
 800c4b0:	460c      	mov	r4, r1
 800c4b2:	b118      	cbz	r0, 800c4bc <__swsetup_r+0x14>
 800c4b4:	6a03      	ldr	r3, [r0, #32]
 800c4b6:	b90b      	cbnz	r3, 800c4bc <__swsetup_r+0x14>
 800c4b8:	f7fc fd22 	bl	8008f00 <__sinit>
 800c4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c0:	0719      	lsls	r1, r3, #28
 800c4c2:	d422      	bmi.n	800c50a <__swsetup_r+0x62>
 800c4c4:	06da      	lsls	r2, r3, #27
 800c4c6:	d407      	bmi.n	800c4d8 <__swsetup_r+0x30>
 800c4c8:	2209      	movs	r2, #9
 800c4ca:	602a      	str	r2, [r5, #0]
 800c4cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4d0:	81a3      	strh	r3, [r4, #12]
 800c4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d6:	e033      	b.n	800c540 <__swsetup_r+0x98>
 800c4d8:	0758      	lsls	r0, r3, #29
 800c4da:	d512      	bpl.n	800c502 <__swsetup_r+0x5a>
 800c4dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4de:	b141      	cbz	r1, 800c4f2 <__swsetup_r+0x4a>
 800c4e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4e4:	4299      	cmp	r1, r3
 800c4e6:	d002      	beq.n	800c4ee <__swsetup_r+0x46>
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f7fd fc75 	bl	8009dd8 <_free_r>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4f8:	81a3      	strh	r3, [r4, #12]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	6063      	str	r3, [r4, #4]
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	6023      	str	r3, [r4, #0]
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f043 0308 	orr.w	r3, r3, #8
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	6923      	ldr	r3, [r4, #16]
 800c50c:	b94b      	cbnz	r3, 800c522 <__swsetup_r+0x7a>
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c518:	d003      	beq.n	800c522 <__swsetup_r+0x7a>
 800c51a:	4621      	mov	r1, r4
 800c51c:	4628      	mov	r0, r5
 800c51e:	f000 f883 	bl	800c628 <__smakebuf_r>
 800c522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c526:	f013 0201 	ands.w	r2, r3, #1
 800c52a:	d00a      	beq.n	800c542 <__swsetup_r+0x9a>
 800c52c:	2200      	movs	r2, #0
 800c52e:	60a2      	str	r2, [r4, #8]
 800c530:	6962      	ldr	r2, [r4, #20]
 800c532:	4252      	negs	r2, r2
 800c534:	61a2      	str	r2, [r4, #24]
 800c536:	6922      	ldr	r2, [r4, #16]
 800c538:	b942      	cbnz	r2, 800c54c <__swsetup_r+0xa4>
 800c53a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c53e:	d1c5      	bne.n	800c4cc <__swsetup_r+0x24>
 800c540:	bd38      	pop	{r3, r4, r5, pc}
 800c542:	0799      	lsls	r1, r3, #30
 800c544:	bf58      	it	pl
 800c546:	6962      	ldrpl	r2, [r4, #20]
 800c548:	60a2      	str	r2, [r4, #8]
 800c54a:	e7f4      	b.n	800c536 <__swsetup_r+0x8e>
 800c54c:	2000      	movs	r0, #0
 800c54e:	e7f7      	b.n	800c540 <__swsetup_r+0x98>
 800c550:	20000018 	.word	0x20000018

0800c554 <_raise_r>:
 800c554:	291f      	cmp	r1, #31
 800c556:	b538      	push	{r3, r4, r5, lr}
 800c558:	4605      	mov	r5, r0
 800c55a:	460c      	mov	r4, r1
 800c55c:	d904      	bls.n	800c568 <_raise_r+0x14>
 800c55e:	2316      	movs	r3, #22
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	f04f 30ff 	mov.w	r0, #4294967295
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c56a:	b112      	cbz	r2, 800c572 <_raise_r+0x1e>
 800c56c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c570:	b94b      	cbnz	r3, 800c586 <_raise_r+0x32>
 800c572:	4628      	mov	r0, r5
 800c574:	f000 f830 	bl	800c5d8 <_getpid_r>
 800c578:	4622      	mov	r2, r4
 800c57a:	4601      	mov	r1, r0
 800c57c:	4628      	mov	r0, r5
 800c57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c582:	f000 b817 	b.w	800c5b4 <_kill_r>
 800c586:	2b01      	cmp	r3, #1
 800c588:	d00a      	beq.n	800c5a0 <_raise_r+0x4c>
 800c58a:	1c59      	adds	r1, r3, #1
 800c58c:	d103      	bne.n	800c596 <_raise_r+0x42>
 800c58e:	2316      	movs	r3, #22
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	2001      	movs	r0, #1
 800c594:	e7e7      	b.n	800c566 <_raise_r+0x12>
 800c596:	2100      	movs	r1, #0
 800c598:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c59c:	4620      	mov	r0, r4
 800c59e:	4798      	blx	r3
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e7e0      	b.n	800c566 <_raise_r+0x12>

0800c5a4 <raise>:
 800c5a4:	4b02      	ldr	r3, [pc, #8]	@ (800c5b0 <raise+0xc>)
 800c5a6:	4601      	mov	r1, r0
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	f7ff bfd3 	b.w	800c554 <_raise_r>
 800c5ae:	bf00      	nop
 800c5b0:	20000018 	.word	0x20000018

0800c5b4 <_kill_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d07      	ldr	r5, [pc, #28]	@ (800c5d4 <_kill_r+0x20>)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	4611      	mov	r1, r2
 800c5c0:	602b      	str	r3, [r5, #0]
 800c5c2:	f7f5 fd25 	bl	8002010 <_kill>
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	d102      	bne.n	800c5d0 <_kill_r+0x1c>
 800c5ca:	682b      	ldr	r3, [r5, #0]
 800c5cc:	b103      	cbz	r3, 800c5d0 <_kill_r+0x1c>
 800c5ce:	6023      	str	r3, [r4, #0]
 800c5d0:	bd38      	pop	{r3, r4, r5, pc}
 800c5d2:	bf00      	nop
 800c5d4:	2000060c 	.word	0x2000060c

0800c5d8 <_getpid_r>:
 800c5d8:	f7f5 bd12 	b.w	8002000 <_getpid>

0800c5dc <__swhatbuf_r>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	460c      	mov	r4, r1
 800c5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e4:	2900      	cmp	r1, #0
 800c5e6:	b096      	sub	sp, #88	@ 0x58
 800c5e8:	4615      	mov	r5, r2
 800c5ea:	461e      	mov	r6, r3
 800c5ec:	da0d      	bge.n	800c60a <__swhatbuf_r+0x2e>
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5f4:	f04f 0100 	mov.w	r1, #0
 800c5f8:	bf14      	ite	ne
 800c5fa:	2340      	movne	r3, #64	@ 0x40
 800c5fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c600:	2000      	movs	r0, #0
 800c602:	6031      	str	r1, [r6, #0]
 800c604:	602b      	str	r3, [r5, #0]
 800c606:	b016      	add	sp, #88	@ 0x58
 800c608:	bd70      	pop	{r4, r5, r6, pc}
 800c60a:	466a      	mov	r2, sp
 800c60c:	f000 f848 	bl	800c6a0 <_fstat_r>
 800c610:	2800      	cmp	r0, #0
 800c612:	dbec      	blt.n	800c5ee <__swhatbuf_r+0x12>
 800c614:	9901      	ldr	r1, [sp, #4]
 800c616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c61a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c61e:	4259      	negs	r1, r3
 800c620:	4159      	adcs	r1, r3
 800c622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c626:	e7eb      	b.n	800c600 <__swhatbuf_r+0x24>

0800c628 <__smakebuf_r>:
 800c628:	898b      	ldrh	r3, [r1, #12]
 800c62a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c62c:	079d      	lsls	r5, r3, #30
 800c62e:	4606      	mov	r6, r0
 800c630:	460c      	mov	r4, r1
 800c632:	d507      	bpl.n	800c644 <__smakebuf_r+0x1c>
 800c634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	6123      	str	r3, [r4, #16]
 800c63c:	2301      	movs	r3, #1
 800c63e:	6163      	str	r3, [r4, #20]
 800c640:	b003      	add	sp, #12
 800c642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c644:	ab01      	add	r3, sp, #4
 800c646:	466a      	mov	r2, sp
 800c648:	f7ff ffc8 	bl	800c5dc <__swhatbuf_r>
 800c64c:	9f00      	ldr	r7, [sp, #0]
 800c64e:	4605      	mov	r5, r0
 800c650:	4639      	mov	r1, r7
 800c652:	4630      	mov	r0, r6
 800c654:	f7fd fc34 	bl	8009ec0 <_malloc_r>
 800c658:	b948      	cbnz	r0, 800c66e <__smakebuf_r+0x46>
 800c65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c65e:	059a      	lsls	r2, r3, #22
 800c660:	d4ee      	bmi.n	800c640 <__smakebuf_r+0x18>
 800c662:	f023 0303 	bic.w	r3, r3, #3
 800c666:	f043 0302 	orr.w	r3, r3, #2
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	e7e2      	b.n	800c634 <__smakebuf_r+0xc>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	6020      	str	r0, [r4, #0]
 800c672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c676:	81a3      	strh	r3, [r4, #12]
 800c678:	9b01      	ldr	r3, [sp, #4]
 800c67a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c67e:	b15b      	cbz	r3, 800c698 <__smakebuf_r+0x70>
 800c680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c684:	4630      	mov	r0, r6
 800c686:	f000 f81d 	bl	800c6c4 <_isatty_r>
 800c68a:	b128      	cbz	r0, 800c698 <__smakebuf_r+0x70>
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	f023 0303 	bic.w	r3, r3, #3
 800c692:	f043 0301 	orr.w	r3, r3, #1
 800c696:	81a3      	strh	r3, [r4, #12]
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	431d      	orrs	r5, r3
 800c69c:	81a5      	strh	r5, [r4, #12]
 800c69e:	e7cf      	b.n	800c640 <__smakebuf_r+0x18>

0800c6a0 <_fstat_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4d07      	ldr	r5, [pc, #28]	@ (800c6c0 <_fstat_r+0x20>)
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	f7f5 fd0f 	bl	80020d0 <_fstat>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	d102      	bne.n	800c6bc <_fstat_r+0x1c>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	b103      	cbz	r3, 800c6bc <_fstat_r+0x1c>
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	bd38      	pop	{r3, r4, r5, pc}
 800c6be:	bf00      	nop
 800c6c0:	2000060c 	.word	0x2000060c

0800c6c4 <_isatty_r>:
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	4d06      	ldr	r5, [pc, #24]	@ (800c6e0 <_isatty_r+0x1c>)
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	4608      	mov	r0, r1
 800c6ce:	602b      	str	r3, [r5, #0]
 800c6d0:	f7f5 fd0e 	bl	80020f0 <_isatty>
 800c6d4:	1c43      	adds	r3, r0, #1
 800c6d6:	d102      	bne.n	800c6de <_isatty_r+0x1a>
 800c6d8:	682b      	ldr	r3, [r5, #0]
 800c6da:	b103      	cbz	r3, 800c6de <_isatty_r+0x1a>
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	bd38      	pop	{r3, r4, r5, pc}
 800c6e0:	2000060c 	.word	0x2000060c

0800c6e4 <_init>:
 800c6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e6:	bf00      	nop
 800c6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ea:	bc08      	pop	{r3}
 800c6ec:	469e      	mov	lr, r3
 800c6ee:	4770      	bx	lr

0800c6f0 <_fini>:
 800c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f2:	bf00      	nop
 800c6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6f6:	bc08      	pop	{r3}
 800c6f8:	469e      	mov	lr, r3
 800c6fa:	4770      	bx	lr
