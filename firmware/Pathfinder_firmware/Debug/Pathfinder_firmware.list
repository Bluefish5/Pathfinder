
Pathfinder_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010660  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  080107f0  080107f0  000117f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f68  08010f68  000121e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010f68  08010f68  00011f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f70  08010f70  000121e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f70  08010f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010f74  08010f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08010f78  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200001e0  08011158  000121e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  08011158  000126fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5d0  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b9  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00030ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000159b  00000000  00000000  000326b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4f1  00000000  00000000  00033c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eaf0  00000000  00000000  0005f144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112b3b  00000000  00000000  0007dc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019076f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fb0  00000000  00000000  001907b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00199764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107d8 	.word	0x080107d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080107d8 	.word	0x080107d8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <cJSON_strdup+0x1c>
    {
        return NULL;
 800101c:	2300      	movs	r3, #0
 800101e:	e015      	b.n	800104c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f935 	bl	8000290 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	4798      	blx	r3
 8001034:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <cJSON_strdup+0x3c>
    {
        return NULL;
 800103c:	2300      	movs	r3, #0
 800103e:	e005      	b.n	800104c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f00b fb76 	bl	800c736 <memcpy>

    return copy;
 800104a:	68bb      	ldr	r3, [r7, #8]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2028      	movs	r0, #40	@ 0x28
 8001062:	4798      	blx	r3
 8001064:	60f8      	str	r0, [r7, #12]
    if (node)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800106c:	2228      	movs	r2, #40	@ 0x28
 800106e:	2100      	movs	r1, #0
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f00b fabe 	bl	800c5f2 <memset>
    }

    return node;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800108c:	e03d      	b.n	800110a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109c:	2b00      	cmp	r3, #0
 800109e:	d108      	bne.n	80010b2 <cJSON_Delete+0x32>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffe7 	bl	8001080 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <cJSON_Delete+0x58>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <cJSON_Delete+0x9c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6912      	ldr	r2, [r2, #16]
 80010ce:	4610      	mov	r0, r2
 80010d0:	4798      	blx	r3
            item->valuestring = NULL;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10c      	bne.n	80010fe <cJSON_Delete+0x7e>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <cJSON_Delete+0x9c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6a12      	ldr	r2, [r2, #32]
 80010f4:	4610      	mov	r0, r2
 80010f6:	4798      	blx	r3
            item->string = NULL;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <cJSON_Delete+0x9c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	4798      	blx	r3
        item = next;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1be      	bne.n	800108e <cJSON_Delete+0xe>
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001124:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <ensure+0x20>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <ensure+0x24>
    {
        return NULL;
 8001150:	2300      	movs	r3, #0
 8001152:	e083      	b.n	800125c <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d007      	beq.n	800116c <ensure+0x3c>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d301      	bcc.n	800116c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001168:	2300      	movs	r3, #0
 800116a:	e077      	b.n	800125c <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da01      	bge.n	8001176 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001172:	2300      	movs	r3, #0
 8001174:	e072      	b.n	800125c <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	3301      	adds	r3, #1
 8001180:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d805      	bhi.n	8001198 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	4413      	add	r3, r2
 8001196:	e061      	b.n	800125c <ensure+0x12c>
    }

    if (p->noalloc) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <ensure+0x74>
        return NULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e05b      	b.n	800125c <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011aa:	d308      	bcc.n	80011be <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db03      	blt.n	80011ba <ensure+0x8a>
        {
            newsize = INT_MAX;
 80011b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	e004      	b.n	80011c4 <ensure+0x94>
        }
        else
        {
            return NULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e04e      	b.n	800125c <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d018      	beq.n	80011fe <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	4610      	mov	r0, r2
 80011d8:	4798      	blx	r3
 80011da:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d132      	bne.n	8001248 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	4610      	mov	r0, r2
 80011ec:	4798      	blx	r3
            p->length = 0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]

            return NULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e02e      	b.n	800125c <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	4798      	blx	r3
 8001206:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4610      	mov	r0, r2
 8001218:	4798      	blx	r3
            p->length = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

            return NULL;
 8001226:	2300      	movs	r3, #0
 8001228:	e018      	b.n	800125c <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	3301      	adds	r3, #1
 8001234:	461a      	mov	r2, r3
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f00b fa7d 	bl	800c736 <memcpy>
        p->hooks.deallocate(p->buffer);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	4610      	mov	r0, r2
 8001246:	4798      	blx	r3
    }
    p->length = newsize;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4413      	add	r3, r2
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d013      	beq.n	800129e <update_offset+0x3a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00f      	beq.n	800129e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689c      	ldr	r4, [r3, #8]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7fe fffe 	bl	8000290 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	18e2      	adds	r2, r4, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e000      	b.n	80012a0 <update_offset+0x3c>
        return;
 800129e:	bf00      	nop
}
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
	...

080012a8 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ac:	b087      	sub	sp, #28
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80012b4:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	68fe      	ldr	r6, [r7, #12]
 80012bc:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	687e      	ldr	r6, [r7, #4]
 80012c4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80012c8:	f7ff fc36 	bl	8000b38 <__aeabi_dcmpgt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <compare_double+0x34>
 80012d2:	68bc      	ldr	r4, [r7, #8]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012da:	e003      	b.n	80012e4 <compare_double+0x3c>
 80012dc:	683c      	ldr	r4, [r7, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012e4:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80012e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012f0:	f7fe ffda 	bl	80002a8 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4690      	mov	r8, r2
 80012fa:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <compare_double+0x8c>)
 8001304:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001308:	f7ff f986 	bl	8000618 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	2101      	movs	r1, #1
 8001312:	460c      	mov	r4, r1
 8001314:	4640      	mov	r0, r8
 8001316:	4649      	mov	r1, r9
 8001318:	f7ff fbfa 	bl	8000b10 <__aeabi_dcmple>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <compare_double+0x7e>
 8001322:	2300      	movs	r3, #0
 8001324:	461c      	mov	r4, r3
 8001326:	b2e3      	uxtb	r3, r4
}
 8001328:	4618      	mov	r0, r3
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001332:	bf00      	nop
 8001334:	3cb00000 	.word	0x3cb00000

08001338 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b093      	sub	sp, #76	@ 0x4c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800134c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800136e:	f7ff fed7 	bl	8001120 <get_decimal_point>
 8001372:	4603      	mov	r3, r0
 8001374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <print_number+0x56>
    {
        return false;
 800138a:	2300      	movs	r3, #0
 800138c:	e0b4      	b.n	80014f8 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800138e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001392:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001396:	f7ff fbd9 	bl	8000b4c <__aeabi_dcmpun>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d121      	bne.n	80013e4 <print_number+0xac>
 80013a0:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80013a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80013a8:	2301      	movs	r3, #1
 80013aa:	461e      	mov	r6, r3
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	4b53      	ldr	r3, [pc, #332]	@ (8001500 <print_number+0x1c8>)
 80013b2:	4620      	mov	r0, r4
 80013b4:	4629      	mov	r1, r5
 80013b6:	f7ff fbc9 	bl	8000b4c <__aeabi_dcmpun>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10b      	bne.n	80013d8 <print_number+0xa0>
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001500 <print_number+0x1c8>)
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7ff fba1 	bl	8000b10 <__aeabi_dcmple>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <print_number+0xa0>
 80013d4:	2300      	movs	r3, #0
 80013d6:	461e      	mov	r6, r3
 80013d8:	b2f3      	uxtb	r3, r6
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4946      	ldr	r1, [pc, #280]	@ (8001504 <print_number+0x1cc>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00b f872 	bl	800c4d4 <siprintf>
 80013f0:	6478      	str	r0, [r7, #68]	@ 0x44
 80013f2:	e03f      	b.n	8001474 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8a3 	bl	8000544 <__aeabi_i2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001406:	f7ff fb6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	493b      	ldr	r1, [pc, #236]	@ (8001508 <print_number+0x1d0>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00b f85a 	bl	800c4d4 <siprintf>
 8001420:	6478      	str	r0, [r7, #68]	@ 0x44
 8001422:	e027      	b.n	8001474 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001424:	f107 0014 	add.w	r0, r7, #20
 8001428:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800142c:	4937      	ldr	r1, [pc, #220]	@ (800150c <print_number+0x1d4>)
 800142e:	f00b f851 	bl	800c4d4 <siprintf>
 8001432:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001434:	f107 0208 	add.w	r2, r7, #8
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4934      	ldr	r1, [pc, #208]	@ (8001510 <print_number+0x1d8>)
 800143e:	4618      	mov	r0, r3
 8001440:	f00b f868 	bl	800c514 <siscanf>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d10c      	bne.n	8001464 <print_number+0x12c>
 800144a:	ed97 7b02 	vldr	d7, [r7, #8]
 800144e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001452:	eeb0 0a47 	vmov.f32	s0, s14
 8001456:	eef0 0a67 	vmov.f32	s1, s15
 800145a:	f7ff ff25 	bl	80012a8 <compare_double>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d107      	bne.n	8001474 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001464:	f107 0014 	add.w	r0, r7, #20
 8001468:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800146c:	4929      	ldr	r1, [pc, #164]	@ (8001514 <print_number+0x1dc>)
 800146e:	f00b f831 	bl	800c4d4 <siprintf>
 8001472:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001476:	2b00      	cmp	r3, #0
 8001478:	db02      	blt.n	8001480 <print_number+0x148>
 800147a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800147c:	2b19      	cmp	r3, #25
 800147e:	dd01      	ble.n	8001484 <print_number+0x14c>
    {
        return false;
 8001480:	2300      	movs	r3, #0
 8001482:	e039      	b.n	80014f8 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001486:	3301      	adds	r3, #1
 8001488:	4619      	mov	r1, r3
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f7ff fe50 	bl	8001130 <ensure>
 8001490:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8001492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <print_number+0x164>
    {
        return false;
 8001498:	2300      	movs	r3, #0
 800149a:	e02d      	b.n	80014f8 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800149c:	2300      	movs	r3, #0
 800149e:	643b      	str	r3, [r7, #64]	@ 0x40
 80014a0:	e01a      	b.n	80014d8 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 80014a2:	f107 0214 	add.w	r2, r7, #20
 80014a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d105      	bne.n	80014c0 <print_number+0x188>
        {
            output_pointer[i] = '.';
 80014b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b8:	4413      	add	r3, r2
 80014ba:	222e      	movs	r2, #46	@ 0x2e
 80014bc:	701a      	strb	r2, [r3, #0]
            continue;
 80014be:	e008      	b.n	80014d2 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 80014c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c4:	4413      	add	r3, r2
 80014c6:	f107 0114 	add.w	r1, r7, #20
 80014ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014cc:	440a      	add	r2, r1
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80014d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014d4:	3301      	adds	r3, #1
 80014d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80014d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3e0      	bcc.n	80014a2 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80014e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014e4:	4413      	add	r3, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014f0:	441a      	add	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	609a      	str	r2, [r3, #8]

    return true;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	374c      	adds	r7, #76	@ 0x4c
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001500:	7fefffff 	.word	0x7fefffff
 8001504:	080107fc 	.word	0x080107fc
 8001508:	08010804 	.word	0x08010804
 800150c:	08010808 	.word	0x08010808
 8001510:	08010810 	.word	0x08010810
 8001514:	08010814 	.word	0x08010814

08001518 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <print_string_ptr+0x28>
    {
        return false;
 800153c:	2300      	movs	r3, #0
 800153e:	e110      	b.n	8001762 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d111      	bne.n	800156a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001546:	2103      	movs	r1, #3
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f7ff fdf1 	bl	8001130 <ensure>
 800154e:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <print_string_ptr+0x42>
        {
            return false;
 8001556:	2300      	movs	r3, #0
 8001558:	e103      	b.n	8001762 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4a83      	ldr	r2, [pc, #524]	@ (800176c <print_string_ptr+0x254>)
 800155e:	8811      	ldrh	r1, [r2, #0]
 8001560:	7892      	ldrb	r2, [r2, #2]
 8001562:	8019      	strh	r1, [r3, #0]
 8001564:	709a      	strb	r2, [r3, #2]

        return true;
 8001566:	2301      	movs	r3, #1
 8001568:	e0fb      	b.n	8001762 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	e024      	b.n	80015ba <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b22      	cmp	r3, #34	@ 0x22
 8001576:	dc0f      	bgt.n	8001598 <print_string_ptr+0x80>
 8001578:	2b08      	cmp	r3, #8
 800157a:	db13      	blt.n	80015a4 <print_string_ptr+0x8c>
 800157c:	3b08      	subs	r3, #8
 800157e:	4a7c      	ldr	r2, [pc, #496]	@ (8001770 <print_string_ptr+0x258>)
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <print_string_ptr+0x84>
 8001596:	e005      	b.n	80015a4 <print_string_ptr+0x8c>
 8001598:	2b5c      	cmp	r3, #92	@ 0x5c
 800159a:	d103      	bne.n	80015a4 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
                break;
 80015a2:	e007      	b.n	80015b4 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b1f      	cmp	r3, #31
 80015aa:	d802      	bhi.n	80015b2 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3305      	adds	r3, #5
 80015b0:	617b      	str	r3, [r7, #20]
                }
                break;
 80015b2:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1d6      	bne.n	8001570 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3303      	adds	r3, #3
 80015d4:	4619      	mov	r1, r3
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f7ff fdaa 	bl	8001130 <ensure>
 80015dc:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <print_string_ptr+0xd0>
    {
        return false;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e0bc      	b.n	8001762 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d117      	bne.n	800161e <print_string_ptr+0x106>
    {
        output[0] = '\"';
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2222      	movs	r2, #34	@ 0x22
 80015f2:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	3301      	adds	r3, #1
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00b f89a 	bl	800c736 <memcpy>
        output[output_length + 1] = '\"';
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4413      	add	r3, r2
 800160a:	2222      	movs	r2, #34	@ 0x22
 800160c:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3302      	adds	r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]

        return true;
 800161a:	2301      	movs	r3, #1
 800161c:	e0a1      	b.n	8001762 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2222      	movs	r2, #34	@ 0x22
 8001622:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	3301      	adds	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e086      	b.n	800173e <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b1f      	cmp	r3, #31
 8001636:	d90c      	bls.n	8001652 <print_string_ptr+0x13a>
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b22      	cmp	r3, #34	@ 0x22
 800163e:	d008      	beq.n	8001652 <print_string_ptr+0x13a>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b5c      	cmp	r3, #92	@ 0x5c
 8001646:	d004      	beq.n	8001652 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e06f      	b.n	8001732 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	61ba      	str	r2, [r7, #24]
 8001658:	225c      	movs	r2, #92	@ 0x5c
 800165a:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b22      	cmp	r3, #34	@ 0x22
 8001662:	dc3d      	bgt.n	80016e0 <print_string_ptr+0x1c8>
 8001664:	2b08      	cmp	r3, #8
 8001666:	db59      	blt.n	800171c <print_string_ptr+0x204>
 8001668:	3b08      	subs	r3, #8
 800166a:	2b1a      	cmp	r3, #26
 800166c:	d856      	bhi.n	800171c <print_string_ptr+0x204>
 800166e:	a201      	add	r2, pc, #4	@ (adr r2, 8001674 <print_string_ptr+0x15c>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016f5 	.word	0x080016f5
 8001678:	08001715 	.word	0x08001715
 800167c:	08001705 	.word	0x08001705
 8001680:	0800171d 	.word	0x0800171d
 8001684:	080016fd 	.word	0x080016fd
 8001688:	0800170d 	.word	0x0800170d
 800168c:	0800171d 	.word	0x0800171d
 8001690:	0800171d 	.word	0x0800171d
 8001694:	0800171d 	.word	0x0800171d
 8001698:	0800171d 	.word	0x0800171d
 800169c:	0800171d 	.word	0x0800171d
 80016a0:	0800171d 	.word	0x0800171d
 80016a4:	0800171d 	.word	0x0800171d
 80016a8:	0800171d 	.word	0x0800171d
 80016ac:	0800171d 	.word	0x0800171d
 80016b0:	0800171d 	.word	0x0800171d
 80016b4:	0800171d 	.word	0x0800171d
 80016b8:	0800171d 	.word	0x0800171d
 80016bc:	0800171d 	.word	0x0800171d
 80016c0:	0800171d 	.word	0x0800171d
 80016c4:	0800171d 	.word	0x0800171d
 80016c8:	0800171d 	.word	0x0800171d
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800171d 	.word	0x0800171d
 80016d4:	0800171d 	.word	0x0800171d
 80016d8:	0800171d 	.word	0x0800171d
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80016e2:	d11b      	bne.n	800171c <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	225c      	movs	r2, #92	@ 0x5c
 80016e8:	701a      	strb	r2, [r3, #0]
                    break;
 80016ea:	e022      	b.n	8001732 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2222      	movs	r2, #34	@ 0x22
 80016f0:	701a      	strb	r2, [r3, #0]
                    break;
 80016f2:	e01e      	b.n	8001732 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2262      	movs	r2, #98	@ 0x62
 80016f8:	701a      	strb	r2, [r3, #0]
                    break;
 80016fa:	e01a      	b.n	8001732 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2266      	movs	r2, #102	@ 0x66
 8001700:	701a      	strb	r2, [r3, #0]
                    break;
 8001702:	e016      	b.n	8001732 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	226e      	movs	r2, #110	@ 0x6e
 8001708:	701a      	strb	r2, [r3, #0]
                    break;
 800170a:	e012      	b.n	8001732 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2272      	movs	r2, #114	@ 0x72
 8001710:	701a      	strb	r2, [r3, #0]
                    break;
 8001712:	e00e      	b.n	8001732 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2274      	movs	r2, #116	@ 0x74
 8001718:	701a      	strb	r2, [r3, #0]
                    break;
 800171a:	e00a      	b.n	8001732 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4914      	ldr	r1, [pc, #80]	@ (8001774 <print_string_ptr+0x25c>)
 8001724:	69b8      	ldr	r0, [r7, #24]
 8001726:	f00a fed5 	bl	800c4d4 <siprintf>
                    output_pointer += 4;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3304      	adds	r3, #4
 800172e:	61bb      	str	r3, [r7, #24]
                    break;
 8001730:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3301      	adds	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3301      	adds	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f af74 	bne.w	8001630 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	2222      	movs	r2, #34	@ 0x22
 8001752:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3302      	adds	r3, #2
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]

    return true;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	0801081c 	.word	0x0801081c
 8001770:	04000037 	.word	0x04000037
 8001774:	08010820 	.word	0x08010820

08001778 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fec5 	bl	8001518 <print_string_ptr>
 800178e:	4603      	mov	r3, r0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	@ 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2224      	movs	r2, #36	@ 0x24
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00a ff1e 	bl	800c5f2 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a3b      	ldr	r2, [pc, #236]	@ (80018a8 <print+0x110>)
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	4610      	mov	r0, r2
 80017c0:	4798      	blx	r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80017c6:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <print+0x110>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d042      	beq.n	8001868 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f86f 	bl	80018cc <print_value>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03b      	beq.n	800186c <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd33 	bl	8001264 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	6938      	ldr	r0, [r7, #16]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	3201      	adds	r2, #1
 8001810:	4611      	mov	r1, r2
 8001812:	4798      	blx	r3
 8001814:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8001816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001818:	2b00      	cmp	r3, #0
 800181a:	d029      	beq.n	8001870 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	e020      	b.n	8001864 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	3201      	adds	r2, #1
 800182a:	4610      	mov	r0, r2
 800182c:	4798      	blx	r3
 800182e:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8001830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01e      	beq.n	8001874 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4293      	cmp	r3, r2
 8001840:	bf28      	it	cs
 8001842:	4613      	movcs	r3, r2
 8001844:	461a      	mov	r2, r3
 8001846:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001848:	f00a ff75 	bl	800c736 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001850:	4413      	add	r3, r2
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4610      	mov	r0, r2
 800185e:	4798      	blx	r3
        buffer->buffer = NULL;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
    }

    return printed;
 8001864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001866:	e01a      	b.n	800189e <print+0x106>
        goto fail;
 8001868:	bf00      	nop
 800186a:	e004      	b.n	8001876 <print+0xde>
        goto fail;
 800186c:	bf00      	nop
 800186e:	e002      	b.n	8001876 <print+0xde>
            goto fail;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <print+0xde>
            goto fail;
 8001874:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4610      	mov	r0, r2
 8001884:	4798      	blx	r3
        buffer->buffer = NULL;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800188a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <print+0x104>
    {
        hooks->deallocate(printed);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001896:	4798      	blx	r3
        printed = NULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3738      	adds	r7, #56	@ 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	08010900 	.word	0x08010900

080018ac <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <cJSON_PrintUnformatted+0x1c>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff6d 	bl	8001798 <print>
 80018be:	4603      	mov	r3, r0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000000 	.word	0x20000000

080018cc <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <print_value+0x1a>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <print_value+0x1e>
    {
        return false;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e0c9      	b.n	8001a7e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b80      	cmp	r3, #128	@ 0x80
 80018f2:	f000 808e 	beq.w	8001a12 <print_value+0x146>
 80018f6:	2b80      	cmp	r3, #128	@ 0x80
 80018f8:	f300 80c0 	bgt.w	8001a7c <print_value+0x1b0>
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	dc49      	bgt.n	8001994 <print_value+0xc8>
 8001900:	2b00      	cmp	r3, #0
 8001902:	f340 80bb 	ble.w	8001a7c <print_value+0x1b0>
 8001906:	3b01      	subs	r3, #1
 8001908:	2b1f      	cmp	r3, #31
 800190a:	f200 80b7 	bhi.w	8001a7c <print_value+0x1b0>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <print_value+0x48>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	080019bf 	.word	0x080019bf
 8001918:	080019e3 	.word	0x080019e3
 800191c:	08001a7d 	.word	0x08001a7d
 8001920:	0800199b 	.word	0x0800199b
 8001924:	08001a7d 	.word	0x08001a7d
 8001928:	08001a7d 	.word	0x08001a7d
 800192c:	08001a7d 	.word	0x08001a7d
 8001930:	08001a07 	.word	0x08001a07
 8001934:	08001a7d 	.word	0x08001a7d
 8001938:	08001a7d 	.word	0x08001a7d
 800193c:	08001a7d 	.word	0x08001a7d
 8001940:	08001a7d 	.word	0x08001a7d
 8001944:	08001a7d 	.word	0x08001a7d
 8001948:	08001a7d 	.word	0x08001a7d
 800194c:	08001a7d 	.word	0x08001a7d
 8001950:	08001a59 	.word	0x08001a59
 8001954:	08001a7d 	.word	0x08001a7d
 8001958:	08001a7d 	.word	0x08001a7d
 800195c:	08001a7d 	.word	0x08001a7d
 8001960:	08001a7d 	.word	0x08001a7d
 8001964:	08001a7d 	.word	0x08001a7d
 8001968:	08001a7d 	.word	0x08001a7d
 800196c:	08001a7d 	.word	0x08001a7d
 8001970:	08001a7d 	.word	0x08001a7d
 8001974:	08001a7d 	.word	0x08001a7d
 8001978:	08001a7d 	.word	0x08001a7d
 800197c:	08001a7d 	.word	0x08001a7d
 8001980:	08001a7d 	.word	0x08001a7d
 8001984:	08001a7d 	.word	0x08001a7d
 8001988:	08001a7d 	.word	0x08001a7d
 800198c:	08001a7d 	.word	0x08001a7d
 8001990:	08001a65 	.word	0x08001a65
 8001994:	2b40      	cmp	r3, #64	@ 0x40
 8001996:	d06b      	beq.n	8001a70 <print_value+0x1a4>
 8001998:	e070      	b.n	8001a7c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800199a:	2105      	movs	r1, #5
 800199c:	6838      	ldr	r0, [r7, #0]
 800199e:	f7ff fbc7 	bl	8001130 <ensure>
 80019a2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <print_value+0xe2>
            {
                return false;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e067      	b.n	8001a7e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a35      	ldr	r2, [pc, #212]	@ (8001a88 <print_value+0x1bc>)
 80019b2:	6810      	ldr	r0, [r2, #0]
 80019b4:	6018      	str	r0, [r3, #0]
 80019b6:	7912      	ldrb	r2, [r2, #4]
 80019b8:	711a      	strb	r2, [r3, #4]
            return true;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e05f      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80019be:	2106      	movs	r1, #6
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f7ff fbb5 	bl	8001130 <ensure>
 80019c6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <print_value+0x106>
            {
                return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e055      	b.n	8001a7e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a8c <print_value+0x1c0>)
 80019d6:	6810      	ldr	r0, [r2, #0]
 80019d8:	6018      	str	r0, [r3, #0]
 80019da:	8892      	ldrh	r2, [r2, #4]
 80019dc:	809a      	strh	r2, [r3, #4]
            return true;
 80019de:	2301      	movs	r3, #1
 80019e0:	e04d      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80019e2:	2105      	movs	r1, #5
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff fba3 	bl	8001130 <ensure>
 80019ea:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <print_value+0x12a>
            {
                return false;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e043      	b.n	8001a7e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a25      	ldr	r2, [pc, #148]	@ (8001a90 <print_value+0x1c4>)
 80019fa:	6810      	ldr	r0, [r2, #0]
 80019fc:	6018      	str	r0, [r3, #0]
 80019fe:	7912      	ldrb	r2, [r2, #4]
 8001a00:	711a      	strb	r2, [r3, #4]
            return true;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e03b      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fc95 	bl	8001338 <print_number>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	e035      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <print_value+0x156>
            {
                return false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e02d      	b.n	8001a7e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fc32 	bl	8000290 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f7ff fb7b 	bl	8001130 <ensure>
 8001a3a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <print_value+0x17a>
            {
                return false;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e01b      	b.n	8001a7e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f00a fe71 	bl	800c736 <memcpy>
            return true;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e012      	b.n	8001a7e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fe8c 	bl	8001778 <print_string>
 8001a60:	4603      	mov	r3, r0
 8001a62:	e00c      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f814 	bl	8001a94 <print_array>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e006      	b.n	8001a7e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f894 	bl	8001ba0 <print_object>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	e000      	b.n	8001a7e <print_value+0x1b2>

        default:
            return false;
 8001a7c:	2300      	movs	r3, #0
    }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	080107fc 	.word	0x080107fc
 8001a8c:	0801082c 	.word	0x0801082c
 8001a90:	08010834 	.word	0x08010834

08001a94 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <print_array+0x22>
    {
        return false;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e070      	b.n	8001b98 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f7ff fb39 	bl	8001130 <ensure>
 8001abe:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <print_array+0x36>
    {
        return false;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e066      	b.n	8001b98 <print_array+0x104>
    }

    *output_pointer = '[';
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	225b      	movs	r2, #91	@ 0x5b
 8001ace:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001ae4:	e03d      	b.n	8001b62 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8001ae6:	6839      	ldr	r1, [r7, #0]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff feef 	bl	80018cc <print_value>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <print_array+0x64>
        {
            return false;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e04f      	b.n	8001b98 <print_array+0x104>
        }
        update_offset(output_buffer);
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f7ff fbb3 	bl	8001264 <update_offset>
        if (current_element->next)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d02a      	beq.n	8001b5c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <print_array+0x7e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e000      	b.n	8001b14 <print_array+0x80>
 8001b12:	2301      	movs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7ff fb07 	bl	8001130 <ensure>
 8001b22:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <print_array+0x9a>
            {
                return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e034      	b.n	8001b98 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	617a      	str	r2, [r7, #20]
 8001b34:	222c      	movs	r2, #44	@ 0x2c
 8001b36:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	617a      	str	r2, [r7, #20]
 8001b46:	2220      	movs	r2, #32
 8001b48:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	441a      	add	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1be      	bne.n	8001ae6 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001b68:	2102      	movs	r1, #2
 8001b6a:	6838      	ldr	r0, [r7, #0]
 8001b6c:	f7ff fae0 	bl	8001130 <ensure>
 8001b70:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <print_array+0xe8>
    {
        return false;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e00d      	b.n	8001b98 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	617a      	str	r2, [r7, #20]
 8001b82:	225d      	movs	r2, #93	@ 0x5d
 8001b84:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	1e5a      	subs	r2, r3, #1
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	60da      	str	r2, [r3, #12]

    return true;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <print_object+0x22>
    {
        return false;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e108      	b.n	8001dd4 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <print_object+0x2e>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e000      	b.n	8001bd0 <print_object+0x30>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f7ff faa9 	bl	8001130 <ensure>
 8001bde:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <print_object+0x4a>
    {
        return false;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e0f4      	b.n	8001dd4 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	61fa      	str	r2, [r7, #28]
 8001bf0:	227b      	movs	r2, #123	@ 0x7b
 8001bf2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	61fa      	str	r2, [r7, #28]
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	441a      	add	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001c1c:	e0a0      	b.n	8001d60 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d022      	beq.n	8001c6c <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f7ff fa7f 	bl	8001130 <ensure>
 8001c32:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <print_object+0x9e>
            {
                return false;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e0ca      	b.n	8001dd4 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e007      	b.n	8001c54 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	61fa      	str	r2, [r7, #28]
 8001c4a:	2209      	movs	r2, #9
 8001c4c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3f2      	bcc.n	8001c44 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	441a      	add	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc50 	bl	8001518 <print_string_ptr>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <print_object+0xe2>
        {
            return false;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e0a8      	b.n	8001dd4 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f7ff faee 	bl	8001264 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <print_object+0xf4>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e000      	b.n	8001c96 <print_object+0xf6>
 8001c94:	2301      	movs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001c98:	68f9      	ldr	r1, [r7, #12]
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f7ff fa48 	bl	8001130 <ensure>
 8001ca0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <print_object+0x10c>
        {
            return false;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e093      	b.n	8001dd4 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	61fa      	str	r2, [r7, #28]
 8001cb2:	223a      	movs	r2, #58	@ 0x3a
 8001cb4:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	61fa      	str	r2, [r7, #28]
 8001cc4:	2209      	movs	r2, #9
 8001cc6:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	441a      	add	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001cd4:	6839      	ldr	r1, [r7, #0]
 8001cd6:	69b8      	ldr	r0, [r7, #24]
 8001cd8:	f7ff fdf8 	bl	80018cc <print_value>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <print_object+0x146>
        {
            return false;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e076      	b.n	8001dd4 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f7ff fabc 	bl	8001264 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <print_object+0x158>
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	e000      	b.n	8001cfa <print_object+0x15a>
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <print_object+0x166>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <print_object+0x168>
 8001d06:	2300      	movs	r3, #0
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	f7ff fa0c 	bl	8001130 <ensure>
 8001d18:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <print_object+0x184>
        {
            return false;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e057      	b.n	8001dd4 <print_object+0x234>
        }
        if (current_item->next)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	61fa      	str	r2, [r7, #28]
 8001d32:	222c      	movs	r2, #44	@ 0x2c
 8001d34:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	61fa      	str	r2, [r7, #28]
 8001d44:	220a      	movs	r2, #10
 8001d46:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	441a      	add	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f47f af5b 	bne.w	8001c1e <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <print_object+0x1d8>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	e000      	b.n	8001d7a <print_object+0x1da>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff f9d7 	bl	8001130 <ensure>
 8001d82:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <print_object+0x1ee>
    {
        return false;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e022      	b.n	8001dd4 <print_object+0x234>
    }
    if (output_buffer->format)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d010      	beq.n	8001db8 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e007      	b.n	8001dac <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	61fa      	str	r2, [r7, #28]
 8001da2:	2209      	movs	r2, #9
 8001da4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	3301      	adds	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d3f1      	bcc.n	8001d9c <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	61fa      	str	r2, [r7, #28]
 8001dbe:	227d      	movs	r2, #125	@ 0x7d
 8001dc0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	60da      	str	r2, [r3, #12]

    return true;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	605a      	str	r2, [r3, #4]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <add_item_to_array+0x22>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <add_item_to_array+0x22>
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d101      	bne.n	8001e24 <add_item_to_array+0x26>
    {
        return false;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e01e      	b.n	8001e62 <add_item_to_array+0x64>
    }

    child = array->child;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00d      	b.n	8001e60 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffc2 	bl	8001ddc <suffix_object>
            array->child->prev = item;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001e72:	687b      	ldr	r3, [r7, #4]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <add_item_to_object+0x30>
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <add_item_to_object+0x30>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <add_item_to_object+0x30>
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d101      	bne.n	8001eb4 <add_item_to_object+0x34>
    {
        return false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e036      	b.n	8001f22 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	f7ff ffd5 	bl	8001e6a <cast_away_const>
 8001ec0:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e00e      	b.n	8001eec <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	68b8      	ldr	r0, [r7, #8]
 8001ed2:	f7ff f897 	bl	8001004 <cJSON_strdup>
 8001ed6:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <add_item_to_object+0x62>
        {
            return false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e01f      	b.n	8001f22 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001eea:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <add_item_to_object+0x8c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6a12      	ldr	r2, [r2, #32]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4798      	blx	r3
    }

    item->string = new_key;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff ff6f 	bl	8001dfe <add_item_to_array>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8001f3a:	ed97 0b00 	vldr	d0, [r7]
 8001f3e:	f000 f81b 	bl	8001f78 <cJSON_CreateNumber>
 8001f42:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <cJSON_AddNumberToObject+0x44>)
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff ff96 	bl	8001e80 <add_item_to_object>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	e003      	b.n	8001f66 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff f88e 	bl	8001080 <cJSON_Delete>
    return NULL;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	00000000 	.word	0x00000000

08001f78 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001f82:	481f      	ldr	r0, [pc, #124]	@ (8002000 <cJSON_CreateNumber+0x88>)
 8001f84:	f7ff f866 	bl	8001054 <cJSON_New_Item>
 8001f88:	60f8      	str	r0, [r7, #12]
    if(item)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d02c      	beq.n	8001fea <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2208      	movs	r2, #8
 8001f94:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f9c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001fa0:	a315      	add	r3, pc, #84	@ (adr r3, 8001ff8 <cJSON_CreateNumber+0x80>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001faa:	f7fe fdbb 	bl	8000b24 <__aeabi_dcmpge>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	e015      	b.n	8001fea <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <cJSON_CreateNumber+0x8c>)
 8001fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fc8:	f7fe fda2 	bl	8000b10 <__aeabi_dcmple>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001fd8:	615a      	str	r2, [r3, #20]
 8001fda:	e006      	b.n	8001fea <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8001fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe0:	f7fe fdca 	bl	8000b78 <__aeabi_d2iz>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	ffc00000 	.word	0xffc00000
 8001ffc:	41dfffff 	.word	0x41dfffff
 8002000:	20000000 	.word	0x20000000
 8002004:	c1e00000 	.word	0xc1e00000

08002008 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800200e:	4807      	ldr	r0, [pc, #28]	@ (800202c <cJSON_CreateObject+0x24>)
 8002010:	f7ff f820 	bl	8001054 <cJSON_New_Item>
 8002014:	6078      	str	r0, [r7, #4]
    if (item)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	60da      	str	r2, [r3, #12]
    }

    return item;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000000 	.word	0x20000000

08002030 <setMovmentSpeed>:
//    float xPos;
//    float yPos;
//    float theta;
//} RobotData;

void setMovmentSpeed(int motorA,int motorB) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	uint8_t motorAOutput = motorA;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	73fb      	strb	r3, [r7, #15]
	uint8_t motorBOutput = motorB;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	73bb      	strb	r3, [r7, #14]
	if(motorA<=100)HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b64      	cmp	r3, #100	@ 0x64
 8002046:	dc05      	bgt.n	8002054 <setMovmentSpeed+0x24>
 8002048:	2200      	movs	r2, #0
 800204a:	2120      	movs	r1, #32
 800204c:	481e      	ldr	r0, [pc, #120]	@ (80020c8 <setMovmentSpeed+0x98>)
 800204e:	f003 fde5 	bl	8005c1c <HAL_GPIO_WritePin>
 8002052:	e007      	b.n	8002064 <setMovmentSpeed+0x34>
	else
	{
		HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	2120      	movs	r1, #32
 8002058:	481b      	ldr	r0, [pc, #108]	@ (80020c8 <setMovmentSpeed+0x98>)
 800205a:	f003 fddf 	bl	8005c1c <HAL_GPIO_WritePin>
		motorAOutput = motorAOutput - 100;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3b64      	subs	r3, #100	@ 0x64
 8002062:	73fb      	strb	r3, [r7, #15]
	}

	if(motorB<=100)HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	dc07      	bgt.n	800207a <setMovmentSpeed+0x4a>
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002074:	f003 fdd2 	bl	8005c1c <HAL_GPIO_WritePin>
 8002078:	e009      	b.n	800208e <setMovmentSpeed+0x5e>
	else
	{
		HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002084:	f003 fdca 	bl	8005c1c <HAL_GPIO_WritePin>
		motorBOutput = motorBOutput - 100;
 8002088:	7bbb      	ldrb	r3, [r7, #14]
 800208a:	3b64      	subs	r3, #100	@ 0x64
 800208c:	73bb      	strb	r3, [r7, #14]
	}

	if(motorA!=0){
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <setMovmentSpeed+0x6e>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,motorAOutput);
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <setMovmentSpeed+0x9c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	635a      	str	r2, [r3, #52]	@ 0x34
 800209c:	e003      	b.n	80020a6 <setMovmentSpeed+0x76>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <setMovmentSpeed+0x9c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if(motorB!=0){
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <setMovmentSpeed+0x86>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,motorBOutput);
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <setMovmentSpeed+0xa0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	7bba      	ldrb	r2, [r7, #14]
 80020b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	}




}
 80020b4:	e003      	b.n	80020be <setMovmentSpeed+0x8e>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <setMovmentSpeed+0xa0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	48000400 	.word	0x48000400
 80020cc:	200003a8 	.word	0x200003a8
 80020d0:	2000035c 	.word	0x2000035c

080020d4 <emergencyStop>:
void emergencyStop() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	2120      	movs	r1, #32
 80020dc:	4809      	ldr	r0, [pc, #36]	@ (8002104 <emergencyStop+0x30>)
 80020de:	f003 fd9d 	bl	8005c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ec:	f003 fd96 	bl	8005c1c <HAL_GPIO_WritePin>


	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <emergencyStop+0x34>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <emergencyStop+0x38>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	48000400 	.word	0x48000400
 8002108:	2000035c 	.word	0x2000035c
 800210c:	200003a8 	.word	0x200003a8

08002110 <moveForward>:

void moveForward() {
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	2120      	movs	r1, #32
 8002118:	4809      	ldr	r0, [pc, #36]	@ (8002140 <moveForward+0x30>)
 800211a:	f003 fd7f 	bl	8005c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002128:	f003 fd78 	bl	8005c1c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <moveForward+0x34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2264      	movs	r2, #100	@ 0x64
 8002132:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <moveForward+0x38>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2264      	movs	r2, #100	@ 0x64
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	48000400 	.word	0x48000400
 8002144:	2000035c 	.word	0x2000035c
 8002148:	200003a8 	.word	0x200003a8

0800214c <moveReverse>:

void moveReverse() {
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	2120      	movs	r1, #32
 8002154:	4809      	ldr	r0, [pc, #36]	@ (800217c <moveReverse+0x30>)
 8002156:	f003 fd61 	bl	8005c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002164:	f003 fd5a 	bl	8005c1c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <moveReverse+0x34>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2264      	movs	r2, #100	@ 0x64
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <moveReverse+0x38>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2264      	movs	r2, #100	@ 0x64
 8002176:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	48000400 	.word	0x48000400
 8002180:	2000035c 	.word	0x2000035c
 8002184:	200003a8 	.word	0x200003a8

08002188 <turnRight>:

void turnRight() {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2120      	movs	r1, #32
 8002190:	4809      	ldr	r0, [pc, #36]	@ (80021b8 <turnRight+0x30>)
 8002192:	f003 fd43 	bl	8005c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a0:	f003 fd3c 	bl	8005c1c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <turnRight+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2264      	movs	r2, #100	@ 0x64
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <turnRight+0x38>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2264      	movs	r2, #100	@ 0x64
 80021b2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	48000400 	.word	0x48000400
 80021bc:	2000035c 	.word	0x2000035c
 80021c0:	200003a8 	.word	0x200003a8

080021c4 <turnLeft>:
void turnLeft() {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 80021c8:	2201      	movs	r2, #1
 80021ca:	2120      	movs	r1, #32
 80021cc:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <turnLeft+0x30>)
 80021ce:	f003 fd25 	bl	8005c1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f003 fd1e 	bl	8005c1c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <turnLeft+0x34>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2264      	movs	r2, #100	@ 0x64
 80021e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <turnLeft+0x38>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2264      	movs	r2, #100	@ 0x64
 80021ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	48000400 	.word	0x48000400
 80021f8:	2000035c 	.word	0x2000035c
 80021fc:	200003a8 	.word	0x200003a8

08002200 <getEncoderValue>:
void getEncoderValue(){
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c3, AS5600_I2C_ADDR, 0x0D, 1, &low_bytes_angle_data, sizeof(low_bytes_angle_data), HAL_MAX_DELAY);
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	2301      	movs	r3, #1
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <getEncoderValue+0xb0>)
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2301      	movs	r3, #1
 8002216:	220d      	movs	r2, #13
 8002218:	216c      	movs	r1, #108	@ 0x6c
 800221a:	4826      	ldr	r0, [pc, #152]	@ (80022b4 <getEncoderValue+0xb4>)
 800221c:	f003 fec6 	bl	8005fac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c3, AS5600_I2C_ADDR, 0x0C, 1, &high_bytes_angle_data, sizeof(high_bytes_angle_data), HAL_MAX_DELAY);
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <getEncoderValue+0xb8>)
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2301      	movs	r3, #1
 8002230:	220c      	movs	r2, #12
 8002232:	216c      	movs	r1, #108	@ 0x6c
 8002234:	481f      	ldr	r0, [pc, #124]	@ (80022b4 <getEncoderValue+0xb4>)
 8002236:	f003 feb9 	bl	8005fac <HAL_I2C_Mem_Read>
	raw_angle = ((high_bytes_angle_data<< 8) | low_bytes_angle_data) & 0x0FFF;
 800223a:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <getEncoderValue+0xb8>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	b21a      	sxth	r2, r3
 8002242:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <getEncoderValue+0xb0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b21b      	sxth	r3, r3
 8002248:	4313      	orrs	r3, r2
 800224a:	b21b      	sxth	r3, r3
 800224c:	b29b      	uxth	r3, r3
 800224e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <getEncoderValue+0xbc>)
 8002256:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, AS5600_I2C_ADDR, 0x0D, 1, &low_bytes_angle_data_2, sizeof(low_bytes_angle_data_2), HAL_MAX_DELAY);
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2301      	movs	r3, #1
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <getEncoderValue+0xc0>)
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2301      	movs	r3, #1
 8002268:	220d      	movs	r2, #13
 800226a:	216c      	movs	r1, #108	@ 0x6c
 800226c:	4815      	ldr	r0, [pc, #84]	@ (80022c4 <getEncoderValue+0xc4>)
 800226e:	f003 fe9d 	bl	8005fac <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, AS5600_I2C_ADDR, 0x0C, 1, &high_bytes_angle_data_2, sizeof(high_bytes_angle_data_2), HAL_MAX_DELAY);
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	2301      	movs	r3, #1
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <getEncoderValue+0xc8>)
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	220c      	movs	r2, #12
 8002284:	216c      	movs	r1, #108	@ 0x6c
 8002286:	480f      	ldr	r0, [pc, #60]	@ (80022c4 <getEncoderValue+0xc4>)
 8002288:	f003 fe90 	bl	8005fac <HAL_I2C_Mem_Read>
	raw_angle_2 = ((high_bytes_angle_data_2<< 8) | low_bytes_angle_data_2) & 0x0FFF;
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <getEncoderValue+0xc8>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <getEncoderValue+0xc0>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21b      	sxth	r3, r3
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <getEncoderValue+0xcc>)
 80022a8:	801a      	strh	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200004c8 	.word	0x200004c8
 80022b4:	20000308 	.word	0x20000308
 80022b8:	200004c9 	.word	0x200004c9
 80022bc:	200004ca 	.word	0x200004ca
 80022c0:	200004cc 	.word	0x200004cc
 80022c4:	20000260 	.word	0x20000260
 80022c8:	200004cd 	.word	0x200004cd
 80022cc:	200004ce 	.word	0x200004ce

080022d0 <MPU6050_Init>:


void MPU6050_Init() {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af04      	add	r7, sp, #16
    uint8_t check, data;

    // Check if MPU6050 is connected
    HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 80022d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2301      	movs	r3, #1
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	2275      	movs	r2, #117	@ 0x75
 80022e8:	21d0      	movs	r1, #208	@ 0xd0
 80022ea:	481c      	ldr	r0, [pc, #112]	@ (800235c <MPU6050_Init+0x8c>)
 80022ec:	f003 fe5e 	bl	8005fac <HAL_I2C_Mem_Read>
    if (check != 0x68) {
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b68      	cmp	r3, #104	@ 0x68
 80022f4:	d12d      	bne.n	8002352 <MPU6050_Init+0x82>
        // MPU6050 not found, handle error
        return;
    }

    // Wake up MPU6050 (Write 0 to Power Management Register)
    data = 0x00;
 80022f6:	2300      	movs	r3, #0
 80022f8:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 80022fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	2301      	movs	r3, #1
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	226b      	movs	r2, #107	@ 0x6b
 800230c:	21d0      	movs	r1, #208	@ 0xd0
 800230e:	4813      	ldr	r0, [pc, #76]	@ (800235c <MPU6050_Init+0x8c>)
 8002310:	f003 fd38 	bl	8005d84 <HAL_I2C_Mem_Write>

    // Set accelerometer configuration (±2g)
    data = 0x00;
 8002314:	2300      	movs	r3, #0
 8002316:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 8002318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	2301      	movs	r3, #1
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	1dbb      	adds	r3, r7, #6
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2301      	movs	r3, #1
 8002328:	221c      	movs	r2, #28
 800232a:	21d0      	movs	r1, #208	@ 0xd0
 800232c:	480b      	ldr	r0, [pc, #44]	@ (800235c <MPU6050_Init+0x8c>)
 800232e:	f003 fd29 	bl	8005d84 <HAL_I2C_Mem_Write>

    // Set gyroscope configuration (±250°/s)
    data = 0x00;
 8002332:	2300      	movs	r3, #0
 8002334:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 8002336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	2301      	movs	r3, #1
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	1dbb      	adds	r3, r7, #6
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	221b      	movs	r2, #27
 8002348:	21d0      	movs	r1, #208	@ 0xd0
 800234a:	4804      	ldr	r0, [pc, #16]	@ (800235c <MPU6050_Init+0x8c>)
 800234c:	f003 fd1a 	bl	8005d84 <HAL_I2C_Mem_Write>
 8002350:	e000      	b.n	8002354 <MPU6050_Init+0x84>
        return;
 8002352:	bf00      	nop
}
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200002b4 	.word	0x200002b4

08002360 <MPU6050_Read_All>:

void MPU6050_Read_All(int16_t *Accel, int16_t *Gyro, int16_t *Temp) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	@ 0x30
 8002364:	af04      	add	r7, sp, #16
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
    uint8_t data[14];

    // Read 14 bytes from MPU6050 starting at ACCEL_XOUT_H
    HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, 0x3B, 1, data, 14, 1000);
 800236c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	230e      	movs	r3, #14
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2301      	movs	r3, #1
 800237e:	223b      	movs	r2, #59	@ 0x3b
 8002380:	21d0      	movs	r1, #208	@ 0xd0
 8002382:	4825      	ldr	r0, [pc, #148]	@ (8002418 <MPU6050_Read_All+0xb8>)
 8002384:	f003 fe12 	bl	8005fac <HAL_I2C_Mem_Read>

    // Accelerometer values
    Accel[0] = (int16_t)(data[0] << 8 | data[1]);  // X
 8002388:	7c3b      	ldrb	r3, [r7, #16]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	7c7b      	ldrb	r3, [r7, #17]
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21a      	sxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	801a      	strh	r2, [r3, #0]
    Accel[1] = (int16_t)(data[2] << 8 | data[3]);  // Y
 800239a:	7cbb      	ldrb	r3, [r7, #18]
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	b219      	sxth	r1, r3
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3302      	adds	r3, #2
 80023a8:	430a      	orrs	r2, r1
 80023aa:	b212      	sxth	r2, r2
 80023ac:	801a      	strh	r2, [r3, #0]
    Accel[2] = (int16_t)(data[4] << 8 | data[5]);  // Z
 80023ae:	7d3b      	ldrb	r3, [r7, #20]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	b219      	sxth	r1, r3
 80023b4:	7d7b      	ldrb	r3, [r7, #21]
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3304      	adds	r3, #4
 80023bc:	430a      	orrs	r2, r1
 80023be:	b212      	sxth	r2, r2
 80023c0:	801a      	strh	r2, [r3, #0]

    // Temperature value
    *Temp = (int16_t)(data[6] << 8 | data[7]);
 80023c2:	7dbb      	ldrb	r3, [r7, #22]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	801a      	strh	r2, [r3, #0]

    // Gyroscope values
    Gyro[0] = (int16_t)(data[8] << 8 | data[9]);   // X
 80023d4:	7e3b      	ldrb	r3, [r7, #24]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	b21a      	sxth	r2, r3
 80023da:	7e7b      	ldrb	r3, [r7, #25]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	801a      	strh	r2, [r3, #0]
    Gyro[1] = (int16_t)(data[10] << 8 | data[11]); // Y
 80023e6:	7ebb      	ldrb	r3, [r7, #26]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b219      	sxth	r1, r3
 80023ec:	7efb      	ldrb	r3, [r7, #27]
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3302      	adds	r3, #2
 80023f4:	430a      	orrs	r2, r1
 80023f6:	b212      	sxth	r2, r2
 80023f8:	801a      	strh	r2, [r3, #0]
    Gyro[2] = (int16_t)(data[12] << 8 | data[13]); // Z
 80023fa:	7f3b      	ldrb	r3, [r7, #28]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	b219      	sxth	r1, r3
 8002400:	7f7b      	ldrb	r3, [r7, #29]
 8002402:	b21a      	sxth	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3304      	adds	r3, #4
 8002408:	430a      	orrs	r2, r1
 800240a:	b212      	sxth	r2, r2
 800240c:	801a      	strh	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200002b4 	.word	0x200002b4

0800241c <getSensorValues>:

void getSensorValues(){
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002420:	4825      	ldr	r0, [pc, #148]	@ (80024b8 <getSensorValues+0x9c>)
 8002422:	f002 f8e7 	bl	80045f4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002426:	2164      	movs	r1, #100	@ 0x64
 8002428:	4823      	ldr	r0, [pc, #140]	@ (80024b8 <getSensorValues+0x9c>)
 800242a:	f002 f99d 	bl	8004768 <HAL_ADC_PollForConversion>
	sensorsValues[0] = HAL_ADC_GetValue(&hadc1);
 800242e:	4822      	ldr	r0, [pc, #136]	@ (80024b8 <getSensorValues+0x9c>)
 8002430:	f002 fa72 	bl	8004918 <HAL_ADC_GetValue>
 8002434:	ee07 0a90 	vmov	s15, r0
 8002438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243c:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <getSensorValues+0xa0>)
 800243e:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002442:	2164      	movs	r1, #100	@ 0x64
 8002444:	481c      	ldr	r0, [pc, #112]	@ (80024b8 <getSensorValues+0x9c>)
 8002446:	f002 f98f 	bl	8004768 <HAL_ADC_PollForConversion>
	sensorsValues[1] = HAL_ADC_GetValue(&hadc1);
 800244a:	481b      	ldr	r0, [pc, #108]	@ (80024b8 <getSensorValues+0x9c>)
 800244c:	f002 fa64 	bl	8004918 <HAL_ADC_GetValue>
 8002450:	ee07 0a90 	vmov	s15, r0
 8002454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002458:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <getSensorValues+0xa0>)
 800245a:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_ADC_PollForConversion(&hadc1, 100);
 800245e:	2164      	movs	r1, #100	@ 0x64
 8002460:	4815      	ldr	r0, [pc, #84]	@ (80024b8 <getSensorValues+0x9c>)
 8002462:	f002 f981 	bl	8004768 <HAL_ADC_PollForConversion>
	sensorsValues[2] = HAL_ADC_GetValue(&hadc1);
 8002466:	4814      	ldr	r0, [pc, #80]	@ (80024b8 <getSensorValues+0x9c>)
 8002468:	f002 fa56 	bl	8004918 <HAL_ADC_GetValue>
 800246c:	ee07 0a90 	vmov	s15, r0
 8002470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <getSensorValues+0xa0>)
 8002476:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_ADC_PollForConversion(&hadc1, 100);
 800247a:	2164      	movs	r1, #100	@ 0x64
 800247c:	480e      	ldr	r0, [pc, #56]	@ (80024b8 <getSensorValues+0x9c>)
 800247e:	f002 f973 	bl	8004768 <HAL_ADC_PollForConversion>
	sensorsValues[3] = HAL_ADC_GetValue(&hadc1);
 8002482:	480d      	ldr	r0, [pc, #52]	@ (80024b8 <getSensorValues+0x9c>)
 8002484:	f002 fa48 	bl	8004918 <HAL_ADC_GetValue>
 8002488:	ee07 0a90 	vmov	s15, r0
 800248c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <getSensorValues+0xa0>)
 8002492:	edc3 7a03 	vstr	s15, [r3, #12]
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002496:	2164      	movs	r1, #100	@ 0x64
 8002498:	4807      	ldr	r0, [pc, #28]	@ (80024b8 <getSensorValues+0x9c>)
 800249a:	f002 f965 	bl	8004768 <HAL_ADC_PollForConversion>
	sensorsValues[4] = HAL_ADC_GetValue(&hadc1);
 800249e:	4806      	ldr	r0, [pc, #24]	@ (80024b8 <getSensorValues+0x9c>)
 80024a0:	f002 fa3a 	bl	8004918 <HAL_ADC_GetValue>
 80024a4:	ee07 0a90 	vmov	s15, r0
 80024a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <getSensorValues+0xa0>)
 80024ae:	edc3 7a04 	vstr	s15, [r3, #16]
//	sprintf(msg, "%f,%f,%f,%f,%f\r\n",sensorsValues[0], sensorsValues[1], sensorsValues[2], sensorsValues[3], sensorsValues[4]);
//	HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg , strlen(msg));

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200001fc 	.word	0x200001fc
 80024bc:	20000558 	.word	0x20000558

080024c0 <setLedBrightness>:
void setLedBrightness(int brightness) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,brightness);
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <setLedBrightness+0x1c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	200003f4 	.word	0x200003f4

080024e0 <computeDeltaAngle>:

float computeDeltaAngle(uint16_t new_angle, uint16_t prev_angle) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	460a      	mov	r2, r1
 80024ea:	80fb      	strh	r3, [r7, #6]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80bb      	strh	r3, [r7, #4]
    int16_t delta = new_angle - prev_angle;
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	81fb      	strh	r3, [r7, #14]

    // Handle encoder overflow (angle wrapping)
    if (delta > (TICKS_PER_REV / 2)) {
 80024fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002502:	dd05      	ble.n	8002510 <computeDeltaAngle+0x30>
        delta -= TICKS_PER_REV;  // Counterclockwise overflow
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800250a:	b29b      	uxth	r3, r3
 800250c:	81fb      	strh	r3, [r7, #14]
 800250e:	e009      	b.n	8002524 <computeDeltaAngle+0x44>
    } else if (delta < -(TICKS_PER_REV / 2)) {
 8002510:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002514:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8002518:	da04      	bge.n	8002524 <computeDeltaAngle+0x44>
        delta += TICKS_PER_REV;  // Clockwise overflow
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002520:	b29b      	uxth	r3, r3
 8002522:	81fb      	strh	r3, [r7, #14]
    }

    // Convert to radians
    return (delta * 2.0f * M_PI) / TICKS_PER_REV;
 8002524:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002530:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002534:	ee17 0a90 	vmov	r0, s15
 8002538:	f7fe f816 	bl	8000568 <__aeabi_f2d>
 800253c:	a30f      	add	r3, pc, #60	@ (adr r3, 800257c <computeDeltaAngle+0x9c>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f869 	bl	8000618 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <computeDeltaAngle+0x98>)
 8002554:	f7fe f98a 	bl	800086c <__aeabi_ddiv>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f7fe fb52 	bl	8000c08 <__aeabi_d2f>
 8002564:	4603      	mov	r3, r0
 8002566:	ee07 3a90 	vmov	s15, r3
}
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	f3af 8000 	nop.w
 8002578:	40b00000 	.word	0x40b00000
 800257c:	54442d18 	.word	0x54442d18
 8002580:	400921fb 	.word	0x400921fb
 8002584:	00000000 	.word	0x00000000

08002588 <updateRobotPosition>:

void updateRobotPosition() {
 8002588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
    // Read new encoder values
    getEncoderValue();
 8002590:	f7ff fe36 	bl	8002200 <getEncoderValue>

    // Compute angle changes
    float delta_angle_L = computeDeltaAngle(raw_angle, prev_angle_L);
 8002594:	4b90      	ldr	r3, [pc, #576]	@ (80027d8 <updateRobotPosition+0x250>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	4a90      	ldr	r2, [pc, #576]	@ (80027dc <updateRobotPosition+0x254>)
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff9d 	bl	80024e0 <computeDeltaAngle>
 80025a6:	ed87 0a05 	vstr	s0, [r7, #20]
    float delta_angle_R = computeDeltaAngle(raw_angle_2, prev_angle_R);
 80025aa:	4b8d      	ldr	r3, [pc, #564]	@ (80027e0 <updateRobotPosition+0x258>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4a8c      	ldr	r2, [pc, #560]	@ (80027e4 <updateRobotPosition+0x25c>)
 80025b2:	8812      	ldrh	r2, [r2, #0]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff92 	bl	80024e0 <computeDeltaAngle>
 80025bc:	ed87 0a04 	vstr	s0, [r7, #16]

    // Convert to linear displacement
    float d_L = delta_angle_L * WHEEL_RADIUS;
 80025c0:	6978      	ldr	r0, [r7, #20]
 80025c2:	f7fd ffd1 	bl	8000568 <__aeabi_f2d>
 80025c6:	a37a      	add	r3, pc, #488	@ (adr r3, 80027b0 <updateRobotPosition+0x228>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fe f824 	bl	8000618 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe fb16 	bl	8000c08 <__aeabi_d2f>
 80025dc:	4603      	mov	r3, r0
 80025de:	60fb      	str	r3, [r7, #12]
    float d_R = delta_angle_R * WHEEL_RADIUS;
 80025e0:	6938      	ldr	r0, [r7, #16]
 80025e2:	f7fd ffc1 	bl	8000568 <__aeabi_f2d>
 80025e6:	a372      	add	r3, pc, #456	@ (adr r3, 80027b0 <updateRobotPosition+0x228>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fe f814 	bl	8000618 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe fb06 	bl	8000c08 <__aeabi_d2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	60bb      	str	r3, [r7, #8]
    float d_C = (d_L + d_R) / 2.0;  // Center displacement
 8002600:	ed97 7a03 	vldr	s14, [r7, #12]
 8002604:	edd7 7a02 	vldr	s15, [r7, #8]
 8002608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002614:	edc7 7a01 	vstr	s15, [r7, #4]
    float d_theta = (d_R - d_L) / WHEEL_BASE;  // Change in orientation
 8002618:	ed97 7a02 	vldr	s14, [r7, #8]
 800261c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	ee17 0a90 	vmov	r0, s15
 8002628:	f7fd ff9e 	bl	8000568 <__aeabi_f2d>
 800262c:	a362      	add	r3, pc, #392	@ (adr r3, 80027b8 <updateRobotPosition+0x230>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fe f91b 	bl	800086c <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fae3 	bl	8000c08 <__aeabi_d2f>
 8002642:	4603      	mov	r3, r0
 8002644:	603b      	str	r3, [r7, #0]

    // Update position
    x_pos += d_C * cos(theta);
 8002646:	4b68      	ldr	r3, [pc, #416]	@ (80027e8 <updateRobotPosition+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff8c 	bl	8000568 <__aeabi_f2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fd ff87 	bl	8000568 <__aeabi_f2d>
 800265a:	4680      	mov	r8, r0
 800265c:	4689      	mov	r9, r1
 800265e:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <updateRobotPosition+0x264>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff80 	bl	8000568 <__aeabi_f2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	ec43 2b10 	vmov	d0, r2, r3
 8002670:	f00d f82e 	bl	800f6d0 <cos>
 8002674:	ec53 2b10 	vmov	r2, r3, d0
 8002678:	4640      	mov	r0, r8
 800267a:	4649      	mov	r1, r9
 800267c:	f7fd ffcc 	bl	8000618 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4620      	mov	r0, r4
 8002686:	4629      	mov	r1, r5
 8002688:	f7fd fe10 	bl	80002ac <__adddf3>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe fab8 	bl	8000c08 <__aeabi_d2f>
 8002698:	4603      	mov	r3, r0
 800269a:	4a53      	ldr	r2, [pc, #332]	@ (80027e8 <updateRobotPosition+0x260>)
 800269c:	6013      	str	r3, [r2, #0]
    y_pos += d_C * sin(theta);
 800269e:	4b54      	ldr	r3, [pc, #336]	@ (80027f0 <updateRobotPosition+0x268>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff60 	bl	8000568 <__aeabi_f2d>
 80026a8:	4604      	mov	r4, r0
 80026aa:	460d      	mov	r5, r1
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7fd ff5b 	bl	8000568 <__aeabi_f2d>
 80026b2:	4680      	mov	r8, r0
 80026b4:	4689      	mov	r9, r1
 80026b6:	4b4d      	ldr	r3, [pc, #308]	@ (80027ec <updateRobotPosition+0x264>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff54 	bl	8000568 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	ec43 2b10 	vmov	d0, r2, r3
 80026c8:	f00d f856 	bl	800f778 <sin>
 80026cc:	ec53 2b10 	vmov	r2, r3, d0
 80026d0:	4640      	mov	r0, r8
 80026d2:	4649      	mov	r1, r9
 80026d4:	f7fd ffa0 	bl	8000618 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7fd fde4 	bl	80002ac <__adddf3>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7fe fa8c 	bl	8000c08 <__aeabi_d2f>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4a3f      	ldr	r2, [pc, #252]	@ (80027f0 <updateRobotPosition+0x268>)
 80026f4:	6013      	str	r3, [r2, #0]
    theta += d_theta;
 80026f6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ec <updateRobotPosition+0x264>)
 80026f8:	ed93 7a00 	vldr	s14, [r3]
 80026fc:	edd7 7a00 	vldr	s15, [r7]
 8002700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002704:	4b39      	ldr	r3, [pc, #228]	@ (80027ec <updateRobotPosition+0x264>)
 8002706:	edc3 7a00 	vstr	s15, [r3]

    // Keep theta in range [-π, π]
    if (theta > M_PI) {
 800270a:	4b38      	ldr	r3, [pc, #224]	@ (80027ec <updateRobotPosition+0x264>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff2a 	bl	8000568 <__aeabi_f2d>
 8002714:	a32a      	add	r3, pc, #168	@ (adr r3, 80027c0 <updateRobotPosition+0x238>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fe fa0d 	bl	8000b38 <__aeabi_dcmpgt>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <updateRobotPosition+0x1c4>
        theta -= 2.0 * M_PI;
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <updateRobotPosition+0x264>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd ff1d 	bl	8000568 <__aeabi_f2d>
 800272e:	a326      	add	r3, pc, #152	@ (adr r3, 80027c8 <updateRobotPosition+0x240>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fdb8 	bl	80002a8 <__aeabi_dsub>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe fa62 	bl	8000c08 <__aeabi_d2f>
 8002744:	4603      	mov	r3, r0
 8002746:	4a29      	ldr	r2, [pc, #164]	@ (80027ec <updateRobotPosition+0x264>)
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e01f      	b.n	800278c <updateRobotPosition+0x204>
    } else if (theta < -M_PI) {
 800274c:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <updateRobotPosition+0x264>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd ff09 	bl	8000568 <__aeabi_f2d>
 8002756:	a31e      	add	r3, pc, #120	@ (adr r3, 80027d0 <updateRobotPosition+0x248>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f9ce 	bl	8000afc <__aeabi_dcmplt>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <updateRobotPosition+0x204>
        theta += 2.0 * M_PI;
 8002766:	4b21      	ldr	r3, [pc, #132]	@ (80027ec <updateRobotPosition+0x264>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fefc 	bl	8000568 <__aeabi_f2d>
 8002770:	a315      	add	r3, pc, #84	@ (adr r3, 80027c8 <updateRobotPosition+0x240>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd fd99 	bl	80002ac <__adddf3>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7fe fa41 	bl	8000c08 <__aeabi_d2f>
 8002786:	4603      	mov	r3, r0
 8002788:	4a18      	ldr	r2, [pc, #96]	@ (80027ec <updateRobotPosition+0x264>)
 800278a:	6013      	str	r3, [r2, #0]
    }

    // Store previous angles
    prev_angle_L = raw_angle;
 800278c:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <updateRobotPosition+0x250>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <updateRobotPosition+0x254>)
 8002794:	801a      	strh	r2, [r3, #0]
    prev_angle_R = raw_angle_2;
 8002796:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <updateRobotPosition+0x258>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <updateRobotPosition+0x25c>)
 800279e:	801a      	strh	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027aa:	bf00      	nop
 80027ac:	f3af 8000 	nop.w
 80027b0:	eb851eb8 	.word	0xeb851eb8
 80027b4:	3f9eb851 	.word	0x3f9eb851
 80027b8:	66666666 	.word	0x66666666
 80027bc:	3fc66666 	.word	0x3fc66666
 80027c0:	54442d18 	.word	0x54442d18
 80027c4:	400921fb 	.word	0x400921fb
 80027c8:	54442d18 	.word	0x54442d18
 80027cc:	401921fb 	.word	0x401921fb
 80027d0:	54442d18 	.word	0x54442d18
 80027d4:	c00921fb 	.word	0xc00921fb
 80027d8:	200004ca 	.word	0x200004ca
 80027dc:	20000578 	.word	0x20000578
 80027e0:	200004ce 	.word	0x200004ce
 80027e4:	2000057a 	.word	0x2000057a
 80027e8:	2000056c 	.word	0x2000056c
 80027ec:	20000574 	.word	0x20000574
 80027f0:	20000570 	.word	0x20000570

080027f4 <sendRobotData>:

void sendRobotData() {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
	cJSON *jsonObj = cJSON_CreateObject();
 80027fa:	f7ff fc05 	bl	8002008 <cJSON_CreateObject>
 80027fe:	60f8      	str	r0, [r7, #12]

	cJSON_AddNumberToObject(jsonObj, "sensorValue1", sensorsValues[0]);
 8002800:	4b8b      	ldr	r3, [pc, #556]	@ (8002a30 <sendRobotData+0x23c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd feaf 	bl	8000568 <__aeabi_f2d>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	ec43 2b10 	vmov	d0, r2, r3
 8002812:	4988      	ldr	r1, [pc, #544]	@ (8002a34 <sendRobotData+0x240>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff fb89 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue2", sensorsValues[1]);
 800281a:	4b85      	ldr	r3, [pc, #532]	@ (8002a30 <sendRobotData+0x23c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fea2 	bl	8000568 <__aeabi_f2d>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	ec43 2b10 	vmov	d0, r2, r3
 800282c:	4982      	ldr	r1, [pc, #520]	@ (8002a38 <sendRobotData+0x244>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fb7c 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue3", sensorsValues[2]);
 8002834:	4b7e      	ldr	r3, [pc, #504]	@ (8002a30 <sendRobotData+0x23c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe95 	bl	8000568 <__aeabi_f2d>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	ec43 2b10 	vmov	d0, r2, r3
 8002846:	497d      	ldr	r1, [pc, #500]	@ (8002a3c <sendRobotData+0x248>)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fb6f 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue4", sensorsValues[3]);
 800284e:	4b78      	ldr	r3, [pc, #480]	@ (8002a30 <sendRobotData+0x23c>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe88 	bl	8000568 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	ec43 2b10 	vmov	d0, r2, r3
 8002860:	4977      	ldr	r1, [pc, #476]	@ (8002a40 <sendRobotData+0x24c>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff fb62 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "sensorValue5", sensorsValues[4]);
 8002868:	4b71      	ldr	r3, [pc, #452]	@ (8002a30 <sendRobotData+0x23c>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fe7b 	bl	8000568 <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	ec43 2b10 	vmov	d0, r2, r3
 800287a:	4972      	ldr	r1, [pc, #456]	@ (8002a44 <sendRobotData+0x250>)
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fb55 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "xPos", x_pos);
 8002882:	4b71      	ldr	r3, [pc, #452]	@ (8002a48 <sendRobotData+0x254>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe6e 	bl	8000568 <__aeabi_f2d>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	ec43 2b10 	vmov	d0, r2, r3
 8002894:	496d      	ldr	r1, [pc, #436]	@ (8002a4c <sendRobotData+0x258>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fb48 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "yPos", y_pos);
 800289c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a50 <sendRobotData+0x25c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe61 	bl	8000568 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	ec43 2b10 	vmov	d0, r2, r3
 80028ae:	4969      	ldr	r1, [pc, #420]	@ (8002a54 <sendRobotData+0x260>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fb3b 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "theta", theta);
 80028b6:	4b68      	ldr	r3, [pc, #416]	@ (8002a58 <sendRobotData+0x264>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe54 	bl	8000568 <__aeabi_f2d>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	ec43 2b10 	vmov	d0, r2, r3
 80028c8:	4964      	ldr	r1, [pc, #400]	@ (8002a5c <sendRobotData+0x268>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fb2e 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "rawAngle1", raw_angle);
 80028d0:	4b63      	ldr	r3, [pc, #396]	@ (8002a60 <sendRobotData+0x26c>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fe24 	bl	8000524 <__aeabi_ui2d>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	ec43 2b10 	vmov	d0, r2, r3
 80028e4:	495f      	ldr	r1, [pc, #380]	@ (8002a64 <sendRobotData+0x270>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fb20 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "rawAngle2", raw_angle_2);
 80028ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002a68 <sendRobotData+0x274>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe16 	bl	8000524 <__aeabi_ui2d>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	ec43 2b10 	vmov	d0, r2, r3
 8002900:	495a      	ldr	r1, [pc, #360]	@ (8002a6c <sendRobotData+0x278>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7ff fb12 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "xGyro", Gyro_f[0]);
 8002908:	4b59      	ldr	r3, [pc, #356]	@ (8002a70 <sendRobotData+0x27c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fe2b 	bl	8000568 <__aeabi_f2d>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	ec43 2b10 	vmov	d0, r2, r3
 800291a:	4956      	ldr	r1, [pc, #344]	@ (8002a74 <sendRobotData+0x280>)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fb05 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "yGyro", Gyro_f[1]);
 8002922:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <sendRobotData+0x27c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fe1e 	bl	8000568 <__aeabi_f2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	ec43 2b10 	vmov	d0, r2, r3
 8002934:	4950      	ldr	r1, [pc, #320]	@ (8002a78 <sendRobotData+0x284>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff faf8 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "zGyro", Gyro_f[2]);
 800293c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a70 <sendRobotData+0x27c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe11 	bl	8000568 <__aeabi_f2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	ec43 2b10 	vmov	d0, r2, r3
 800294e:	494b      	ldr	r1, [pc, #300]	@ (8002a7c <sendRobotData+0x288>)
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff faeb 	bl	8001f2c <cJSON_AddNumberToObject>

	cJSON_AddNumberToObject(jsonObj, "xAccel", Accel_f[0]);
 8002956:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <sendRobotData+0x28c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fe04 	bl	8000568 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	ec43 2b10 	vmov	d0, r2, r3
 8002968:	4946      	ldr	r1, [pc, #280]	@ (8002a84 <sendRobotData+0x290>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff fade 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "yAccel", Accel_f[1]);
 8002970:	4b43      	ldr	r3, [pc, #268]	@ (8002a80 <sendRobotData+0x28c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fdf7 	bl	8000568 <__aeabi_f2d>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	ec43 2b10 	vmov	d0, r2, r3
 8002982:	4941      	ldr	r1, [pc, #260]	@ (8002a88 <sendRobotData+0x294>)
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff fad1 	bl	8001f2c <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(jsonObj, "zAccel", Accel_f[2]);
 800298a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <sendRobotData+0x28c>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fdea 	bl	8000568 <__aeabi_f2d>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	ec43 2b10 	vmov	d0, r2, r3
 800299c:	493b      	ldr	r1, [pc, #236]	@ (8002a8c <sendRobotData+0x298>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fac4 	bl	8001f2c <cJSON_AddNumberToObject>

	cJSON_AddNumberToObject(jsonObj, "Temp", Temp_f);
 80029a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002a90 <sendRobotData+0x29c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fddd 	bl	8000568 <__aeabi_f2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	ec43 2b10 	vmov	d0, r2, r3
 80029b6:	4937      	ldr	r1, [pc, #220]	@ (8002a94 <sendRobotData+0x2a0>)
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fab7 	bl	8001f2c <cJSON_AddNumberToObject>



	    // Convert JSON object to string
	char *jsonString = cJSON_PrintUnformatted(jsonObj);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7fe ff74 	bl	80018ac <cJSON_PrintUnformatted>
 80029c4:	60b8      	str	r0, [r7, #8]

	// Send JSON string via UART (or any other communication interface)
	// Allocate new buffer: length of JSON + 1 for '\n' + 1 for '\0'
	size_t len = strlen(jsonString);
 80029c6:	68b8      	ldr	r0, [r7, #8]
 80029c8:	f7fd fc62 	bl	8000290 <strlen>
 80029cc:	6078      	str	r0, [r7, #4]
	char *jsonWithNewline = malloc(len + 2);  // +2 for '\n' and '\0'
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3302      	adds	r3, #2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f007 fecc 	bl	800a770 <malloc>
 80029d8:	4603      	mov	r3, r0
 80029da:	603b      	str	r3, [r7, #0]

	if (jsonWithNewline != NULL) {
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01b      	beq.n	8002a1a <sendRobotData+0x226>
	    memcpy(jsonWithNewline, jsonString, len);  // Copy original string
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6838      	ldr	r0, [r7, #0]
 80029e8:	f009 fea5 	bl	800c736 <memcpy>
	    jsonWithNewline[len] = '\n';               // Add newline
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	220a      	movs	r2, #10
 80029f4:	701a      	strb	r2, [r3, #0]
	    jsonWithNewline[len + 1] = '\0';           // Null terminator
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3301      	adds	r3, #1
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

	    HAL_UART_Transmit(&huart2, (uint8_t*)jsonWithNewline, len + 1, 100);  // len+1 includes \n
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	2364      	movs	r3, #100	@ 0x64
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	4822      	ldr	r0, [pc, #136]	@ (8002a98 <sendRobotData+0x2a4>)
 8002a10:	f006 fb0e 	bl	8009030 <HAL_UART_Transmit>
	    free(jsonWithNewline);
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	f007 feb3 	bl	800a780 <free>
	}

	// Free the JSON object after use
	cJSON_Delete(jsonObj);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f7fe fb30 	bl	8001080 <cJSON_Delete>
	free(jsonString);
 8002a20:	68b8      	ldr	r0, [r7, #8]
 8002a22:	f007 fead 	bl	800a780 <free>
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000558 	.word	0x20000558
 8002a34:	0801083c 	.word	0x0801083c
 8002a38:	0801084c 	.word	0x0801084c
 8002a3c:	0801085c 	.word	0x0801085c
 8002a40:	0801086c 	.word	0x0801086c
 8002a44:	0801087c 	.word	0x0801087c
 8002a48:	2000056c 	.word	0x2000056c
 8002a4c:	0801088c 	.word	0x0801088c
 8002a50:	20000570 	.word	0x20000570
 8002a54:	08010894 	.word	0x08010894
 8002a58:	20000574 	.word	0x20000574
 8002a5c:	0801089c 	.word	0x0801089c
 8002a60:	200004ca 	.word	0x200004ca
 8002a64:	080108a4 	.word	0x080108a4
 8002a68:	200004ce 	.word	0x200004ce
 8002a6c:	080108b0 	.word	0x080108b0
 8002a70:	20000598 	.word	0x20000598
 8002a74:	080108bc 	.word	0x080108bc
 8002a78:	080108c4 	.word	0x080108c4
 8002a7c:	080108cc 	.word	0x080108cc
 8002a80:	2000058c 	.word	0x2000058c
 8002a84:	080108d4 	.word	0x080108d4
 8002a88:	080108dc 	.word	0x080108dc
 8002a8c:	080108e4 	.word	0x080108e4
 8002a90:	200005a4 	.word	0x200005a4
 8002a94:	080108ec 	.word	0x080108ec
 8002a98:	20000440 	.word	0x20000440
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <Convert_To_Units>:

void Convert_To_Units(int16_t *Accel, int16_t *Gyro, int16_t Temp, float *Accel_f, float *Gyro_f, float *Temp_f) {
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 3; i++) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	e036      	b.n	8002b24 <Convert_To_Units+0x84>
        Accel_f[i] = Accel[i] / ACCEL_SCALE; // g
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fd3e 	bl	8000544 <__aeabi_i2d>
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	4b2c      	ldr	r3, [pc, #176]	@ (8002b80 <Convert_To_Units+0xe0>)
 8002ace:	f7fd fecd 	bl	800086c <__aeabi_ddiv>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	18d4      	adds	r4, r2, r3
 8002ae2:	f7fe f891 	bl	8000c08 <__aeabi_d2f>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6023      	str	r3, [r4, #0]
        Gyro_f[i]  = Gyro[i]  / GYRO_SCALE;  // °/s
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4413      	add	r3, r2
 8002af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd24 	bl	8000544 <__aeabi_i2d>
 8002afc:	a31c      	add	r3, pc, #112	@ (adr r3, 8002b70 <Convert_To_Units+0xd0>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd feb3 	bl	800086c <__aeabi_ddiv>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b14:	18d4      	adds	r4, r2, r3
 8002b16:	f7fe f877 	bl	8000c08 <__aeabi_d2f>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; i++) {
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3301      	adds	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	ddc5      	ble.n	8002ab6 <Convert_To_Units+0x16>
    }
    *Temp_f = (Temp / TEMP_SCALE) + TEMP_OFFSET; // °C
 8002b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd08 	bl	8000544 <__aeabi_i2d>
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <Convert_To_Units+0xe4>)
 8002b3a:	f7fd fe97 	bl	800086c <__aeabi_ddiv>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	a30c      	add	r3, pc, #48	@ (adr r3, 8002b78 <Convert_To_Units+0xd8>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fbae 	bl	80002ac <__adddf3>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7fe f856 	bl	8000c08 <__aeabi_d2f>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	f3af 8000 	nop.w
 8002b70:	00000000 	.word	0x00000000
 8002b74:	40606000 	.word	0x40606000
 8002b78:	0a3d70a4 	.word	0x0a3d70a4
 8002b7c:	404243d7 	.word	0x404243d7
 8002b80:	40d00000 	.word	0x40d00000
 8002b84:	40754000 	.word	0x40754000

08002b88 <Encoders_Init>:

void Encoders_Init() {
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
    prev_angle_L = raw_angle;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <Encoders_Init+0x24>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <Encoders_Init+0x28>)
 8002b94:	801a      	strh	r2, [r3, #0]
    prev_angle_R = raw_angle_2;
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <Encoders_Init+0x2c>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <Encoders_Init+0x30>)
 8002b9e:	801a      	strh	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200004ca 	.word	0x200004ca
 8002bb0:	20000578 	.word	0x20000578
 8002bb4:	200004ce 	.word	0x200004ce
 8002bb8:	2000057a 	.word	0x2000057a

08002bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc2:	f001 f941 	bl	8003e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc6:	f000 f85d 	bl	8002c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bca:	f000 fbb7 	bl	800333c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002bce:	f000 fb85 	bl	80032dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002bd2:	f000 fa21 	bl	8003018 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002bd6:	f000 fa95 	bl	8003104 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002bda:	f000 fb09 	bl	80031f0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002bde:	f000 f8a3 	bl	8002d28 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002be2:	f000 f959 	bl	8002e98 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002be6:	f000 f9d7 	bl	8002f98 <MX_I2C3_Init>
  MX_I2C2_Init();
 8002bea:	f000 f995 	bl	8002f18 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4918      	ldr	r1, [pc, #96]	@ (8002c54 <main+0x98>)
 8002bf2:	4819      	ldr	r0, [pc, #100]	@ (8002c58 <main+0x9c>)
 8002bf4:	f006 faa6 	bl	8009144 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002bf8:	2108      	movs	r1, #8
 8002bfa:	4818      	ldr	r0, [pc, #96]	@ (8002c5c <main+0xa0>)
 8002bfc:	f005 fa22 	bl	8008044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002c00:	2100      	movs	r1, #0
 8002c02:	4817      	ldr	r0, [pc, #92]	@ (8002c60 <main+0xa4>)
 8002c04:	f005 fa1e 	bl	8008044 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4816      	ldr	r0, [pc, #88]	@ (8002c64 <main+0xa8>)
 8002c0c:	f005 fa1a 	bl	8008044 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002c10:	217f      	movs	r1, #127	@ 0x7f
 8002c12:	4815      	ldr	r0, [pc, #84]	@ (8002c68 <main+0xac>)
 8002c14:	f002 fbb8 	bl	8005388 <HAL_ADCEx_Calibration_Start>

  MPU6050_Init();
 8002c18:	f7ff fb5a 	bl	80022d0 <MPU6050_Init>

  Encoders_Init();
 8002c1c:	f7ff ffb4 	bl	8002b88 <Encoders_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(Accel, Gyro, &Temp);
 8002c20:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <main+0xb0>)
 8002c22:	4913      	ldr	r1, [pc, #76]	@ (8002c70 <main+0xb4>)
 8002c24:	4813      	ldr	r0, [pc, #76]	@ (8002c74 <main+0xb8>)
 8002c26:	f7ff fb9b 	bl	8002360 <MPU6050_Read_All>
	  Convert_To_Units(Accel, Gyro, Temp, Accel_f, Gyro_f, &Temp_f);
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <main+0xb0>)
 8002c2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <main+0xbc>)
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <main+0xc0>)
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <main+0xc4>)
 8002c3a:	490d      	ldr	r1, [pc, #52]	@ (8002c70 <main+0xb4>)
 8002c3c:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <main+0xb8>)
 8002c3e:	f7ff ff2f 	bl	8002aa0 <Convert_To_Units>
	  updateRobotPosition();
 8002c42:	f7ff fca1 	bl	8002588 <updateRobotPosition>
	  getSensorValues();
 8002c46:	f7ff fbe9 	bl	800241c <getSensorValues>
	  sendRobotData();
 8002c4a:	f7ff fdd3 	bl	80027f4 <sendRobotData>
	  MPU6050_Read_All(Accel, Gyro, &Temp);
 8002c4e:	bf00      	nop
 8002c50:	e7e6      	b.n	8002c20 <main+0x64>
 8002c52:	bf00      	nop
 8002c54:	200004d0 	.word	0x200004d0
 8002c58:	20000440 	.word	0x20000440
 8002c5c:	2000035c 	.word	0x2000035c
 8002c60:	200003a8 	.word	0x200003a8
 8002c64:	200003f4 	.word	0x200003f4
 8002c68:	200001fc 	.word	0x200001fc
 8002c6c:	2000058a 	.word	0x2000058a
 8002c70:	20000584 	.word	0x20000584
 8002c74:	2000057c 	.word	0x2000057c
 8002c78:	200005a4 	.word	0x200005a4
 8002c7c:	20000598 	.word	0x20000598
 8002c80:	2000058c 	.word	0x2000058c

08002c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b096      	sub	sp, #88	@ 0x58
 8002c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	2244      	movs	r2, #68	@ 0x44
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f009 fcad 	bl	800c5f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c98:	463b      	mov	r3, r7
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002ca6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002caa:	f003 fe01 	bl	80068b0 <HAL_PWREx_ControlVoltageScaling>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002cb4:	f000 fcb0 	bl	8003618 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002cd2:	230a      	movs	r3, #10
 8002cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fe38 	bl	800695c <HAL_RCC_OscConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002cf2:	f000 fc91 	bl	8003618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cf6:	230f      	movs	r3, #15
 8002cf8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 fa00 	bl	8007114 <HAL_RCC_ClockConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d1a:	f000 fc7d 	bl	8003618 <Error_Handler>
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3758      	adds	r7, #88	@ 0x58
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
 8002d48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002e80 <MX_ADC1_Init+0x158>)
 8002d4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d50:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d56:	4b49      	ldr	r3, [pc, #292]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d5c:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d62:	4b46      	ldr	r3, [pc, #280]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d68:	4b44      	ldr	r3, [pc, #272]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d6e:	4b43      	ldr	r3, [pc, #268]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d74:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8002d7a:	4b40      	ldr	r3, [pc, #256]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d7c:	2205      	movs	r2, #5
 8002d7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d80:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d88:	4b3c      	ldr	r3, [pc, #240]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d94:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d9c:	4b37      	ldr	r3, [pc, #220]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002da2:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002daa:	4834      	ldr	r0, [pc, #208]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002dac:	f001 fad2 	bl	8004354 <HAL_ADC_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002db6:	f000 fc2f 	bl	8003618 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	482d      	ldr	r0, [pc, #180]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002dc6:	f002 fb3f 	bl	8005448 <HAL_ADCEx_MultiModeConfigChannel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002dd0:	f000 fc22 	bl	8003618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e84 <MX_ADC1_Init+0x15c>)
 8002dd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dd8:	2306      	movs	r3, #6
 8002dda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002ddc:	2307      	movs	r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002de0:	237f      	movs	r3, #127	@ 0x7f
 8002de2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002de4:	2304      	movs	r3, #4
 8002de6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4822      	ldr	r0, [pc, #136]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002df2:	f001 fd9f 	bl	8004934 <HAL_ADC_ConfigChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002dfc:	f000 fc0c 	bl	8003618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002e00:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <MX_ADC1_Init+0x160>)
 8002e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e04:	230c      	movs	r3, #12
 8002e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481b      	ldr	r0, [pc, #108]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002e0e:	f001 fd91 	bl	8004934 <HAL_ADC_ConfigChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8002e18:	f000 fbfe 	bl	8003618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <MX_ADC1_Init+0x164>)
 8002e1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002e20:	2312      	movs	r3, #18
 8002e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	4619      	mov	r1, r3
 8002e28:	4814      	ldr	r0, [pc, #80]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002e2a:	f001 fd83 	bl	8004934 <HAL_ADC_ConfigChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8002e34:	f000 fbf0 	bl	8003618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e38:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <MX_ADC1_Init+0x168>)
 8002e3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002e3c:	2318      	movs	r3, #24
 8002e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	480d      	ldr	r0, [pc, #52]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002e46:	f001 fd75 	bl	8004934 <HAL_ADC_ConfigChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8002e50:	f000 fbe2 	bl	8003618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <MX_ADC1_Init+0x16c>)
 8002e56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4806      	ldr	r0, [pc, #24]	@ (8002e7c <MX_ADC1_Init+0x154>)
 8002e64:	f001 fd66 	bl	8004934 <HAL_ADC_ConfigChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8002e6e:	f000 fbd3 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200001fc 	.word	0x200001fc
 8002e80:	50040000 	.word	0x50040000
 8002e84:	10c00010 	.word	0x10c00010
 8002e88:	14f00020 	.word	0x14f00020
 8002e8c:	19200040 	.word	0x19200040
 8002e90:	25b00200 	.word	0x25b00200
 8002e94:	3ef08000 	.word	0x3ef08000

08002e98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <MX_I2C1_Init+0x78>)
 8002ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f14 <MX_I2C1_Init+0x7c>)
 8002ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ea8:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002eae:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eb4:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002eba:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ec0:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ed2:	480e      	ldr	r0, [pc, #56]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ed4:	f002 feba 	bl	8005c4c <HAL_I2C_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ede:	f000 fb9b 	bl	8003618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4809      	ldr	r0, [pc, #36]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ee6:	f003 fc3d 	bl	8006764 <HAL_I2CEx_ConfigAnalogFilter>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ef0:	f000 fb92 	bl	8003618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <MX_I2C1_Init+0x74>)
 8002ef8:	f003 fc7f 	bl	80067fa <HAL_I2CEx_ConfigDigitalFilter>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f02:	f000 fb89 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000260 	.word	0x20000260
 8002f10:	40005400 	.word	0x40005400
 8002f14:	10d19ce4 	.word	0x10d19ce4

08002f18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f90 <MX_I2C2_Init+0x78>)
 8002f20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8002f22:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f24:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <MX_I2C2_Init+0x7c>)
 8002f26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f28:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f2e:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f34:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f3a:	4b14      	ldr	r3, [pc, #80]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f40:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f46:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f52:	480e      	ldr	r0, [pc, #56]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f54:	f002 fe7a 	bl	8005c4c <HAL_I2C_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002f5e:	f000 fb5b 	bl	8003618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f62:	2100      	movs	r1, #0
 8002f64:	4809      	ldr	r0, [pc, #36]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f66:	f003 fbfd 	bl	8006764 <HAL_I2CEx_ConfigAnalogFilter>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002f70:	f000 fb52 	bl	8003618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f74:	2100      	movs	r1, #0
 8002f76:	4805      	ldr	r0, [pc, #20]	@ (8002f8c <MX_I2C2_Init+0x74>)
 8002f78:	f003 fc3f 	bl	80067fa <HAL_I2CEx_ConfigDigitalFilter>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002f82:	f000 fb49 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200002b4 	.word	0x200002b4
 8002f90:	40005800 	.word	0x40005800
 8002f94:	10d19ce4 	.word	0x10d19ce4

08002f98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <MX_I2C3_Init+0x74>)
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003010 <MX_I2C3_Init+0x78>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003014 <MX_I2C3_Init+0x7c>)
 8002fa6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002fa8:	4b18      	ldr	r3, [pc, #96]	@ (800300c <MX_I2C3_Init+0x74>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fae:	4b17      	ldr	r3, [pc, #92]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fb4:	4b15      	ldr	r3, [pc, #84]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002fd2:	480e      	ldr	r0, [pc, #56]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fd4:	f002 fe3a 	bl	8005c4c <HAL_I2C_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002fde:	f000 fb1b 	bl	8003618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4809      	ldr	r0, [pc, #36]	@ (800300c <MX_I2C3_Init+0x74>)
 8002fe6:	f003 fbbd 	bl	8006764 <HAL_I2CEx_ConfigAnalogFilter>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002ff0:	f000 fb12 	bl	8003618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4805      	ldr	r0, [pc, #20]	@ (800300c <MX_I2C3_Init+0x74>)
 8002ff8:	f003 fbff 	bl	80067fa <HAL_I2CEx_ConfigDigitalFilter>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003002:	f000 fb09 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000308 	.word	0x20000308
 8003010:	40005c00 	.word	0x40005c00
 8003014:	10d19ce4 	.word	0x10d19ce4

08003018 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	@ 0x38
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800301e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003038:	463b      	mov	r3, r7
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	611a      	str	r2, [r3, #16]
 8003046:	615a      	str	r2, [r3, #20]
 8003048:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800304a:	4b2d      	ldr	r3, [pc, #180]	@ (8003100 <MX_TIM2_Init+0xe8>)
 800304c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003050:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8003052:	4b2b      	ldr	r3, [pc, #172]	@ (8003100 <MX_TIM2_Init+0xe8>)
 8003054:	2227      	movs	r2, #39	@ 0x27
 8003056:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003058:	4b29      	ldr	r3, [pc, #164]	@ (8003100 <MX_TIM2_Init+0xe8>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800305e:	4b28      	ldr	r3, [pc, #160]	@ (8003100 <MX_TIM2_Init+0xe8>)
 8003060:	2263      	movs	r2, #99	@ 0x63
 8003062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003064:	4b26      	ldr	r3, [pc, #152]	@ (8003100 <MX_TIM2_Init+0xe8>)
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800306a:	4b25      	ldr	r3, [pc, #148]	@ (8003100 <MX_TIM2_Init+0xe8>)
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003070:	4823      	ldr	r0, [pc, #140]	@ (8003100 <MX_TIM2_Init+0xe8>)
 8003072:	f004 ff2f 	bl	8007ed4 <HAL_TIM_Base_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800307c:	f000 facc 	bl	8003618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800308a:	4619      	mov	r1, r3
 800308c:	481c      	ldr	r0, [pc, #112]	@ (8003100 <MX_TIM2_Init+0xe8>)
 800308e:	f005 f9f3 	bl	8008478 <HAL_TIM_ConfigClockSource>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003098:	f000 fabe 	bl	8003618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800309c:	4818      	ldr	r0, [pc, #96]	@ (8003100 <MX_TIM2_Init+0xe8>)
 800309e:	f004 ff70 	bl	8007f82 <HAL_TIM_PWM_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80030a8:	f000 fab6 	bl	8003618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	4619      	mov	r1, r3
 80030ba:	4811      	ldr	r0, [pc, #68]	@ (8003100 <MX_TIM2_Init+0xe8>)
 80030bc:	f005 fee2 	bl	8008e84 <HAL_TIMEx_MasterConfigSynchronization>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80030c6:	f000 faa7 	bl	8003618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030ca:	2360      	movs	r3, #96	@ 0x60
 80030cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030da:	463b      	mov	r3, r7
 80030dc:	2208      	movs	r2, #8
 80030de:	4619      	mov	r1, r3
 80030e0:	4807      	ldr	r0, [pc, #28]	@ (8003100 <MX_TIM2_Init+0xe8>)
 80030e2:	f005 f8b5 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80030ec:	f000 fa94 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030f0:	4803      	ldr	r0, [pc, #12]	@ (8003100 <MX_TIM2_Init+0xe8>)
 80030f2:	f000 fc8b 	bl	8003a0c <HAL_TIM_MspPostInit>

}
 80030f6:	bf00      	nop
 80030f8:	3738      	adds	r7, #56	@ 0x38
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000035c 	.word	0x2000035c

08003104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08e      	sub	sp, #56	@ 0x38
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800310a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003124:	463b      	mov	r3, r7
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	615a      	str	r2, [r3, #20]
 8003134:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003136:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 8003138:	4a2c      	ldr	r2, [pc, #176]	@ (80031ec <MX_TIM3_Init+0xe8>)
 800313a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 800313c:	4b2a      	ldr	r3, [pc, #168]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 800313e:	2227      	movs	r2, #39	@ 0x27
 8003140:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003142:	4b29      	ldr	r3, [pc, #164]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8003148:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 800314a:	2263      	movs	r2, #99	@ 0x63
 800314c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314e:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003154:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 8003156:	2280      	movs	r2, #128	@ 0x80
 8003158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800315a:	4823      	ldr	r0, [pc, #140]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 800315c:	f004 feba 	bl	8007ed4 <HAL_TIM_Base_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003166:	f000 fa57 	bl	8003618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800316a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800316e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003170:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003174:	4619      	mov	r1, r3
 8003176:	481c      	ldr	r0, [pc, #112]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 8003178:	f005 f97e 	bl	8008478 <HAL_TIM_ConfigClockSource>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003182:	f000 fa49 	bl	8003618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003186:	4818      	ldr	r0, [pc, #96]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 8003188:	f004 fefb 	bl	8007f82 <HAL_TIM_PWM_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003192:	f000 fa41 	bl	8003618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	4810      	ldr	r0, [pc, #64]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 80031a6:	f005 fe6d 	bl	8008e84 <HAL_TIMEx_MasterConfigSynchronization>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80031b0:	f000 fa32 	bl	8003618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031b4:	2360      	movs	r3, #96	@ 0x60
 80031b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031c4:	463b      	mov	r3, r7
 80031c6:	2200      	movs	r2, #0
 80031c8:	4619      	mov	r1, r3
 80031ca:	4807      	ldr	r0, [pc, #28]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 80031cc:	f005 f840 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80031d6:	f000 fa1f 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031da:	4803      	ldr	r0, [pc, #12]	@ (80031e8 <MX_TIM3_Init+0xe4>)
 80031dc:	f000 fc16 	bl	8003a0c <HAL_TIM_MspPostInit>

}
 80031e0:	bf00      	nop
 80031e2:	3738      	adds	r7, #56	@ 0x38
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	200003a8 	.word	0x200003a8
 80031ec:	40000400 	.word	0x40000400

080031f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	@ 0x38
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003204:	f107 031c 	add.w	r3, r7, #28
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003210:	463b      	mov	r3, r7
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	611a      	str	r2, [r3, #16]
 800321e:	615a      	str	r2, [r3, #20]
 8003220:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003222:	4b2c      	ldr	r3, [pc, #176]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003224:	4a2c      	ldr	r2, [pc, #176]	@ (80032d8 <MX_TIM4_Init+0xe8>)
 8003226:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8003228:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 800322a:	2227      	movs	r2, #39	@ 0x27
 800322c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322e:	4b29      	ldr	r3, [pc, #164]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003234:	4b27      	ldr	r3, [pc, #156]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003236:	2263      	movs	r2, #99	@ 0x63
 8003238:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800323a:	4b26      	ldr	r3, [pc, #152]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003240:	4b24      	ldr	r3, [pc, #144]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003246:	4823      	ldr	r0, [pc, #140]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003248:	f004 fe44 	bl	8007ed4 <HAL_TIM_Base_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003252:	f000 f9e1 	bl	8003618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800325c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003260:	4619      	mov	r1, r3
 8003262:	481c      	ldr	r0, [pc, #112]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003264:	f005 f908 	bl	8008478 <HAL_TIM_ConfigClockSource>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800326e:	f000 f9d3 	bl	8003618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003272:	4818      	ldr	r0, [pc, #96]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003274:	f004 fe85 	bl	8007f82 <HAL_TIM_PWM_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800327e:	f000 f9cb 	bl	8003618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	4619      	mov	r1, r3
 8003290:	4810      	ldr	r0, [pc, #64]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 8003292:	f005 fdf7 	bl	8008e84 <HAL_TIMEx_MasterConfigSynchronization>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800329c:	f000 f9bc 	bl	8003618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a0:	2360      	movs	r3, #96	@ 0x60
 80032a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032b0:	463b      	mov	r3, r7
 80032b2:	2200      	movs	r2, #0
 80032b4:	4619      	mov	r1, r3
 80032b6:	4807      	ldr	r0, [pc, #28]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 80032b8:	f004 ffca 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80032c2:	f000 f9a9 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80032c6:	4803      	ldr	r0, [pc, #12]	@ (80032d4 <MX_TIM4_Init+0xe4>)
 80032c8:	f000 fba0 	bl	8003a0c <HAL_TIM_MspPostInit>

}
 80032cc:	bf00      	nop
 80032ce:	3738      	adds	r7, #56	@ 0x38
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200003f4 	.word	0x200003f4
 80032d8:	40000800 	.word	0x40000800

080032dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032e0:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 80032e2:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <MX_USART2_UART_Init+0x5c>)
 80032e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 80032e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 8003302:	220c      	movs	r2, #12
 8003304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003318:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 800331a:	2200      	movs	r2, #0
 800331c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800331e:	4805      	ldr	r0, [pc, #20]	@ (8003334 <MX_USART2_UART_Init+0x58>)
 8003320:	f005 fe38 	bl	8008f94 <HAL_UART_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800332a:	f000 f975 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000440 	.word	0x20000440
 8003338:	40004400 	.word	0x40004400

0800333c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	@ 0x28
 8003340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003352:	4b36      	ldr	r3, [pc, #216]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	4a35      	ldr	r2, [pc, #212]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800335e:	4b33      	ldr	r3, [pc, #204]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800336a:	4b30      	ldr	r3, [pc, #192]	@ (800342c <MX_GPIO_Init+0xf0>)
 800336c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336e:	4a2f      	ldr	r2, [pc, #188]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003376:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b2a      	ldr	r3, [pc, #168]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003386:	4a29      	ldr	r2, [pc, #164]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800338e:	4b27      	ldr	r3, [pc, #156]	@ (800342c <MX_GPIO_Init+0xf0>)
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	4b24      	ldr	r3, [pc, #144]	@ (800342c <MX_GPIO_Init+0xf0>)
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	4a23      	ldr	r2, [pc, #140]	@ (800342c <MX_GPIO_Init+0xf0>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a6:	4b21      	ldr	r3, [pc, #132]	@ (800342c <MX_GPIO_Init+0xf0>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_B_DIRECTION_Pin, GPIO_PIN_RESET);
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80033b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033bc:	f002 fc2e 	bl	8005c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port, MOTOR_A_DIRECTION_Pin, GPIO_PIN_RESET);
 80033c0:	2200      	movs	r2, #0
 80033c2:	2120      	movs	r1, #32
 80033c4:	481a      	ldr	r0, [pc, #104]	@ (8003430 <MX_GPIO_Init+0xf4>)
 80033c6:	f002 fc29 	bl	8005c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	4619      	mov	r1, r3
 80033e0:	4814      	ldr	r0, [pc, #80]	@ (8003434 <MX_GPIO_Init+0xf8>)
 80033e2:	f002 fa71 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_B_DIRECTION_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_B_DIRECTION_Pin;
 80033e6:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80033ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4619      	mov	r1, r3
 80033fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003402:	f002 fa61 	bl	80058c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_A_DIRECTION_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIRECTION_Pin;
 8003406:	2320      	movs	r3, #32
 8003408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340a:	2301      	movs	r3, #1
 800340c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_A_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8003416:	f107 0314 	add.w	r3, r7, #20
 800341a:	4619      	mov	r1, r3
 800341c:	4804      	ldr	r0, [pc, #16]	@ (8003430 <MX_GPIO_Init+0xf4>)
 800341e:	f002 fa53 	bl	80058c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003422:	bf00      	nop
 8003424:	3728      	adds	r7, #40	@ 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	48000400 	.word	0x48000400
 8003434:	48000800 	.word	0x48000800

08003438 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003438:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6d      	ldr	r2, [pc, #436]	@ (80035fc <HAL_UART_RxCpltCallback+0x1c4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f040 80d1 	bne.w	80035f0 <HAL_UART_RxCpltCallback+0x1b8>
		if(receivedSign == '\n'){
 800344e:	4b6c      	ldr	r3, [pc, #432]	@ (8003600 <HAL_UART_RxCpltCallback+0x1c8>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b0a      	cmp	r3, #10
 8003454:	f040 809d 	bne.w	8003592 <HAL_UART_RxCpltCallback+0x15a>
			frameReceived[frameCursor] = atoi(messageReceived);
 8003458:	486a      	ldr	r0, [pc, #424]	@ (8003604 <HAL_UART_RxCpltCallback+0x1cc>)
 800345a:	f007 f985 	bl	800a768 <atoi>
 800345e:	4603      	mov	r3, r0
 8003460:	4a69      	ldr	r2, [pc, #420]	@ (8003608 <HAL_UART_RxCpltCallback+0x1d0>)
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	4611      	mov	r1, r2
 8003466:	17da      	asrs	r2, r3, #31
 8003468:	4698      	mov	r8, r3
 800346a:	4691      	mov	r9, r2
 800346c:	4a67      	ldr	r2, [pc, #412]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 800346e:	00cb      	lsls	r3, r1, #3
 8003470:	4413      	add	r3, r2
 8003472:	e9c3 8900 	strd	r8, r9, [r3]
			if(strcmp(frameReceived[0], EMERGENCY_STOP ) == 0) emergencyStop();
 8003476:	4b65      	ldr	r3, [pc, #404]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	4613      	mov	r3, r2
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f7fc fea5 	bl	80001d0 <strcmp>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_UART_RxCpltCallback+0x5a>
 800348c:	f7fe fe22 	bl	80020d4 <emergencyStop>
 8003490:	e06e      	b.n	8003570 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_FORWARD) == 0)moveForward();
 8003492:	4b5e      	ldr	r3, [pc, #376]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	4613      	mov	r3, r2
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f7fc fe97 	bl	80001d0 <strcmp>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <HAL_UART_RxCpltCallback+0x76>
 80034a8:	f7fe fe32 	bl	8002110 <moveForward>
 80034ac:	e060      	b.n	8003570 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], MOVE_REVERSE) == 0)moveReverse();
 80034ae:	4b57      	ldr	r3, [pc, #348]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	4613      	mov	r3, r2
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fc fe89 	bl	80001d0 <strcmp>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_UART_RxCpltCallback+0x92>
 80034c4:	f7fe fe42 	bl	800214c <moveReverse>
 80034c8:	e052      	b.n	8003570 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_LEFT) == 0)turnLeft();
 80034ca:	4b50      	ldr	r3, [pc, #320]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	4613      	mov	r3, r2
 80034d2:	2103      	movs	r1, #3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fc fe7b 	bl	80001d0 <strcmp>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <HAL_UART_RxCpltCallback+0xae>
 80034e0:	f7fe fe70 	bl	80021c4 <turnLeft>
 80034e4:	e044      	b.n	8003570 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], TURN_RIGHT) == 0)turnRight();
 80034e6:	4b49      	ldr	r3, [pc, #292]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	4613      	mov	r3, r2
 80034ee:	2104      	movs	r1, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fc fe6d 	bl	80001d0 <strcmp>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <HAL_UART_RxCpltCallback+0xca>
 80034fc:	f7fe fe44 	bl	8002188 <turnRight>
 8003500:	e036      	b.n	8003570 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_MOVMENT_SPEED) == 0)setMovmentSpeed(frameReceived[1], frameReceived[2]);
 8003502:	4b42      	ldr	r3, [pc, #264]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	4613      	mov	r3, r2
 800350a:	2105      	movs	r1, #5
 800350c:	4618      	mov	r0, r3
 800350e:	f7fc fe5f 	bl	80001d0 <strcmp>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_UART_RxCpltCallback+0xf8>
 8003518:	4b3c      	ldr	r3, [pc, #240]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 800351a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800351e:	4610      	mov	r0, r2
 8003520:	4b3a      	ldr	r3, [pc, #232]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003522:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003526:	4613      	mov	r3, r2
 8003528:	4619      	mov	r1, r3
 800352a:	f7fe fd81 	bl	8002030 <setMovmentSpeed>
 800352e:	e01f      	b.n	8003570 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], SET_LED_BRIGHTNESS) == 0)setLedBrightness(frameReceived[1]);
 8003530:	4b36      	ldr	r3, [pc, #216]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	4613      	mov	r3, r2
 8003538:	2108      	movs	r1, #8
 800353a:	4618      	mov	r0, r3
 800353c:	f7fc fe48 	bl	80001d0 <strcmp>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <HAL_UART_RxCpltCallback+0x11e>
 8003546:	4b31      	ldr	r3, [pc, #196]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003548:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800354c:	4613      	mov	r3, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe ffb6 	bl	80024c0 <setLedBrightness>
 8003554:	e00c      	b.n	8003570 <HAL_UART_RxCpltCallback+0x138>
			else if(strcmp(frameReceived[0], GET_ROBOT_DATA) == 0){sendRobotData();}
 8003556:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	4613      	mov	r3, r2
 800355e:	2107      	movs	r1, #7
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc fe35 	bl	80001d0 <strcmp>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_RxCpltCallback+0x138>
 800356c:	f7ff f942 	bl	80027f4 <sendRobotData>
			memset(messageReceived, 0, 50);
 8003570:	2232      	movs	r2, #50	@ 0x32
 8003572:	2100      	movs	r1, #0
 8003574:	4823      	ldr	r0, [pc, #140]	@ (8003604 <HAL_UART_RxCpltCallback+0x1cc>)
 8003576:	f009 f83c 	bl	800c5f2 <memset>
			memset(frameReceived, 0, 10);
 800357a:	220a      	movs	r2, #10
 800357c:	2100      	movs	r1, #0
 800357e:	4823      	ldr	r0, [pc, #140]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 8003580:	f009 f837 	bl	800c5f2 <memset>
			messageCursor = 0;
 8003584:	4b22      	ldr	r3, [pc, #136]	@ (8003610 <HAL_UART_RxCpltCallback+0x1d8>)
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
			frameCursor = 0;
 800358a:	4b1f      	ldr	r3, [pc, #124]	@ (8003608 <HAL_UART_RxCpltCallback+0x1d0>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e029      	b.n	80035e6 <HAL_UART_RxCpltCallback+0x1ae>
		}
		else if(receivedSign == ' '){
 8003592:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <HAL_UART_RxCpltCallback+0x1c8>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b20      	cmp	r3, #32
 8003598:	d11a      	bne.n	80035d0 <HAL_UART_RxCpltCallback+0x198>
			frameReceived[frameCursor++] = atoi(messageReceived);
 800359a:	481a      	ldr	r0, [pc, #104]	@ (8003604 <HAL_UART_RxCpltCallback+0x1cc>)
 800359c:	f007 f8e4 	bl	800a768 <atoi>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <HAL_UART_RxCpltCallback+0x1d0>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	b2c8      	uxtb	r0, r1
 80035aa:	4917      	ldr	r1, [pc, #92]	@ (8003608 <HAL_UART_RxCpltCallback+0x1d0>)
 80035ac:	7008      	strb	r0, [r1, #0]
 80035ae:	17d1      	asrs	r1, r2, #31
 80035b0:	4614      	mov	r4, r2
 80035b2:	460d      	mov	r5, r1
 80035b4:	4a15      	ldr	r2, [pc, #84]	@ (800360c <HAL_UART_RxCpltCallback+0x1d4>)
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	e9c3 4500 	strd	r4, r5, [r3]
			messageCursor = 0;
 80035be:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <HAL_UART_RxCpltCallback+0x1d8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
			memset(messageReceived, 0, 50);
 80035c4:	2232      	movs	r2, #50	@ 0x32
 80035c6:	2100      	movs	r1, #0
 80035c8:	480e      	ldr	r0, [pc, #56]	@ (8003604 <HAL_UART_RxCpltCallback+0x1cc>)
 80035ca:	f009 f812 	bl	800c5f2 <memset>
 80035ce:	e00a      	b.n	80035e6 <HAL_UART_RxCpltCallback+0x1ae>
		}
		else messageReceived[messageCursor++] = (char)receivedSign;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <HAL_UART_RxCpltCallback+0x1d8>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	b2d1      	uxtb	r1, r2
 80035d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003610 <HAL_UART_RxCpltCallback+0x1d8>)
 80035da:	7011      	strb	r1, [r2, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HAL_UART_RxCpltCallback+0x1c8>)
 80035e0:	7819      	ldrb	r1, [r3, #0]
 80035e2:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <HAL_UART_RxCpltCallback+0x1cc>)
 80035e4:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 80035e6:	2201      	movs	r2, #1
 80035e8:	4905      	ldr	r1, [pc, #20]	@ (8003600 <HAL_UART_RxCpltCallback+0x1c8>)
 80035ea:	480a      	ldr	r0, [pc, #40]	@ (8003614 <HAL_UART_RxCpltCallback+0x1dc>)
 80035ec:	f005 fdaa 	bl	8009144 <HAL_UART_Receive_IT>
	}
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035fa:	bf00      	nop
 80035fc:	40004400 	.word	0x40004400
 8003600:	200004d0 	.word	0x200004d0
 8003604:	200004d4 	.word	0x200004d4
 8003608:	200004d2 	.word	0x200004d2
 800360c:	20000508 	.word	0x20000508
 8003610:	200004d1 	.word	0x200004d1
 8003614:	20000440 	.word	0x20000440

08003618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800361c:	b672      	cpsid	i
}
 800361e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <Error_Handler+0x8>

08003624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <HAL_MspInit+0x44>)
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <HAL_MspInit+0x44>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6613      	str	r3, [r2, #96]	@ 0x60
 8003636:	4b0c      	ldr	r3, [pc, #48]	@ (8003668 <HAL_MspInit+0x44>)
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <HAL_MspInit+0x44>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	4a08      	ldr	r2, [pc, #32]	@ (8003668 <HAL_MspInit+0x44>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364c:	6593      	str	r3, [r2, #88]	@ 0x58
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_MspInit+0x44>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000

0800366c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b0ae      	sub	sp, #184	@ 0xb8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	2288      	movs	r2, #136	@ 0x88
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f008 ffb0 	bl	800c5f2 <memset>
  if(hadc->Instance==ADC1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a42      	ldr	r2, [pc, #264]	@ (80037a0 <HAL_ADC_MspInit+0x134>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d17d      	bne.n	8003798 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800369c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80036a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80036a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80036aa:	2302      	movs	r3, #2
 80036ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80036b2:	2308      	movs	r3, #8
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80036b6:	2307      	movs	r3, #7
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80036ba:	2302      	movs	r3, #2
 80036bc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80036be:	2302      	movs	r3, #2
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80036c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c8:	f107 031c 	add.w	r3, r7, #28
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 ff45 	bl	800755c <HAL_RCCEx_PeriphCLKConfig>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80036d8:	f7ff ff9e 	bl	8003618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80036dc:	4b31      	ldr	r3, [pc, #196]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e0:	4a30      	ldr	r2, [pc, #192]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 80036e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036e8:	4b2e      	ldr	r3, [pc, #184]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 80036ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f4:	4b2b      	ldr	r3, [pc, #172]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 80036f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f8:	4a2a      	ldr	r2, [pc, #168]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003700:	4b28      	ldr	r3, [pc, #160]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	4b25      	ldr	r3, [pc, #148]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	4a24      	ldr	r2, [pc, #144]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003718:	4b22      	ldr	r3, [pc, #136]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 800371a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003724:	4b1f      	ldr	r3, [pc, #124]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 8003726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003728:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003730:	4b1c      	ldr	r3, [pc, #112]	@ (80037a4 <HAL_ADC_MspInit+0x138>)
 8003732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800373c:	2308      	movs	r3, #8
 800373e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003742:	230b      	movs	r3, #11
 8003744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003752:	4619      	mov	r1, r3
 8003754:	4814      	ldr	r0, [pc, #80]	@ (80037a8 <HAL_ADC_MspInit+0x13c>)
 8003756:	f002 f8b7 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800375a:	2313      	movs	r3, #19
 800375c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003760:	230b      	movs	r3, #11
 8003762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003770:	4619      	mov	r1, r3
 8003772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003776:	f002 f8a7 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800377a:	2301      	movs	r3, #1
 800377c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003780:	230b      	movs	r3, #11
 8003782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003790:	4619      	mov	r1, r3
 8003792:	4806      	ldr	r0, [pc, #24]	@ (80037ac <HAL_ADC_MspInit+0x140>)
 8003794:	f002 f898 	bl	80058c8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003798:	bf00      	nop
 800379a:	37b8      	adds	r7, #184	@ 0xb8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	50040000 	.word	0x50040000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	48000800 	.word	0x48000800
 80037ac:	48000400 	.word	0x48000400

080037b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b0b0      	sub	sp, #192	@ 0xc0
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037cc:	2288      	movs	r2, #136	@ 0x88
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f008 ff0e 	bl	800c5f2 <memset>
  if(hi2c->Instance==I2C1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a63      	ldr	r2, [pc, #396]	@ (8003968 <HAL_I2C_MspInit+0x1b8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d13c      	bne.n	800385a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80037e0:	2340      	movs	r3, #64	@ 0x40
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037e4:	2300      	movs	r3, #0
 80037e6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ec:	4618      	mov	r0, r3
 80037ee:	f003 feb5 	bl	800755c <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80037f8:	f7ff ff0e 	bl	8003618 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fc:	4b5b      	ldr	r3, [pc, #364]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 80037fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003800:	4a5a      	ldr	r2, [pc, #360]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003802:	f043 0302 	orr.w	r3, r3, #2
 8003806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003808:	4b58      	ldr	r3, [pc, #352]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003814:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800381c:	2312      	movs	r3, #18
 800381e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800382e:	2304      	movs	r3, #4
 8003830:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003834:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003838:	4619      	mov	r1, r3
 800383a:	484d      	ldr	r0, [pc, #308]	@ (8003970 <HAL_I2C_MspInit+0x1c0>)
 800383c:	f002 f844 	bl	80058c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003840:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	4a49      	ldr	r2, [pc, #292]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003846:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800384a:	6593      	str	r3, [r2, #88]	@ 0x58
 800384c:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003858:	e082      	b.n	8003960 <HAL_I2C_MspInit+0x1b0>
  else if(hi2c->Instance==I2C2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a45      	ldr	r2, [pc, #276]	@ (8003974 <HAL_I2C_MspInit+0x1c4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d13c      	bne.n	80038de <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003868:	2300      	movs	r3, #0
 800386a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003870:	4618      	mov	r0, r3
 8003872:	f003 fe73 	bl	800755c <HAL_RCCEx_PeriphCLKConfig>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 800387c:	f7ff fecc 	bl	8003618 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003880:	4b3a      	ldr	r3, [pc, #232]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003884:	4a39      	ldr	r2, [pc, #228]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800388c:	4b37      	ldr	r3, [pc, #220]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 800388e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003898:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800389c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a0:	2312      	movs	r3, #18
 80038a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ac:	2303      	movs	r3, #3
 80038ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80038b2:	2304      	movs	r3, #4
 80038b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80038bc:	4619      	mov	r1, r3
 80038be:	482c      	ldr	r0, [pc, #176]	@ (8003970 <HAL_I2C_MspInit+0x1c0>)
 80038c0:	f002 f802 	bl	80058c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038c4:	4b29      	ldr	r3, [pc, #164]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	4a28      	ldr	r2, [pc, #160]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 80038ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d0:	4b26      	ldr	r3, [pc, #152]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697b      	ldr	r3, [r7, #20]
}
 80038dc:	e040      	b.n	8003960 <HAL_I2C_MspInit+0x1b0>
  else if(hi2c->Instance==I2C3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a25      	ldr	r2, [pc, #148]	@ (8003978 <HAL_I2C_MspInit+0x1c8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d13b      	bne.n	8003960 <HAL_I2C_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80038e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 fe30 	bl	800755c <HAL_RCCEx_PeriphCLKConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_MspInit+0x156>
      Error_Handler();
 8003902:	f7ff fe89 	bl	8003618 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390a:	4a18      	ldr	r2, [pc, #96]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003912:	4b16      	ldr	r3, [pc, #88]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800391e:	2303      	movs	r3, #3
 8003920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003924:	2312      	movs	r3, #18
 8003926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003936:	2304      	movs	r3, #4
 8003938:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003940:	4619      	mov	r1, r3
 8003942:	480e      	ldr	r0, [pc, #56]	@ (800397c <HAL_I2C_MspInit+0x1cc>)
 8003944:	f001 ffc0 	bl	80058c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394c:	4a07      	ldr	r2, [pc, #28]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 800394e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003952:	6593      	str	r3, [r2, #88]	@ 0x58
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <HAL_I2C_MspInit+0x1bc>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	bf00      	nop
 8003962:	37c0      	adds	r7, #192	@ 0xc0
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40005400 	.word	0x40005400
 800396c:	40021000 	.word	0x40021000
 8003970:	48000400 	.word	0x48000400
 8003974:	40005800 	.word	0x40005800
 8003978:	40005c00 	.word	0x40005c00
 800397c:	48000800 	.word	0x48000800

08003980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003990:	d10c      	bne.n	80039ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003992:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003996:	4a1a      	ldr	r2, [pc, #104]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58
 800399e:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039aa:	e022      	b.n	80039f2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a14      	ldr	r2, [pc, #80]	@ (8003a04 <HAL_TIM_Base_MspInit+0x84>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10c      	bne.n	80039d0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039b6:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 80039b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ba:	4a11      	ldr	r2, [pc, #68]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
}
 80039ce:	e010      	b.n	80039f2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003a08 <HAL_TIM_Base_MspInit+0x88>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10b      	bne.n	80039f2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	4a08      	ldr	r2, [pc, #32]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <HAL_TIM_Base_MspInit+0x80>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800

08003a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	@ 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2c:	d11d      	bne.n	8003a6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2e:	4b32      	ldr	r3, [pc, #200]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	4a31      	ldr	r2, [pc, #196]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_B_SPEED_Pin;
 8003a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a54:	2300      	movs	r3, #0
 8003a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEED_GPIO_Port, &GPIO_InitStruct);
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4619      	mov	r1, r3
 8003a62:	4826      	ldr	r0, [pc, #152]	@ (8003afc <HAL_TIM_MspPostInit+0xf0>)
 8003a64:	f001 ff30 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003a68:	e042      	b.n	8003af0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a24      	ldr	r2, [pc, #144]	@ (8003b00 <HAL_TIM_MspPostInit+0xf4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d11c      	bne.n	8003aae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a74:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a78:	4a1f      	ldr	r2, [pc, #124]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003a7a:	f043 0302 	orr.w	r3, r3, #2
 8003a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a80:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_B_SPEEDB4_Pin;
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	2302      	movs	r3, #2
 8003a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEEDB4_GPIO_Port, &GPIO_InitStruct);
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4815      	ldr	r0, [pc, #84]	@ (8003afc <HAL_TIM_MspPostInit+0xf0>)
 8003aa8:	f001 ff0e 	bl	80058c8 <HAL_GPIO_Init>
}
 8003aac:	e020      	b.n	8003af0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	@ (8003b04 <HAL_TIM_MspPostInit+0xf8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	4a0e      	ldr	r2, [pc, #56]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <HAL_TIM_MspPostInit+0xec>)
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8003ad0:	2340      	movs	r3, #64	@ 0x40
 8003ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4804      	ldr	r0, [pc, #16]	@ (8003afc <HAL_TIM_MspPostInit+0xf0>)
 8003aec:	f001 feec 	bl	80058c8 <HAL_GPIO_Init>
}
 8003af0:	bf00      	nop
 8003af2:	3728      	adds	r7, #40	@ 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	48000400 	.word	0x48000400
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800

08003b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b0ac      	sub	sp, #176	@ 0xb0
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2288      	movs	r2, #136	@ 0x88
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f008 fd62 	bl	800c5f2 <memset>
  if(huart->Instance==USART2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a25      	ldr	r2, [pc, #148]	@ (8003bc8 <HAL_UART_MspInit+0xc0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d143      	bne.n	8003bc0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 fd09 	bl	800755c <HAL_RCCEx_PeriphCLKConfig>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003b50:	f7ff fd62 	bl	8003618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b54:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_UART_MspInit+0xc4>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <HAL_UART_MspInit+0xc4>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b60:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <HAL_UART_MspInit+0xc4>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6c:	4b17      	ldr	r3, [pc, #92]	@ (8003bcc <HAL_UART_MspInit+0xc4>)
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b70:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <HAL_UART_MspInit+0xc4>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b78:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <HAL_UART_MspInit+0xc4>)
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b84:	230c      	movs	r3, #12
 8003b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b96:	2303      	movs	r3, #3
 8003b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b9c:	2307      	movs	r3, #7
 8003b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bac:	f001 fe8c 	bl	80058c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	2026      	movs	r0, #38	@ 0x26
 8003bb6:	f001 fdd2 	bl	800575e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bba:	2026      	movs	r0, #38	@ 0x26
 8003bbc:	f001 fdeb 	bl	8005796 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003bc0:	bf00      	nop
 8003bc2:	37b0      	adds	r7, #176	@ 0xb0
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40004400 	.word	0x40004400
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <NMI_Handler+0x4>

08003bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <HardFault_Handler+0x4>

08003be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <MemManage_Handler+0x4>

08003be8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <BusFault_Handler+0x4>

08003bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <UsageFault_Handler+0x4>

08003bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c26:	f000 f96b 	bl	8003f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c34:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <USART2_IRQHandler+0x10>)
 8003c36:	f005 fad1 	bl	80091dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000440 	.word	0x20000440

08003c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return 1;
 8003c48:	2301      	movs	r3, #1
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_kill>:

int _kill(int pid, int sig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c5e:	f008 fd3d 	bl	800c6dc <__errno>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2216      	movs	r2, #22
 8003c66:	601a      	str	r2, [r3, #0]
  return -1;
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_exit>:

void _exit (int status)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ffe7 	bl	8003c54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <_exit+0x12>

08003c8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	e00a      	b.n	8003cb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c9c:	f3af 8000 	nop.w
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	60ba      	str	r2, [r7, #8]
 8003ca8:	b2ca      	uxtb	r2, r1
 8003caa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	dbf0      	blt.n	8003c9c <_read+0x12>
  }

  return len;
 8003cba:	687b      	ldr	r3, [r7, #4]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e009      	b.n	8003cea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	60ba      	str	r2, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	dbf1      	blt.n	8003cd6 <_write+0x12>
  }
  return len;
 8003cf2:	687b      	ldr	r3, [r7, #4]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <_close>:

int _close(int file)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d24:	605a      	str	r2, [r3, #4]
  return 0;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_isatty>:

int _isatty(int file)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d3c:	2301      	movs	r3, #1
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d6c:	4a14      	ldr	r2, [pc, #80]	@ (8003dc0 <_sbrk+0x5c>)
 8003d6e:	4b15      	ldr	r3, [pc, #84]	@ (8003dc4 <_sbrk+0x60>)
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <_sbrk+0x64>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d80:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <_sbrk+0x64>)
 8003d82:	4a12      	ldr	r2, [pc, #72]	@ (8003dcc <_sbrk+0x68>)
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <_sbrk+0x64>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d207      	bcs.n	8003da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d94:	f008 fca2 	bl	800c6dc <__errno>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003da2:	e009      	b.n	8003db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da4:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003daa:	4b07      	ldr	r3, [pc, #28]	@ (8003dc8 <_sbrk+0x64>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	4a05      	ldr	r2, [pc, #20]	@ (8003dc8 <_sbrk+0x64>)
 8003db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20018000 	.word	0x20018000
 8003dc4:	00000400 	.word	0x00000400
 8003dc8:	200005a8 	.word	0x200005a8
 8003dcc:	20000700 	.word	0x20000700

08003dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003dd4:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <SystemInit+0x20>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dda:	4a05      	ldr	r2, [pc, #20]	@ (8003df0 <SystemInit+0x20>)
 8003ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <Reset_Handler>:
 8003df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e2c <LoopForever+0x2>
 8003df8:	f7ff ffea 	bl	8003dd0 <SystemInit>
 8003dfc:	480c      	ldr	r0, [pc, #48]	@ (8003e30 <LoopForever+0x6>)
 8003dfe:	490d      	ldr	r1, [pc, #52]	@ (8003e34 <LoopForever+0xa>)
 8003e00:	4a0d      	ldr	r2, [pc, #52]	@ (8003e38 <LoopForever+0xe>)
 8003e02:	2300      	movs	r3, #0
 8003e04:	e002      	b.n	8003e0c <LoopCopyDataInit>

08003e06 <CopyDataInit>:
 8003e06:	58d4      	ldr	r4, [r2, r3]
 8003e08:	50c4      	str	r4, [r0, r3]
 8003e0a:	3304      	adds	r3, #4

08003e0c <LoopCopyDataInit>:
 8003e0c:	18c4      	adds	r4, r0, r3
 8003e0e:	428c      	cmp	r4, r1
 8003e10:	d3f9      	bcc.n	8003e06 <CopyDataInit>
 8003e12:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <LoopForever+0x12>)
 8003e14:	4c0a      	ldr	r4, [pc, #40]	@ (8003e40 <LoopForever+0x16>)
 8003e16:	2300      	movs	r3, #0
 8003e18:	e001      	b.n	8003e1e <LoopFillZerobss>

08003e1a <FillZerobss>:
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	3204      	adds	r2, #4

08003e1e <LoopFillZerobss>:
 8003e1e:	42a2      	cmp	r2, r4
 8003e20:	d3fb      	bcc.n	8003e1a <FillZerobss>
 8003e22:	f008 fc61 	bl	800c6e8 <__libc_init_array>
 8003e26:	f7fe fec9 	bl	8002bbc <main>

08003e2a <LoopForever>:
 8003e2a:	e7fe      	b.n	8003e2a <LoopForever>
 8003e2c:	20018000 	.word	0x20018000
 8003e30:	20000000 	.word	0x20000000
 8003e34:	200001e0 	.word	0x200001e0
 8003e38:	08010f78 	.word	0x08010f78
 8003e3c:	200001e0 	.word	0x200001e0
 8003e40:	200006fc 	.word	0x200006fc

08003e44 <ADC1_2_IRQHandler>:
 8003e44:	e7fe      	b.n	8003e44 <ADC1_2_IRQHandler>
	...

08003e48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e52:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <HAL_Init+0x3c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a0b      	ldr	r2, [pc, #44]	@ (8003e84 <HAL_Init+0x3c>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5e:	2003      	movs	r0, #3
 8003e60:	f001 fc72 	bl	8005748 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e64:	2000      	movs	r0, #0
 8003e66:	f000 f80f 	bl	8003e88 <HAL_InitTick>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	71fb      	strb	r3, [r7, #7]
 8003e74:	e001      	b.n	8003e7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e76:	f7ff fbd5 	bl	8003624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40022000 	.word	0x40022000

08003e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e94:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <HAL_InitTick+0x6c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d023      	beq.n	8003ee4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e9c:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <HAL_InitTick+0x70>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b14      	ldr	r3, [pc, #80]	@ (8003ef4 <HAL_InitTick+0x6c>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 fc7d 	bl	80057b2 <HAL_SYSTICK_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b0f      	cmp	r3, #15
 8003ec2:	d809      	bhi.n	8003ed8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	f001 fc47 	bl	800575e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <HAL_InitTick+0x74>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e007      	b.n	8003ee8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	e004      	b.n	8003ee8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e001      	b.n	8003ee8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000014 	.word	0x20000014
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	20000010 	.word	0x20000010

08003f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f04:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_IncTick+0x20>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <HAL_IncTick+0x24>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4413      	add	r3, r2
 8003f10:	4a04      	ldr	r2, [pc, #16]	@ (8003f24 <HAL_IncTick+0x24>)
 8003f12:	6013      	str	r3, [r2, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000014 	.word	0x20000014
 8003f24:	200005ac 	.word	0x200005ac

08003f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f2c:	4b03      	ldr	r3, [pc, #12]	@ (8003f3c <HAL_GetTick+0x14>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	200005ac 	.word	0x200005ac

08003f40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3360      	adds	r3, #96	@ 0x60
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <LL_ADC_SetOffset+0x44>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	03fff000 	.word	0x03fff000

08003ff0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3360      	adds	r3, #96	@ 0x60
 8003ffe:	461a      	mov	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3360      	adds	r3, #96	@ 0x60
 800402c:	461a      	mov	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	431a      	orrs	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3330      	adds	r3, #48	@ 0x30
 8004088:	461a      	mov	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	4413      	add	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	211f      	movs	r1, #31
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	401a      	ands	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	0e9b      	lsrs	r3, r3, #26
 80040b0:	f003 011f 	and.w	r1, r3, #31
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	431a      	orrs	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3314      	adds	r3, #20
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	0e5b      	lsrs	r3, r3, #25
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	4413      	add	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	0d1b      	lsrs	r3, r3, #20
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2107      	movs	r1, #7
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	401a      	ands	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	0d1b      	lsrs	r3, r3, #20
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	431a      	orrs	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004140:	43db      	mvns	r3, r3
 8004142:	401a      	ands	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0318 	and.w	r3, r3, #24
 800414a:	4908      	ldr	r1, [pc, #32]	@ (800416c <LL_ADC_SetChannelSingleDiff+0x44>)
 800414c:	40d9      	lsrs	r1, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	400b      	ands	r3, r1
 8004152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004156:	431a      	orrs	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	0007ffff 	.word	0x0007ffff

08004170 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 031f 	and.w	r3, r3, #31
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80041b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6093      	str	r3, [r2, #8]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e0:	d101      	bne.n	80041e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004204:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004208:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004230:	d101      	bne.n	8004236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800427c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004280:	f043 0202 	orr.w	r2, r3, #2
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <LL_ADC_IsEnabled+0x18>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <LL_ADC_IsEnabled+0x1a>
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d101      	bne.n	80042d2 <LL_ADC_IsDisableOngoing+0x18>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <LL_ADC_IsDisableOngoing+0x1a>
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042f4:	f043 0204 	orr.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d101      	bne.n	8004320 <LL_ADC_REG_IsConversionOngoing+0x18>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b08      	cmp	r3, #8
 8004340:	d101      	bne.n	8004346 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004354:	b590      	push	{r4, r7, lr}
 8004356:	b089      	sub	sp, #36	@ 0x24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e130      	b.n	80045d0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff f975 	bl	800366c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff19 	bl	80041cc <LL_ADC_IsDeepPowerDownEnabled>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff feff 	bl	80041a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff34 	bl	800421c <LL_ADC_IsInternalRegulatorEnabled>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d115      	bne.n	80043e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff ff18 	bl	80041f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043c4:	4b84      	ldr	r3, [pc, #528]	@ (80045d8 <HAL_ADC_Init+0x284>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	099b      	lsrs	r3, r3, #6
 80043ca:	4a84      	ldr	r2, [pc, #528]	@ (80045dc <HAL_ADC_Init+0x288>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	3301      	adds	r3, #1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80043d8:	e002      	b.n	80043e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f9      	bne.n	80043da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff ff16 	bl	800421c <LL_ADC_IsInternalRegulatorEnabled>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fa:	f043 0210 	orr.w	r2, r3, #16
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	f043 0201 	orr.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff ff76 	bl	8004308 <LL_ADC_REG_IsConversionOngoing>
 800441c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 80c9 	bne.w	80045be <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 80c5 	bne.w	80045be <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004438:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800443c:	f043 0202 	orr.w	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff23 	bl	8004294 <LL_ADC_IsEnabled>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d115      	bne.n	8004480 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004454:	4862      	ldr	r0, [pc, #392]	@ (80045e0 <HAL_ADC_Init+0x28c>)
 8004456:	f7ff ff1d 	bl	8004294 <LL_ADC_IsEnabled>
 800445a:	4604      	mov	r4, r0
 800445c:	4861      	ldr	r0, [pc, #388]	@ (80045e4 <HAL_ADC_Init+0x290>)
 800445e:	f7ff ff19 	bl	8004294 <LL_ADC_IsEnabled>
 8004462:	4603      	mov	r3, r0
 8004464:	431c      	orrs	r4, r3
 8004466:	4860      	ldr	r0, [pc, #384]	@ (80045e8 <HAL_ADC_Init+0x294>)
 8004468:	f7ff ff14 	bl	8004294 <LL_ADC_IsEnabled>
 800446c:	4603      	mov	r3, r0
 800446e:	4323      	orrs	r3, r4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	485c      	ldr	r0, [pc, #368]	@ (80045ec <HAL_ADC_Init+0x298>)
 800447c:	f7ff fd60 	bl	8003f40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	7e5b      	ldrb	r3, [r3, #25]
 8004484:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800448a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004490:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004496:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800449e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d106      	bne.n	80044bc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	3b01      	subs	r3, #1
 80044b4:	045b      	lsls	r3, r3, #17
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4b44      	ldr	r3, [pc, #272]	@ (80045f0 <HAL_ADC_Init+0x29c>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	69b9      	ldr	r1, [r7, #24]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff1c 	bl	800432e <LL_ADC_INJ_IsConversionOngoing>
 80044f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d13d      	bne.n	800457a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d13a      	bne.n	800457a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004508:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004510:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004520:	f023 0302 	bic.w	r3, r3, #2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	430b      	orrs	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004534:	2b01      	cmp	r3, #1
 8004536:	d118      	bne.n	800456a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004542:	f023 0304 	bic.w	r3, r3, #4
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800454e:	4311      	orrs	r1, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800455a:	430a      	orrs	r2, r1
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	611a      	str	r2, [r3, #16]
 8004568:	e007      	b.n	800457a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10c      	bne.n	800459c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	f023 010f 	bic.w	r1, r3, #15
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	1e5a      	subs	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
 800459a:	e007      	b.n	80045ac <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 020f 	bic.w	r2, r2, #15
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f023 0303 	bic.w	r3, r3, #3
 80045b4:	f043 0201 	orr.w	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80045bc:	e007      	b.n	80045ce <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f043 0210 	orr.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3724      	adds	r7, #36	@ 0x24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd90      	pop	{r4, r7, pc}
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	053e2d63 	.word	0x053e2d63
 80045e0:	50040000 	.word	0x50040000
 80045e4:	50040100 	.word	0x50040100
 80045e8:	50040200 	.word	0x50040200
 80045ec:	50040300 	.word	0x50040300
 80045f0:	fff0c007 	.word	0xfff0c007

080045f4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045fc:	4857      	ldr	r0, [pc, #348]	@ (800475c <HAL_ADC_Start+0x168>)
 80045fe:	f7ff fdb7 	bl	8004170 <LL_ADC_GetMultimode>
 8004602:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fe7d 	bl	8004308 <LL_ADC_REG_IsConversionOngoing>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 809c 	bne.w	800474e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_ADC_Start+0x30>
 8004620:	2302      	movs	r3, #2
 8004622:	e097      	b.n	8004754 <HAL_ADC_Start+0x160>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fd73 	bl	8005118 <ADC_Enable>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f040 8083 	bne.w	8004744 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a42      	ldr	r2, [pc, #264]	@ (8004760 <HAL_ADC_Start+0x16c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d002      	beq.n	8004662 <HAL_ADC_Start+0x6e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	e000      	b.n	8004664 <HAL_ADC_Start+0x70>
 8004662:	4b40      	ldr	r3, [pc, #256]	@ (8004764 <HAL_ADC_Start+0x170>)
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	4293      	cmp	r3, r2
 800466a:	d002      	beq.n	8004672 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468a:	d106      	bne.n	800469a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004690:	f023 0206 	bic.w	r2, r3, #6
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	659a      	str	r2, [r3, #88]	@ 0x58
 8004698:	e002      	b.n	80046a0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	221c      	movs	r2, #28
 80046a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004760 <HAL_ADC_Start+0x16c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d002      	beq.n	80046c0 <HAL_ADC_Start+0xcc>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	e000      	b.n	80046c2 <HAL_ADC_Start+0xce>
 80046c0:	4b28      	ldr	r3, [pc, #160]	@ (8004764 <HAL_ADC_Start+0x170>)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d008      	beq.n	80046dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d002      	beq.n	80046dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b09      	cmp	r3, #9
 80046da:	d114      	bne.n	8004706 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fdee 	bl	80042e0 <LL_ADC_REG_StartConversion>
 8004704:	e025      	b.n	8004752 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <HAL_ADC_Start+0x16c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d002      	beq.n	8004722 <HAL_ADC_Start+0x12e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	e000      	b.n	8004724 <HAL_ADC_Start+0x130>
 8004722:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <HAL_ADC_Start+0x170>)
 8004724:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00f      	beq.n	8004752 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800473a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	655a      	str	r2, [r3, #84]	@ 0x54
 8004742:	e006      	b.n	8004752 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800474c:	e001      	b.n	8004752 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	50040300 	.word	0x50040300
 8004760:	50040100 	.word	0x50040100
 8004764:	50040000 	.word	0x50040000

08004768 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004772:	4866      	ldr	r0, [pc, #408]	@ (800490c <HAL_ADC_PollForConversion+0x1a4>)
 8004774:	f7ff fcfc 	bl	8004170 <LL_ADC_GetMultimode>
 8004778:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d102      	bne.n	8004788 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004782:	2308      	movs	r3, #8
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e02a      	b.n	80047de <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b05      	cmp	r3, #5
 8004792:	d002      	beq.n	800479a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b09      	cmp	r3, #9
 8004798:	d111      	bne.n	80047be <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0a4      	b.n	8004902 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80047b8:	2304      	movs	r3, #4
 80047ba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80047bc:	e00f      	b.n	80047de <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047be:	4853      	ldr	r0, [pc, #332]	@ (800490c <HAL_ADC_PollForConversion+0x1a4>)
 80047c0:	f7ff fce4 	bl	800418c <LL_ADC_GetMultiDMATransfer>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e093      	b.n	8004902 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80047da:	2304      	movs	r3, #4
 80047dc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80047de:	f7ff fba3 	bl	8003f28 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80047e4:	e021      	b.n	800482a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d01d      	beq.n	800482a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80047ee:	f7ff fb9b 	bl	8003f28 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <HAL_ADC_PollForConversion+0x9c>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d112      	bne.n	800482a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004816:	f043 0204 	orr.w	r2, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e06b      	b.n	8004902 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0d6      	beq.n	80047e6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fc02 	bl	8004052 <LL_ADC_REG_IsTriggerSourceSWStart>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7e5b      	ldrb	r3, [r3, #25]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d118      	bne.n	800488e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b08      	cmp	r3, #8
 8004868:	d111      	bne.n	800488e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1f      	ldr	r2, [pc, #124]	@ (8004910 <HAL_ADC_PollForConversion+0x1a8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d002      	beq.n	800489e <HAL_ADC_PollForConversion+0x136>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	e000      	b.n	80048a0 <HAL_ADC_PollForConversion+0x138>
 800489e:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <HAL_ADC_PollForConversion+0x1ac>)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d008      	beq.n	80048ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d002      	beq.n	80048ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b09      	cmp	r3, #9
 80048b8:	d104      	bne.n	80048c4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e00c      	b.n	80048de <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a11      	ldr	r2, [pc, #68]	@ (8004910 <HAL_ADC_PollForConversion+0x1a8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d002      	beq.n	80048d4 <HAL_ADC_PollForConversion+0x16c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	e000      	b.n	80048d6 <HAL_ADC_PollForConversion+0x16e>
 80048d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <HAL_ADC_PollForConversion+0x1ac>)
 80048d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d104      	bne.n	80048ee <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e008      	b.n	8004900 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	220c      	movs	r2, #12
 80048fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	50040300 	.word	0x50040300
 8004910:	50040100 	.word	0x50040100
 8004914:	50040000 	.word	0x50040000

08004918 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b0b6      	sub	sp, #216	@ 0xd8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x22>
 8004952:	2302      	movs	r3, #2
 8004954:	e3c9      	b.n	80050ea <HAL_ADC_ConfigChannel+0x7b6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fcd0 	bl	8004308 <LL_ADC_REG_IsConversionOngoing>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 83aa 	bne.w	80050c4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b05      	cmp	r3, #5
 800497e:	d824      	bhi.n	80049ca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	3b02      	subs	r3, #2
 8004986:	2b03      	cmp	r3, #3
 8004988:	d81b      	bhi.n	80049c2 <HAL_ADC_ConfigChannel+0x8e>
 800498a:	a201      	add	r2, pc, #4	@ (adr r2, 8004990 <HAL_ADC_ConfigChannel+0x5c>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049a1 	.word	0x080049a1
 8004994:	080049a9 	.word	0x080049a9
 8004998:	080049b1 	.word	0x080049b1
 800499c:	080049b9 	.word	0x080049b9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80049a0:	230c      	movs	r3, #12
 80049a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80049a6:	e010      	b.n	80049ca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80049a8:	2312      	movs	r3, #18
 80049aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80049ae:	e00c      	b.n	80049ca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80049b0:	2318      	movs	r3, #24
 80049b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80049b6:	e008      	b.n	80049ca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80049b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80049c0:	e003      	b.n	80049ca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80049c2:	2306      	movs	r3, #6
 80049c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80049c8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80049d8:	f7ff fb4e 	bl	8004078 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fc91 	bl	8004308 <LL_ADC_REG_IsConversionOngoing>
 80049e6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fc9d 	bl	800432e <LL_ADC_INJ_IsConversionOngoing>
 80049f4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 81a4 	bne.w	8004d4a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 819f 	bne.w	8004d4a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f7ff fb59 	bl	80040d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d00a      	beq.n	8004a56 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6919      	ldr	r1, [r3, #16]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a50:	f7ff faaa 	bl	8003fa8 <LL_ADC_SetOffset>
 8004a54:	e179      	b.n	8004d4a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fac7 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x14e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fabc 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	0e9b      	lsrs	r3, r3, #26
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	e01e      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x18c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fab1 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004aa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004aa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	e004      	b.n	8004abe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004ab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ab8:	fab3 f383 	clz	r3, r3
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x1a4>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0e9b      	lsrs	r3, r3, #26
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	e018      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1d6>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ae4:	fa93 f3a3 	rbit	r3, r3
 8004ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004afc:	2320      	movs	r3, #32
 8004afe:	e004      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b04:	fab3 f383 	clz	r3, r3
 8004b08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d106      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fa80 	bl	800401c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fa64 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x214>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fa59 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	0e9b      	lsrs	r3, r3, #26
 8004b42:	f003 021f 	and.w	r2, r3, #31
 8004b46:	e01e      	b.n	8004b86 <HAL_ADC_ConfigChannel+0x252>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fa4e 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004b76:	2320      	movs	r3, #32
 8004b78:	e004      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x26a>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	0e9b      	lsrs	r3, r3, #26
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	e018      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x29c>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004bb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004bc2:	2320      	movs	r3, #32
 8004bc4:	e004      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bca:	fab3 f383 	clz	r3, r3
 8004bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d106      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff fa1d 	bl	800401c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2102      	movs	r1, #2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fa01 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x2da>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff f9f6 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004c04:	4603      	mov	r3, r0
 8004c06:	0e9b      	lsrs	r3, r3, #26
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	e01e      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x318>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2102      	movs	r1, #2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff f9eb 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	e004      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c44:	fab3 f383 	clz	r3, r3
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x330>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0e9b      	lsrs	r3, r3, #26
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	e014      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x35a>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004c72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004c80:	2320      	movs	r3, #32
 8004c82:	e004      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d106      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	2102      	movs	r1, #2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff f9be 	bl	800401c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2103      	movs	r1, #3
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff f9a2 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x398>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2103      	movs	r1, #3
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff f997 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	0e9b      	lsrs	r3, r3, #26
 8004cc6:	f003 021f 	and.w	r2, r3, #31
 8004cca:	e017      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x3c8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2103      	movs	r1, #3
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff f98c 	bl	8003ff0 <LL_ADC_GetOffsetChannel>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004cee:	2320      	movs	r3, #32
 8004cf0:	e003      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf4:	fab3 f383 	clz	r3, r3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x3e0>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0e9b      	lsrs	r3, r3, #26
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	e011      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x404>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004d22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d24:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004d26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e003      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d106      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2103      	movs	r1, #3
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff f969 	bl	800401c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff faa0 	bl	8004294 <LL_ADC_IsEnabled>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8140 	bne.w	8004fdc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f7ff f9dd 	bl	8004128 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a8f      	ldr	r2, [pc, #572]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x67c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	f040 8131 	bne.w	8004fdc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x46e>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	0e9b      	lsrs	r3, r3, #26
 8004d90:	3301      	adds	r3, #1
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2b09      	cmp	r3, #9
 8004d98:	bf94      	ite	ls
 8004d9a:	2301      	movls	r3, #1
 8004d9c:	2300      	movhi	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e019      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x4a2>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004dba:	2320      	movs	r3, #32
 8004dbc:	e003      	b.n	8004dc6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dc0:	fab3 f383 	clz	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2b09      	cmp	r3, #9
 8004dce:	bf94      	ite	ls
 8004dd0:	2301      	movls	r3, #1
 8004dd2:	2300      	movhi	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d079      	beq.n	8004ece <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x4c2>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	0e9b      	lsrs	r3, r3, #26
 8004dec:	3301      	adds	r3, #1
 8004dee:	069b      	lsls	r3, r3, #26
 8004df0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004df4:	e015      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x4ee>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e06:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004e0e:	2320      	movs	r3, #32
 8004e10:	e003      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	069b      	lsls	r3, r3, #26
 8004e1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x50e>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	0e9b      	lsrs	r3, r3, #26
 8004e34:	3301      	adds	r3, #1
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	e017      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x53e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4a:	fa93 f3a3 	rbit	r3, r3
 8004e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	e003      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e60:	fab3 f383 	clz	r3, r3
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	3301      	adds	r3, #1
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	ea42 0103 	orr.w	r1, r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x564>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	0e9b      	lsrs	r3, r3, #26
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f003 021f 	and.w	r2, r3, #31
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	051b      	lsls	r3, r3, #20
 8004e96:	e018      	b.n	8004eca <HAL_ADC_ConfigChannel+0x596>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea0:	fa93 f3a3 	rbit	r3, r3
 8004ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	e003      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f003 021f 	and.w	r2, r3, #31
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	e081      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x5b6>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	0e9b      	lsrs	r3, r3, #26
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	069b      	lsls	r3, r3, #26
 8004ee4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ee8:	e015      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x5e2>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	fa93 f3a3 	rbit	r3, r3
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004f02:	2320      	movs	r3, #32
 8004f04:	e003      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f08:	fab3 f383 	clz	r3, r3
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	3301      	adds	r3, #1
 8004f10:	069b      	lsls	r3, r3, #26
 8004f12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x602>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	0e9b      	lsrs	r3, r3, #26
 8004f28:	3301      	adds	r3, #1
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f303 	lsl.w	r3, r1, r3
 8004f34:	e017      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x632>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	61bb      	str	r3, [r7, #24]
  return result;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e003      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2101      	movs	r1, #1
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	ea42 0103 	orr.w	r1, r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x65e>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	0e9b      	lsrs	r3, r3, #26
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f003 021f 	and.w	r2, r3, #31
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	3b1e      	subs	r3, #30
 8004f8a:	051b      	lsls	r3, r3, #20
 8004f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f90:	e01e      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x69c>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	60fb      	str	r3, [r7, #12]
  return result;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004faa:	2320      	movs	r3, #32
 8004fac:	e006      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x688>
 8004fae:	bf00      	nop
 8004fb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f003 021f 	and.w	r2, r3, #31
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3b1e      	subs	r3, #30
 8004fca:	051b      	lsls	r3, r3, #20
 8004fcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fd0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7ff f87a 	bl	80040d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b44      	ldr	r3, [pc, #272]	@ (80050f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d07a      	beq.n	80050de <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fe8:	4843      	ldr	r0, [pc, #268]	@ (80050f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004fea:	f7fe ffcf 	bl	8003f8c <LL_ADC_GetCommonPathInternalCh>
 8004fee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a41      	ldr	r2, [pc, #260]	@ (80050fc <HAL_ADC_ConfigChannel+0x7c8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d12c      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d126      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3c      	ldr	r2, [pc, #240]	@ (8005100 <HAL_ADC_ConfigChannel+0x7cc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_ADC_ConfigChannel+0x6e8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a3b      	ldr	r2, [pc, #236]	@ (8005104 <HAL_ADC_ConfigChannel+0x7d0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d15d      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800501c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005024:	4619      	mov	r1, r3
 8005026:	4834      	ldr	r0, [pc, #208]	@ (80050f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8005028:	f7fe ff9d 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800502c:	4b36      	ldr	r3, [pc, #216]	@ (8005108 <HAL_ADC_ConfigChannel+0x7d4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	4a36      	ldr	r2, [pc, #216]	@ (800510c <HAL_ADC_ConfigChannel+0x7d8>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	099b      	lsrs	r3, r3, #6
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005046:	e002      	b.n	800504e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	3b01      	subs	r3, #1
 800504c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f9      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005054:	e040      	b.n	80050d8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2d      	ldr	r2, [pc, #180]	@ (8005110 <HAL_ADC_ConfigChannel+0x7dc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d118      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d112      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a23      	ldr	r2, [pc, #140]	@ (8005100 <HAL_ADC_ConfigChannel+0x7cc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_ADC_ConfigChannel+0x74c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a22      	ldr	r2, [pc, #136]	@ (8005104 <HAL_ADC_ConfigChannel+0x7d0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d12d      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005088:	4619      	mov	r1, r3
 800508a:	481b      	ldr	r0, [pc, #108]	@ (80050f8 <HAL_ADC_ConfigChannel+0x7c4>)
 800508c:	f7fe ff6b 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005090:	e024      	b.n	80050dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1f      	ldr	r2, [pc, #124]	@ (8005114 <HAL_ADC_ConfigChannel+0x7e0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d120      	bne.n	80050de <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800509c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11a      	bne.n	80050de <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a14      	ldr	r2, [pc, #80]	@ (8005100 <HAL_ADC_ConfigChannel+0x7cc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d115      	bne.n	80050de <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050ba:	4619      	mov	r1, r3
 80050bc:	480e      	ldr	r0, [pc, #56]	@ (80050f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80050be:	f7fe ff52 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
 80050c2:	e00c      	b.n	80050de <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80050d6:	e002      	b.n	80050de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80050e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	37d8      	adds	r7, #216	@ 0xd8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	80080000 	.word	0x80080000
 80050f8:	50040300 	.word	0x50040300
 80050fc:	c7520000 	.word	0xc7520000
 8005100:	50040000 	.word	0x50040000
 8005104:	50040200 	.word	0x50040200
 8005108:	2000000c 	.word	0x2000000c
 800510c:	053e2d63 	.word	0x053e2d63
 8005110:	cb840000 	.word	0xcb840000
 8005114:	80000001 	.word	0x80000001

08005118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff f8b3 	bl	8004294 <LL_ADC_IsEnabled>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d169      	bne.n	8005208 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	4b36      	ldr	r3, [pc, #216]	@ (8005214 <ADC_Enable+0xfc>)
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005146:	f043 0210 	orr.w	r2, r3, #16
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e055      	b.n	800520a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f86e 	bl	8004244 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005168:	482b      	ldr	r0, [pc, #172]	@ (8005218 <ADC_Enable+0x100>)
 800516a:	f7fe ff0f 	bl	8003f8c <LL_ADC_GetCommonPathInternalCh>
 800516e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005178:	4b28      	ldr	r3, [pc, #160]	@ (800521c <ADC_Enable+0x104>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	4a28      	ldr	r2, [pc, #160]	@ (8005220 <ADC_Enable+0x108>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	099b      	lsrs	r3, r3, #6
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005192:	e002      	b.n	800519a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	3b01      	subs	r3, #1
 8005198:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f9      	bne.n	8005194 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80051a0:	f7fe fec2 	bl	8003f28 <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051a6:	e028      	b.n	80051fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff f871 	bl	8004294 <LL_ADC_IsEnabled>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff f841 	bl	8004244 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051c2:	f7fe feb1 	bl	8003f28 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d914      	bls.n	80051fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d00d      	beq.n	80051fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	f043 0210 	orr.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ee:	f043 0201 	orr.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e007      	b.n	800520a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d1cf      	bne.n	80051a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	8000003f 	.word	0x8000003f
 8005218:	50040300 	.word	0x50040300
 800521c:	2000000c 	.word	0x2000000c
 8005220:	053e2d63 	.word	0x053e2d63

08005224 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff f842 	bl	80042ba <LL_ADC_IsDisableOngoing>
 8005236:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff f829 	bl	8004294 <LL_ADC_IsEnabled>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d047      	beq.n	80052d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d144      	bne.n	80052d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030d 	and.w	r3, r3, #13
 8005258:	2b01      	cmp	r3, #1
 800525a:	d10c      	bne.n	8005276 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f803 	bl	800426c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2203      	movs	r2, #3
 800526c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800526e:	f7fe fe5b 	bl	8003f28 <HAL_GetTick>
 8005272:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005274:	e029      	b.n	80052ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527a:	f043 0210 	orr.w	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e023      	b.n	80052da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005292:	f7fe fe49 	bl	8003f28 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d914      	bls.n	80052ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	f043 0210 	orr.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052be:	f043 0201 	orr.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e007      	b.n	80052da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1dc      	bne.n	8005292 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <LL_ADC_IsEnabled>:
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <LL_ADC_IsEnabled+0x18>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <LL_ADC_IsEnabled+0x1a>
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <LL_ADC_StartCalibration>:
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800531a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005324:	4313      	orrs	r3, r2
 8005326:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_ADC_IsCalibrationOnGoing>:
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800534a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800534e:	d101      	bne.n	8005354 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_ADC_REG_IsConversionOngoing>:
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b04      	cmp	r3, #4
 8005374:	d101      	bne.n	800537a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_ADCEx_Calibration_Start+0x1c>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e04d      	b.n	8005440 <HAL_ADCEx_Calibration_Start+0xb8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ff39 	bl	8005224 <ADC_Disable>
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d136      	bne.n	800542a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80053c4:	f023 0302 	bic.w	r3, r3, #2
 80053c8:	f043 0202 	orr.w	r2, r3, #2
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff ff96 	bl	8005308 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80053dc:	e014      	b.n	8005408 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	3301      	adds	r3, #1
 80053e2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80053ea:	d30d      	bcc.n	8005408 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f0:	f023 0312 	bic.w	r3, r3, #18
 80053f4:	f043 0210 	orr.w	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e01b      	b.n	8005440 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff94 	bl	800533a <LL_ADC_IsCalibrationOnGoing>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e2      	bne.n	80053de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541c:	f023 0303 	bic.w	r3, r3, #3
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54
 8005428:	e005      	b.n	8005436 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	f043 0210 	orr.w	r2, r3, #16
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b09f      	sub	sp, #124	@ 0x7c
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005462:	2302      	movs	r3, #2
 8005464:	e093      	b.n	800558e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800546e:	2300      	movs	r3, #0
 8005470:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005472:	2300      	movs	r3, #0
 8005474:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a47      	ldr	r2, [pc, #284]	@ (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d102      	bne.n	8005486 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005480:	4b46      	ldr	r3, [pc, #280]	@ (800559c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	e001      	b.n	800548a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e072      	b.n	800558e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ff59 	bl	8005362 <LL_ADC_REG_IsConversionOngoing>
 80054b0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff53 	bl	8005362 <LL_ADC_REG_IsConversionOngoing>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d154      	bne.n	800556c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80054c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d151      	bne.n	800556c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054c8:	4b35      	ldr	r3, [pc, #212]	@ (80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80054ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02c      	beq.n	800552e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80054d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054e6:	035b      	lsls	r3, r3, #13
 80054e8:	430b      	orrs	r3, r1
 80054ea:	431a      	orrs	r2, r3
 80054ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054f0:	4829      	ldr	r0, [pc, #164]	@ (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80054f2:	f7ff fef6 	bl	80052e2 <LL_ADC_IsEnabled>
 80054f6:	4604      	mov	r4, r0
 80054f8:	4828      	ldr	r0, [pc, #160]	@ (800559c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80054fa:	f7ff fef2 	bl	80052e2 <LL_ADC_IsEnabled>
 80054fe:	4603      	mov	r3, r0
 8005500:	431c      	orrs	r4, r3
 8005502:	4828      	ldr	r0, [pc, #160]	@ (80055a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005504:	f7ff feed 	bl	80052e2 <LL_ADC_IsEnabled>
 8005508:	4603      	mov	r3, r0
 800550a:	4323      	orrs	r3, r4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d137      	bne.n	8005580 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005518:	f023 030f 	bic.w	r3, r3, #15
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6811      	ldr	r1, [r2, #0]
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	6892      	ldr	r2, [r2, #8]
 8005524:	430a      	orrs	r2, r1
 8005526:	431a      	orrs	r2, r3
 8005528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800552c:	e028      	b.n	8005580 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800552e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005538:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800553a:	4817      	ldr	r0, [pc, #92]	@ (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800553c:	f7ff fed1 	bl	80052e2 <LL_ADC_IsEnabled>
 8005540:	4604      	mov	r4, r0
 8005542:	4816      	ldr	r0, [pc, #88]	@ (800559c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005544:	f7ff fecd 	bl	80052e2 <LL_ADC_IsEnabled>
 8005548:	4603      	mov	r3, r0
 800554a:	431c      	orrs	r4, r3
 800554c:	4815      	ldr	r0, [pc, #84]	@ (80055a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800554e:	f7ff fec8 	bl	80052e2 <LL_ADC_IsEnabled>
 8005552:	4603      	mov	r3, r0
 8005554:	4323      	orrs	r3, r4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d112      	bne.n	8005580 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800555a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005562:	f023 030f 	bic.w	r3, r3, #15
 8005566:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005568:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800556a:	e009      	b.n	8005580 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800557e:	e000      	b.n	8005582 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005580:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800558a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800558e:	4618      	mov	r0, r3
 8005590:	377c      	adds	r7, #124	@ 0x7c
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	50040000 	.word	0x50040000
 800559c:	50040100 	.word	0x50040100
 80055a0:	50040300 	.word	0x50040300
 80055a4:	50040200 	.word	0x50040200

080055a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b8:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055da:	4a04      	ldr	r2, [pc, #16]	@ (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	60d3      	str	r3, [r2, #12]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f4:	4b04      	ldr	r3, [pc, #16]	@ (8005608 <__NVIC_GetPriorityGrouping+0x18>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	f003 0307 	and.w	r3, r3, #7
}
 80055fe:	4618      	mov	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e000ed00 	.word	0xe000ed00

0800560c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	2b00      	cmp	r3, #0
 800561c:	db0b      	blt.n	8005636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	f003 021f 	and.w	r2, r3, #31
 8005624:	4907      	ldr	r1, [pc, #28]	@ (8005644 <__NVIC_EnableIRQ+0x38>)
 8005626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2001      	movs	r0, #1
 800562e:	fa00 f202 	lsl.w	r2, r0, r2
 8005632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	e000e100 	.word	0xe000e100

08005648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	db0a      	blt.n	8005672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	490c      	ldr	r1, [pc, #48]	@ (8005694 <__NVIC_SetPriority+0x4c>)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	440b      	add	r3, r1
 800566c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005670:	e00a      	b.n	8005688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	4908      	ldr	r1, [pc, #32]	@ (8005698 <__NVIC_SetPriority+0x50>)
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	3b04      	subs	r3, #4
 8005680:	0112      	lsls	r2, r2, #4
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	440b      	add	r3, r1
 8005686:	761a      	strb	r2, [r3, #24]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	e000e100 	.word	0xe000e100
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	@ 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f1c3 0307 	rsb	r3, r3, #7
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	bf28      	it	cs
 80056ba:	2304      	movcs	r3, #4
 80056bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d902      	bls.n	80056cc <NVIC_EncodePriority+0x30>
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3b03      	subs	r3, #3
 80056ca:	e000      	b.n	80056ce <NVIC_EncodePriority+0x32>
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43da      	mvns	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	401a      	ands	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e4:	f04f 31ff 	mov.w	r1, #4294967295
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	43d9      	mvns	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f4:	4313      	orrs	r3, r2
         );
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3724      	adds	r7, #36	@ 0x24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3b01      	subs	r3, #1
 8005710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005714:	d301      	bcc.n	800571a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005716:	2301      	movs	r3, #1
 8005718:	e00f      	b.n	800573a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800571a:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <SysTick_Config+0x40>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005722:	210f      	movs	r1, #15
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	f7ff ff8e 	bl	8005648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <SysTick_Config+0x40>)
 800572e:	2200      	movs	r2, #0
 8005730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005732:	4b04      	ldr	r3, [pc, #16]	@ (8005744 <SysTick_Config+0x40>)
 8005734:	2207      	movs	r2, #7
 8005736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	e000e010 	.word	0xe000e010

08005748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff29 	bl	80055a8 <__NVIC_SetPriorityGrouping>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b086      	sub	sp, #24
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005770:	f7ff ff3e 	bl	80055f0 <__NVIC_GetPriorityGrouping>
 8005774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	6978      	ldr	r0, [r7, #20]
 800577c:	f7ff ff8e 	bl	800569c <NVIC_EncodePriority>
 8005780:	4602      	mov	r2, r0
 8005782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff ff5d 	bl	8005648 <__NVIC_SetPriority>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	4603      	mov	r3, r0
 800579e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff31 	bl	800560c <__NVIC_EnableIRQ>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff ffa2 	bl	8005704 <SysTick_Config>
 80057c0:	4603      	mov	r3, r0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d008      	beq.n	80057f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2204      	movs	r2, #4
 80057e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e022      	b.n	800583a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 020e 	bic.w	r2, r2, #14
 8005802:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005818:	f003 021c 	and.w	r2, r3, #28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	2101      	movs	r1, #1
 8005822:	fa01 f202 	lsl.w	r2, r1, r2
 8005826:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d005      	beq.n	800586a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
 8005868:	e029      	b.n	80058be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 020e 	bic.w	r2, r2, #14
 8005878:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	f003 021c 	and.w	r2, r3, #28
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	2101      	movs	r1, #1
 8005898:	fa01 f202 	lsl.w	r2, r1, r2
 800589c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
    }
  }
  return status;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058d6:	e17f      	b.n	8005bd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	2101      	movs	r1, #1
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	fa01 f303 	lsl.w	r3, r1, r3
 80058e4:	4013      	ands	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8171 	beq.w	8005bd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d005      	beq.n	8005908 <HAL_GPIO_Init+0x40>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d130      	bne.n	800596a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	2203      	movs	r2, #3
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4013      	ands	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800593e:	2201      	movs	r2, #1
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43db      	mvns	r3, r3
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4013      	ands	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	091b      	lsrs	r3, r3, #4
 8005954:	f003 0201 	and.w	r2, r3, #1
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b03      	cmp	r3, #3
 8005974:	d118      	bne.n	80059a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800597c:	2201      	movs	r2, #1
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	08db      	lsrs	r3, r3, #3
 8005992:	f003 0201 	and.w	r2, r3, #1
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d017      	beq.n	80059e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	2203      	movs	r2, #3
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d123      	bne.n	8005a38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	08da      	lsrs	r2, r3, #3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3208      	adds	r2, #8
 80059f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	220f      	movs	r2, #15
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4013      	ands	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	08da      	lsrs	r2, r3, #3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3208      	adds	r2, #8
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2203      	movs	r2, #3
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 0203 	and.w	r2, r3, #3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80ac 	beq.w	8005bd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf8 <HAL_GPIO_Init+0x330>)
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8005bf8 <HAL_GPIO_Init+0x330>)
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a86:	4b5c      	ldr	r3, [pc, #368]	@ (8005bf8 <HAL_GPIO_Init+0x330>)
 8005a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a92:	4a5a      	ldr	r2, [pc, #360]	@ (8005bfc <HAL_GPIO_Init+0x334>)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	3302      	adds	r3, #2
 8005a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	220f      	movs	r2, #15
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005abc:	d025      	beq.n	8005b0a <HAL_GPIO_Init+0x242>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a4f      	ldr	r2, [pc, #316]	@ (8005c00 <HAL_GPIO_Init+0x338>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01f      	beq.n	8005b06 <HAL_GPIO_Init+0x23e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a4e      	ldr	r2, [pc, #312]	@ (8005c04 <HAL_GPIO_Init+0x33c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d019      	beq.n	8005b02 <HAL_GPIO_Init+0x23a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a4d      	ldr	r2, [pc, #308]	@ (8005c08 <HAL_GPIO_Init+0x340>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <HAL_GPIO_Init+0x236>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a4c      	ldr	r2, [pc, #304]	@ (8005c0c <HAL_GPIO_Init+0x344>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00d      	beq.n	8005afa <HAL_GPIO_Init+0x232>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8005c10 <HAL_GPIO_Init+0x348>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <HAL_GPIO_Init+0x22e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8005c14 <HAL_GPIO_Init+0x34c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d101      	bne.n	8005af2 <HAL_GPIO_Init+0x22a>
 8005aee:	2306      	movs	r3, #6
 8005af0:	e00c      	b.n	8005b0c <HAL_GPIO_Init+0x244>
 8005af2:	2307      	movs	r3, #7
 8005af4:	e00a      	b.n	8005b0c <HAL_GPIO_Init+0x244>
 8005af6:	2305      	movs	r3, #5
 8005af8:	e008      	b.n	8005b0c <HAL_GPIO_Init+0x244>
 8005afa:	2304      	movs	r3, #4
 8005afc:	e006      	b.n	8005b0c <HAL_GPIO_Init+0x244>
 8005afe:	2303      	movs	r3, #3
 8005b00:	e004      	b.n	8005b0c <HAL_GPIO_Init+0x244>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e002      	b.n	8005b0c <HAL_GPIO_Init+0x244>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <HAL_GPIO_Init+0x244>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	f002 0203 	and.w	r2, r2, #3
 8005b12:	0092      	lsls	r2, r2, #2
 8005b14:	4093      	lsls	r3, r2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b1c:	4937      	ldr	r1, [pc, #220]	@ (8005bfc <HAL_GPIO_Init+0x334>)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	3302      	adds	r3, #2
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4013      	ands	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b4e:	4a32      	ldr	r2, [pc, #200]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b54:	4b30      	ldr	r3, [pc, #192]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4013      	ands	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b78:	4a27      	ldr	r2, [pc, #156]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005b7e:	4b26      	ldr	r3, [pc, #152]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bcc:	4a12      	ldr	r2, [pc, #72]	@ (8005c18 <HAL_GPIO_Init+0x350>)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	fa22 f303 	lsr.w	r3, r2, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f47f ae78 	bne.w	80058d8 <HAL_GPIO_Init+0x10>
  }
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	48000400 	.word	0x48000400
 8005c04:	48000800 	.word	0x48000800
 8005c08:	48000c00 	.word	0x48000c00
 8005c0c:	48001000 	.word	0x48001000
 8005c10:	48001400 	.word	0x48001400
 8005c14:	48001800 	.word	0x48001800
 8005c18:	40010400 	.word	0x40010400

08005c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	807b      	strh	r3, [r7, #2]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c2c:	787b      	ldrb	r3, [r7, #1]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c32:	887a      	ldrh	r2, [r7, #2]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c38:	e002      	b.n	8005c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e08d      	b.n	8005d7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fd fd9c 	bl	80037b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2224      	movs	r2, #36	@ 0x24
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d107      	bne.n	8005cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	e006      	b.n	8005cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d108      	bne.n	8005cee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	e007      	b.n	8005cfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	f040 80f9 	bne.w	8005f9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_I2C_Mem_Write+0x34>
 8005db2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0ed      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2C_Mem_Write+0x4e>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0e6      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dda:	f7fe f8a5 	bl	8003f28 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2319      	movs	r3, #25
 8005de6:	2201      	movs	r2, #1
 8005de8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fac3 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0d1      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2221      	movs	r2, #33	@ 0x21
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2240      	movs	r2, #64	@ 0x40
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e24:	88f8      	ldrh	r0, [r7, #6]
 8005e26:	893a      	ldrh	r2, [r7, #8]
 8005e28:	8979      	ldrh	r1, [r7, #10]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4603      	mov	r3, r0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f9d3 	bl	80061e0 <I2C_RequestMemoryWrite>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0a9      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2bff      	cmp	r3, #255	@ 0xff
 8005e54:	d90e      	bls.n	8005e74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	22ff      	movs	r2, #255	@ 0xff
 8005e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	8979      	ldrh	r1, [r7, #10]
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fc47 	bl	8006700 <I2C_TransferConfig>
 8005e72:	e00f      	b.n	8005e94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	8979      	ldrh	r1, [r7, #10]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fc36 	bl	8006700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 fac6 	bl	800642a <I2C_WaitOnTXISFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e07b      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d034      	beq.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d130      	bne.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2180      	movs	r1, #128	@ 0x80
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fa3f 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e04d      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2bff      	cmp	r3, #255	@ 0xff
 8005f0c:	d90e      	bls.n	8005f2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	22ff      	movs	r2, #255	@ 0xff
 8005f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	8979      	ldrh	r1, [r7, #10]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fbeb 	bl	8006700 <I2C_TransferConfig>
 8005f2a:	e00f      	b.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	8979      	ldrh	r1, [r7, #10]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fbda 	bl	8006700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d19e      	bne.n	8005e94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 faac 	bl	80064b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e01a      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa8 <HAL_I2C_Mem_Write+0x224>)
 8005f7e:	400b      	ands	r3, r1
 8005f80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	fe00e800 	.word	0xfe00e800

08005fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	f040 80fd 	bne.w	80061ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_I2C_Mem_Read+0x34>
 8005fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0f1      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2C_Mem_Read+0x4e>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e0ea      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006002:	f7fd ff91 	bl	8003f28 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2319      	movs	r3, #25
 800600e:	2201      	movs	r2, #1
 8006010:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f9af 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0d5      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2222      	movs	r2, #34	@ 0x22
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2240      	movs	r2, #64	@ 0x40
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006044:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800604c:	88f8      	ldrh	r0, [r7, #6]
 800604e:	893a      	ldrh	r2, [r7, #8]
 8006050:	8979      	ldrh	r1, [r7, #10]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4603      	mov	r3, r0
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f913 	bl	8006288 <I2C_RequestMemoryRead>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0ad      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2bff      	cmp	r3, #255	@ 0xff
 800607c:	d90e      	bls.n	800609c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	8979      	ldrh	r1, [r7, #10]
 800608c:	4b52      	ldr	r3, [pc, #328]	@ (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fb33 	bl	8006700 <I2C_TransferConfig>
 800609a:	e00f      	b.n	80060bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	8979      	ldrh	r1, [r7, #10]
 80060ae:	4b4a      	ldr	r3, [pc, #296]	@ (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fb22 	bl	8006700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	2200      	movs	r2, #0
 80060c4:	2104      	movs	r1, #4
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f956 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e07c      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d034      	beq.n	800617c <HAL_I2C_Mem_Read+0x1d0>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d130      	bne.n	800617c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	2200      	movs	r2, #0
 8006122:	2180      	movs	r1, #128	@ 0x80
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f927 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e04d      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2bff      	cmp	r3, #255	@ 0xff
 800613c:	d90e      	bls.n	800615c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006148:	b2da      	uxtb	r2, r3
 800614a:	8979      	ldrh	r1, [r7, #10]
 800614c:	2300      	movs	r3, #0
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fad3 	bl	8006700 <I2C_TransferConfig>
 800615a:	e00f      	b.n	800617c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800616a:	b2da      	uxtb	r2, r3
 800616c:	8979      	ldrh	r1, [r7, #10]
 800616e:	2300      	movs	r3, #0
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fac2 	bl	8006700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d19a      	bne.n	80060bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f994 	bl	80064b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e01a      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b0b      	ldr	r3, [pc, #44]	@ (80061dc <HAL_I2C_Mem_Read+0x230>)
 80061ae:	400b      	ands	r3, r1
 80061b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	80002400 	.word	0x80002400
 80061dc:	fe00e800 	.word	0xfe00e800

080061e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	4608      	mov	r0, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	461a      	mov	r2, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	817b      	strh	r3, [r7, #10]
 80061f2:	460b      	mov	r3, r1
 80061f4:	813b      	strh	r3, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	8979      	ldrh	r1, [r7, #10]
 8006200:	4b20      	ldr	r3, [pc, #128]	@ (8006284 <I2C_RequestMemoryWrite+0xa4>)
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fa79 	bl	8006700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	69b9      	ldr	r1, [r7, #24]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f909 	bl	800642a <I2C_WaitOnTXISFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e02c      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	629a      	str	r2, [r3, #40]	@ 0x28
 8006232:	e015      	b.n	8006260 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006234:	893b      	ldrh	r3, [r7, #8]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	b29b      	uxth	r3, r3
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	69b9      	ldr	r1, [r7, #24]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f8ef 	bl	800642a <I2C_WaitOnTXISFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e012      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2200      	movs	r2, #0
 8006268:	2180      	movs	r1, #128	@ 0x80
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f884 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	80002000 	.word	0x80002000

08006288 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	4603      	mov	r3, r0
 8006298:	817b      	strh	r3, [r7, #10]
 800629a:	460b      	mov	r3, r1
 800629c:	813b      	strh	r3, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	8979      	ldrh	r1, [r7, #10]
 80062a8:	4b20      	ldr	r3, [pc, #128]	@ (800632c <I2C_RequestMemoryRead+0xa4>)
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2300      	movs	r3, #0
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fa26 	bl	8006700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	69b9      	ldr	r1, [r7, #24]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f8b6 	bl	800642a <I2C_WaitOnTXISFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e02c      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80062d8:	e015      	b.n	8006306 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	69b9      	ldr	r1, [r7, #24]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f89c 	bl	800642a <I2C_WaitOnTXISFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e012      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2200      	movs	r2, #0
 800630e:	2140      	movs	r1, #64	@ 0x40
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f831 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	80002000 	.word	0x80002000

08006330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d103      	bne.n	800634e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d007      	beq.n	800636c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	619a      	str	r2, [r3, #24]
  }
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006388:	e03b      	b.n	8006402 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f8d6 	bl	8006540 <I2C_IsErrorOccurred>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e041      	b.n	8006422 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d02d      	beq.n	8006402 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fd fdbf 	bl	8003f28 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d122      	bne.n	8006402 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4013      	ands	r3, r2
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d113      	bne.n	8006402 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e00f      	b.n	8006422 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4013      	ands	r3, r2
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	429a      	cmp	r2, r3
 8006410:	bf0c      	ite	eq
 8006412:	2301      	moveq	r3, #1
 8006414:	2300      	movne	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	429a      	cmp	r2, r3
 800641e:	d0b4      	beq.n	800638a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006436:	e033      	b.n	80064a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f87f 	bl	8006540 <I2C_IsErrorOccurred>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e031      	b.n	80064b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d025      	beq.n	80064a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006454:	f7fd fd68 	bl	8003f28 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d11a      	bne.n	80064a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d013      	beq.n	80064a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e007      	b.n	80064b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d1c4      	bne.n	8006438 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064c4:	e02f      	b.n	8006526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f838 	bl	8006540 <I2C_IsErrorOccurred>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e02d      	b.n	8006536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064da:	f7fd fd25 	bl	8003f28 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d11a      	bne.n	8006526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d013      	beq.n	8006526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e007      	b.n	8006536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b20      	cmp	r3, #32
 8006532:	d1c8      	bne.n	80064c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	@ 0x28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d068      	beq.n	800663e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2210      	movs	r2, #16
 8006572:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006574:	e049      	b.n	800660a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d045      	beq.n	800660a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800657e:	f7fd fcd3 	bl	8003f28 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <I2C_IsErrorOccurred+0x54>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d13a      	bne.n	800660a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800659e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b6:	d121      	bne.n	80065fc <I2C_IsErrorOccurred+0xbc>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065be:	d01d      	beq.n	80065fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065c0:	7cfb      	ldrb	r3, [r7, #19]
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d01a      	beq.n	80065fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065d6:	f7fd fca7 	bl	8003f28 <HAL_GetTick>
 80065da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065dc:	e00e      	b.n	80065fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065de:	f7fd fca3 	bl	8003f28 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b19      	cmp	r3, #25
 80065ea:	d907      	bls.n	80065fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	f043 0320 	orr.w	r3, r3, #32
 80065f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80065fa:	e006      	b.n	800660a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b20      	cmp	r3, #32
 8006608:	d1e9      	bne.n	80065de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b20      	cmp	r3, #32
 8006616:	d003      	beq.n	8006620 <I2C_IsErrorOccurred+0xe0>
 8006618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0aa      	beq.n	8006576 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006624:	2b00      	cmp	r3, #0
 8006626:	d103      	bne.n	8006630 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2220      	movs	r2, #32
 800662e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f043 0308 	orr.w	r3, r3, #8
 8006678:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	f043 0302 	orr.w	r3, r3, #2
 800669a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80066ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01c      	beq.n	80066ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fe3b 	bl	8006330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6859      	ldr	r1, [r3, #4]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <I2C_IsErrorOccurred+0x1bc>)
 80066c6:	400b      	ands	r3, r1
 80066c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80066ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	@ 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	fe00e800 	.word	0xfe00e800

08006700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	817b      	strh	r3, [r7, #10]
 800670e:	4613      	mov	r3, r2
 8006710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006718:	7a7b      	ldrb	r3, [r7, #9]
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006720:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	4313      	orrs	r3, r2
 800672a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800672e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	0d5b      	lsrs	r3, r3, #21
 800673a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800673e:	4b08      	ldr	r3, [pc, #32]	@ (8006760 <I2C_TransferConfig+0x60>)
 8006740:	430b      	orrs	r3, r1
 8006742:	43db      	mvns	r3, r3
 8006744:	ea02 0103 	and.w	r1, r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	03ff63ff 	.word	0x03ff63ff

08006764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b20      	cmp	r3, #32
 8006778:	d138      	bne.n	80067ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006784:	2302      	movs	r3, #2
 8006786:	e032      	b.n	80067ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2224      	movs	r2, #36	@ 0x24
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6819      	ldr	r1, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
  }
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b20      	cmp	r3, #32
 800680e:	d139      	bne.n	8006884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800681a:	2302      	movs	r3, #2
 800681c:	e033      	b.n	8006886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2224      	movs	r2, #36	@ 0x24
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0201 	bic.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800684c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	e000      	b.n	8006886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006884:	2302      	movs	r3, #2
  }
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006898:	4b04      	ldr	r3, [pc, #16]	@ (80068ac <HAL_PWREx_GetVoltageRange+0x18>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40007000 	.word	0x40007000

080068b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068be:	d130      	bne.n	8006922 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80068c0:	4b23      	ldr	r3, [pc, #140]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068cc:	d038      	beq.n	8006940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068ce:	4b20      	ldr	r3, [pc, #128]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068de:	4b1d      	ldr	r3, [pc, #116]	@ (8006954 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2232      	movs	r2, #50	@ 0x32
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	0c9b      	lsrs	r3, r3, #18
 80068f0:	3301      	adds	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068f4:	e002      	b.n	80068fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068fc:	4b14      	ldr	r3, [pc, #80]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006908:	d102      	bne.n	8006910 <HAL_PWREx_ControlVoltageScaling+0x60>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f2      	bne.n	80068f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006910:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691c:	d110      	bne.n	8006940 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e00f      	b.n	8006942 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006922:	4b0b      	ldr	r3, [pc, #44]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800692a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692e:	d007      	beq.n	8006940 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006930:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006938:	4a05      	ldr	r2, [pc, #20]	@ (8006950 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800693a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800693e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40007000 	.word	0x40007000
 8006954:	2000000c 	.word	0x2000000c
 8006958:	431bde83 	.word	0x431bde83

0800695c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e3ca      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800696e:	4b97      	ldr	r3, [pc, #604]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006978:	4b94      	ldr	r3, [pc, #592]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80e4 	beq.w	8006b58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_RCC_OscConfig+0x4a>
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b0c      	cmp	r3, #12
 800699a:	f040 808b 	bne.w	8006ab4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f040 8087 	bne.w	8006ab4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069a6:	4b89      	ldr	r3, [pc, #548]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_RCC_OscConfig+0x62>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e3a2      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	4b82      	ldr	r3, [pc, #520]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <HAL_RCC_OscConfig+0x7c>
 80069ce:	4b7f      	ldr	r3, [pc, #508]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069d6:	e005      	b.n	80069e4 <HAL_RCC_OscConfig+0x88>
 80069d8:	4b7c      	ldr	r3, [pc, #496]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 80069da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069de:	091b      	lsrs	r3, r3, #4
 80069e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d223      	bcs.n	8006a30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fd55 	bl	800749c <RCC_SetFlashLatencyFromMSIRange>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e383      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069fc:	4b73      	ldr	r3, [pc, #460]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a72      	ldr	r2, [pc, #456]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a02:	f043 0308 	orr.w	r3, r3, #8
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	4b70      	ldr	r3, [pc, #448]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	496d      	ldr	r1, [pc, #436]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	4968      	ldr	r1, [pc, #416]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	604b      	str	r3, [r1, #4]
 8006a2e:	e025      	b.n	8006a7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a30:	4b66      	ldr	r3, [pc, #408]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a65      	ldr	r2, [pc, #404]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a36:	f043 0308 	orr.w	r3, r3, #8
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	4b63      	ldr	r3, [pc, #396]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	4960      	ldr	r1, [pc, #384]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	495b      	ldr	r1, [pc, #364]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d109      	bne.n	8006a7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fd15 	bl	800749c <RCC_SetFlashLatencyFromMSIRange>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e343      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a7c:	f000 fc4a 	bl	8007314 <HAL_RCC_GetSysClockFreq>
 8006a80:	4602      	mov	r2, r0
 8006a82:	4b52      	ldr	r3, [pc, #328]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	4950      	ldr	r1, [pc, #320]	@ (8006bd0 <HAL_RCC_OscConfig+0x274>)
 8006a8e:	5ccb      	ldrb	r3, [r1, r3]
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
 8006a98:	4a4e      	ldr	r2, [pc, #312]	@ (8006bd4 <HAL_RCC_OscConfig+0x278>)
 8006a9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd8 <HAL_RCC_OscConfig+0x27c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fd f9f1 	bl	8003e88 <HAL_InitTick>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d052      	beq.n	8006b56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	e327      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d032      	beq.n	8006b22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006abc:	4b43      	ldr	r3, [pc, #268]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a42      	ldr	r2, [pc, #264]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ac8:	f7fd fa2e 	bl	8003f28 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ad0:	f7fd fa2a 	bl	8003f28 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e310      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f0      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006aee:	4b37      	ldr	r3, [pc, #220]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a36      	ldr	r2, [pc, #216]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006af4:	f043 0308 	orr.w	r3, r3, #8
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	4b34      	ldr	r3, [pc, #208]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	4931      	ldr	r1, [pc, #196]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	492c      	ldr	r1, [pc, #176]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	604b      	str	r3, [r1, #4]
 8006b20:	e01a      	b.n	8006b58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b22:	4b2a      	ldr	r3, [pc, #168]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a29      	ldr	r2, [pc, #164]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b2e:	f7fd f9fb 	bl	8003f28 <HAL_GetTick>
 8006b32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b34:	e008      	b.n	8006b48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b36:	f7fd f9f7 	bl	8003f28 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e2dd      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b48:	4b20      	ldr	r3, [pc, #128]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1f0      	bne.n	8006b36 <HAL_RCC_OscConfig+0x1da>
 8006b54:	e000      	b.n	8006b58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d074      	beq.n	8006c4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d005      	beq.n	8006b76 <HAL_RCC_OscConfig+0x21a>
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2b0c      	cmp	r3, #12
 8006b6e:	d10e      	bne.n	8006b8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d10b      	bne.n	8006b8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b76:	4b15      	ldr	r3, [pc, #84]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d064      	beq.n	8006c4c <HAL_RCC_OscConfig+0x2f0>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d160      	bne.n	8006c4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e2ba      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b96:	d106      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x24a>
 8006b98:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	e026      	b.n	8006bf4 <HAL_RCC_OscConfig+0x298>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bae:	d115      	bne.n	8006bdc <HAL_RCC_OscConfig+0x280>
 8006bb0:	4b06      	ldr	r3, [pc, #24]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a05      	ldr	r2, [pc, #20]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006bb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	4b03      	ldr	r3, [pc, #12]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a02      	ldr	r2, [pc, #8]	@ (8006bcc <HAL_RCC_OscConfig+0x270>)
 8006bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	e014      	b.n	8006bf4 <HAL_RCC_OscConfig+0x298>
 8006bca:	bf00      	nop
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	08010904 	.word	0x08010904
 8006bd4:	2000000c 	.word	0x2000000c
 8006bd8:	20000010 	.word	0x20000010
 8006bdc:	4ba0      	ldr	r3, [pc, #640]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a9f      	ldr	r2, [pc, #636]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	4b9d      	ldr	r3, [pc, #628]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a9c      	ldr	r2, [pc, #624]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d013      	beq.n	8006c24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfc:	f7fd f994 	bl	8003f28 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c04:	f7fd f990 	bl	8003f28 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	@ 0x64
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e276      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c16:	4b92      	ldr	r3, [pc, #584]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0x2a8>
 8006c22:	e014      	b.n	8006c4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fd f980 	bl	8003f28 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c2c:	f7fd f97c 	bl	8003f28 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	@ 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e262      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c3e:	4b88      	ldr	r3, [pc, #544]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0x2d0>
 8006c4a:	e000      	b.n	8006c4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d060      	beq.n	8006d1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d005      	beq.n	8006c6c <HAL_RCC_OscConfig+0x310>
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d119      	bne.n	8006c9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d116      	bne.n	8006c9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c6c:	4b7c      	ldr	r3, [pc, #496]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_RCC_OscConfig+0x328>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e23f      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c84:	4b76      	ldr	r3, [pc, #472]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	061b      	lsls	r3, r3, #24
 8006c92:	4973      	ldr	r1, [pc, #460]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c98:	e040      	b.n	8006d1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d023      	beq.n	8006cea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca2:	4b6f      	ldr	r3, [pc, #444]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a6e      	ldr	r2, [pc, #440]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cae:	f7fd f93b 	bl	8003f28 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb6:	f7fd f937 	bl	8003f28 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e21d      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cc8:	4b65      	ldr	r3, [pc, #404]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd4:	4b62      	ldr	r3, [pc, #392]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	495f      	ldr	r1, [pc, #380]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	604b      	str	r3, [r1, #4]
 8006ce8:	e018      	b.n	8006d1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cea:	4b5d      	ldr	r3, [pc, #372]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a5c      	ldr	r2, [pc, #368]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf6:	f7fd f917 	bl	8003f28 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cfe:	f7fd f913 	bl	8003f28 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e1f9      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d10:	4b53      	ldr	r3, [pc, #332]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d03c      	beq.n	8006da2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01c      	beq.n	8006d6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d30:	4b4b      	ldr	r3, [pc, #300]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d36:	4a4a      	ldr	r2, [pc, #296]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fd f8f2 	bl	8003f28 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d48:	f7fd f8ee 	bl	8003f28 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e1d4      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d5a:	4b41      	ldr	r3, [pc, #260]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0ef      	beq.n	8006d48 <HAL_RCC_OscConfig+0x3ec>
 8006d68:	e01b      	b.n	8006da2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d70:	4a3b      	ldr	r2, [pc, #236]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7a:	f7fd f8d5 	bl	8003f28 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d82:	f7fd f8d1 	bl	8003f28 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e1b7      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d94:	4b32      	ldr	r3, [pc, #200]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1ef      	bne.n	8006d82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80a6 	beq.w	8006efc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006db4:	4b2a      	ldr	r3, [pc, #168]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10d      	bne.n	8006ddc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc0:	4b27      	ldr	r3, [pc, #156]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc4:	4a26      	ldr	r2, [pc, #152]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dcc:	4b24      	ldr	r3, [pc, #144]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ddc:	4b21      	ldr	r3, [pc, #132]	@ (8006e64 <HAL_RCC_OscConfig+0x508>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d118      	bne.n	8006e1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006de8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e64 <HAL_RCC_OscConfig+0x508>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1d      	ldr	r2, [pc, #116]	@ (8006e64 <HAL_RCC_OscConfig+0x508>)
 8006dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df4:	f7fd f898 	bl	8003f28 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfc:	f7fd f894 	bl	8003f28 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e17a      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e0e:	4b15      	ldr	r3, [pc, #84]	@ (8006e64 <HAL_RCC_OscConfig+0x508>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d108      	bne.n	8006e34 <HAL_RCC_OscConfig+0x4d8>
 8006e22:	4b0f      	ldr	r3, [pc, #60]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e28:	4a0d      	ldr	r2, [pc, #52]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e32:	e029      	b.n	8006e88 <HAL_RCC_OscConfig+0x52c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b05      	cmp	r3, #5
 8006e3a:	d115      	bne.n	8006e68 <HAL_RCC_OscConfig+0x50c>
 8006e3c:	4b08      	ldr	r3, [pc, #32]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e42:	4a07      	ldr	r2, [pc, #28]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006e44:	f043 0304 	orr.w	r3, r3, #4
 8006e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e52:	4a03      	ldr	r2, [pc, #12]	@ (8006e60 <HAL_RCC_OscConfig+0x504>)
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e5c:	e014      	b.n	8006e88 <HAL_RCC_OscConfig+0x52c>
 8006e5e:	bf00      	nop
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40007000 	.word	0x40007000
 8006e68:	4b9c      	ldr	r3, [pc, #624]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6e:	4a9b      	ldr	r2, [pc, #620]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e78:	4b98      	ldr	r3, [pc, #608]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7e:	4a97      	ldr	r2, [pc, #604]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006e80:	f023 0304 	bic.w	r3, r3, #4
 8006e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fd f84a 	bl	8003f28 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fd f846 	bl	8003f28 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e12a      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eae:	4b8b      	ldr	r3, [pc, #556]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0ed      	beq.n	8006e98 <HAL_RCC_OscConfig+0x53c>
 8006ebc:	e015      	b.n	8006eea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fd f833 	bl	8003f28 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ec4:	e00a      	b.n	8006edc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fd f82f 	bl	8003f28 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e113      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006edc:	4b7f      	ldr	r3, [pc, #508]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1ed      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eea:	7ffb      	ldrb	r3, [r7, #31]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d105      	bne.n	8006efc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef0:	4b7a      	ldr	r3, [pc, #488]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef4:	4a79      	ldr	r2, [pc, #484]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80fe 	beq.w	8007102 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	f040 80d0 	bne.w	80070b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006f10:	4b72      	ldr	r3, [pc, #456]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f003 0203 	and.w	r2, r3, #3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d130      	bne.n	8006f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d127      	bne.n	8006f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d11f      	bne.n	8006f86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f50:	2a07      	cmp	r2, #7
 8006f52:	bf14      	ite	ne
 8006f54:	2201      	movne	r2, #1
 8006f56:	2200      	moveq	r2, #0
 8006f58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d113      	bne.n	8006f86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d109      	bne.n	8006f86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d06e      	beq.n	8007064 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d069      	beq.n	8007060 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006f8c:	4b53      	ldr	r3, [pc, #332]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d105      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006f98:	4b50      	ldr	r3, [pc, #320]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0ad      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a4b      	ldr	r2, [pc, #300]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006fb4:	f7fc ffb8 	bl	8003f28 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fbc:	f7fc ffb4 	bl	8003f28 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e09a      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fce:	4b43      	ldr	r3, [pc, #268]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fda:	4b40      	ldr	r3, [pc, #256]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	4b40      	ldr	r3, [pc, #256]	@ (80070e0 <HAL_RCC_OscConfig+0x784>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006fea:	3a01      	subs	r2, #1
 8006fec:	0112      	lsls	r2, r2, #4
 8006fee:	4311      	orrs	r1, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ff4:	0212      	lsls	r2, r2, #8
 8006ff6:	4311      	orrs	r1, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ffc:	0852      	lsrs	r2, r2, #1
 8006ffe:	3a01      	subs	r2, #1
 8007000:	0552      	lsls	r2, r2, #21
 8007002:	4311      	orrs	r1, r2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007008:	0852      	lsrs	r2, r2, #1
 800700a:	3a01      	subs	r2, #1
 800700c:	0652      	lsls	r2, r2, #25
 800700e:	4311      	orrs	r1, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007014:	0912      	lsrs	r2, r2, #4
 8007016:	0452      	lsls	r2, r2, #17
 8007018:	430a      	orrs	r2, r1
 800701a:	4930      	ldr	r1, [pc, #192]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 800701c:	4313      	orrs	r3, r2
 800701e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007020:	4b2e      	ldr	r3, [pc, #184]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2d      	ldr	r2, [pc, #180]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800702a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800702c:	4b2b      	ldr	r3, [pc, #172]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4a2a      	ldr	r2, [pc, #168]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007036:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007038:	f7fc ff76 	bl	8003f28 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007040:	f7fc ff72 	bl	8003f28 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e058      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007052:	4b22      	ldr	r3, [pc, #136]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800705e:	e050      	b.n	8007102 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e04f      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007064:	4b1d      	ldr	r3, [pc, #116]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d148      	bne.n	8007102 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007070:	4b1a      	ldr	r3, [pc, #104]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a19      	ldr	r2, [pc, #100]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800707a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800707c:	4b17      	ldr	r3, [pc, #92]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	4a16      	ldr	r2, [pc, #88]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 8007082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007086:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007088:	f7fc ff4e 	bl	8003f28 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007090:	f7fc ff4a 	bl	8003f28 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e030      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070a2:	4b0e      	ldr	r3, [pc, #56]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCC_OscConfig+0x734>
 80070ae:	e028      	b.n	8007102 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b0c      	cmp	r3, #12
 80070b4:	d023      	beq.n	80070fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b6:	4b09      	ldr	r3, [pc, #36]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a08      	ldr	r2, [pc, #32]	@ (80070dc <HAL_RCC_OscConfig+0x780>)
 80070bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c2:	f7fc ff31 	bl	8003f28 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070c8:	e00c      	b.n	80070e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ca:	f7fc ff2d 	bl	8003f28 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d905      	bls.n	80070e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e013      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
 80070dc:	40021000 	.word	0x40021000
 80070e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070e4:	4b09      	ldr	r3, [pc, #36]	@ (800710c <HAL_RCC_OscConfig+0x7b0>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1ec      	bne.n	80070ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <HAL_RCC_OscConfig+0x7b0>)
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	4905      	ldr	r1, [pc, #20]	@ (800710c <HAL_RCC_OscConfig+0x7b0>)
 80070f6:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <HAL_RCC_OscConfig+0x7b4>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	60cb      	str	r3, [r1, #12]
 80070fc:	e001      	b.n	8007102 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40021000 	.word	0x40021000
 8007110:	feeefffc 	.word	0xfeeefffc

08007114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0e7      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007128:	4b75      	ldr	r3, [pc, #468]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d910      	bls.n	8007158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007136:	4b72      	ldr	r3, [pc, #456]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 0207 	bic.w	r2, r3, #7
 800713e:	4970      	ldr	r1, [pc, #448]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007146:	4b6e      	ldr	r3, [pc, #440]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d001      	beq.n	8007158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e0cf      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d010      	beq.n	8007186 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	4b66      	ldr	r3, [pc, #408]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007170:	429a      	cmp	r2, r3
 8007172:	d908      	bls.n	8007186 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007174:	4b63      	ldr	r3, [pc, #396]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4960      	ldr	r1, [pc, #384]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d04c      	beq.n	800722c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d107      	bne.n	80071aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800719a:	4b5a      	ldr	r3, [pc, #360]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d121      	bne.n	80071ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e0a6      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d107      	bne.n	80071c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071b2:	4b54      	ldr	r3, [pc, #336]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d115      	bne.n	80071ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e09a      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d107      	bne.n	80071da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071ca:	4b4e      	ldr	r3, [pc, #312]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e08e      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071da:	4b4a      	ldr	r3, [pc, #296]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e086      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071ea:	4b46      	ldr	r3, [pc, #280]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 0203 	bic.w	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	4943      	ldr	r1, [pc, #268]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fc:	f7fc fe94 	bl	8003f28 <HAL_GetTick>
 8007200:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007202:	e00a      	b.n	800721a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007204:	f7fc fe90 	bl	8003f28 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e06e      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721a:	4b3a      	ldr	r3, [pc, #232]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 020c 	and.w	r2, r3, #12
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	429a      	cmp	r2, r3
 800722a:	d1eb      	bne.n	8007204 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	4b31      	ldr	r3, [pc, #196]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007244:	429a      	cmp	r2, r3
 8007246:	d208      	bcs.n	800725a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007248:	4b2e      	ldr	r3, [pc, #184]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	492b      	ldr	r1, [pc, #172]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 8007256:	4313      	orrs	r3, r2
 8007258:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800725a:	4b29      	ldr	r3, [pc, #164]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d210      	bcs.n	800728a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007268:	4b25      	ldr	r3, [pc, #148]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f023 0207 	bic.w	r2, r3, #7
 8007270:	4923      	ldr	r1, [pc, #140]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	4313      	orrs	r3, r2
 8007276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007278:	4b21      	ldr	r3, [pc, #132]	@ (8007300 <HAL_RCC_ClockConfig+0x1ec>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d001      	beq.n	800728a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e036      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007296:	4b1b      	ldr	r3, [pc, #108]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	4918      	ldr	r1, [pc, #96]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d009      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072b4:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	4910      	ldr	r1, [pc, #64]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072c8:	f000 f824 	bl	8007314 <HAL_RCC_GetSysClockFreq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <HAL_RCC_ClockConfig+0x1f0>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	091b      	lsrs	r3, r3, #4
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	490b      	ldr	r1, [pc, #44]	@ (8007308 <HAL_RCC_ClockConfig+0x1f4>)
 80072da:	5ccb      	ldrb	r3, [r1, r3]
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
 80072e4:	4a09      	ldr	r2, [pc, #36]	@ (800730c <HAL_RCC_ClockConfig+0x1f8>)
 80072e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80072e8:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <HAL_RCC_ClockConfig+0x1fc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fc fdcb 	bl	8003e88 <HAL_InitTick>
 80072f2:	4603      	mov	r3, r0
 80072f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80072f6:	7afb      	ldrb	r3, [r7, #11]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40022000 	.word	0x40022000
 8007304:	40021000 	.word	0x40021000
 8007308:	08010904 	.word	0x08010904
 800730c:	2000000c 	.word	0x2000000c
 8007310:	20000010 	.word	0x20000010

08007314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007314:	b480      	push	{r7}
 8007316:	b089      	sub	sp, #36	@ 0x24
 8007318:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
 800731e:	2300      	movs	r3, #0
 8007320:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007322:	4b3e      	ldr	r3, [pc, #248]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 030c 	and.w	r3, r3, #12
 800732a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800732c:	4b3b      	ldr	r3, [pc, #236]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_RCC_GetSysClockFreq+0x34>
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b0c      	cmp	r3, #12
 8007340:	d121      	bne.n	8007386 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d11e      	bne.n	8007386 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007348:	4b34      	ldr	r3, [pc, #208]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b00      	cmp	r3, #0
 8007352:	d107      	bne.n	8007364 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007354:	4b31      	ldr	r3, [pc, #196]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 8007356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	61fb      	str	r3, [r7, #28]
 8007362:	e005      	b.n	8007370 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007364:	4b2d      	ldr	r3, [pc, #180]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	091b      	lsrs	r3, r3, #4
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007370:	4a2b      	ldr	r2, [pc, #172]	@ (8007420 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007378:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10d      	bne.n	800739c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007384:	e00a      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d102      	bne.n	8007392 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800738c:	4b25      	ldr	r3, [pc, #148]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x110>)
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	e004      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d101      	bne.n	800739c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007398:	4b23      	ldr	r3, [pc, #140]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x114>)
 800739a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b0c      	cmp	r3, #12
 80073a0:	d134      	bne.n	800740c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073a2:	4b1e      	ldr	r3, [pc, #120]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d003      	beq.n	80073ba <HAL_RCC_GetSysClockFreq+0xa6>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d003      	beq.n	80073c0 <HAL_RCC_GetSysClockFreq+0xac>
 80073b8:	e005      	b.n	80073c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80073ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x110>)
 80073bc:	617b      	str	r3, [r7, #20]
      break;
 80073be:	e005      	b.n	80073cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80073c0:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x114>)
 80073c2:	617b      	str	r3, [r7, #20]
      break;
 80073c4:	e002      	b.n	80073cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	617b      	str	r3, [r7, #20]
      break;
 80073ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073cc:	4b13      	ldr	r3, [pc, #76]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	091b      	lsrs	r3, r3, #4
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	3301      	adds	r3, #1
 80073d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80073da:	4b10      	ldr	r3, [pc, #64]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	0a1b      	lsrs	r3, r3, #8
 80073e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	fb03 f202 	mul.w	r2, r3, r2
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073f2:	4b0a      	ldr	r3, [pc, #40]	@ (800741c <HAL_RCC_GetSysClockFreq+0x108>)
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	0e5b      	lsrs	r3, r3, #25
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	3301      	adds	r3, #1
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	fbb2 f3f3 	udiv	r3, r2, r3
 800740a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800740c:	69bb      	ldr	r3, [r7, #24]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3724      	adds	r7, #36	@ 0x24
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40021000 	.word	0x40021000
 8007420:	0801091c 	.word	0x0801091c
 8007424:	00f42400 	.word	0x00f42400
 8007428:	007a1200 	.word	0x007a1200

0800742c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007430:	4b03      	ldr	r3, [pc, #12]	@ (8007440 <HAL_RCC_GetHCLKFreq+0x14>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	2000000c 	.word	0x2000000c

08007444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007448:	f7ff fff0 	bl	800742c <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4904      	ldr	r1, [pc, #16]	@ (800746c <HAL_RCC_GetPCLK1Freq+0x28>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40021000 	.word	0x40021000
 800746c:	08010914 	.word	0x08010914

08007470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007474:	f7ff ffda 	bl	800742c <HAL_RCC_GetHCLKFreq>
 8007478:	4602      	mov	r2, r0
 800747a:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	0adb      	lsrs	r3, r3, #11
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	4904      	ldr	r1, [pc, #16]	@ (8007498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007486:	5ccb      	ldrb	r3, [r1, r3]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40021000 	.word	0x40021000
 8007498:	08010914 	.word	0x08010914

0800749c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80074a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80074b4:	f7ff f9ee 	bl	8006894 <HAL_PWREx_GetVoltageRange>
 80074b8:	6178      	str	r0, [r7, #20]
 80074ba:	e014      	b.n	80074e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80074bc:	4b25      	ldr	r3, [pc, #148]	@ (8007554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c0:	4a24      	ldr	r2, [pc, #144]	@ (8007554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074c8:	4b22      	ldr	r3, [pc, #136]	@ (8007554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80074d4:	f7ff f9de 	bl	8006894 <HAL_PWREx_GetVoltageRange>
 80074d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80074da:	4b1e      	ldr	r3, [pc, #120]	@ (8007554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074de:	4a1d      	ldr	r2, [pc, #116]	@ (8007554 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80074e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ec:	d10b      	bne.n	8007506 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b80      	cmp	r3, #128	@ 0x80
 80074f2:	d919      	bls.n	8007528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80074f8:	d902      	bls.n	8007500 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074fa:	2302      	movs	r3, #2
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	e013      	b.n	8007528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007500:	2301      	movs	r3, #1
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	e010      	b.n	8007528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b80      	cmp	r3, #128	@ 0x80
 800750a:	d902      	bls.n	8007512 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800750c:	2303      	movs	r3, #3
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	e00a      	b.n	8007528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b80      	cmp	r3, #128	@ 0x80
 8007516:	d102      	bne.n	800751e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007518:	2302      	movs	r3, #2
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	e004      	b.n	8007528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b70      	cmp	r3, #112	@ 0x70
 8007522:	d101      	bne.n	8007528 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007524:	2301      	movs	r3, #1
 8007526:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007528:	4b0b      	ldr	r3, [pc, #44]	@ (8007558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f023 0207 	bic.w	r2, r3, #7
 8007530:	4909      	ldr	r1, [pc, #36]	@ (8007558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007538:	4b07      	ldr	r3, [pc, #28]	@ (8007558 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	429a      	cmp	r2, r3
 8007544:	d001      	beq.n	800754a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40021000 	.word	0x40021000
 8007558:	40022000 	.word	0x40022000

0800755c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007564:	2300      	movs	r3, #0
 8007566:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007568:	2300      	movs	r3, #0
 800756a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007574:	2b00      	cmp	r3, #0
 8007576:	d041      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800757c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007580:	d02a      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007582:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007586:	d824      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800758c:	d008      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800758e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007592:	d81e      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800759c:	d010      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800759e:	e018      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075a0:	4b86      	ldr	r3, [pc, #536]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a85      	ldr	r2, [pc, #532]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075ac:	e015      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3304      	adds	r3, #4
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fabb 	bl	8007b30 <RCCEx_PLLSAI1_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075be:	e00c      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3320      	adds	r3, #32
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fba6 	bl	8007d18 <RCCEx_PLLSAI2_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075d0:	e003      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	74fb      	strb	r3, [r7, #19]
      break;
 80075d6:	e000      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80075d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075da:	7cfb      	ldrb	r3, [r7, #19]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10b      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075e0:	4b76      	ldr	r3, [pc, #472]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ee:	4973      	ldr	r1, [pc, #460]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80075f6:	e001      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f8:	7cfb      	ldrb	r3, [r7, #19]
 80075fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d041      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800760c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007610:	d02a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007612:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007616:	d824      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007618:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800761c:	d008      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800761e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007622:	d81e      	bhi.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800762c:	d010      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800762e:	e018      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007630:	4b62      	ldr	r3, [pc, #392]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a61      	ldr	r2, [pc, #388]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800763a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800763c:	e015      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3304      	adds	r3, #4
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fa73 	bl	8007b30 <RCCEx_PLLSAI1_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800764e:	e00c      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3320      	adds	r3, #32
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fb5e 	bl	8007d18 <RCCEx_PLLSAI2_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007660:	e003      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	74fb      	strb	r3, [r7, #19]
      break;
 8007666:	e000      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800766a:	7cfb      	ldrb	r3, [r7, #19]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007670:	4b52      	ldr	r3, [pc, #328]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007676:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800767e:	494f      	ldr	r1, [pc, #316]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007686:	e001      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007688:	7cfb      	ldrb	r3, [r7, #19]
 800768a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80a0 	beq.w	80077da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800769a:	2300      	movs	r3, #0
 800769c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800769e:	4b47      	ldr	r3, [pc, #284]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80076ae:	2300      	movs	r3, #0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00d      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076b4:	4b41      	ldr	r3, [pc, #260]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b8:	4a40      	ldr	r2, [pc, #256]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076be:	6593      	str	r3, [r2, #88]	@ 0x58
 80076c0:	4b3e      	ldr	r3, [pc, #248]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076cc:	2301      	movs	r3, #1
 80076ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076d0:	4b3b      	ldr	r3, [pc, #236]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a3a      	ldr	r2, [pc, #232]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80076d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076dc:	f7fc fc24 	bl	8003f28 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80076e2:	e009      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e4:	f7fc fc20 	bl	8003f28 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d902      	bls.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	74fb      	strb	r3, [r7, #19]
        break;
 80076f6:	e005      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80076f8:	4b31      	ldr	r3, [pc, #196]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0ef      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007704:	7cfb      	ldrb	r3, [r7, #19]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d15c      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800770a:	4b2c      	ldr	r3, [pc, #176]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007714:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01f      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	429a      	cmp	r2, r3
 8007726:	d019      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007728:	4b24      	ldr	r3, [pc, #144]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007732:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007734:	4b21      	ldr	r3, [pc, #132]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800773a:	4a20      	ldr	r2, [pc, #128]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800773c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007744:	4b1d      	ldr	r3, [pc, #116]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774a:	4a1c      	ldr	r2, [pc, #112]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800774c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007754:	4a19      	ldr	r2, [pc, #100]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d016      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007766:	f7fc fbdf 	bl	8003f28 <HAL_GetTick>
 800776a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800776c:	e00b      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800776e:	f7fc fbdb 	bl	8003f28 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800777c:	4293      	cmp	r3, r2
 800777e:	d902      	bls.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	74fb      	strb	r3, [r7, #19]
            break;
 8007784:	e006      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007786:	4b0d      	ldr	r3, [pc, #52]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0ec      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007794:	7cfb      	ldrb	r3, [r7, #19]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10c      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800779a:	4b08      	ldr	r3, [pc, #32]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077aa:	4904      	ldr	r1, [pc, #16]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80077b2:	e009      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077b4:	7cfb      	ldrb	r3, [r7, #19]
 80077b6:	74bb      	strb	r3, [r7, #18]
 80077b8:	e006      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80077ba:	bf00      	nop
 80077bc:	40021000 	.word	0x40021000
 80077c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c4:	7cfb      	ldrb	r3, [r7, #19]
 80077c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077c8:	7c7b      	ldrb	r3, [r7, #17]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d105      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077ce:	4b9e      	ldr	r3, [pc, #632]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d2:	4a9d      	ldr	r2, [pc, #628]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077e6:	4b98      	ldr	r3, [pc, #608]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ec:	f023 0203 	bic.w	r2, r3, #3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	4994      	ldr	r1, [pc, #592]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007808:	4b8f      	ldr	r3, [pc, #572]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780e:	f023 020c 	bic.w	r2, r3, #12
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007816:	498c      	ldr	r1, [pc, #560]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007818:	4313      	orrs	r3, r2
 800781a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800782a:	4b87      	ldr	r3, [pc, #540]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007838:	4983      	ldr	r1, [pc, #524]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800783a:	4313      	orrs	r3, r2
 800783c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800784c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007852:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800785a:	497b      	ldr	r1, [pc, #492]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800785c:	4313      	orrs	r3, r2
 800785e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800786e:	4b76      	ldr	r3, [pc, #472]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800787c:	4972      	ldr	r1, [pc, #456]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800787e:	4313      	orrs	r3, r2
 8007880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007890:	4b6d      	ldr	r3, [pc, #436]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007896:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789e:	496a      	ldr	r1, [pc, #424]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078b2:	4b65      	ldr	r3, [pc, #404]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078c0:	4961      	ldr	r1, [pc, #388]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078d4:	4b5c      	ldr	r3, [pc, #368]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e2:	4959      	ldr	r1, [pc, #356]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078f6:	4b54      	ldr	r3, [pc, #336]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007904:	4950      	ldr	r1, [pc, #320]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007906:	4313      	orrs	r3, r2
 8007908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007918:	4b4b      	ldr	r3, [pc, #300]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007926:	4948      	ldr	r1, [pc, #288]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007928:	4313      	orrs	r3, r2
 800792a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800793a:	4b43      	ldr	r3, [pc, #268]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800793c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007940:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007948:	493f      	ldr	r1, [pc, #252]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d028      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800795c:	4b3a      	ldr	r3, [pc, #232]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800795e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007962:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796a:	4937      	ldr	r1, [pc, #220]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797a:	d106      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800797c:	4b32      	ldr	r3, [pc, #200]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	4a31      	ldr	r2, [pc, #196]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007986:	60d3      	str	r3, [r2, #12]
 8007988:	e011      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800798e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007992:	d10c      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	2101      	movs	r1, #1
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f8c8 	bl	8007b30 <RCCEx_PLLSAI1_Config>
 80079a0:	4603      	mov	r3, r0
 80079a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80079a4:	7cfb      	ldrb	r3, [r7, #19]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80079aa:	7cfb      	ldrb	r3, [r7, #19]
 80079ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d028      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80079ba:	4b23      	ldr	r3, [pc, #140]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c8:	491f      	ldr	r1, [pc, #124]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079d8:	d106      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079da:	4b1b      	ldr	r3, [pc, #108]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	4a1a      	ldr	r2, [pc, #104]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079e4:	60d3      	str	r3, [r2, #12]
 80079e6:	e011      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079f0:	d10c      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3304      	adds	r3, #4
 80079f6:	2101      	movs	r1, #1
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f899 	bl	8007b30 <RCCEx_PLLSAI1_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a02:	7cfb      	ldrb	r3, [r7, #19]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007a08:	7cfb      	ldrb	r3, [r7, #19]
 8007a0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d02b      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a18:	4b0b      	ldr	r3, [pc, #44]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a26:	4908      	ldr	r1, [pc, #32]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a36:	d109      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a38:	4b03      	ldr	r3, [pc, #12]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	4a02      	ldr	r2, [pc, #8]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a42:	60d3      	str	r3, [r2, #12]
 8007a44:	e014      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007a46:	bf00      	nop
 8007a48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 f867 	bl	8007b30 <RCCEx_PLLSAI1_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a66:	7cfb      	ldrb	r3, [r7, #19]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007a6c:	7cfb      	ldrb	r3, [r7, #19]
 8007a6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d02f      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a8a:	4928      	ldr	r1, [pc, #160]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a9a:	d10d      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	2102      	movs	r1, #2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f844 	bl	8007b30 <RCCEx_PLLSAI1_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007aac:	7cfb      	ldrb	r3, [r7, #19]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d014      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007ab2:	7cfb      	ldrb	r3, [r7, #19]
 8007ab4:	74bb      	strb	r3, [r7, #18]
 8007ab6:	e011      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ac0:	d10c      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3320      	adds	r3, #32
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 f925 	bl	8007d18 <RCCEx_PLLSAI2_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ad2:	7cfb      	ldrb	r3, [r7, #19]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007ad8:	7cfb      	ldrb	r3, [r7, #19]
 8007ada:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ae8:	4b10      	ldr	r3, [pc, #64]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007af6:	490d      	ldr	r1, [pc, #52]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b0a:	4b08      	ldr	r3, [pc, #32]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b1a:	4904      	ldr	r1, [pc, #16]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007b22:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40021000 	.word	0x40021000

08007b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b3e:	4b75      	ldr	r3, [pc, #468]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d018      	beq.n	8007b7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b4a:	4b72      	ldr	r3, [pc, #456]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f003 0203 	and.w	r2, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d10d      	bne.n	8007b76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007b62:	4b6c      	ldr	r3, [pc, #432]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	091b      	lsrs	r3, r3, #4
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
       ||
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d047      	beq.n	8007c06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
 8007b7a:	e044      	b.n	8007c06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d018      	beq.n	8007bb6 <RCCEx_PLLSAI1_Config+0x86>
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d825      	bhi.n	8007bd4 <RCCEx_PLLSAI1_Config+0xa4>
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d002      	beq.n	8007b92 <RCCEx_PLLSAI1_Config+0x62>
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d009      	beq.n	8007ba4 <RCCEx_PLLSAI1_Config+0x74>
 8007b90:	e020      	b.n	8007bd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b92:	4b60      	ldr	r3, [pc, #384]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d11d      	bne.n	8007bda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ba2:	e01a      	b.n	8007bda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d116      	bne.n	8007bde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bb4:	e013      	b.n	8007bde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bb6:	4b57      	ldr	r3, [pc, #348]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10f      	bne.n	8007be2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bc2:	4b54      	ldr	r3, [pc, #336]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bd2:	e006      	b.n	8007be2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd8:	e004      	b.n	8007be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007bda:	bf00      	nop
 8007bdc:	e002      	b.n	8007be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007bde:	bf00      	nop
 8007be0:	e000      	b.n	8007be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007be2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10d      	bne.n	8007c06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007bea:	4b4a      	ldr	r3, [pc, #296]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6819      	ldr	r1, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	4944      	ldr	r1, [pc, #272]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d17d      	bne.n	8007d08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c0c:	4b41      	ldr	r3, [pc, #260]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a40      	ldr	r2, [pc, #256]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c18:	f7fc f986 	bl	8003f28 <HAL_GetTick>
 8007c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c1e:	e009      	b.n	8007c34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c20:	f7fc f982 	bl	8003f28 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d902      	bls.n	8007c34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	73fb      	strb	r3, [r7, #15]
        break;
 8007c32:	e005      	b.n	8007c40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c34:	4b37      	ldr	r3, [pc, #220]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1ef      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d160      	bne.n	8007d08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d111      	bne.n	8007c70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c4c:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6892      	ldr	r2, [r2, #8]
 8007c5c:	0211      	lsls	r1, r2, #8
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68d2      	ldr	r2, [r2, #12]
 8007c62:	0912      	lsrs	r2, r2, #4
 8007c64:	0452      	lsls	r2, r2, #17
 8007c66:	430a      	orrs	r2, r1
 8007c68:	492a      	ldr	r1, [pc, #168]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	610b      	str	r3, [r1, #16]
 8007c6e:	e027      	b.n	8007cc0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d112      	bne.n	8007c9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c76:	4b27      	ldr	r3, [pc, #156]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007c7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6892      	ldr	r2, [r2, #8]
 8007c86:	0211      	lsls	r1, r2, #8
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	6912      	ldr	r2, [r2, #16]
 8007c8c:	0852      	lsrs	r2, r2, #1
 8007c8e:	3a01      	subs	r2, #1
 8007c90:	0552      	lsls	r2, r2, #21
 8007c92:	430a      	orrs	r2, r1
 8007c94:	491f      	ldr	r1, [pc, #124]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	610b      	str	r3, [r1, #16]
 8007c9a:	e011      	b.n	8007cc0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007ca4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6892      	ldr	r2, [r2, #8]
 8007cac:	0211      	lsls	r1, r2, #8
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6952      	ldr	r2, [r2, #20]
 8007cb2:	0852      	lsrs	r2, r2, #1
 8007cb4:	3a01      	subs	r2, #1
 8007cb6:	0652      	lsls	r2, r2, #25
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	4916      	ldr	r1, [pc, #88]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cc0:	4b14      	ldr	r3, [pc, #80]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a13      	ldr	r2, [pc, #76]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007cca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ccc:	f7fc f92c 	bl	8003f28 <HAL_GetTick>
 8007cd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cd2:	e009      	b.n	8007ce8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cd4:	f7fc f928 	bl	8003f28 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d902      	bls.n	8007ce8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	73fb      	strb	r3, [r7, #15]
          break;
 8007ce6:	e005      	b.n	8007cf4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0ef      	beq.n	8007cd4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007cfa:	4b06      	ldr	r3, [pc, #24]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	4904      	ldr	r1, [pc, #16]	@ (8007d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40021000 	.word	0x40021000

08007d18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d26:	4b6a      	ldr	r3, [pc, #424]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d018      	beq.n	8007d64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d32:	4b67      	ldr	r3, [pc, #412]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f003 0203 	and.w	r2, r3, #3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d10d      	bne.n	8007d5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
       ||
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007d4a:	4b61      	ldr	r3, [pc, #388]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	091b      	lsrs	r3, r3, #4
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
       ||
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d047      	beq.n	8007dee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	73fb      	strb	r3, [r7, #15]
 8007d62:	e044      	b.n	8007dee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d018      	beq.n	8007d9e <RCCEx_PLLSAI2_Config+0x86>
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d825      	bhi.n	8007dbc <RCCEx_PLLSAI2_Config+0xa4>
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d002      	beq.n	8007d7a <RCCEx_PLLSAI2_Config+0x62>
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d009      	beq.n	8007d8c <RCCEx_PLLSAI2_Config+0x74>
 8007d78:	e020      	b.n	8007dbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d7a:	4b55      	ldr	r3, [pc, #340]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d11d      	bne.n	8007dc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d8a:	e01a      	b.n	8007dc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d8c:	4b50      	ldr	r3, [pc, #320]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d116      	bne.n	8007dc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d9c:	e013      	b.n	8007dc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10f      	bne.n	8007dca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007daa:	4b49      	ldr	r3, [pc, #292]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dba:	e006      	b.n	8007dca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc0:	e004      	b.n	8007dcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007dc2:	bf00      	nop
 8007dc4:	e002      	b.n	8007dcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007dc6:	bf00      	nop
 8007dc8:	e000      	b.n	8007dcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10d      	bne.n	8007dee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6819      	ldr	r1, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	430b      	orrs	r3, r1
 8007de8:	4939      	ldr	r1, [pc, #228]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d167      	bne.n	8007ec4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007df4:	4b36      	ldr	r3, [pc, #216]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a35      	ldr	r2, [pc, #212]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e00:	f7fc f892 	bl	8003f28 <HAL_GetTick>
 8007e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e06:	e009      	b.n	8007e1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e08:	f7fc f88e 	bl	8003f28 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d902      	bls.n	8007e1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	73fb      	strb	r3, [r7, #15]
        break;
 8007e1a:	e005      	b.n	8007e28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1ef      	bne.n	8007e08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d14a      	bne.n	8007ec4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d111      	bne.n	8007e58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e34:	4b26      	ldr	r3, [pc, #152]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6892      	ldr	r2, [r2, #8]
 8007e44:	0211      	lsls	r1, r2, #8
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68d2      	ldr	r2, [r2, #12]
 8007e4a:	0912      	lsrs	r2, r2, #4
 8007e4c:	0452      	lsls	r2, r2, #17
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	491f      	ldr	r1, [pc, #124]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	614b      	str	r3, [r1, #20]
 8007e56:	e011      	b.n	8007e7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e58:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007e60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6892      	ldr	r2, [r2, #8]
 8007e68:	0211      	lsls	r1, r2, #8
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6912      	ldr	r2, [r2, #16]
 8007e6e:	0852      	lsrs	r2, r2, #1
 8007e70:	3a01      	subs	r2, #1
 8007e72:	0652      	lsls	r2, r2, #25
 8007e74:	430a      	orrs	r2, r1
 8007e76:	4916      	ldr	r1, [pc, #88]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007e7c:	4b14      	ldr	r3, [pc, #80]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a13      	ldr	r2, [pc, #76]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e88:	f7fc f84e 	bl	8003f28 <HAL_GetTick>
 8007e8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e8e:	e009      	b.n	8007ea4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e90:	f7fc f84a 	bl	8003f28 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d902      	bls.n	8007ea4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	73fb      	strb	r3, [r7, #15]
          break;
 8007ea2:	e005      	b.n	8007eb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0ef      	beq.n	8007e90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007eb6:	4b06      	ldr	r3, [pc, #24]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eb8:	695a      	ldr	r2, [r3, #20]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	4904      	ldr	r1, [pc, #16]	@ (8007ed0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40021000 	.word	0x40021000

08007ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e049      	b.n	8007f7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fb fd40 	bl	8003980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f000 fb7a 	bl	800860c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e049      	b.n	8008028 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d106      	bne.n	8007fae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f841 	bl	8008030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f000 fb23 	bl	800860c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d109      	bne.n	8008068 <HAL_TIM_PWM_Start+0x24>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b01      	cmp	r3, #1
 800805e:	bf14      	ite	ne
 8008060:	2301      	movne	r3, #1
 8008062:	2300      	moveq	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	e03c      	b.n	80080e2 <HAL_TIM_PWM_Start+0x9e>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b04      	cmp	r3, #4
 800806c:	d109      	bne.n	8008082 <HAL_TIM_PWM_Start+0x3e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b01      	cmp	r3, #1
 8008078:	bf14      	ite	ne
 800807a:	2301      	movne	r3, #1
 800807c:	2300      	moveq	r3, #0
 800807e:	b2db      	uxtb	r3, r3
 8008080:	e02f      	b.n	80080e2 <HAL_TIM_PWM_Start+0x9e>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d109      	bne.n	800809c <HAL_TIM_PWM_Start+0x58>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b01      	cmp	r3, #1
 8008092:	bf14      	ite	ne
 8008094:	2301      	movne	r3, #1
 8008096:	2300      	moveq	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	e022      	b.n	80080e2 <HAL_TIM_PWM_Start+0x9e>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d109      	bne.n	80080b6 <HAL_TIM_PWM_Start+0x72>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	bf14      	ite	ne
 80080ae:	2301      	movne	r3, #1
 80080b0:	2300      	moveq	r3, #0
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	e015      	b.n	80080e2 <HAL_TIM_PWM_Start+0x9e>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d109      	bne.n	80080d0 <HAL_TIM_PWM_Start+0x8c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	bf14      	ite	ne
 80080c8:	2301      	movne	r3, #1
 80080ca:	2300      	moveq	r3, #0
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	e008      	b.n	80080e2 <HAL_TIM_PWM_Start+0x9e>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e09c      	b.n	8008224 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <HAL_TIM_PWM_Start+0xb6>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080f8:	e023      	b.n	8008142 <HAL_TIM_PWM_Start+0xfe>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d104      	bne.n	800810a <HAL_TIM_PWM_Start+0xc6>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008108:	e01b      	b.n	8008142 <HAL_TIM_PWM_Start+0xfe>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d104      	bne.n	800811a <HAL_TIM_PWM_Start+0xd6>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008118:	e013      	b.n	8008142 <HAL_TIM_PWM_Start+0xfe>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b0c      	cmp	r3, #12
 800811e:	d104      	bne.n	800812a <HAL_TIM_PWM_Start+0xe6>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008128:	e00b      	b.n	8008142 <HAL_TIM_PWM_Start+0xfe>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b10      	cmp	r3, #16
 800812e:	d104      	bne.n	800813a <HAL_TIM_PWM_Start+0xf6>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008138:	e003      	b.n	8008142 <HAL_TIM_PWM_Start+0xfe>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2202      	movs	r2, #2
 800813e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2201      	movs	r2, #1
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fe74 	bl	8008e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a35      	ldr	r2, [pc, #212]	@ (800822c <HAL_TIM_PWM_Start+0x1e8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <HAL_TIM_PWM_Start+0x13e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a34      	ldr	r2, [pc, #208]	@ (8008230 <HAL_TIM_PWM_Start+0x1ec>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00e      	beq.n	8008182 <HAL_TIM_PWM_Start+0x13e>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a32      	ldr	r2, [pc, #200]	@ (8008234 <HAL_TIM_PWM_Start+0x1f0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d009      	beq.n	8008182 <HAL_TIM_PWM_Start+0x13e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a31      	ldr	r2, [pc, #196]	@ (8008238 <HAL_TIM_PWM_Start+0x1f4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d004      	beq.n	8008182 <HAL_TIM_PWM_Start+0x13e>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a2f      	ldr	r2, [pc, #188]	@ (800823c <HAL_TIM_PWM_Start+0x1f8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d101      	bne.n	8008186 <HAL_TIM_PWM_Start+0x142>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <HAL_TIM_PWM_Start+0x144>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d007      	beq.n	800819c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800819a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a22      	ldr	r2, [pc, #136]	@ (800822c <HAL_TIM_PWM_Start+0x1e8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d01d      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x19e>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ae:	d018      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x19e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a22      	ldr	r2, [pc, #136]	@ (8008240 <HAL_TIM_PWM_Start+0x1fc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d013      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x19e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a21      	ldr	r2, [pc, #132]	@ (8008244 <HAL_TIM_PWM_Start+0x200>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00e      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x19e>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008248 <HAL_TIM_PWM_Start+0x204>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d009      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x19e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a17      	ldr	r2, [pc, #92]	@ (8008230 <HAL_TIM_PWM_Start+0x1ec>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d004      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x19e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a15      	ldr	r2, [pc, #84]	@ (8008234 <HAL_TIM_PWM_Start+0x1f0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d115      	bne.n	800820e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	4b18      	ldr	r3, [pc, #96]	@ (800824c <HAL_TIM_PWM_Start+0x208>)
 80081ea:	4013      	ands	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b06      	cmp	r3, #6
 80081f2:	d015      	beq.n	8008220 <HAL_TIM_PWM_Start+0x1dc>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081fa:	d011      	beq.n	8008220 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0201 	orr.w	r2, r2, #1
 800820a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820c:	e008      	b.n	8008220 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0201 	orr.w	r2, r2, #1
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e000      	b.n	8008222 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008220:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40012c00 	.word	0x40012c00
 8008230:	40013400 	.word	0x40013400
 8008234:	40014000 	.word	0x40014000
 8008238:	40014400 	.word	0x40014400
 800823c:	40014800 	.word	0x40014800
 8008240:	40000400 	.word	0x40000400
 8008244:	40000800 	.word	0x40000800
 8008248:	40000c00 	.word	0x40000c00
 800824c:	00010007 	.word	0x00010007

08008250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800826a:	2302      	movs	r3, #2
 800826c:	e0ff      	b.n	800846e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b14      	cmp	r3, #20
 800827a:	f200 80f0 	bhi.w	800845e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800827e:	a201      	add	r2, pc, #4	@ (adr r2, 8008284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082d9 	.word	0x080082d9
 8008288:	0800845f 	.word	0x0800845f
 800828c:	0800845f 	.word	0x0800845f
 8008290:	0800845f 	.word	0x0800845f
 8008294:	08008319 	.word	0x08008319
 8008298:	0800845f 	.word	0x0800845f
 800829c:	0800845f 	.word	0x0800845f
 80082a0:	0800845f 	.word	0x0800845f
 80082a4:	0800835b 	.word	0x0800835b
 80082a8:	0800845f 	.word	0x0800845f
 80082ac:	0800845f 	.word	0x0800845f
 80082b0:	0800845f 	.word	0x0800845f
 80082b4:	0800839b 	.word	0x0800839b
 80082b8:	0800845f 	.word	0x0800845f
 80082bc:	0800845f 	.word	0x0800845f
 80082c0:	0800845f 	.word	0x0800845f
 80082c4:	080083dd 	.word	0x080083dd
 80082c8:	0800845f 	.word	0x0800845f
 80082cc:	0800845f 	.word	0x0800845f
 80082d0:	0800845f 	.word	0x0800845f
 80082d4:	0800841d 	.word	0x0800841d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fa3a 	bl	8008758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0208 	orr.w	r2, r2, #8
 80082f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0204 	bic.w	r2, r2, #4
 8008302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6999      	ldr	r1, [r3, #24]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	619a      	str	r2, [r3, #24]
      break;
 8008316:	e0a5      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68b9      	ldr	r1, [r7, #8]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 faaa 	bl	8008878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6999      	ldr	r1, [r3, #24]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	021a      	lsls	r2, r3, #8
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	619a      	str	r2, [r3, #24]
      break;
 8008358:	e084      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fb13 	bl	800898c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0208 	orr.w	r2, r2, #8
 8008374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0204 	bic.w	r2, r2, #4
 8008384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69d9      	ldr	r1, [r3, #28]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691a      	ldr	r2, [r3, #16]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	61da      	str	r2, [r3, #28]
      break;
 8008398:	e064      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fb7b 	bl	8008a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69da      	ldr	r2, [r3, #28]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69d9      	ldr	r1, [r3, #28]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	021a      	lsls	r2, r3, #8
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	61da      	str	r2, [r3, #28]
      break;
 80083da:	e043      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68b9      	ldr	r1, [r7, #8]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fbc4 	bl	8008b70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0204 	bic.w	r2, r2, #4
 8008406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800841a:	e023      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fc08 	bl	8008c38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008436:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008446:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	021a      	lsls	r2, r3, #8
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800845c:	e002      	b.n	8008464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	75fb      	strb	r3, [r7, #23]
      break;
 8008462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_TIM_ConfigClockSource+0x1c>
 8008490:	2302      	movs	r3, #2
 8008492:	e0b6      	b.n	8008602 <HAL_TIM_ConfigClockSource+0x18a>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084d0:	d03e      	beq.n	8008550 <HAL_TIM_ConfigClockSource+0xd8>
 80084d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084d6:	f200 8087 	bhi.w	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 80084da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084de:	f000 8086 	beq.w	80085ee <HAL_TIM_ConfigClockSource+0x176>
 80084e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e6:	d87f      	bhi.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 80084e8:	2b70      	cmp	r3, #112	@ 0x70
 80084ea:	d01a      	beq.n	8008522 <HAL_TIM_ConfigClockSource+0xaa>
 80084ec:	2b70      	cmp	r3, #112	@ 0x70
 80084ee:	d87b      	bhi.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 80084f0:	2b60      	cmp	r3, #96	@ 0x60
 80084f2:	d050      	beq.n	8008596 <HAL_TIM_ConfigClockSource+0x11e>
 80084f4:	2b60      	cmp	r3, #96	@ 0x60
 80084f6:	d877      	bhi.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 80084f8:	2b50      	cmp	r3, #80	@ 0x50
 80084fa:	d03c      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0xfe>
 80084fc:	2b50      	cmp	r3, #80	@ 0x50
 80084fe:	d873      	bhi.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 8008500:	2b40      	cmp	r3, #64	@ 0x40
 8008502:	d058      	beq.n	80085b6 <HAL_TIM_ConfigClockSource+0x13e>
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	d86f      	bhi.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 8008508:	2b30      	cmp	r3, #48	@ 0x30
 800850a:	d064      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x15e>
 800850c:	2b30      	cmp	r3, #48	@ 0x30
 800850e:	d86b      	bhi.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 8008510:	2b20      	cmp	r3, #32
 8008512:	d060      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x15e>
 8008514:	2b20      	cmp	r3, #32
 8008516:	d867      	bhi.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
 8008518:	2b00      	cmp	r3, #0
 800851a:	d05c      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x15e>
 800851c:	2b10      	cmp	r3, #16
 800851e:	d05a      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x15e>
 8008520:	e062      	b.n	80085e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008532:	f000 fc61 	bl	8008df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008544:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	609a      	str	r2, [r3, #8]
      break;
 800854e:	e04f      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008560:	f000 fc4a 	bl	8008df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008572:	609a      	str	r2, [r3, #8]
      break;
 8008574:	e03c      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008582:	461a      	mov	r2, r3
 8008584:	f000 fbbe 	bl	8008d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2150      	movs	r1, #80	@ 0x50
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fc17 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 8008594:	e02c      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085a2:	461a      	mov	r2, r3
 80085a4:	f000 fbdd 	bl	8008d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2160      	movs	r1, #96	@ 0x60
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fc07 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 80085b4:	e01c      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c2:	461a      	mov	r2, r3
 80085c4:	f000 fb9e 	bl	8008d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2140      	movs	r1, #64	@ 0x40
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fbf7 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 80085d4:	e00c      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f000 fbee 	bl	8008dc2 <TIM_ITRx_SetConfig>
      break;
 80085e6:	e003      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
      break;
 80085ec:	e000      	b.n	80085f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80085ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a46      	ldr	r2, [pc, #280]	@ (8008738 <TIM_Base_SetConfig+0x12c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d013      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800862a:	d00f      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a43      	ldr	r2, [pc, #268]	@ (800873c <TIM_Base_SetConfig+0x130>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00b      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a42      	ldr	r2, [pc, #264]	@ (8008740 <TIM_Base_SetConfig+0x134>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d007      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a41      	ldr	r2, [pc, #260]	@ (8008744 <TIM_Base_SetConfig+0x138>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d003      	beq.n	800864c <TIM_Base_SetConfig+0x40>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a40      	ldr	r2, [pc, #256]	@ (8008748 <TIM_Base_SetConfig+0x13c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d108      	bne.n	800865e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a35      	ldr	r2, [pc, #212]	@ (8008738 <TIM_Base_SetConfig+0x12c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d01f      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800866c:	d01b      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a32      	ldr	r2, [pc, #200]	@ (800873c <TIM_Base_SetConfig+0x130>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d017      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a31      	ldr	r2, [pc, #196]	@ (8008740 <TIM_Base_SetConfig+0x134>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d013      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a30      	ldr	r2, [pc, #192]	@ (8008744 <TIM_Base_SetConfig+0x138>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d00f      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a2f      	ldr	r2, [pc, #188]	@ (8008748 <TIM_Base_SetConfig+0x13c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00b      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a2e      	ldr	r2, [pc, #184]	@ (800874c <TIM_Base_SetConfig+0x140>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d007      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a2d      	ldr	r2, [pc, #180]	@ (8008750 <TIM_Base_SetConfig+0x144>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d003      	beq.n	80086a6 <TIM_Base_SetConfig+0x9a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008754 <TIM_Base_SetConfig+0x148>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d108      	bne.n	80086b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a16      	ldr	r2, [pc, #88]	@ (8008738 <TIM_Base_SetConfig+0x12c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00f      	beq.n	8008704 <TIM_Base_SetConfig+0xf8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a18      	ldr	r2, [pc, #96]	@ (8008748 <TIM_Base_SetConfig+0x13c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_Base_SetConfig+0xf8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a17      	ldr	r2, [pc, #92]	@ (800874c <TIM_Base_SetConfig+0x140>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_Base_SetConfig+0xf8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a16      	ldr	r2, [pc, #88]	@ (8008750 <TIM_Base_SetConfig+0x144>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_Base_SetConfig+0xf8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <TIM_Base_SetConfig+0x148>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d103      	bne.n	800870c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b01      	cmp	r3, #1
 800871c:	d105      	bne.n	800872a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f023 0201 	bic.w	r2, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	611a      	str	r2, [r3, #16]
  }
}
 800872a:	bf00      	nop
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	40012c00 	.word	0x40012c00
 800873c:	40000400 	.word	0x40000400
 8008740:	40000800 	.word	0x40000800
 8008744:	40000c00 	.word	0x40000c00
 8008748:	40013400 	.word	0x40013400
 800874c:	40014000 	.word	0x40014000
 8008750:	40014400 	.word	0x40014400
 8008754:	40014800 	.word	0x40014800

08008758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	f023 0201 	bic.w	r2, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f023 0302 	bic.w	r3, r3, #2
 80087a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008864 <TIM_OC1_SetConfig+0x10c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00f      	beq.n	80087d8 <TIM_OC1_SetConfig+0x80>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a2b      	ldr	r2, [pc, #172]	@ (8008868 <TIM_OC1_SetConfig+0x110>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00b      	beq.n	80087d8 <TIM_OC1_SetConfig+0x80>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a2a      	ldr	r2, [pc, #168]	@ (800886c <TIM_OC1_SetConfig+0x114>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_OC1_SetConfig+0x80>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a29      	ldr	r2, [pc, #164]	@ (8008870 <TIM_OC1_SetConfig+0x118>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_OC1_SetConfig+0x80>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a28      	ldr	r2, [pc, #160]	@ (8008874 <TIM_OC1_SetConfig+0x11c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d10c      	bne.n	80087f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f023 0308 	bic.w	r3, r3, #8
 80087de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008864 <TIM_OC1_SetConfig+0x10c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00f      	beq.n	800881a <TIM_OC1_SetConfig+0xc2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008868 <TIM_OC1_SetConfig+0x110>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00b      	beq.n	800881a <TIM_OC1_SetConfig+0xc2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a19      	ldr	r2, [pc, #100]	@ (800886c <TIM_OC1_SetConfig+0x114>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d007      	beq.n	800881a <TIM_OC1_SetConfig+0xc2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a18      	ldr	r2, [pc, #96]	@ (8008870 <TIM_OC1_SetConfig+0x118>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d003      	beq.n	800881a <TIM_OC1_SetConfig+0xc2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a17      	ldr	r2, [pc, #92]	@ (8008874 <TIM_OC1_SetConfig+0x11c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d111      	bne.n	800883e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	621a      	str	r2, [r3, #32]
}
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	40012c00 	.word	0x40012c00
 8008868:	40013400 	.word	0x40013400
 800886c:	40014000 	.word	0x40014000
 8008870:	40014400 	.word	0x40014400
 8008874:	40014800 	.word	0x40014800

08008878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	f023 0210 	bic.w	r2, r3, #16
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4313      	orrs	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f023 0320 	bic.w	r3, r3, #32
 80088c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a28      	ldr	r2, [pc, #160]	@ (8008978 <TIM_OC2_SetConfig+0x100>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_OC2_SetConfig+0x6c>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a27      	ldr	r2, [pc, #156]	@ (800897c <TIM_OC2_SetConfig+0x104>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d10d      	bne.n	8008900 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a1d      	ldr	r2, [pc, #116]	@ (8008978 <TIM_OC2_SetConfig+0x100>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00f      	beq.n	8008928 <TIM_OC2_SetConfig+0xb0>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a1c      	ldr	r2, [pc, #112]	@ (800897c <TIM_OC2_SetConfig+0x104>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00b      	beq.n	8008928 <TIM_OC2_SetConfig+0xb0>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a1b      	ldr	r2, [pc, #108]	@ (8008980 <TIM_OC2_SetConfig+0x108>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d007      	beq.n	8008928 <TIM_OC2_SetConfig+0xb0>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a1a      	ldr	r2, [pc, #104]	@ (8008984 <TIM_OC2_SetConfig+0x10c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_OC2_SetConfig+0xb0>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a19      	ldr	r2, [pc, #100]	@ (8008988 <TIM_OC2_SetConfig+0x110>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d113      	bne.n	8008950 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800892e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	621a      	str	r2, [r3, #32]
}
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	40012c00 	.word	0x40012c00
 800897c:	40013400 	.word	0x40013400
 8008980:	40014000 	.word	0x40014000
 8008984:	40014400 	.word	0x40014400
 8008988:	40014800 	.word	0x40014800

0800898c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	021b      	lsls	r3, r3, #8
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a27      	ldr	r2, [pc, #156]	@ (8008a88 <TIM_OC3_SetConfig+0xfc>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d003      	beq.n	80089f6 <TIM_OC3_SetConfig+0x6a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a26      	ldr	r2, [pc, #152]	@ (8008a8c <TIM_OC3_SetConfig+0x100>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d10d      	bne.n	8008a12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a1c      	ldr	r2, [pc, #112]	@ (8008a88 <TIM_OC3_SetConfig+0xfc>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00f      	beq.n	8008a3a <TIM_OC3_SetConfig+0xae>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8008a8c <TIM_OC3_SetConfig+0x100>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00b      	beq.n	8008a3a <TIM_OC3_SetConfig+0xae>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a1a      	ldr	r2, [pc, #104]	@ (8008a90 <TIM_OC3_SetConfig+0x104>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d007      	beq.n	8008a3a <TIM_OC3_SetConfig+0xae>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a19      	ldr	r2, [pc, #100]	@ (8008a94 <TIM_OC3_SetConfig+0x108>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d003      	beq.n	8008a3a <TIM_OC3_SetConfig+0xae>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a18      	ldr	r2, [pc, #96]	@ (8008a98 <TIM_OC3_SetConfig+0x10c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d113      	bne.n	8008a62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	621a      	str	r2, [r3, #32]
}
 8008a7c:	bf00      	nop
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	40012c00 	.word	0x40012c00
 8008a8c:	40013400 	.word	0x40013400
 8008a90:	40014000 	.word	0x40014000
 8008a94:	40014400 	.word	0x40014400
 8008a98:	40014800 	.word	0x40014800

08008a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	031b      	lsls	r3, r3, #12
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a18      	ldr	r2, [pc, #96]	@ (8008b5c <TIM_OC4_SetConfig+0xc0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00f      	beq.n	8008b20 <TIM_OC4_SetConfig+0x84>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a17      	ldr	r2, [pc, #92]	@ (8008b60 <TIM_OC4_SetConfig+0xc4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00b      	beq.n	8008b20 <TIM_OC4_SetConfig+0x84>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a16      	ldr	r2, [pc, #88]	@ (8008b64 <TIM_OC4_SetConfig+0xc8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d007      	beq.n	8008b20 <TIM_OC4_SetConfig+0x84>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a15      	ldr	r2, [pc, #84]	@ (8008b68 <TIM_OC4_SetConfig+0xcc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <TIM_OC4_SetConfig+0x84>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a14      	ldr	r2, [pc, #80]	@ (8008b6c <TIM_OC4_SetConfig+0xd0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d109      	bne.n	8008b34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	019b      	lsls	r3, r3, #6
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	621a      	str	r2, [r3, #32]
}
 8008b4e:	bf00      	nop
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40013400 	.word	0x40013400
 8008b64:	40014000 	.word	0x40014000
 8008b68:	40014400 	.word	0x40014400
 8008b6c:	40014800 	.word	0x40014800

08008b70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008bb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	041b      	lsls	r3, r3, #16
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a17      	ldr	r2, [pc, #92]	@ (8008c24 <TIM_OC5_SetConfig+0xb4>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00f      	beq.n	8008bea <TIM_OC5_SetConfig+0x7a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a16      	ldr	r2, [pc, #88]	@ (8008c28 <TIM_OC5_SetConfig+0xb8>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00b      	beq.n	8008bea <TIM_OC5_SetConfig+0x7a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a15      	ldr	r2, [pc, #84]	@ (8008c2c <TIM_OC5_SetConfig+0xbc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d007      	beq.n	8008bea <TIM_OC5_SetConfig+0x7a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a14      	ldr	r2, [pc, #80]	@ (8008c30 <TIM_OC5_SetConfig+0xc0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d003      	beq.n	8008bea <TIM_OC5_SetConfig+0x7a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a13      	ldr	r2, [pc, #76]	@ (8008c34 <TIM_OC5_SetConfig+0xc4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d109      	bne.n	8008bfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	621a      	str	r2, [r3, #32]
}
 8008c18:	bf00      	nop
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	40012c00 	.word	0x40012c00
 8008c28:	40013400 	.word	0x40013400
 8008c2c:	40014000 	.word	0x40014000
 8008c30:	40014400 	.word	0x40014400
 8008c34:	40014800 	.word	0x40014800

08008c38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	051b      	lsls	r3, r3, #20
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a18      	ldr	r2, [pc, #96]	@ (8008cf0 <TIM_OC6_SetConfig+0xb8>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00f      	beq.n	8008cb4 <TIM_OC6_SetConfig+0x7c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a17      	ldr	r2, [pc, #92]	@ (8008cf4 <TIM_OC6_SetConfig+0xbc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00b      	beq.n	8008cb4 <TIM_OC6_SetConfig+0x7c>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a16      	ldr	r2, [pc, #88]	@ (8008cf8 <TIM_OC6_SetConfig+0xc0>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d007      	beq.n	8008cb4 <TIM_OC6_SetConfig+0x7c>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a15      	ldr	r2, [pc, #84]	@ (8008cfc <TIM_OC6_SetConfig+0xc4>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_OC6_SetConfig+0x7c>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a14      	ldr	r2, [pc, #80]	@ (8008d00 <TIM_OC6_SetConfig+0xc8>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d109      	bne.n	8008cc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	029b      	lsls	r3, r3, #10
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	621a      	str	r2, [r3, #32]
}
 8008ce2:	bf00      	nop
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	40012c00 	.word	0x40012c00
 8008cf4:	40013400 	.word	0x40013400
 8008cf8:	40014000 	.word	0x40014000
 8008cfc:	40014400 	.word	0x40014400
 8008d00:	40014800 	.word	0x40014800

08008d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	f023 0201 	bic.w	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f023 030a 	bic.w	r3, r3, #10
 8008d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b087      	sub	sp, #28
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	f023 0210 	bic.w	r2, r3, #16
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	031b      	lsls	r3, r3, #12
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	621a      	str	r2, [r3, #32]
}
 8008db6:	bf00      	nop
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f043 0307 	orr.w	r3, r3, #7
 8008de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	609a      	str	r2, [r3, #8]
}
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	021a      	lsls	r2, r3, #8
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	609a      	str	r2, [r3, #8]
}
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f003 031f 	and.w	r3, r3, #31
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1a      	ldr	r2, [r3, #32]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	43db      	mvns	r3, r3
 8008e5a:	401a      	ands	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a1a      	ldr	r2, [r3, #32]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 031f 	and.w	r3, r3, #31
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e70:	431a      	orrs	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
	...

08008e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e068      	b.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d004      	beq.n	8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a2d      	ldr	r2, [pc, #180]	@ (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d108      	bne.n	8008ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008ed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a1e      	ldr	r2, [pc, #120]	@ (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d01d      	beq.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0e:	d018      	beq.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a1b      	ldr	r2, [pc, #108]	@ (8008f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d013      	beq.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8008f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00e      	beq.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a18      	ldr	r2, [pc, #96]	@ (8008f8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d009      	beq.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a13      	ldr	r2, [pc, #76]	@ (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d004      	beq.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a14      	ldr	r2, [pc, #80]	@ (8008f90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d10c      	bne.n	8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	40012c00 	.word	0x40012c00
 8008f80:	40013400 	.word	0x40013400
 8008f84:	40000400 	.word	0x40000400
 8008f88:	40000800 	.word	0x40000800
 8008f8c:	40000c00 	.word	0x40000c00
 8008f90:	40014000 	.word	0x40014000

08008f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e040      	b.n	8009028 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fa fda6 	bl	8003b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2224      	movs	r2, #36	@ 0x24
 8008fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0201 	bic.w	r2, r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fedc 	bl	8009d98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc21 	bl	8009828 <UART_SetConfig>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d101      	bne.n	8008ff0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e01b      	b.n	8009028 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ffe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800900e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 ff5b 	bl	8009edc <UART_CheckIdleState>
 8009026:	4603      	mov	r3, r0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	@ 0x28
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	4613      	mov	r3, r2
 800903e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009044:	2b20      	cmp	r3, #32
 8009046:	d177      	bne.n	8009138 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <HAL_UART_Transmit+0x24>
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e070      	b.n	800913a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2221      	movs	r2, #33	@ 0x21
 8009064:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009066:	f7fa ff5f 	bl	8003f28 <HAL_GetTick>
 800906a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	88fa      	ldrh	r2, [r7, #6]
 8009070:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	88fa      	ldrh	r2, [r7, #6]
 8009078:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009084:	d108      	bne.n	8009098 <HAL_UART_Transmit+0x68>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	61bb      	str	r3, [r7, #24]
 8009096:	e003      	b.n	80090a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800909c:	2300      	movs	r3, #0
 800909e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090a0:	e02f      	b.n	8009102 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2200      	movs	r2, #0
 80090aa:	2180      	movs	r1, #128	@ 0x80
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 ffbd 	bl	800a02c <UART_WaitOnFlagUntilTimeout>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2220      	movs	r2, #32
 80090bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e03b      	b.n	800913a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10b      	bne.n	80090e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	881a      	ldrh	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090d4:	b292      	uxth	r2, r2
 80090d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	3302      	adds	r3, #2
 80090dc:	61bb      	str	r3, [r7, #24]
 80090de:	e007      	b.n	80090f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	3301      	adds	r3, #1
 80090ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1c9      	bne.n	80090a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	2140      	movs	r1, #64	@ 0x40
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 ff87 	bl	800a02c <UART_WaitOnFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2220      	movs	r2, #32
 8009128:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e005      	b.n	800913a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2220      	movs	r2, #32
 8009132:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	e000      	b.n	800913a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009138:	2302      	movs	r3, #2
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	3720      	adds	r7, #32
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	@ 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009158:	2b20      	cmp	r3, #32
 800915a:	d137      	bne.n	80091cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_UART_Receive_IT+0x24>
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e030      	b.n	80091ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a18      	ldr	r2, [pc, #96]	@ (80091d8 <HAL_UART_Receive_IT+0x94>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d01f      	beq.n	80091bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d018      	beq.n	80091bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	613b      	str	r3, [r7, #16]
   return(result);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800919e:	627b      	str	r3, [r7, #36]	@ 0x24
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	623b      	str	r3, [r7, #32]
 80091aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	69f9      	ldr	r1, [r7, #28]
 80091ae:	6a3a      	ldr	r2, [r7, #32]
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e6      	bne.n	800918a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091bc:	88fb      	ldrh	r3, [r7, #6]
 80091be:	461a      	mov	r2, r3
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 ffa0 	bl	800a108 <UART_Start_Receive_IT>
 80091c8:	4603      	mov	r3, r0
 80091ca:	e000      	b.n	80091ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091cc:	2302      	movs	r3, #2
  }
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3728      	adds	r7, #40	@ 0x28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40008000 	.word	0x40008000

080091dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b0ba      	sub	sp, #232	@ 0xe8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009202:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009206:	f640 030f 	movw	r3, #2063	@ 0x80f
 800920a:	4013      	ands	r3, r2
 800920c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009214:	2b00      	cmp	r3, #0
 8009216:	d115      	bne.n	8009244 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921c:	f003 0320 	and.w	r3, r3, #32
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00f      	beq.n	8009244 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	d009      	beq.n	8009244 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 82ca 	beq.w	80097ce <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	4798      	blx	r3
      }
      return;
 8009242:	e2c4      	b.n	80097ce <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 8117 	beq.w	800947c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800924e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800925a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800925e:	4b85      	ldr	r3, [pc, #532]	@ (8009474 <HAL_UART_IRQHandler+0x298>)
 8009260:	4013      	ands	r3, r2
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 810a 	beq.w	800947c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b00      	cmp	r3, #0
 8009272:	d011      	beq.n	8009298 <HAL_UART_IRQHandler+0xbc>
 8009274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2201      	movs	r2, #1
 8009286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800928e:	f043 0201 	orr.w	r2, r3, #1
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d011      	beq.n	80092c8 <HAL_UART_IRQHandler+0xec>
 80092a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2202      	movs	r2, #2
 80092b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092be:	f043 0204 	orr.w	r2, r3, #4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d011      	beq.n	80092f8 <HAL_UART_IRQHandler+0x11c>
 80092d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2204      	movs	r2, #4
 80092e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092ee:	f043 0202 	orr.w	r2, r3, #2
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b00      	cmp	r3, #0
 8009302:	d017      	beq.n	8009334 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	d105      	bne.n	800931c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009314:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2208      	movs	r2, #8
 8009322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800932a:	f043 0208 	orr.w	r2, r3, #8
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800933c:	2b00      	cmp	r3, #0
 800933e:	d012      	beq.n	8009366 <HAL_UART_IRQHandler+0x18a>
 8009340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009344:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00c      	beq.n	8009366 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800935c:	f043 0220 	orr.w	r2, r3, #32
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 8230 	beq.w	80097d2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009376:	f003 0320 	and.w	r3, r3, #32
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00d      	beq.n	800939a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800937e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d007      	beq.n	800939a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ae:	2b40      	cmp	r3, #64	@ 0x40
 80093b0:	d005      	beq.n	80093be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d04f      	beq.n	800945e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 ff68 	bl	800a294 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ce:	2b40      	cmp	r3, #64	@ 0x40
 80093d0:	d141      	bne.n	8009456 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3308      	adds	r3, #8
 80093fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80093fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800940a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1d9      	bne.n	80093d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009422:	2b00      	cmp	r3, #0
 8009424:	d013      	beq.n	800944e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800942a:	4a13      	ldr	r2, [pc, #76]	@ (8009478 <HAL_UART_IRQHandler+0x29c>)
 800942c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009432:	4618      	mov	r0, r3
 8009434:	f7fc fa07 	bl	8005846 <HAL_DMA_Abort_IT>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d017      	beq.n	800946e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009448:	4610      	mov	r0, r2
 800944a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944c:	e00f      	b.n	800946e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f9d4 	bl	80097fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009454:	e00b      	b.n	800946e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f9d0 	bl	80097fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945c:	e007      	b.n	800946e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f9cc 	bl	80097fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800946c:	e1b1      	b.n	80097d2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800946e:	bf00      	nop
    return;
 8009470:	e1af      	b.n	80097d2 <HAL_UART_IRQHandler+0x5f6>
 8009472:	bf00      	nop
 8009474:	04000120 	.word	0x04000120
 8009478:	0800a35d 	.word	0x0800a35d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009480:	2b01      	cmp	r3, #1
 8009482:	f040 816a 	bne.w	800975a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948a:	f003 0310 	and.w	r3, r3, #16
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 8163 	beq.w	800975a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009498:	f003 0310 	and.w	r3, r3, #16
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 815c 	beq.w	800975a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2210      	movs	r2, #16
 80094a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b4:	2b40      	cmp	r3, #64	@ 0x40
 80094b6:	f040 80d4 	bne.w	8009662 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 80ad 	beq.w	800962a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80094d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094da:	429a      	cmp	r2, r3
 80094dc:	f080 80a5 	bcs.w	800962a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0320 	and.w	r3, r3, #32
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f040 8086 	bne.w	8009608 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009510:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800952a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009532:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800953e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1da      	bne.n	80094fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009558:	f023 0301 	bic.w	r3, r3, #1
 800955c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800956a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800956e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009572:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800957c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e1      	bne.n	8009546 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e3      	bne.n	8009582 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d0:	e853 3f00 	ldrex	r3, [r3]
 80095d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095d8:	f023 0310 	bic.w	r3, r3, #16
 80095dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e4      	bne.n	80095c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009602:	4618      	mov	r0, r3
 8009604:	f7fc f8e1 	bl	80057ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800961a:	b29b      	uxth	r3, r3
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	b29b      	uxth	r3, r3
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f8f4 	bl	8009810 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009628:	e0d5      	b.n	80097d6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009634:	429a      	cmp	r2, r3
 8009636:	f040 80ce 	bne.w	80097d6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b20      	cmp	r3, #32
 8009648:	f040 80c5 	bne.w	80097d6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f8d8 	bl	8009810 <HAL_UARTEx_RxEventCallback>
      return;
 8009660:	e0b9      	b.n	80097d6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800966e:	b29b      	uxth	r3, r3
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800967c:	b29b      	uxth	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 80ab 	beq.w	80097da <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80a6 	beq.w	80097da <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800969c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800969e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80096b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096b8:	e841 2300 	strex	r3, r2, [r1]
 80096bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e4      	bne.n	800968e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3308      	adds	r3, #8
 80096ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	623b      	str	r3, [r7, #32]
   return(result);
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	f023 0301 	bic.w	r3, r3, #1
 80096da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3308      	adds	r3, #8
 80096e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80096e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80096ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096f0:	e841 2300 	strex	r3, r2, [r1]
 80096f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e3      	bne.n	80096c4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2220      	movs	r2, #32
 8009700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	60fb      	str	r3, [r7, #12]
   return(result);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f023 0310 	bic.w	r3, r3, #16
 8009724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	69b9      	ldr	r1, [r7, #24]
 8009738:	69fa      	ldr	r2, [r7, #28]
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	617b      	str	r3, [r7, #20]
   return(result);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e4      	bne.n	8009710 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800974c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f85c 	bl	8009810 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009758:	e03f      	b.n	80097da <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800975a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00e      	beq.n	8009784 <HAL_UART_IRQHandler+0x5a8>
 8009766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800976a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d008      	beq.n	8009784 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800977a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 ffe9 	bl	800a754 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009782:	e02d      	b.n	80097e0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00e      	beq.n	80097ae <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d01c      	beq.n	80097de <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
    }
    return;
 80097ac:	e017      	b.n	80097de <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d012      	beq.n	80097e0 <HAL_UART_IRQHandler+0x604>
 80097ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00c      	beq.n	80097e0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fdde 	bl	800a388 <UART_EndTransmit_IT>
    return;
 80097cc:	e008      	b.n	80097e0 <HAL_UART_IRQHandler+0x604>
      return;
 80097ce:	bf00      	nop
 80097d0:	e006      	b.n	80097e0 <HAL_UART_IRQHandler+0x604>
    return;
 80097d2:	bf00      	nop
 80097d4:	e004      	b.n	80097e0 <HAL_UART_IRQHandler+0x604>
      return;
 80097d6:	bf00      	nop
 80097d8:	e002      	b.n	80097e0 <HAL_UART_IRQHandler+0x604>
      return;
 80097da:	bf00      	nop
 80097dc:	e000      	b.n	80097e0 <HAL_UART_IRQHandler+0x604>
    return;
 80097de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80097e0:	37e8      	adds	r7, #232	@ 0xe8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop

080097e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800982c:	b08a      	sub	sp, #40	@ 0x28
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	431a      	orrs	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	431a      	orrs	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	4313      	orrs	r3, r2
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	4ba4      	ldr	r3, [pc, #656]	@ (8009ae8 <UART_SetConfig+0x2c0>)
 8009858:	4013      	ands	r3, r2
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	6812      	ldr	r2, [r2, #0]
 800985e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009860:	430b      	orrs	r3, r1
 8009862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68da      	ldr	r2, [r3, #12]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a99      	ldr	r2, [pc, #612]	@ (8009aec <UART_SetConfig+0x2c4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d004      	beq.n	8009894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009890:	4313      	orrs	r3, r2
 8009892:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098a4:	430a      	orrs	r2, r1
 80098a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a90      	ldr	r2, [pc, #576]	@ (8009af0 <UART_SetConfig+0x2c8>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d126      	bne.n	8009900 <UART_SetConfig+0xd8>
 80098b2:	4b90      	ldr	r3, [pc, #576]	@ (8009af4 <UART_SetConfig+0x2cc>)
 80098b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b8:	f003 0303 	and.w	r3, r3, #3
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d81b      	bhi.n	80098f8 <UART_SetConfig+0xd0>
 80098c0:	a201      	add	r2, pc, #4	@ (adr r2, 80098c8 <UART_SetConfig+0xa0>)
 80098c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c6:	bf00      	nop
 80098c8:	080098d9 	.word	0x080098d9
 80098cc:	080098e9 	.word	0x080098e9
 80098d0:	080098e1 	.word	0x080098e1
 80098d4:	080098f1 	.word	0x080098f1
 80098d8:	2301      	movs	r3, #1
 80098da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098de:	e116      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80098e0:	2302      	movs	r3, #2
 80098e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098e6:	e112      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80098e8:	2304      	movs	r3, #4
 80098ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098ee:	e10e      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80098f0:	2308      	movs	r3, #8
 80098f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098f6:	e10a      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80098fe:	e106      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a7c      	ldr	r2, [pc, #496]	@ (8009af8 <UART_SetConfig+0x2d0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d138      	bne.n	800997c <UART_SetConfig+0x154>
 800990a:	4b7a      	ldr	r3, [pc, #488]	@ (8009af4 <UART_SetConfig+0x2cc>)
 800990c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009910:	f003 030c 	and.w	r3, r3, #12
 8009914:	2b0c      	cmp	r3, #12
 8009916:	d82d      	bhi.n	8009974 <UART_SetConfig+0x14c>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <UART_SetConfig+0xf8>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009955 	.word	0x08009955
 8009924:	08009975 	.word	0x08009975
 8009928:	08009975 	.word	0x08009975
 800992c:	08009975 	.word	0x08009975
 8009930:	08009965 	.word	0x08009965
 8009934:	08009975 	.word	0x08009975
 8009938:	08009975 	.word	0x08009975
 800993c:	08009975 	.word	0x08009975
 8009940:	0800995d 	.word	0x0800995d
 8009944:	08009975 	.word	0x08009975
 8009948:	08009975 	.word	0x08009975
 800994c:	08009975 	.word	0x08009975
 8009950:	0800996d 	.word	0x0800996d
 8009954:	2300      	movs	r3, #0
 8009956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800995a:	e0d8      	b.n	8009b0e <UART_SetConfig+0x2e6>
 800995c:	2302      	movs	r3, #2
 800995e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009962:	e0d4      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800996a:	e0d0      	b.n	8009b0e <UART_SetConfig+0x2e6>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009972:	e0cc      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800997a:	e0c8      	b.n	8009b0e <UART_SetConfig+0x2e6>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a5e      	ldr	r2, [pc, #376]	@ (8009afc <UART_SetConfig+0x2d4>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d125      	bne.n	80099d2 <UART_SetConfig+0x1aa>
 8009986:	4b5b      	ldr	r3, [pc, #364]	@ (8009af4 <UART_SetConfig+0x2cc>)
 8009988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800998c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009990:	2b30      	cmp	r3, #48	@ 0x30
 8009992:	d016      	beq.n	80099c2 <UART_SetConfig+0x19a>
 8009994:	2b30      	cmp	r3, #48	@ 0x30
 8009996:	d818      	bhi.n	80099ca <UART_SetConfig+0x1a2>
 8009998:	2b20      	cmp	r3, #32
 800999a:	d00a      	beq.n	80099b2 <UART_SetConfig+0x18a>
 800999c:	2b20      	cmp	r3, #32
 800999e:	d814      	bhi.n	80099ca <UART_SetConfig+0x1a2>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <UART_SetConfig+0x182>
 80099a4:	2b10      	cmp	r3, #16
 80099a6:	d008      	beq.n	80099ba <UART_SetConfig+0x192>
 80099a8:	e00f      	b.n	80099ca <UART_SetConfig+0x1a2>
 80099aa:	2300      	movs	r3, #0
 80099ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099b0:	e0ad      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80099b2:	2302      	movs	r3, #2
 80099b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099b8:	e0a9      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80099ba:	2304      	movs	r3, #4
 80099bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099c0:	e0a5      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80099c2:	2308      	movs	r3, #8
 80099c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099c8:	e0a1      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80099ca:	2310      	movs	r3, #16
 80099cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099d0:	e09d      	b.n	8009b0e <UART_SetConfig+0x2e6>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a4a      	ldr	r2, [pc, #296]	@ (8009b00 <UART_SetConfig+0x2d8>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d125      	bne.n	8009a28 <UART_SetConfig+0x200>
 80099dc:	4b45      	ldr	r3, [pc, #276]	@ (8009af4 <UART_SetConfig+0x2cc>)
 80099de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80099e8:	d016      	beq.n	8009a18 <UART_SetConfig+0x1f0>
 80099ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80099ec:	d818      	bhi.n	8009a20 <UART_SetConfig+0x1f8>
 80099ee:	2b80      	cmp	r3, #128	@ 0x80
 80099f0:	d00a      	beq.n	8009a08 <UART_SetConfig+0x1e0>
 80099f2:	2b80      	cmp	r3, #128	@ 0x80
 80099f4:	d814      	bhi.n	8009a20 <UART_SetConfig+0x1f8>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <UART_SetConfig+0x1d8>
 80099fa:	2b40      	cmp	r3, #64	@ 0x40
 80099fc:	d008      	beq.n	8009a10 <UART_SetConfig+0x1e8>
 80099fe:	e00f      	b.n	8009a20 <UART_SetConfig+0x1f8>
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a06:	e082      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a0e:	e07e      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a10:	2304      	movs	r3, #4
 8009a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a16:	e07a      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a18:	2308      	movs	r3, #8
 8009a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a1e:	e076      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a20:	2310      	movs	r3, #16
 8009a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a26:	e072      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a35      	ldr	r2, [pc, #212]	@ (8009b04 <UART_SetConfig+0x2dc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d12a      	bne.n	8009a88 <UART_SetConfig+0x260>
 8009a32:	4b30      	ldr	r3, [pc, #192]	@ (8009af4 <UART_SetConfig+0x2cc>)
 8009a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a40:	d01a      	beq.n	8009a78 <UART_SetConfig+0x250>
 8009a42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a46:	d81b      	bhi.n	8009a80 <UART_SetConfig+0x258>
 8009a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a4c:	d00c      	beq.n	8009a68 <UART_SetConfig+0x240>
 8009a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a52:	d815      	bhi.n	8009a80 <UART_SetConfig+0x258>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <UART_SetConfig+0x238>
 8009a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a5c:	d008      	beq.n	8009a70 <UART_SetConfig+0x248>
 8009a5e:	e00f      	b.n	8009a80 <UART_SetConfig+0x258>
 8009a60:	2300      	movs	r3, #0
 8009a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a66:	e052      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a6e:	e04e      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a76:	e04a      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a7e:	e046      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a86:	e042      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a17      	ldr	r2, [pc, #92]	@ (8009aec <UART_SetConfig+0x2c4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d13a      	bne.n	8009b08 <UART_SetConfig+0x2e0>
 8009a92:	4b18      	ldr	r3, [pc, #96]	@ (8009af4 <UART_SetConfig+0x2cc>)
 8009a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aa0:	d01a      	beq.n	8009ad8 <UART_SetConfig+0x2b0>
 8009aa2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aa6:	d81b      	bhi.n	8009ae0 <UART_SetConfig+0x2b8>
 8009aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aac:	d00c      	beq.n	8009ac8 <UART_SetConfig+0x2a0>
 8009aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ab2:	d815      	bhi.n	8009ae0 <UART_SetConfig+0x2b8>
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <UART_SetConfig+0x298>
 8009ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009abc:	d008      	beq.n	8009ad0 <UART_SetConfig+0x2a8>
 8009abe:	e00f      	b.n	8009ae0 <UART_SetConfig+0x2b8>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ac6:	e022      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ace:	e01e      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ad6:	e01a      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009ad8:	2308      	movs	r3, #8
 8009ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ade:	e016      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ae6:	e012      	b.n	8009b0e <UART_SetConfig+0x2e6>
 8009ae8:	efff69f3 	.word	0xefff69f3
 8009aec:	40008000 	.word	0x40008000
 8009af0:	40013800 	.word	0x40013800
 8009af4:	40021000 	.word	0x40021000
 8009af8:	40004400 	.word	0x40004400
 8009afc:	40004800 	.word	0x40004800
 8009b00:	40004c00 	.word	0x40004c00
 8009b04:	40005000 	.word	0x40005000
 8009b08:	2310      	movs	r3, #16
 8009b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a9f      	ldr	r2, [pc, #636]	@ (8009d90 <UART_SetConfig+0x568>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d17a      	bne.n	8009c0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d824      	bhi.n	8009b6a <UART_SetConfig+0x342>
 8009b20:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <UART_SetConfig+0x300>)
 8009b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b26:	bf00      	nop
 8009b28:	08009b4d 	.word	0x08009b4d
 8009b2c:	08009b6b 	.word	0x08009b6b
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b6b 	.word	0x08009b6b
 8009b38:	08009b5b 	.word	0x08009b5b
 8009b3c:	08009b6b 	.word	0x08009b6b
 8009b40:	08009b6b 	.word	0x08009b6b
 8009b44:	08009b6b 	.word	0x08009b6b
 8009b48:	08009b63 	.word	0x08009b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b4c:	f7fd fc7a 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 8009b50:	61f8      	str	r0, [r7, #28]
        break;
 8009b52:	e010      	b.n	8009b76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b54:	4b8f      	ldr	r3, [pc, #572]	@ (8009d94 <UART_SetConfig+0x56c>)
 8009b56:	61fb      	str	r3, [r7, #28]
        break;
 8009b58:	e00d      	b.n	8009b76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b5a:	f7fd fbdb 	bl	8007314 <HAL_RCC_GetSysClockFreq>
 8009b5e:	61f8      	str	r0, [r7, #28]
        break;
 8009b60:	e009      	b.n	8009b76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b66:	61fb      	str	r3, [r7, #28]
        break;
 8009b68:	e005      	b.n	8009b76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009b74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 80fb 	beq.w	8009d74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	4613      	mov	r3, r2
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	4413      	add	r3, r2
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d305      	bcc.n	8009b9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d903      	bls.n	8009ba2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009ba0:	e0e8      	b.n	8009d74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	461c      	mov	r4, r3
 8009ba8:	4615      	mov	r5, r2
 8009baa:	f04f 0200 	mov.w	r2, #0
 8009bae:	f04f 0300 	mov.w	r3, #0
 8009bb2:	022b      	lsls	r3, r5, #8
 8009bb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009bb8:	0222      	lsls	r2, r4, #8
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	6849      	ldr	r1, [r1, #4]
 8009bbe:	0849      	lsrs	r1, r1, #1
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	4688      	mov	r8, r1
 8009bc4:	4681      	mov	r9, r0
 8009bc6:	eb12 0a08 	adds.w	sl, r2, r8
 8009bca:	eb43 0b09 	adc.w	fp, r3, r9
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	603b      	str	r3, [r7, #0]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bdc:	4650      	mov	r0, sl
 8009bde:	4659      	mov	r1, fp
 8009be0:	f7f7 f862 	bl	8000ca8 <__aeabi_uldivmod>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4613      	mov	r3, r2
 8009bea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bf2:	d308      	bcc.n	8009c06 <UART_SetConfig+0x3de>
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bfa:	d204      	bcs.n	8009c06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	60da      	str	r2, [r3, #12]
 8009c04:	e0b6      	b.n	8009d74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c0c:	e0b2      	b.n	8009d74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c16:	d15e      	bne.n	8009cd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009c18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d828      	bhi.n	8009c72 <UART_SetConfig+0x44a>
 8009c20:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <UART_SetConfig+0x400>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c55 	.word	0x08009c55
 8009c30:	08009c5d 	.word	0x08009c5d
 8009c34:	08009c73 	.word	0x08009c73
 8009c38:	08009c63 	.word	0x08009c63
 8009c3c:	08009c73 	.word	0x08009c73
 8009c40:	08009c73 	.word	0x08009c73
 8009c44:	08009c73 	.word	0x08009c73
 8009c48:	08009c6b 	.word	0x08009c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4c:	f7fd fbfa 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 8009c50:	61f8      	str	r0, [r7, #28]
        break;
 8009c52:	e014      	b.n	8009c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c54:	f7fd fc0c 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
 8009c58:	61f8      	str	r0, [r7, #28]
        break;
 8009c5a:	e010      	b.n	8009c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8009d94 <UART_SetConfig+0x56c>)
 8009c5e:	61fb      	str	r3, [r7, #28]
        break;
 8009c60:	e00d      	b.n	8009c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c62:	f7fd fb57 	bl	8007314 <HAL_RCC_GetSysClockFreq>
 8009c66:	61f8      	str	r0, [r7, #28]
        break;
 8009c68:	e009      	b.n	8009c7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c6e:	61fb      	str	r3, [r7, #28]
        break;
 8009c70:	e005      	b.n	8009c7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d077      	beq.n	8009d74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	005a      	lsls	r2, r3, #1
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	085b      	lsrs	r3, r3, #1
 8009c8e:	441a      	add	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2b0f      	cmp	r3, #15
 8009c9e:	d916      	bls.n	8009cce <UART_SetConfig+0x4a6>
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ca6:	d212      	bcs.n	8009cce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f023 030f 	bic.w	r3, r3, #15
 8009cb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	085b      	lsrs	r3, r3, #1
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	8afb      	ldrh	r3, [r7, #22]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	8afa      	ldrh	r2, [r7, #22]
 8009cca:	60da      	str	r2, [r3, #12]
 8009ccc:	e052      	b.n	8009d74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009cd4:	e04e      	b.n	8009d74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009cda:	2b08      	cmp	r3, #8
 8009cdc:	d827      	bhi.n	8009d2e <UART_SetConfig+0x506>
 8009cde:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce4 <UART_SetConfig+0x4bc>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d09 	.word	0x08009d09
 8009ce8:	08009d11 	.word	0x08009d11
 8009cec:	08009d19 	.word	0x08009d19
 8009cf0:	08009d2f 	.word	0x08009d2f
 8009cf4:	08009d1f 	.word	0x08009d1f
 8009cf8:	08009d2f 	.word	0x08009d2f
 8009cfc:	08009d2f 	.word	0x08009d2f
 8009d00:	08009d2f 	.word	0x08009d2f
 8009d04:	08009d27 	.word	0x08009d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d08:	f7fd fb9c 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 8009d0c:	61f8      	str	r0, [r7, #28]
        break;
 8009d0e:	e014      	b.n	8009d3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d10:	f7fd fbae 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
 8009d14:	61f8      	str	r0, [r7, #28]
        break;
 8009d16:	e010      	b.n	8009d3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d18:	4b1e      	ldr	r3, [pc, #120]	@ (8009d94 <UART_SetConfig+0x56c>)
 8009d1a:	61fb      	str	r3, [r7, #28]
        break;
 8009d1c:	e00d      	b.n	8009d3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d1e:	f7fd faf9 	bl	8007314 <HAL_RCC_GetSysClockFreq>
 8009d22:	61f8      	str	r0, [r7, #28]
        break;
 8009d24:	e009      	b.n	8009d3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d2a:	61fb      	str	r3, [r7, #28]
        break;
 8009d2c:	e005      	b.n	8009d3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009d38:	bf00      	nop
    }

    if (pclk != 0U)
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d019      	beq.n	8009d74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	085a      	lsrs	r2, r3, #1
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	441a      	add	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	2b0f      	cmp	r3, #15
 8009d58:	d909      	bls.n	8009d6e <UART_SetConfig+0x546>
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d60:	d205      	bcs.n	8009d6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	60da      	str	r2, [r3, #12]
 8009d6c:	e002      	b.n	8009d74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009d80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3728      	adds	r7, #40	@ 0x28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d8e:	bf00      	nop
 8009d90:	40008000 	.word	0x40008000
 8009d94:	00f42400 	.word	0x00f42400

08009d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00a      	beq.n	8009dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de8:	f003 0302 	and.w	r3, r3, #2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00a      	beq.n	8009e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	f003 0310 	and.w	r3, r3, #16
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00a      	beq.n	8009e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d01a      	beq.n	8009eae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e96:	d10a      	bne.n	8009eae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00a      	beq.n	8009ed0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	605a      	str	r2, [r3, #4]
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b098      	sub	sp, #96	@ 0x60
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009eec:	f7fa f81c 	bl	8003f28 <HAL_GetTick>
 8009ef0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0308 	and.w	r3, r3, #8
 8009efc:	2b08      	cmp	r3, #8
 8009efe:	d12e      	bne.n	8009f5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f88c 	bl	800a02c <UART_WaitOnFlagUntilTimeout>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d021      	beq.n	8009f5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f22:	e853 3f00 	ldrex	r3, [r3]
 8009f26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f40:	e841 2300 	strex	r3, r2, [r1]
 8009f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e6      	bne.n	8009f1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e062      	b.n	800a024 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d149      	bne.n	800a000 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f74:	2200      	movs	r2, #0
 8009f76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f856 	bl	800a02c <UART_WaitOnFlagUntilTimeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d03c      	beq.n	800a000 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	623b      	str	r3, [r7, #32]
   return(result);
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e6      	bne.n	8009f86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	e853 3f00 	ldrex	r3, [r3]
 8009fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0301 	bic.w	r3, r3, #1
 8009fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fd8:	61fa      	str	r2, [r7, #28]
 8009fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fdc:	69b9      	ldr	r1, [r7, #24]
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	e841 2300 	strex	r3, r2, [r1]
 8009fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1e5      	bne.n	8009fb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e011      	b.n	800a024 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2220      	movs	r2, #32
 800a004:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2220      	movs	r2, #32
 800a00a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3758      	adds	r7, #88	@ 0x58
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	4613      	mov	r3, r2
 800a03a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a03c:	e04f      	b.n	800a0de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a044:	d04b      	beq.n	800a0de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a046:	f7f9 ff6f 	bl	8003f28 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	429a      	cmp	r2, r3
 800a054:	d302      	bcc.n	800a05c <UART_WaitOnFlagUntilTimeout+0x30>
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e04e      	b.n	800a0fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d037      	beq.n	800a0de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b80      	cmp	r3, #128	@ 0x80
 800a072:	d034      	beq.n	800a0de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b40      	cmp	r3, #64	@ 0x40
 800a078:	d031      	beq.n	800a0de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	f003 0308 	and.w	r3, r3, #8
 800a084:	2b08      	cmp	r3, #8
 800a086:	d110      	bne.n	800a0aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2208      	movs	r2, #8
 800a08e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f8ff 	bl	800a294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2208      	movs	r2, #8
 800a09a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e029      	b.n	800a0fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69db      	ldr	r3, [r3, #28]
 800a0b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0b8:	d111      	bne.n	800a0de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f8e5 	bl	800a294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e00f      	b.n	800a0fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69da      	ldr	r2, [r3, #28]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	bf0c      	ite	eq
 800a0ee:	2301      	moveq	r3, #1
 800a0f0:	2300      	movne	r3, #0
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d0a0      	beq.n	800a03e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a108:	b480      	push	{r7}
 800a10a:	b097      	sub	sp, #92	@ 0x5c
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	88fa      	ldrh	r2, [r7, #6]
 800a120:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	88fa      	ldrh	r2, [r7, #6]
 800a128:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a13a:	d10e      	bne.n	800a15a <UART_Start_Receive_IT+0x52>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d105      	bne.n	800a150 <UART_Start_Receive_IT+0x48>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a14a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a14e:	e02d      	b.n	800a1ac <UART_Start_Receive_IT+0xa4>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	22ff      	movs	r2, #255	@ 0xff
 800a154:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a158:	e028      	b.n	800a1ac <UART_Start_Receive_IT+0xa4>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10d      	bne.n	800a17e <UART_Start_Receive_IT+0x76>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d104      	bne.n	800a174 <UART_Start_Receive_IT+0x6c>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	22ff      	movs	r2, #255	@ 0xff
 800a16e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a172:	e01b      	b.n	800a1ac <UART_Start_Receive_IT+0xa4>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	227f      	movs	r2, #127	@ 0x7f
 800a178:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a17c:	e016      	b.n	800a1ac <UART_Start_Receive_IT+0xa4>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a186:	d10d      	bne.n	800a1a4 <UART_Start_Receive_IT+0x9c>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d104      	bne.n	800a19a <UART_Start_Receive_IT+0x92>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	227f      	movs	r2, #127	@ 0x7f
 800a194:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a198:	e008      	b.n	800a1ac <UART_Start_Receive_IT+0xa4>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	223f      	movs	r2, #63	@ 0x3f
 800a19e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a1a2:	e003      	b.n	800a1ac <UART_Start_Receive_IT+0xa4>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2222      	movs	r2, #34	@ 0x22
 800a1b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c6:	e853 3f00 	ldrex	r3, [r3]
 800a1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a1de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a1ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e5      	bne.n	800a1bc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f8:	d107      	bne.n	800a20a <UART_Start_Receive_IT+0x102>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d103      	bne.n	800a20a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4a21      	ldr	r2, [pc, #132]	@ (800a28c <UART_Start_Receive_IT+0x184>)
 800a206:	669a      	str	r2, [r3, #104]	@ 0x68
 800a208:	e002      	b.n	800a210 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4a20      	ldr	r2, [pc, #128]	@ (800a290 <UART_Start_Receive_IT+0x188>)
 800a20e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d019      	beq.n	800a24c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a236:	637b      	str	r3, [r7, #52]	@ 0x34
 800a238:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a23c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e6      	bne.n	800a218 <UART_Start_Receive_IT+0x110>
 800a24a:	e018      	b.n	800a27e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	613b      	str	r3, [r7, #16]
   return(result);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f043 0320 	orr.w	r3, r3, #32
 800a260:	653b      	str	r3, [r7, #80]	@ 0x50
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a26a:	623b      	str	r3, [r7, #32]
 800a26c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	69f9      	ldr	r1, [r7, #28]
 800a270:	6a3a      	ldr	r2, [r7, #32]
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	61bb      	str	r3, [r7, #24]
   return(result);
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e6      	bne.n	800a24c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	375c      	adds	r7, #92	@ 0x5c
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	0800a599 	.word	0x0800a599
 800a290:	0800a3dd 	.word	0x0800a3dd

0800a294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b095      	sub	sp, #84	@ 0x54
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a4:	e853 3f00 	ldrex	r3, [r3]
 800a2a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e6      	bne.n	800a29c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	e853 3f00 	ldrex	r3, [r3]
 800a2dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f023 0301 	bic.w	r3, r3, #1
 800a2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2f6:	e841 2300 	strex	r3, r2, [r1]
 800a2fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1e5      	bne.n	800a2ce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a306:	2b01      	cmp	r3, #1
 800a308:	d118      	bne.n	800a33c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	e853 3f00 	ldrex	r3, [r3]
 800a316:	60bb      	str	r3, [r7, #8]
   return(result);
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f023 0310 	bic.w	r3, r3, #16
 800a31e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	461a      	mov	r2, r3
 800a326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a328:	61bb      	str	r3, [r7, #24]
 800a32a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	6979      	ldr	r1, [r7, #20]
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	613b      	str	r3, [r7, #16]
   return(result);
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e6      	bne.n	800a30a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2220      	movs	r2, #32
 800a340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a350:	bf00      	nop
 800a352:	3754      	adds	r7, #84	@ 0x54
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7ff fa3e 	bl	80097fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a380:	bf00      	nop
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6979      	ldr	r1, [r7, #20]
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e6      	bne.n	800a390 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fa0a 	bl	80097e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3d4:	bf00      	nop
 800a3d6:	3720      	adds	r7, #32
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b09c      	sub	sp, #112	@ 0x70
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f4:	2b22      	cmp	r3, #34	@ 0x22
 800a3f6:	f040 80be 	bne.w	800a576 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a400:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a408:	b2d9      	uxtb	r1, r3
 800a40a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a414:	400a      	ands	r2, r1
 800a416:	b2d2      	uxtb	r2, r2
 800a418:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	3b01      	subs	r3, #1
 800a42e:	b29a      	uxth	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f040 80a3 	bne.w	800a58a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a462:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a464:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a468:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a46a:	e841 2300 	strex	r3, r2, [r1]
 800a46e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1e6      	bne.n	800a444 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3308      	adds	r3, #8
 800a47c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a488:	f023 0301 	bic.w	r3, r3, #1
 800a48c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3308      	adds	r3, #8
 800a494:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a496:	647a      	str	r2, [r7, #68]	@ 0x44
 800a498:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a49c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e5      	bne.n	800a476 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a34      	ldr	r2, [pc, #208]	@ (800a594 <UART_RxISR_8BIT+0x1b8>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d01f      	beq.n	800a508 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d018      	beq.n	800a508 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e4:	6a3b      	ldr	r3, [r7, #32]
 800a4e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4ea:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e6      	bne.n	800a4d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d12e      	bne.n	800a56e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60fb      	str	r3, [r7, #12]
   return(result);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0310 	bic.w	r3, r3, #16
 800a52a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a534:	61fb      	str	r3, [r7, #28]
 800a536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	69b9      	ldr	r1, [r7, #24]
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	617b      	str	r3, [r7, #20]
   return(result);
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	f003 0310 	and.w	r3, r3, #16
 800a552:	2b10      	cmp	r3, #16
 800a554:	d103      	bne.n	800a55e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2210      	movs	r2, #16
 800a55c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff f952 	bl	8009810 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a56c:	e00d      	b.n	800a58a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7f8 ff62 	bl	8003438 <HAL_UART_RxCpltCallback>
}
 800a574:	e009      	b.n	800a58a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	8b1b      	ldrh	r3, [r3, #24]
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0208 	orr.w	r2, r2, #8
 800a586:	b292      	uxth	r2, r2
 800a588:	831a      	strh	r2, [r3, #24]
}
 800a58a:	bf00      	nop
 800a58c:	3770      	adds	r7, #112	@ 0x70
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	40008000 	.word	0x40008000

0800a598 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b09c      	sub	sp, #112	@ 0x70
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5b0:	2b22      	cmp	r3, #34	@ 0x22
 800a5b2:	f040 80be 	bne.w	800a732 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a5bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a5c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a5ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5da:	1c9a      	adds	r2, r3, #2
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f040 80a3 	bne.w	800a746 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a60e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a614:	667b      	str	r3, [r7, #100]	@ 0x64
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a61e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a620:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e6      	bne.n	800a600 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3308      	adds	r3, #8
 800a638:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a644:	f023 0301 	bic.w	r3, r3, #1
 800a648:	663b      	str	r3, [r7, #96]	@ 0x60
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3308      	adds	r3, #8
 800a650:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a652:	643a      	str	r2, [r7, #64]	@ 0x40
 800a654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e5      	bne.n	800a632 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a34      	ldr	r2, [pc, #208]	@ (800a750 <UART_RxISR_16BIT+0x1b8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d01f      	beq.n	800a6c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d018      	beq.n	800a6c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6b8:	e841 2300 	strex	r3, r2, [r1]
 800a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e6      	bne.n	800a692 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d12e      	bne.n	800a72a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f023 0310 	bic.w	r3, r3, #16
 800a6e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6979      	ldr	r1, [r7, #20]
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e6      	bne.n	800a6d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	f003 0310 	and.w	r3, r3, #16
 800a70e:	2b10      	cmp	r3, #16
 800a710:	d103      	bne.n	800a71a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2210      	movs	r2, #16
 800a718:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a720:	4619      	mov	r1, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff f874 	bl	8009810 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a728:	e00d      	b.n	800a746 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7f8 fe84 	bl	8003438 <HAL_UART_RxCpltCallback>
}
 800a730:	e009      	b.n	800a746 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	8b1b      	ldrh	r3, [r3, #24]
 800a738:	b29a      	uxth	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f042 0208 	orr.w	r2, r2, #8
 800a742:	b292      	uxth	r2, r2
 800a744:	831a      	strh	r2, [r3, #24]
}
 800a746:	bf00      	nop
 800a748:	3770      	adds	r7, #112	@ 0x70
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	40008000 	.word	0x40008000

0800a754 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <atoi>:
 800a768:	220a      	movs	r2, #10
 800a76a:	2100      	movs	r1, #0
 800a76c:	f000 bf7a 	b.w	800b664 <strtol>

0800a770 <malloc>:
 800a770:	4b02      	ldr	r3, [pc, #8]	@ (800a77c <malloc+0xc>)
 800a772:	4601      	mov	r1, r0
 800a774:	6818      	ldr	r0, [r3, #0]
 800a776:	f000 b82d 	b.w	800a7d4 <_malloc_r>
 800a77a:	bf00      	nop
 800a77c:	20000190 	.word	0x20000190

0800a780 <free>:
 800a780:	4b02      	ldr	r3, [pc, #8]	@ (800a78c <free+0xc>)
 800a782:	4601      	mov	r1, r0
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	f002 be43 	b.w	800d410 <_free_r>
 800a78a:	bf00      	nop
 800a78c:	20000190 	.word	0x20000190

0800a790 <sbrk_aligned>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	4e0f      	ldr	r6, [pc, #60]	@ (800a7d0 <sbrk_aligned+0x40>)
 800a794:	460c      	mov	r4, r1
 800a796:	6831      	ldr	r1, [r6, #0]
 800a798:	4605      	mov	r5, r0
 800a79a:	b911      	cbnz	r1, 800a7a2 <sbrk_aligned+0x12>
 800a79c:	f001 ff7c 	bl	800c698 <_sbrk_r>
 800a7a0:	6030      	str	r0, [r6, #0]
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f001 ff77 	bl	800c698 <_sbrk_r>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d103      	bne.n	800a7b6 <sbrk_aligned+0x26>
 800a7ae:	f04f 34ff 	mov.w	r4, #4294967295
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	1cc4      	adds	r4, r0, #3
 800a7b8:	f024 0403 	bic.w	r4, r4, #3
 800a7bc:	42a0      	cmp	r0, r4
 800a7be:	d0f8      	beq.n	800a7b2 <sbrk_aligned+0x22>
 800a7c0:	1a21      	subs	r1, r4, r0
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f001 ff68 	bl	800c698 <_sbrk_r>
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	d1f2      	bne.n	800a7b2 <sbrk_aligned+0x22>
 800a7cc:	e7ef      	b.n	800a7ae <sbrk_aligned+0x1e>
 800a7ce:	bf00      	nop
 800a7d0:	200005b0 	.word	0x200005b0

0800a7d4 <_malloc_r>:
 800a7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d8:	1ccd      	adds	r5, r1, #3
 800a7da:	f025 0503 	bic.w	r5, r5, #3
 800a7de:	3508      	adds	r5, #8
 800a7e0:	2d0c      	cmp	r5, #12
 800a7e2:	bf38      	it	cc
 800a7e4:	250c      	movcc	r5, #12
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	db01      	blt.n	800a7f0 <_malloc_r+0x1c>
 800a7ec:	42a9      	cmp	r1, r5
 800a7ee:	d904      	bls.n	800a7fa <_malloc_r+0x26>
 800a7f0:	230c      	movs	r3, #12
 800a7f2:	6033      	str	r3, [r6, #0]
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8d0 <_malloc_r+0xfc>
 800a7fe:	f000 f869 	bl	800a8d4 <__malloc_lock>
 800a802:	f8d8 3000 	ldr.w	r3, [r8]
 800a806:	461c      	mov	r4, r3
 800a808:	bb44      	cbnz	r4, 800a85c <_malloc_r+0x88>
 800a80a:	4629      	mov	r1, r5
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7ff ffbf 	bl	800a790 <sbrk_aligned>
 800a812:	1c43      	adds	r3, r0, #1
 800a814:	4604      	mov	r4, r0
 800a816:	d158      	bne.n	800a8ca <_malloc_r+0xf6>
 800a818:	f8d8 4000 	ldr.w	r4, [r8]
 800a81c:	4627      	mov	r7, r4
 800a81e:	2f00      	cmp	r7, #0
 800a820:	d143      	bne.n	800a8aa <_malloc_r+0xd6>
 800a822:	2c00      	cmp	r4, #0
 800a824:	d04b      	beq.n	800a8be <_malloc_r+0xea>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	4639      	mov	r1, r7
 800a82a:	4630      	mov	r0, r6
 800a82c:	eb04 0903 	add.w	r9, r4, r3
 800a830:	f001 ff32 	bl	800c698 <_sbrk_r>
 800a834:	4581      	cmp	r9, r0
 800a836:	d142      	bne.n	800a8be <_malloc_r+0xea>
 800a838:	6821      	ldr	r1, [r4, #0]
 800a83a:	1a6d      	subs	r5, r5, r1
 800a83c:	4629      	mov	r1, r5
 800a83e:	4630      	mov	r0, r6
 800a840:	f7ff ffa6 	bl	800a790 <sbrk_aligned>
 800a844:	3001      	adds	r0, #1
 800a846:	d03a      	beq.n	800a8be <_malloc_r+0xea>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	442b      	add	r3, r5
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	f8d8 3000 	ldr.w	r3, [r8]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	bb62      	cbnz	r2, 800a8b0 <_malloc_r+0xdc>
 800a856:	f8c8 7000 	str.w	r7, [r8]
 800a85a:	e00f      	b.n	800a87c <_malloc_r+0xa8>
 800a85c:	6822      	ldr	r2, [r4, #0]
 800a85e:	1b52      	subs	r2, r2, r5
 800a860:	d420      	bmi.n	800a8a4 <_malloc_r+0xd0>
 800a862:	2a0b      	cmp	r2, #11
 800a864:	d917      	bls.n	800a896 <_malloc_r+0xc2>
 800a866:	1961      	adds	r1, r4, r5
 800a868:	42a3      	cmp	r3, r4
 800a86a:	6025      	str	r5, [r4, #0]
 800a86c:	bf18      	it	ne
 800a86e:	6059      	strne	r1, [r3, #4]
 800a870:	6863      	ldr	r3, [r4, #4]
 800a872:	bf08      	it	eq
 800a874:	f8c8 1000 	streq.w	r1, [r8]
 800a878:	5162      	str	r2, [r4, r5]
 800a87a:	604b      	str	r3, [r1, #4]
 800a87c:	4630      	mov	r0, r6
 800a87e:	f000 f82f 	bl	800a8e0 <__malloc_unlock>
 800a882:	f104 000b 	add.w	r0, r4, #11
 800a886:	1d23      	adds	r3, r4, #4
 800a888:	f020 0007 	bic.w	r0, r0, #7
 800a88c:	1ac2      	subs	r2, r0, r3
 800a88e:	bf1c      	itt	ne
 800a890:	1a1b      	subne	r3, r3, r0
 800a892:	50a3      	strne	r3, [r4, r2]
 800a894:	e7af      	b.n	800a7f6 <_malloc_r+0x22>
 800a896:	6862      	ldr	r2, [r4, #4]
 800a898:	42a3      	cmp	r3, r4
 800a89a:	bf0c      	ite	eq
 800a89c:	f8c8 2000 	streq.w	r2, [r8]
 800a8a0:	605a      	strne	r2, [r3, #4]
 800a8a2:	e7eb      	b.n	800a87c <_malloc_r+0xa8>
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	6864      	ldr	r4, [r4, #4]
 800a8a8:	e7ae      	b.n	800a808 <_malloc_r+0x34>
 800a8aa:	463c      	mov	r4, r7
 800a8ac:	687f      	ldr	r7, [r7, #4]
 800a8ae:	e7b6      	b.n	800a81e <_malloc_r+0x4a>
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	d1fb      	bne.n	800a8b0 <_malloc_r+0xdc>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	6053      	str	r3, [r2, #4]
 800a8bc:	e7de      	b.n	800a87c <_malloc_r+0xa8>
 800a8be:	230c      	movs	r3, #12
 800a8c0:	6033      	str	r3, [r6, #0]
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f000 f80c 	bl	800a8e0 <__malloc_unlock>
 800a8c8:	e794      	b.n	800a7f4 <_malloc_r+0x20>
 800a8ca:	6005      	str	r5, [r0, #0]
 800a8cc:	e7d6      	b.n	800a87c <_malloc_r+0xa8>
 800a8ce:	bf00      	nop
 800a8d0:	200005b4 	.word	0x200005b4

0800a8d4 <__malloc_lock>:
 800a8d4:	4801      	ldr	r0, [pc, #4]	@ (800a8dc <__malloc_lock+0x8>)
 800a8d6:	f001 bf2c 	b.w	800c732 <__retarget_lock_acquire_recursive>
 800a8da:	bf00      	nop
 800a8dc:	200006f8 	.word	0x200006f8

0800a8e0 <__malloc_unlock>:
 800a8e0:	4801      	ldr	r0, [pc, #4]	@ (800a8e8 <__malloc_unlock+0x8>)
 800a8e2:	f001 bf27 	b.w	800c734 <__retarget_lock_release_recursive>
 800a8e6:	bf00      	nop
 800a8e8:	200006f8 	.word	0x200006f8

0800a8ec <realloc>:
 800a8ec:	4b02      	ldr	r3, [pc, #8]	@ (800a8f8 <realloc+0xc>)
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	6818      	ldr	r0, [r3, #0]
 800a8f4:	f000 b802 	b.w	800a8fc <_realloc_r>
 800a8f8:	20000190 	.word	0x20000190

0800a8fc <_realloc_r>:
 800a8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a900:	4680      	mov	r8, r0
 800a902:	4615      	mov	r5, r2
 800a904:	460c      	mov	r4, r1
 800a906:	b921      	cbnz	r1, 800a912 <_realloc_r+0x16>
 800a908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a90c:	4611      	mov	r1, r2
 800a90e:	f7ff bf61 	b.w	800a7d4 <_malloc_r>
 800a912:	b92a      	cbnz	r2, 800a920 <_realloc_r+0x24>
 800a914:	f002 fd7c 	bl	800d410 <_free_r>
 800a918:	2400      	movs	r4, #0
 800a91a:	4620      	mov	r0, r4
 800a91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a920:	f003 fdbe 	bl	800e4a0 <_malloc_usable_size_r>
 800a924:	4285      	cmp	r5, r0
 800a926:	4606      	mov	r6, r0
 800a928:	d802      	bhi.n	800a930 <_realloc_r+0x34>
 800a92a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a92e:	d8f4      	bhi.n	800a91a <_realloc_r+0x1e>
 800a930:	4629      	mov	r1, r5
 800a932:	4640      	mov	r0, r8
 800a934:	f7ff ff4e 	bl	800a7d4 <_malloc_r>
 800a938:	4607      	mov	r7, r0
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d0ec      	beq.n	800a918 <_realloc_r+0x1c>
 800a93e:	42b5      	cmp	r5, r6
 800a940:	462a      	mov	r2, r5
 800a942:	4621      	mov	r1, r4
 800a944:	bf28      	it	cs
 800a946:	4632      	movcs	r2, r6
 800a948:	f001 fef5 	bl	800c736 <memcpy>
 800a94c:	4621      	mov	r1, r4
 800a94e:	4640      	mov	r0, r8
 800a950:	f002 fd5e 	bl	800d410 <_free_r>
 800a954:	463c      	mov	r4, r7
 800a956:	e7e0      	b.n	800a91a <_realloc_r+0x1e>

0800a958 <sulp>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4604      	mov	r4, r0
 800a95c:	460d      	mov	r5, r1
 800a95e:	ec45 4b10 	vmov	d0, r4, r5
 800a962:	4616      	mov	r6, r2
 800a964:	f003 fc5e 	bl	800e224 <__ulp>
 800a968:	ec51 0b10 	vmov	r0, r1, d0
 800a96c:	b17e      	cbz	r6, 800a98e <sulp+0x36>
 800a96e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a972:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a976:	2b00      	cmp	r3, #0
 800a978:	dd09      	ble.n	800a98e <sulp+0x36>
 800a97a:	051b      	lsls	r3, r3, #20
 800a97c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a980:	2400      	movs	r4, #0
 800a982:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a986:	4622      	mov	r2, r4
 800a988:	462b      	mov	r3, r5
 800a98a:	f7f5 fe45 	bl	8000618 <__aeabi_dmul>
 800a98e:	ec41 0b10 	vmov	d0, r0, r1
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	0000      	movs	r0, r0
	...

0800a998 <_strtod_l>:
 800a998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	b09f      	sub	sp, #124	@ 0x7c
 800a99e:	460c      	mov	r4, r1
 800a9a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a9a6:	9005      	str	r0, [sp, #20]
 800a9a8:	f04f 0a00 	mov.w	sl, #0
 800a9ac:	f04f 0b00 	mov.w	fp, #0
 800a9b0:	460a      	mov	r2, r1
 800a9b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9b4:	7811      	ldrb	r1, [r2, #0]
 800a9b6:	292b      	cmp	r1, #43	@ 0x2b
 800a9b8:	d04a      	beq.n	800aa50 <_strtod_l+0xb8>
 800a9ba:	d838      	bhi.n	800aa2e <_strtod_l+0x96>
 800a9bc:	290d      	cmp	r1, #13
 800a9be:	d832      	bhi.n	800aa26 <_strtod_l+0x8e>
 800a9c0:	2908      	cmp	r1, #8
 800a9c2:	d832      	bhi.n	800aa2a <_strtod_l+0x92>
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d03b      	beq.n	800aa40 <_strtod_l+0xa8>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a9cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a9ce:	782a      	ldrb	r2, [r5, #0]
 800a9d0:	2a30      	cmp	r2, #48	@ 0x30
 800a9d2:	f040 80b3 	bne.w	800ab3c <_strtod_l+0x1a4>
 800a9d6:	786a      	ldrb	r2, [r5, #1]
 800a9d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9dc:	2a58      	cmp	r2, #88	@ 0x58
 800a9de:	d16e      	bne.n	800aabe <_strtod_l+0x126>
 800a9e0:	9302      	str	r3, [sp, #8]
 800a9e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4a8e      	ldr	r2, [pc, #568]	@ (800ac24 <_strtod_l+0x28c>)
 800a9ec:	9805      	ldr	r0, [sp, #20]
 800a9ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a9f0:	a919      	add	r1, sp, #100	@ 0x64
 800a9f2:	f002 fdbf 	bl	800d574 <__gethex>
 800a9f6:	f010 060f 	ands.w	r6, r0, #15
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	d005      	beq.n	800aa0a <_strtod_l+0x72>
 800a9fe:	2e06      	cmp	r6, #6
 800aa00:	d128      	bne.n	800aa54 <_strtod_l+0xbc>
 800aa02:	3501      	adds	r5, #1
 800aa04:	2300      	movs	r3, #0
 800aa06:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 858e 	bne.w	800b52e <_strtod_l+0xb96>
 800aa12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa14:	b1cb      	cbz	r3, 800aa4a <_strtod_l+0xb2>
 800aa16:	4652      	mov	r2, sl
 800aa18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aa1c:	ec43 2b10 	vmov	d0, r2, r3
 800aa20:	b01f      	add	sp, #124	@ 0x7c
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	2920      	cmp	r1, #32
 800aa28:	d1ce      	bne.n	800a9c8 <_strtod_l+0x30>
 800aa2a:	3201      	adds	r2, #1
 800aa2c:	e7c1      	b.n	800a9b2 <_strtod_l+0x1a>
 800aa2e:	292d      	cmp	r1, #45	@ 0x2d
 800aa30:	d1ca      	bne.n	800a9c8 <_strtod_l+0x30>
 800aa32:	2101      	movs	r1, #1
 800aa34:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa36:	1c51      	adds	r1, r2, #1
 800aa38:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa3a:	7852      	ldrb	r2, [r2, #1]
 800aa3c:	2a00      	cmp	r2, #0
 800aa3e:	d1c5      	bne.n	800a9cc <_strtod_l+0x34>
 800aa40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa42:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 8570 	bne.w	800b52a <_strtod_l+0xb92>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	465b      	mov	r3, fp
 800aa4e:	e7e5      	b.n	800aa1c <_strtod_l+0x84>
 800aa50:	2100      	movs	r1, #0
 800aa52:	e7ef      	b.n	800aa34 <_strtod_l+0x9c>
 800aa54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa56:	b13a      	cbz	r2, 800aa68 <_strtod_l+0xd0>
 800aa58:	2135      	movs	r1, #53	@ 0x35
 800aa5a:	a81c      	add	r0, sp, #112	@ 0x70
 800aa5c:	f003 fcdc 	bl	800e418 <__copybits>
 800aa60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa62:	9805      	ldr	r0, [sp, #20]
 800aa64:	f003 f8aa 	bl	800dbbc <_Bfree>
 800aa68:	3e01      	subs	r6, #1
 800aa6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa6c:	2e04      	cmp	r6, #4
 800aa6e:	d806      	bhi.n	800aa7e <_strtod_l+0xe6>
 800aa70:	e8df f006 	tbb	[pc, r6]
 800aa74:	201d0314 	.word	0x201d0314
 800aa78:	14          	.byte	0x14
 800aa79:	00          	.byte	0x00
 800aa7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa7e:	05e1      	lsls	r1, r4, #23
 800aa80:	bf48      	it	mi
 800aa82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa8a:	0d1b      	lsrs	r3, r3, #20
 800aa8c:	051b      	lsls	r3, r3, #20
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1bb      	bne.n	800aa0a <_strtod_l+0x72>
 800aa92:	f001 fe23 	bl	800c6dc <__errno>
 800aa96:	2322      	movs	r3, #34	@ 0x22
 800aa98:	6003      	str	r3, [r0, #0]
 800aa9a:	e7b6      	b.n	800aa0a <_strtod_l+0x72>
 800aa9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aaa0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aaa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aaa8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aaac:	e7e7      	b.n	800aa7e <_strtod_l+0xe6>
 800aaae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ac2c <_strtod_l+0x294>
 800aab2:	e7e4      	b.n	800aa7e <_strtod_l+0xe6>
 800aab4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aab8:	f04f 3aff 	mov.w	sl, #4294967295
 800aabc:	e7df      	b.n	800aa7e <_strtod_l+0xe6>
 800aabe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	2b30      	cmp	r3, #48	@ 0x30
 800aac8:	d0f9      	beq.n	800aabe <_strtod_l+0x126>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d09d      	beq.n	800aa0a <_strtod_l+0x72>
 800aace:	2301      	movs	r3, #1
 800aad0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aad4:	930c      	str	r3, [sp, #48]	@ 0x30
 800aad6:	2300      	movs	r3, #0
 800aad8:	9308      	str	r3, [sp, #32]
 800aada:	930a      	str	r3, [sp, #40]	@ 0x28
 800aadc:	461f      	mov	r7, r3
 800aade:	220a      	movs	r2, #10
 800aae0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aae2:	7805      	ldrb	r5, [r0, #0]
 800aae4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aae8:	b2d9      	uxtb	r1, r3
 800aaea:	2909      	cmp	r1, #9
 800aaec:	d928      	bls.n	800ab40 <_strtod_l+0x1a8>
 800aaee:	494e      	ldr	r1, [pc, #312]	@ (800ac28 <_strtod_l+0x290>)
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f001 fd86 	bl	800c602 <strncmp>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d032      	beq.n	800ab60 <_strtod_l+0x1c8>
 800aafa:	2000      	movs	r0, #0
 800aafc:	462a      	mov	r2, r5
 800aafe:	4681      	mov	r9, r0
 800ab00:	463d      	mov	r5, r7
 800ab02:	4603      	mov	r3, r0
 800ab04:	2a65      	cmp	r2, #101	@ 0x65
 800ab06:	d001      	beq.n	800ab0c <_strtod_l+0x174>
 800ab08:	2a45      	cmp	r2, #69	@ 0x45
 800ab0a:	d114      	bne.n	800ab36 <_strtod_l+0x19e>
 800ab0c:	b91d      	cbnz	r5, 800ab16 <_strtod_l+0x17e>
 800ab0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab10:	4302      	orrs	r2, r0
 800ab12:	d095      	beq.n	800aa40 <_strtod_l+0xa8>
 800ab14:	2500      	movs	r5, #0
 800ab16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab18:	1c62      	adds	r2, r4, #1
 800ab1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab1c:	7862      	ldrb	r2, [r4, #1]
 800ab1e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab20:	d077      	beq.n	800ac12 <_strtod_l+0x27a>
 800ab22:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab24:	d07b      	beq.n	800ac1e <_strtod_l+0x286>
 800ab26:	f04f 0c00 	mov.w	ip, #0
 800ab2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab2e:	2909      	cmp	r1, #9
 800ab30:	f240 8082 	bls.w	800ac38 <_strtod_l+0x2a0>
 800ab34:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab36:	f04f 0800 	mov.w	r8, #0
 800ab3a:	e0a2      	b.n	800ac82 <_strtod_l+0x2ea>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e7c7      	b.n	800aad0 <_strtod_l+0x138>
 800ab40:	2f08      	cmp	r7, #8
 800ab42:	bfd5      	itete	le
 800ab44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ab46:	9908      	ldrgt	r1, [sp, #32]
 800ab48:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab50:	f100 0001 	add.w	r0, r0, #1
 800ab54:	bfd4      	ite	le
 800ab56:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab58:	9308      	strgt	r3, [sp, #32]
 800ab5a:	3701      	adds	r7, #1
 800ab5c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab5e:	e7bf      	b.n	800aae0 <_strtod_l+0x148>
 800ab60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab66:	785a      	ldrb	r2, [r3, #1]
 800ab68:	b37f      	cbz	r7, 800abca <_strtod_l+0x232>
 800ab6a:	4681      	mov	r9, r0
 800ab6c:	463d      	mov	r5, r7
 800ab6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab72:	2b09      	cmp	r3, #9
 800ab74:	d912      	bls.n	800ab9c <_strtod_l+0x204>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e7c4      	b.n	800ab04 <_strtod_l+0x16c>
 800ab7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab80:	785a      	ldrb	r2, [r3, #1]
 800ab82:	3001      	adds	r0, #1
 800ab84:	2a30      	cmp	r2, #48	@ 0x30
 800ab86:	d0f8      	beq.n	800ab7a <_strtod_l+0x1e2>
 800ab88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	f200 84d3 	bhi.w	800b538 <_strtod_l+0xba0>
 800ab92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab96:	4681      	mov	r9, r0
 800ab98:	2000      	movs	r0, #0
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	3a30      	subs	r2, #48	@ 0x30
 800ab9e:	f100 0301 	add.w	r3, r0, #1
 800aba2:	d02a      	beq.n	800abfa <_strtod_l+0x262>
 800aba4:	4499      	add	r9, r3
 800aba6:	eb00 0c05 	add.w	ip, r0, r5
 800abaa:	462b      	mov	r3, r5
 800abac:	210a      	movs	r1, #10
 800abae:	4563      	cmp	r3, ip
 800abb0:	d10d      	bne.n	800abce <_strtod_l+0x236>
 800abb2:	1c69      	adds	r1, r5, #1
 800abb4:	4401      	add	r1, r0
 800abb6:	4428      	add	r0, r5
 800abb8:	2808      	cmp	r0, #8
 800abba:	dc16      	bgt.n	800abea <_strtod_l+0x252>
 800abbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abbe:	230a      	movs	r3, #10
 800abc0:	fb03 2300 	mla	r3, r3, r0, r2
 800abc4:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc6:	2300      	movs	r3, #0
 800abc8:	e018      	b.n	800abfc <_strtod_l+0x264>
 800abca:	4638      	mov	r0, r7
 800abcc:	e7da      	b.n	800ab84 <_strtod_l+0x1ec>
 800abce:	2b08      	cmp	r3, #8
 800abd0:	f103 0301 	add.w	r3, r3, #1
 800abd4:	dc03      	bgt.n	800abde <_strtod_l+0x246>
 800abd6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800abd8:	434e      	muls	r6, r1
 800abda:	960a      	str	r6, [sp, #40]	@ 0x28
 800abdc:	e7e7      	b.n	800abae <_strtod_l+0x216>
 800abde:	2b10      	cmp	r3, #16
 800abe0:	bfde      	ittt	le
 800abe2:	9e08      	ldrle	r6, [sp, #32]
 800abe4:	434e      	mulle	r6, r1
 800abe6:	9608      	strle	r6, [sp, #32]
 800abe8:	e7e1      	b.n	800abae <_strtod_l+0x216>
 800abea:	280f      	cmp	r0, #15
 800abec:	dceb      	bgt.n	800abc6 <_strtod_l+0x22e>
 800abee:	9808      	ldr	r0, [sp, #32]
 800abf0:	230a      	movs	r3, #10
 800abf2:	fb03 2300 	mla	r3, r3, r0, r2
 800abf6:	9308      	str	r3, [sp, #32]
 800abf8:	e7e5      	b.n	800abc6 <_strtod_l+0x22e>
 800abfa:	4629      	mov	r1, r5
 800abfc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abfe:	1c50      	adds	r0, r2, #1
 800ac00:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac02:	7852      	ldrb	r2, [r2, #1]
 800ac04:	4618      	mov	r0, r3
 800ac06:	460d      	mov	r5, r1
 800ac08:	e7b1      	b.n	800ab6e <_strtod_l+0x1d6>
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e77d      	b.n	800ab0e <_strtod_l+0x176>
 800ac12:	f04f 0c00 	mov.w	ip, #0
 800ac16:	1ca2      	adds	r2, r4, #2
 800ac18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac1a:	78a2      	ldrb	r2, [r4, #2]
 800ac1c:	e785      	b.n	800ab2a <_strtod_l+0x192>
 800ac1e:	f04f 0c01 	mov.w	ip, #1
 800ac22:	e7f8      	b.n	800ac16 <_strtod_l+0x27e>
 800ac24:	08010964 	.word	0x08010964
 800ac28:	0801094c 	.word	0x0801094c
 800ac2c:	7ff00000 	.word	0x7ff00000
 800ac30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac32:	1c51      	adds	r1, r2, #1
 800ac34:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac36:	7852      	ldrb	r2, [r2, #1]
 800ac38:	2a30      	cmp	r2, #48	@ 0x30
 800ac3a:	d0f9      	beq.n	800ac30 <_strtod_l+0x298>
 800ac3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac40:	2908      	cmp	r1, #8
 800ac42:	f63f af78 	bhi.w	800ab36 <_strtod_l+0x19e>
 800ac46:	3a30      	subs	r2, #48	@ 0x30
 800ac48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac4e:	f04f 080a 	mov.w	r8, #10
 800ac52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac54:	1c56      	adds	r6, r2, #1
 800ac56:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac58:	7852      	ldrb	r2, [r2, #1]
 800ac5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac5e:	f1be 0f09 	cmp.w	lr, #9
 800ac62:	d939      	bls.n	800acd8 <_strtod_l+0x340>
 800ac64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac66:	1a76      	subs	r6, r6, r1
 800ac68:	2e08      	cmp	r6, #8
 800ac6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac6e:	dc03      	bgt.n	800ac78 <_strtod_l+0x2e0>
 800ac70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac72:	4588      	cmp	r8, r1
 800ac74:	bfa8      	it	ge
 800ac76:	4688      	movge	r8, r1
 800ac78:	f1bc 0f00 	cmp.w	ip, #0
 800ac7c:	d001      	beq.n	800ac82 <_strtod_l+0x2ea>
 800ac7e:	f1c8 0800 	rsb	r8, r8, #0
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	d14e      	bne.n	800ad24 <_strtod_l+0x38c>
 800ac86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac88:	4308      	orrs	r0, r1
 800ac8a:	f47f aebe 	bne.w	800aa0a <_strtod_l+0x72>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f47f aed6 	bne.w	800aa40 <_strtod_l+0xa8>
 800ac94:	2a69      	cmp	r2, #105	@ 0x69
 800ac96:	d028      	beq.n	800acea <_strtod_l+0x352>
 800ac98:	dc25      	bgt.n	800ace6 <_strtod_l+0x34e>
 800ac9a:	2a49      	cmp	r2, #73	@ 0x49
 800ac9c:	d025      	beq.n	800acea <_strtod_l+0x352>
 800ac9e:	2a4e      	cmp	r2, #78	@ 0x4e
 800aca0:	f47f aece 	bne.w	800aa40 <_strtod_l+0xa8>
 800aca4:	499b      	ldr	r1, [pc, #620]	@ (800af14 <_strtod_l+0x57c>)
 800aca6:	a819      	add	r0, sp, #100	@ 0x64
 800aca8:	f002 fe86 	bl	800d9b8 <__match>
 800acac:	2800      	cmp	r0, #0
 800acae:	f43f aec7 	beq.w	800aa40 <_strtod_l+0xa8>
 800acb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b28      	cmp	r3, #40	@ 0x28
 800acb8:	d12e      	bne.n	800ad18 <_strtod_l+0x380>
 800acba:	4997      	ldr	r1, [pc, #604]	@ (800af18 <_strtod_l+0x580>)
 800acbc:	aa1c      	add	r2, sp, #112	@ 0x70
 800acbe:	a819      	add	r0, sp, #100	@ 0x64
 800acc0:	f002 fe8e 	bl	800d9e0 <__hexnan>
 800acc4:	2805      	cmp	r0, #5
 800acc6:	d127      	bne.n	800ad18 <_strtod_l+0x380>
 800acc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800acca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800acce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800acd2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800acd6:	e698      	b.n	800aa0a <_strtod_l+0x72>
 800acd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acda:	fb08 2101 	mla	r1, r8, r1, r2
 800acde:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ace2:	920e      	str	r2, [sp, #56]	@ 0x38
 800ace4:	e7b5      	b.n	800ac52 <_strtod_l+0x2ba>
 800ace6:	2a6e      	cmp	r2, #110	@ 0x6e
 800ace8:	e7da      	b.n	800aca0 <_strtod_l+0x308>
 800acea:	498c      	ldr	r1, [pc, #560]	@ (800af1c <_strtod_l+0x584>)
 800acec:	a819      	add	r0, sp, #100	@ 0x64
 800acee:	f002 fe63 	bl	800d9b8 <__match>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f43f aea4 	beq.w	800aa40 <_strtod_l+0xa8>
 800acf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acfa:	4989      	ldr	r1, [pc, #548]	@ (800af20 <_strtod_l+0x588>)
 800acfc:	3b01      	subs	r3, #1
 800acfe:	a819      	add	r0, sp, #100	@ 0x64
 800ad00:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad02:	f002 fe59 	bl	800d9b8 <__match>
 800ad06:	b910      	cbnz	r0, 800ad0e <_strtod_l+0x376>
 800ad08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800af30 <_strtod_l+0x598>
 800ad12:	f04f 0a00 	mov.w	sl, #0
 800ad16:	e678      	b.n	800aa0a <_strtod_l+0x72>
 800ad18:	4882      	ldr	r0, [pc, #520]	@ (800af24 <_strtod_l+0x58c>)
 800ad1a:	f001 fd1d 	bl	800c758 <nan>
 800ad1e:	ec5b ab10 	vmov	sl, fp, d0
 800ad22:	e672      	b.n	800aa0a <_strtod_l+0x72>
 800ad24:	eba8 0309 	sub.w	r3, r8, r9
 800ad28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2c:	2f00      	cmp	r7, #0
 800ad2e:	bf08      	it	eq
 800ad30:	462f      	moveq	r7, r5
 800ad32:	2d10      	cmp	r5, #16
 800ad34:	462c      	mov	r4, r5
 800ad36:	bfa8      	it	ge
 800ad38:	2410      	movge	r4, #16
 800ad3a:	f7f5 fbf3 	bl	8000524 <__aeabi_ui2d>
 800ad3e:	2d09      	cmp	r5, #9
 800ad40:	4682      	mov	sl, r0
 800ad42:	468b      	mov	fp, r1
 800ad44:	dc13      	bgt.n	800ad6e <_strtod_l+0x3d6>
 800ad46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f43f ae5e 	beq.w	800aa0a <_strtod_l+0x72>
 800ad4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad50:	dd78      	ble.n	800ae44 <_strtod_l+0x4ac>
 800ad52:	2b16      	cmp	r3, #22
 800ad54:	dc5f      	bgt.n	800ae16 <_strtod_l+0x47e>
 800ad56:	4974      	ldr	r1, [pc, #464]	@ (800af28 <_strtod_l+0x590>)
 800ad58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad60:	4652      	mov	r2, sl
 800ad62:	465b      	mov	r3, fp
 800ad64:	f7f5 fc58 	bl	8000618 <__aeabi_dmul>
 800ad68:	4682      	mov	sl, r0
 800ad6a:	468b      	mov	fp, r1
 800ad6c:	e64d      	b.n	800aa0a <_strtod_l+0x72>
 800ad6e:	4b6e      	ldr	r3, [pc, #440]	@ (800af28 <_strtod_l+0x590>)
 800ad70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad78:	f7f5 fc4e 	bl	8000618 <__aeabi_dmul>
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	9808      	ldr	r0, [sp, #32]
 800ad80:	468b      	mov	fp, r1
 800ad82:	f7f5 fbcf 	bl	8000524 <__aeabi_ui2d>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	f7f5 fa8d 	bl	80002ac <__adddf3>
 800ad92:	2d0f      	cmp	r5, #15
 800ad94:	4682      	mov	sl, r0
 800ad96:	468b      	mov	fp, r1
 800ad98:	ddd5      	ble.n	800ad46 <_strtod_l+0x3ae>
 800ad9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9c:	1b2c      	subs	r4, r5, r4
 800ad9e:	441c      	add	r4, r3
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	f340 8096 	ble.w	800aed2 <_strtod_l+0x53a>
 800ada6:	f014 030f 	ands.w	r3, r4, #15
 800adaa:	d00a      	beq.n	800adc2 <_strtod_l+0x42a>
 800adac:	495e      	ldr	r1, [pc, #376]	@ (800af28 <_strtod_l+0x590>)
 800adae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adb2:	4652      	mov	r2, sl
 800adb4:	465b      	mov	r3, fp
 800adb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adba:	f7f5 fc2d 	bl	8000618 <__aeabi_dmul>
 800adbe:	4682      	mov	sl, r0
 800adc0:	468b      	mov	fp, r1
 800adc2:	f034 040f 	bics.w	r4, r4, #15
 800adc6:	d073      	beq.n	800aeb0 <_strtod_l+0x518>
 800adc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800adcc:	dd48      	ble.n	800ae60 <_strtod_l+0x4c8>
 800adce:	2400      	movs	r4, #0
 800add0:	46a0      	mov	r8, r4
 800add2:	940a      	str	r4, [sp, #40]	@ 0x28
 800add4:	46a1      	mov	r9, r4
 800add6:	9a05      	ldr	r2, [sp, #20]
 800add8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800af30 <_strtod_l+0x598>
 800addc:	2322      	movs	r3, #34	@ 0x22
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	f04f 0a00 	mov.w	sl, #0
 800ade4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f43f ae0f 	beq.w	800aa0a <_strtod_l+0x72>
 800adec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adee:	9805      	ldr	r0, [sp, #20]
 800adf0:	f002 fee4 	bl	800dbbc <_Bfree>
 800adf4:	9805      	ldr	r0, [sp, #20]
 800adf6:	4649      	mov	r1, r9
 800adf8:	f002 fee0 	bl	800dbbc <_Bfree>
 800adfc:	9805      	ldr	r0, [sp, #20]
 800adfe:	4641      	mov	r1, r8
 800ae00:	f002 fedc 	bl	800dbbc <_Bfree>
 800ae04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	f002 fed8 	bl	800dbbc <_Bfree>
 800ae0c:	9805      	ldr	r0, [sp, #20]
 800ae0e:	4621      	mov	r1, r4
 800ae10:	f002 fed4 	bl	800dbbc <_Bfree>
 800ae14:	e5f9      	b.n	800aa0a <_strtod_l+0x72>
 800ae16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	dbbc      	blt.n	800ad9a <_strtod_l+0x402>
 800ae20:	4c41      	ldr	r4, [pc, #260]	@ (800af28 <_strtod_l+0x590>)
 800ae22:	f1c5 050f 	rsb	r5, r5, #15
 800ae26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae32:	f7f5 fbf1 	bl	8000618 <__aeabi_dmul>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	1b5d      	subs	r5, r3, r5
 800ae3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae42:	e78f      	b.n	800ad64 <_strtod_l+0x3cc>
 800ae44:	3316      	adds	r3, #22
 800ae46:	dba8      	blt.n	800ad9a <_strtod_l+0x402>
 800ae48:	4b37      	ldr	r3, [pc, #220]	@ (800af28 <_strtod_l+0x590>)
 800ae4a:	eba9 0808 	sub.w	r8, r9, r8
 800ae4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae52:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae56:	4650      	mov	r0, sl
 800ae58:	4659      	mov	r1, fp
 800ae5a:	f7f5 fd07 	bl	800086c <__aeabi_ddiv>
 800ae5e:	e783      	b.n	800ad68 <_strtod_l+0x3d0>
 800ae60:	4b32      	ldr	r3, [pc, #200]	@ (800af2c <_strtod_l+0x594>)
 800ae62:	9308      	str	r3, [sp, #32]
 800ae64:	2300      	movs	r3, #0
 800ae66:	1124      	asrs	r4, r4, #4
 800ae68:	4650      	mov	r0, sl
 800ae6a:	4659      	mov	r1, fp
 800ae6c:	461e      	mov	r6, r3
 800ae6e:	2c01      	cmp	r4, #1
 800ae70:	dc21      	bgt.n	800aeb6 <_strtod_l+0x51e>
 800ae72:	b10b      	cbz	r3, 800ae78 <_strtod_l+0x4e0>
 800ae74:	4682      	mov	sl, r0
 800ae76:	468b      	mov	fp, r1
 800ae78:	492c      	ldr	r1, [pc, #176]	@ (800af2c <_strtod_l+0x594>)
 800ae7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae82:	4652      	mov	r2, sl
 800ae84:	465b      	mov	r3, fp
 800ae86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae8a:	f7f5 fbc5 	bl	8000618 <__aeabi_dmul>
 800ae8e:	4b28      	ldr	r3, [pc, #160]	@ (800af30 <_strtod_l+0x598>)
 800ae90:	460a      	mov	r2, r1
 800ae92:	400b      	ands	r3, r1
 800ae94:	4927      	ldr	r1, [pc, #156]	@ (800af34 <_strtod_l+0x59c>)
 800ae96:	428b      	cmp	r3, r1
 800ae98:	4682      	mov	sl, r0
 800ae9a:	d898      	bhi.n	800adce <_strtod_l+0x436>
 800ae9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf86      	itte	hi
 800aea4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800af38 <_strtod_l+0x5a0>
 800aea8:	f04f 3aff 	movhi.w	sl, #4294967295
 800aeac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	9308      	str	r3, [sp, #32]
 800aeb4:	e07a      	b.n	800afac <_strtod_l+0x614>
 800aeb6:	07e2      	lsls	r2, r4, #31
 800aeb8:	d505      	bpl.n	800aec6 <_strtod_l+0x52e>
 800aeba:	9b08      	ldr	r3, [sp, #32]
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 fbaa 	bl	8000618 <__aeabi_dmul>
 800aec4:	2301      	movs	r3, #1
 800aec6:	9a08      	ldr	r2, [sp, #32]
 800aec8:	3208      	adds	r2, #8
 800aeca:	3601      	adds	r6, #1
 800aecc:	1064      	asrs	r4, r4, #1
 800aece:	9208      	str	r2, [sp, #32]
 800aed0:	e7cd      	b.n	800ae6e <_strtod_l+0x4d6>
 800aed2:	d0ed      	beq.n	800aeb0 <_strtod_l+0x518>
 800aed4:	4264      	negs	r4, r4
 800aed6:	f014 020f 	ands.w	r2, r4, #15
 800aeda:	d00a      	beq.n	800aef2 <_strtod_l+0x55a>
 800aedc:	4b12      	ldr	r3, [pc, #72]	@ (800af28 <_strtod_l+0x590>)
 800aede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aee2:	4650      	mov	r0, sl
 800aee4:	4659      	mov	r1, fp
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	f7f5 fcbf 	bl	800086c <__aeabi_ddiv>
 800aeee:	4682      	mov	sl, r0
 800aef0:	468b      	mov	fp, r1
 800aef2:	1124      	asrs	r4, r4, #4
 800aef4:	d0dc      	beq.n	800aeb0 <_strtod_l+0x518>
 800aef6:	2c1f      	cmp	r4, #31
 800aef8:	dd20      	ble.n	800af3c <_strtod_l+0x5a4>
 800aefa:	2400      	movs	r4, #0
 800aefc:	46a0      	mov	r8, r4
 800aefe:	940a      	str	r4, [sp, #40]	@ 0x28
 800af00:	46a1      	mov	r9, r4
 800af02:	9a05      	ldr	r2, [sp, #20]
 800af04:	2322      	movs	r3, #34	@ 0x22
 800af06:	f04f 0a00 	mov.w	sl, #0
 800af0a:	f04f 0b00 	mov.w	fp, #0
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	e768      	b.n	800ade4 <_strtod_l+0x44c>
 800af12:	bf00      	nop
 800af14:	08010aae 	.word	0x08010aae
 800af18:	08010950 	.word	0x08010950
 800af1c:	08010aa6 	.word	0x08010aa6
 800af20:	08010ae3 	.word	0x08010ae3
 800af24:	08010d8f 	.word	0x08010d8f
 800af28:	08010c60 	.word	0x08010c60
 800af2c:	08010c38 	.word	0x08010c38
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	7ca00000 	.word	0x7ca00000
 800af38:	7fefffff 	.word	0x7fefffff
 800af3c:	f014 0310 	ands.w	r3, r4, #16
 800af40:	bf18      	it	ne
 800af42:	236a      	movne	r3, #106	@ 0x6a
 800af44:	4ea9      	ldr	r6, [pc, #676]	@ (800b1ec <_strtod_l+0x854>)
 800af46:	9308      	str	r3, [sp, #32]
 800af48:	4650      	mov	r0, sl
 800af4a:	4659      	mov	r1, fp
 800af4c:	2300      	movs	r3, #0
 800af4e:	07e2      	lsls	r2, r4, #31
 800af50:	d504      	bpl.n	800af5c <_strtod_l+0x5c4>
 800af52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af56:	f7f5 fb5f 	bl	8000618 <__aeabi_dmul>
 800af5a:	2301      	movs	r3, #1
 800af5c:	1064      	asrs	r4, r4, #1
 800af5e:	f106 0608 	add.w	r6, r6, #8
 800af62:	d1f4      	bne.n	800af4e <_strtod_l+0x5b6>
 800af64:	b10b      	cbz	r3, 800af6a <_strtod_l+0x5d2>
 800af66:	4682      	mov	sl, r0
 800af68:	468b      	mov	fp, r1
 800af6a:	9b08      	ldr	r3, [sp, #32]
 800af6c:	b1b3      	cbz	r3, 800af9c <_strtod_l+0x604>
 800af6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af76:	2b00      	cmp	r3, #0
 800af78:	4659      	mov	r1, fp
 800af7a:	dd0f      	ble.n	800af9c <_strtod_l+0x604>
 800af7c:	2b1f      	cmp	r3, #31
 800af7e:	dd55      	ble.n	800b02c <_strtod_l+0x694>
 800af80:	2b34      	cmp	r3, #52	@ 0x34
 800af82:	bfde      	ittt	le
 800af84:	f04f 33ff 	movle.w	r3, #4294967295
 800af88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af8c:	4093      	lslle	r3, r2
 800af8e:	f04f 0a00 	mov.w	sl, #0
 800af92:	bfcc      	ite	gt
 800af94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af98:	ea03 0b01 	andle.w	fp, r3, r1
 800af9c:	2200      	movs	r2, #0
 800af9e:	2300      	movs	r3, #0
 800afa0:	4650      	mov	r0, sl
 800afa2:	4659      	mov	r1, fp
 800afa4:	f7f5 fda0 	bl	8000ae8 <__aeabi_dcmpeq>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d1a6      	bne.n	800aefa <_strtod_l+0x562>
 800afac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afb2:	9805      	ldr	r0, [sp, #20]
 800afb4:	462b      	mov	r3, r5
 800afb6:	463a      	mov	r2, r7
 800afb8:	f002 fe68 	bl	800dc8c <__s2b>
 800afbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f43f af05 	beq.w	800adce <_strtod_l+0x436>
 800afc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	eba9 0308 	sub.w	r3, r9, r8
 800afcc:	bfa8      	it	ge
 800afce:	2300      	movge	r3, #0
 800afd0:	9312      	str	r3, [sp, #72]	@ 0x48
 800afd2:	2400      	movs	r4, #0
 800afd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800afd8:	9316      	str	r3, [sp, #88]	@ 0x58
 800afda:	46a0      	mov	r8, r4
 800afdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afde:	9805      	ldr	r0, [sp, #20]
 800afe0:	6859      	ldr	r1, [r3, #4]
 800afe2:	f002 fdab 	bl	800db3c <_Balloc>
 800afe6:	4681      	mov	r9, r0
 800afe8:	2800      	cmp	r0, #0
 800afea:	f43f aef4 	beq.w	800add6 <_strtod_l+0x43e>
 800afee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aff0:	691a      	ldr	r2, [r3, #16]
 800aff2:	3202      	adds	r2, #2
 800aff4:	f103 010c 	add.w	r1, r3, #12
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	300c      	adds	r0, #12
 800affc:	f001 fb9b 	bl	800c736 <memcpy>
 800b000:	ec4b ab10 	vmov	d0, sl, fp
 800b004:	9805      	ldr	r0, [sp, #20]
 800b006:	aa1c      	add	r2, sp, #112	@ 0x70
 800b008:	a91b      	add	r1, sp, #108	@ 0x6c
 800b00a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b00e:	f003 f979 	bl	800e304 <__d2b>
 800b012:	901a      	str	r0, [sp, #104]	@ 0x68
 800b014:	2800      	cmp	r0, #0
 800b016:	f43f aede 	beq.w	800add6 <_strtod_l+0x43e>
 800b01a:	9805      	ldr	r0, [sp, #20]
 800b01c:	2101      	movs	r1, #1
 800b01e:	f002 fecb 	bl	800ddb8 <__i2b>
 800b022:	4680      	mov	r8, r0
 800b024:	b948      	cbnz	r0, 800b03a <_strtod_l+0x6a2>
 800b026:	f04f 0800 	mov.w	r8, #0
 800b02a:	e6d4      	b.n	800add6 <_strtod_l+0x43e>
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295
 800b030:	fa02 f303 	lsl.w	r3, r2, r3
 800b034:	ea03 0a0a 	and.w	sl, r3, sl
 800b038:	e7b0      	b.n	800af9c <_strtod_l+0x604>
 800b03a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b03c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b03e:	2d00      	cmp	r5, #0
 800b040:	bfab      	itete	ge
 800b042:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b044:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b046:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b048:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b04a:	bfac      	ite	ge
 800b04c:	18ef      	addge	r7, r5, r3
 800b04e:	1b5e      	sublt	r6, r3, r5
 800b050:	9b08      	ldr	r3, [sp, #32]
 800b052:	1aed      	subs	r5, r5, r3
 800b054:	4415      	add	r5, r2
 800b056:	4b66      	ldr	r3, [pc, #408]	@ (800b1f0 <_strtod_l+0x858>)
 800b058:	3d01      	subs	r5, #1
 800b05a:	429d      	cmp	r5, r3
 800b05c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b060:	da50      	bge.n	800b104 <_strtod_l+0x76c>
 800b062:	1b5b      	subs	r3, r3, r5
 800b064:	2b1f      	cmp	r3, #31
 800b066:	eba2 0203 	sub.w	r2, r2, r3
 800b06a:	f04f 0101 	mov.w	r1, #1
 800b06e:	dc3d      	bgt.n	800b0ec <_strtod_l+0x754>
 800b070:	fa01 f303 	lsl.w	r3, r1, r3
 800b074:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b076:	2300      	movs	r3, #0
 800b078:	9310      	str	r3, [sp, #64]	@ 0x40
 800b07a:	18bd      	adds	r5, r7, r2
 800b07c:	9b08      	ldr	r3, [sp, #32]
 800b07e:	42af      	cmp	r7, r5
 800b080:	4416      	add	r6, r2
 800b082:	441e      	add	r6, r3
 800b084:	463b      	mov	r3, r7
 800b086:	bfa8      	it	ge
 800b088:	462b      	movge	r3, r5
 800b08a:	42b3      	cmp	r3, r6
 800b08c:	bfa8      	it	ge
 800b08e:	4633      	movge	r3, r6
 800b090:	2b00      	cmp	r3, #0
 800b092:	bfc2      	ittt	gt
 800b094:	1aed      	subgt	r5, r5, r3
 800b096:	1af6      	subgt	r6, r6, r3
 800b098:	1aff      	subgt	r7, r7, r3
 800b09a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd16      	ble.n	800b0ce <_strtod_l+0x736>
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	9805      	ldr	r0, [sp, #20]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f002 ff47 	bl	800df38 <__pow5mult>
 800b0aa:	4680      	mov	r8, r0
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d0ba      	beq.n	800b026 <_strtod_l+0x68e>
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b0b4:	9805      	ldr	r0, [sp, #20]
 800b0b6:	f002 fe95 	bl	800dde4 <__multiply>
 800b0ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	f43f ae8a 	beq.w	800add6 <_strtod_l+0x43e>
 800b0c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0c4:	9805      	ldr	r0, [sp, #20]
 800b0c6:	f002 fd79 	bl	800dbbc <_Bfree>
 800b0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0ce:	2d00      	cmp	r5, #0
 800b0d0:	dc1d      	bgt.n	800b10e <_strtod_l+0x776>
 800b0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	dd23      	ble.n	800b120 <_strtod_l+0x788>
 800b0d8:	4649      	mov	r1, r9
 800b0da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0dc:	9805      	ldr	r0, [sp, #20]
 800b0de:	f002 ff2b 	bl	800df38 <__pow5mult>
 800b0e2:	4681      	mov	r9, r0
 800b0e4:	b9e0      	cbnz	r0, 800b120 <_strtod_l+0x788>
 800b0e6:	f04f 0900 	mov.w	r9, #0
 800b0ea:	e674      	b.n	800add6 <_strtod_l+0x43e>
 800b0ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b0f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b0f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b0f8:	35e2      	adds	r5, #226	@ 0xe2
 800b0fa:	fa01 f305 	lsl.w	r3, r1, r5
 800b0fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800b100:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b102:	e7ba      	b.n	800b07a <_strtod_l+0x6e2>
 800b104:	2300      	movs	r3, #0
 800b106:	9310      	str	r3, [sp, #64]	@ 0x40
 800b108:	2301      	movs	r3, #1
 800b10a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b10c:	e7b5      	b.n	800b07a <_strtod_l+0x6e2>
 800b10e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b110:	9805      	ldr	r0, [sp, #20]
 800b112:	462a      	mov	r2, r5
 800b114:	f002 ff6a 	bl	800dfec <__lshift>
 800b118:	901a      	str	r0, [sp, #104]	@ 0x68
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d1d9      	bne.n	800b0d2 <_strtod_l+0x73a>
 800b11e:	e65a      	b.n	800add6 <_strtod_l+0x43e>
 800b120:	2e00      	cmp	r6, #0
 800b122:	dd07      	ble.n	800b134 <_strtod_l+0x79c>
 800b124:	4649      	mov	r1, r9
 800b126:	9805      	ldr	r0, [sp, #20]
 800b128:	4632      	mov	r2, r6
 800b12a:	f002 ff5f 	bl	800dfec <__lshift>
 800b12e:	4681      	mov	r9, r0
 800b130:	2800      	cmp	r0, #0
 800b132:	d0d8      	beq.n	800b0e6 <_strtod_l+0x74e>
 800b134:	2f00      	cmp	r7, #0
 800b136:	dd08      	ble.n	800b14a <_strtod_l+0x7b2>
 800b138:	4641      	mov	r1, r8
 800b13a:	9805      	ldr	r0, [sp, #20]
 800b13c:	463a      	mov	r2, r7
 800b13e:	f002 ff55 	bl	800dfec <__lshift>
 800b142:	4680      	mov	r8, r0
 800b144:	2800      	cmp	r0, #0
 800b146:	f43f ae46 	beq.w	800add6 <_strtod_l+0x43e>
 800b14a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b14c:	9805      	ldr	r0, [sp, #20]
 800b14e:	464a      	mov	r2, r9
 800b150:	f002 ffd4 	bl	800e0fc <__mdiff>
 800b154:	4604      	mov	r4, r0
 800b156:	2800      	cmp	r0, #0
 800b158:	f43f ae3d 	beq.w	800add6 <_strtod_l+0x43e>
 800b15c:	68c3      	ldr	r3, [r0, #12]
 800b15e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b160:	2300      	movs	r3, #0
 800b162:	60c3      	str	r3, [r0, #12]
 800b164:	4641      	mov	r1, r8
 800b166:	f002 ffad 	bl	800e0c4 <__mcmp>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	da46      	bge.n	800b1fc <_strtod_l+0x864>
 800b16e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b170:	ea53 030a 	orrs.w	r3, r3, sl
 800b174:	d16c      	bne.n	800b250 <_strtod_l+0x8b8>
 800b176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d168      	bne.n	800b250 <_strtod_l+0x8b8>
 800b17e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b182:	0d1b      	lsrs	r3, r3, #20
 800b184:	051b      	lsls	r3, r3, #20
 800b186:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b18a:	d961      	bls.n	800b250 <_strtod_l+0x8b8>
 800b18c:	6963      	ldr	r3, [r4, #20]
 800b18e:	b913      	cbnz	r3, 800b196 <_strtod_l+0x7fe>
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	2b01      	cmp	r3, #1
 800b194:	dd5c      	ble.n	800b250 <_strtod_l+0x8b8>
 800b196:	4621      	mov	r1, r4
 800b198:	2201      	movs	r2, #1
 800b19a:	9805      	ldr	r0, [sp, #20]
 800b19c:	f002 ff26 	bl	800dfec <__lshift>
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	f002 ff8e 	bl	800e0c4 <__mcmp>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	dd51      	ble.n	800b250 <_strtod_l+0x8b8>
 800b1ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1b0:	9a08      	ldr	r2, [sp, #32]
 800b1b2:	0d1b      	lsrs	r3, r3, #20
 800b1b4:	051b      	lsls	r3, r3, #20
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	d06b      	beq.n	800b292 <_strtod_l+0x8fa>
 800b1ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1be:	d868      	bhi.n	800b292 <_strtod_l+0x8fa>
 800b1c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1c4:	f67f ae9d 	bls.w	800af02 <_strtod_l+0x56a>
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f4 <_strtod_l+0x85c>)
 800b1ca:	4650      	mov	r0, sl
 800b1cc:	4659      	mov	r1, fp
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7f5 fa22 	bl	8000618 <__aeabi_dmul>
 800b1d4:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <_strtod_l+0x860>)
 800b1d6:	400b      	ands	r3, r1
 800b1d8:	4682      	mov	sl, r0
 800b1da:	468b      	mov	fp, r1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f47f ae05 	bne.w	800adec <_strtod_l+0x454>
 800b1e2:	9a05      	ldr	r2, [sp, #20]
 800b1e4:	2322      	movs	r3, #34	@ 0x22
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	e600      	b.n	800adec <_strtod_l+0x454>
 800b1ea:	bf00      	nop
 800b1ec:	08010978 	.word	0x08010978
 800b1f0:	fffffc02 	.word	0xfffffc02
 800b1f4:	39500000 	.word	0x39500000
 800b1f8:	7ff00000 	.word	0x7ff00000
 800b1fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b200:	d165      	bne.n	800b2ce <_strtod_l+0x936>
 800b202:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b208:	b35a      	cbz	r2, 800b262 <_strtod_l+0x8ca>
 800b20a:	4a9f      	ldr	r2, [pc, #636]	@ (800b488 <_strtod_l+0xaf0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d12b      	bne.n	800b268 <_strtod_l+0x8d0>
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	4651      	mov	r1, sl
 800b214:	b303      	cbz	r3, 800b258 <_strtod_l+0x8c0>
 800b216:	4b9d      	ldr	r3, [pc, #628]	@ (800b48c <_strtod_l+0xaf4>)
 800b218:	465a      	mov	r2, fp
 800b21a:	4013      	ands	r3, r2
 800b21c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b220:	f04f 32ff 	mov.w	r2, #4294967295
 800b224:	d81b      	bhi.n	800b25e <_strtod_l+0x8c6>
 800b226:	0d1b      	lsrs	r3, r3, #20
 800b228:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b22c:	fa02 f303 	lsl.w	r3, r2, r3
 800b230:	4299      	cmp	r1, r3
 800b232:	d119      	bne.n	800b268 <_strtod_l+0x8d0>
 800b234:	4b96      	ldr	r3, [pc, #600]	@ (800b490 <_strtod_l+0xaf8>)
 800b236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b238:	429a      	cmp	r2, r3
 800b23a:	d102      	bne.n	800b242 <_strtod_l+0x8aa>
 800b23c:	3101      	adds	r1, #1
 800b23e:	f43f adca 	beq.w	800add6 <_strtod_l+0x43e>
 800b242:	4b92      	ldr	r3, [pc, #584]	@ (800b48c <_strtod_l+0xaf4>)
 800b244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b246:	401a      	ands	r2, r3
 800b248:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b24c:	f04f 0a00 	mov.w	sl, #0
 800b250:	9b08      	ldr	r3, [sp, #32]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1b8      	bne.n	800b1c8 <_strtod_l+0x830>
 800b256:	e5c9      	b.n	800adec <_strtod_l+0x454>
 800b258:	f04f 33ff 	mov.w	r3, #4294967295
 800b25c:	e7e8      	b.n	800b230 <_strtod_l+0x898>
 800b25e:	4613      	mov	r3, r2
 800b260:	e7e6      	b.n	800b230 <_strtod_l+0x898>
 800b262:	ea53 030a 	orrs.w	r3, r3, sl
 800b266:	d0a1      	beq.n	800b1ac <_strtod_l+0x814>
 800b268:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b26a:	b1db      	cbz	r3, 800b2a4 <_strtod_l+0x90c>
 800b26c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b26e:	4213      	tst	r3, r2
 800b270:	d0ee      	beq.n	800b250 <_strtod_l+0x8b8>
 800b272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b274:	9a08      	ldr	r2, [sp, #32]
 800b276:	4650      	mov	r0, sl
 800b278:	4659      	mov	r1, fp
 800b27a:	b1bb      	cbz	r3, 800b2ac <_strtod_l+0x914>
 800b27c:	f7ff fb6c 	bl	800a958 <sulp>
 800b280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b284:	ec53 2b10 	vmov	r2, r3, d0
 800b288:	f7f5 f810 	bl	80002ac <__adddf3>
 800b28c:	4682      	mov	sl, r0
 800b28e:	468b      	mov	fp, r1
 800b290:	e7de      	b.n	800b250 <_strtod_l+0x8b8>
 800b292:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b296:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b29a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b29e:	f04f 3aff 	mov.w	sl, #4294967295
 800b2a2:	e7d5      	b.n	800b250 <_strtod_l+0x8b8>
 800b2a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2a6:	ea13 0f0a 	tst.w	r3, sl
 800b2aa:	e7e1      	b.n	800b270 <_strtod_l+0x8d8>
 800b2ac:	f7ff fb54 	bl	800a958 <sulp>
 800b2b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2b4:	ec53 2b10 	vmov	r2, r3, d0
 800b2b8:	f7f4 fff6 	bl	80002a8 <__aeabi_dsub>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	468b      	mov	fp, r1
 800b2c4:	f7f5 fc10 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d0c1      	beq.n	800b250 <_strtod_l+0x8b8>
 800b2cc:	e619      	b.n	800af02 <_strtod_l+0x56a>
 800b2ce:	4641      	mov	r1, r8
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f003 f86f 	bl	800e3b4 <__ratio>
 800b2d6:	ec57 6b10 	vmov	r6, r7, d0
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 fc14 	bl	8000b10 <__aeabi_dcmple>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d06f      	beq.n	800b3cc <_strtod_l+0xa34>
 800b2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d17a      	bne.n	800b3e8 <_strtod_l+0xa50>
 800b2f2:	f1ba 0f00 	cmp.w	sl, #0
 800b2f6:	d158      	bne.n	800b3aa <_strtod_l+0xa12>
 800b2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d15a      	bne.n	800b3b8 <_strtod_l+0xa20>
 800b302:	4b64      	ldr	r3, [pc, #400]	@ (800b494 <_strtod_l+0xafc>)
 800b304:	2200      	movs	r2, #0
 800b306:	4630      	mov	r0, r6
 800b308:	4639      	mov	r1, r7
 800b30a:	f7f5 fbf7 	bl	8000afc <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d159      	bne.n	800b3c6 <_strtod_l+0xa2e>
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	4b60      	ldr	r3, [pc, #384]	@ (800b498 <_strtod_l+0xb00>)
 800b318:	2200      	movs	r2, #0
 800b31a:	f7f5 f97d 	bl	8000618 <__aeabi_dmul>
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b326:	9606      	str	r6, [sp, #24]
 800b328:	9307      	str	r3, [sp, #28]
 800b32a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b32e:	4d57      	ldr	r5, [pc, #348]	@ (800b48c <_strtod_l+0xaf4>)
 800b330:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b336:	401d      	ands	r5, r3
 800b338:	4b58      	ldr	r3, [pc, #352]	@ (800b49c <_strtod_l+0xb04>)
 800b33a:	429d      	cmp	r5, r3
 800b33c:	f040 80b2 	bne.w	800b4a4 <_strtod_l+0xb0c>
 800b340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b342:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b346:	ec4b ab10 	vmov	d0, sl, fp
 800b34a:	f002 ff6b 	bl	800e224 <__ulp>
 800b34e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b352:	ec51 0b10 	vmov	r0, r1, d0
 800b356:	f7f5 f95f 	bl	8000618 <__aeabi_dmul>
 800b35a:	4652      	mov	r2, sl
 800b35c:	465b      	mov	r3, fp
 800b35e:	f7f4 ffa5 	bl	80002ac <__adddf3>
 800b362:	460b      	mov	r3, r1
 800b364:	4949      	ldr	r1, [pc, #292]	@ (800b48c <_strtod_l+0xaf4>)
 800b366:	4a4e      	ldr	r2, [pc, #312]	@ (800b4a0 <_strtod_l+0xb08>)
 800b368:	4019      	ands	r1, r3
 800b36a:	4291      	cmp	r1, r2
 800b36c:	4682      	mov	sl, r0
 800b36e:	d942      	bls.n	800b3f6 <_strtod_l+0xa5e>
 800b370:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b372:	4b47      	ldr	r3, [pc, #284]	@ (800b490 <_strtod_l+0xaf8>)
 800b374:	429a      	cmp	r2, r3
 800b376:	d103      	bne.n	800b380 <_strtod_l+0x9e8>
 800b378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b37a:	3301      	adds	r3, #1
 800b37c:	f43f ad2b 	beq.w	800add6 <_strtod_l+0x43e>
 800b380:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b490 <_strtod_l+0xaf8>
 800b384:	f04f 3aff 	mov.w	sl, #4294967295
 800b388:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b38a:	9805      	ldr	r0, [sp, #20]
 800b38c:	f002 fc16 	bl	800dbbc <_Bfree>
 800b390:	9805      	ldr	r0, [sp, #20]
 800b392:	4649      	mov	r1, r9
 800b394:	f002 fc12 	bl	800dbbc <_Bfree>
 800b398:	9805      	ldr	r0, [sp, #20]
 800b39a:	4641      	mov	r1, r8
 800b39c:	f002 fc0e 	bl	800dbbc <_Bfree>
 800b3a0:	9805      	ldr	r0, [sp, #20]
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	f002 fc0a 	bl	800dbbc <_Bfree>
 800b3a8:	e618      	b.n	800afdc <_strtod_l+0x644>
 800b3aa:	f1ba 0f01 	cmp.w	sl, #1
 800b3ae:	d103      	bne.n	800b3b8 <_strtod_l+0xa20>
 800b3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f43f ada5 	beq.w	800af02 <_strtod_l+0x56a>
 800b3b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b468 <_strtod_l+0xad0>
 800b3bc:	4f35      	ldr	r7, [pc, #212]	@ (800b494 <_strtod_l+0xafc>)
 800b3be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3c2:	2600      	movs	r6, #0
 800b3c4:	e7b1      	b.n	800b32a <_strtod_l+0x992>
 800b3c6:	4f34      	ldr	r7, [pc, #208]	@ (800b498 <_strtod_l+0xb00>)
 800b3c8:	2600      	movs	r6, #0
 800b3ca:	e7aa      	b.n	800b322 <_strtod_l+0x98a>
 800b3cc:	4b32      	ldr	r3, [pc, #200]	@ (800b498 <_strtod_l+0xb00>)
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f7f5 f920 	bl	8000618 <__aeabi_dmul>
 800b3d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460f      	mov	r7, r1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d09f      	beq.n	800b322 <_strtod_l+0x98a>
 800b3e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3e6:	e7a0      	b.n	800b32a <_strtod_l+0x992>
 800b3e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b470 <_strtod_l+0xad8>
 800b3ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3f0:	ec57 6b17 	vmov	r6, r7, d7
 800b3f4:	e799      	b.n	800b32a <_strtod_l+0x992>
 800b3f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1c1      	bne.n	800b388 <_strtod_l+0x9f0>
 800b404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b408:	0d1b      	lsrs	r3, r3, #20
 800b40a:	051b      	lsls	r3, r3, #20
 800b40c:	429d      	cmp	r5, r3
 800b40e:	d1bb      	bne.n	800b388 <_strtod_l+0x9f0>
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fc60 	bl	8000cd8 <__aeabi_d2lz>
 800b418:	f7f5 f8d0 	bl	80005bc <__aeabi_l2d>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f4 ff40 	bl	80002a8 <__aeabi_dsub>
 800b428:	460b      	mov	r3, r1
 800b42a:	4602      	mov	r2, r0
 800b42c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b430:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b436:	ea46 060a 	orr.w	r6, r6, sl
 800b43a:	431e      	orrs	r6, r3
 800b43c:	d06f      	beq.n	800b51e <_strtod_l+0xb86>
 800b43e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b478 <_strtod_l+0xae0>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f7f5 fb5a 	bl	8000afc <__aeabi_dcmplt>
 800b448:	2800      	cmp	r0, #0
 800b44a:	f47f accf 	bne.w	800adec <_strtod_l+0x454>
 800b44e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b480 <_strtod_l+0xae8>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b458:	f7f5 fb6e 	bl	8000b38 <__aeabi_dcmpgt>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d093      	beq.n	800b388 <_strtod_l+0x9f0>
 800b460:	e4c4      	b.n	800adec <_strtod_l+0x454>
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
 800b468:	00000000 	.word	0x00000000
 800b46c:	bff00000 	.word	0xbff00000
 800b470:	00000000 	.word	0x00000000
 800b474:	3ff00000 	.word	0x3ff00000
 800b478:	94a03595 	.word	0x94a03595
 800b47c:	3fdfffff 	.word	0x3fdfffff
 800b480:	35afe535 	.word	0x35afe535
 800b484:	3fe00000 	.word	0x3fe00000
 800b488:	000fffff 	.word	0x000fffff
 800b48c:	7ff00000 	.word	0x7ff00000
 800b490:	7fefffff 	.word	0x7fefffff
 800b494:	3ff00000 	.word	0x3ff00000
 800b498:	3fe00000 	.word	0x3fe00000
 800b49c:	7fe00000 	.word	0x7fe00000
 800b4a0:	7c9fffff 	.word	0x7c9fffff
 800b4a4:	9b08      	ldr	r3, [sp, #32]
 800b4a6:	b323      	cbz	r3, 800b4f2 <_strtod_l+0xb5a>
 800b4a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b4ac:	d821      	bhi.n	800b4f2 <_strtod_l+0xb5a>
 800b4ae:	a328      	add	r3, pc, #160	@ (adr r3, 800b550 <_strtod_l+0xbb8>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f7f5 fb2a 	bl	8000b10 <__aeabi_dcmple>
 800b4bc:	b1a0      	cbz	r0, 800b4e8 <_strtod_l+0xb50>
 800b4be:	4639      	mov	r1, r7
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7f5 fb81 	bl	8000bc8 <__aeabi_d2uiz>
 800b4c6:	2801      	cmp	r0, #1
 800b4c8:	bf38      	it	cc
 800b4ca:	2001      	movcc	r0, #1
 800b4cc:	f7f5 f82a 	bl	8000524 <__aeabi_ui2d>
 800b4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	b9fb      	cbnz	r3, 800b518 <_strtod_l+0xb80>
 800b4d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b4de:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b4e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b4ee:	1b5b      	subs	r3, r3, r5
 800b4f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b4fa:	f002 fe93 	bl	800e224 <__ulp>
 800b4fe:	4650      	mov	r0, sl
 800b500:	ec53 2b10 	vmov	r2, r3, d0
 800b504:	4659      	mov	r1, fp
 800b506:	f7f5 f887 	bl	8000618 <__aeabi_dmul>
 800b50a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b50e:	f7f4 fecd 	bl	80002ac <__adddf3>
 800b512:	4682      	mov	sl, r0
 800b514:	468b      	mov	fp, r1
 800b516:	e770      	b.n	800b3fa <_strtod_l+0xa62>
 800b518:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b51c:	e7e0      	b.n	800b4e0 <_strtod_l+0xb48>
 800b51e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b558 <_strtod_l+0xbc0>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f5 faea 	bl	8000afc <__aeabi_dcmplt>
 800b528:	e798      	b.n	800b45c <_strtod_l+0xac4>
 800b52a:	2300      	movs	r3, #0
 800b52c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b52e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	f7ff ba6d 	b.w	800aa12 <_strtod_l+0x7a>
 800b538:	2a65      	cmp	r2, #101	@ 0x65
 800b53a:	f43f ab66 	beq.w	800ac0a <_strtod_l+0x272>
 800b53e:	2a45      	cmp	r2, #69	@ 0x45
 800b540:	f43f ab63 	beq.w	800ac0a <_strtod_l+0x272>
 800b544:	2301      	movs	r3, #1
 800b546:	f7ff bb9e 	b.w	800ac86 <_strtod_l+0x2ee>
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w
 800b550:	ffc00000 	.word	0xffc00000
 800b554:	41dfffff 	.word	0x41dfffff
 800b558:	94a03595 	.word	0x94a03595
 800b55c:	3fcfffff 	.word	0x3fcfffff

0800b560 <_strtod_r>:
 800b560:	4b01      	ldr	r3, [pc, #4]	@ (800b568 <_strtod_r+0x8>)
 800b562:	f7ff ba19 	b.w	800a998 <_strtod_l>
 800b566:	bf00      	nop
 800b568:	20000024 	.word	0x20000024

0800b56c <_strtol_l.constprop.0>:
 800b56c:	2b24      	cmp	r3, #36	@ 0x24
 800b56e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b572:	4686      	mov	lr, r0
 800b574:	4690      	mov	r8, r2
 800b576:	d801      	bhi.n	800b57c <_strtol_l.constprop.0+0x10>
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d106      	bne.n	800b58a <_strtol_l.constprop.0+0x1e>
 800b57c:	f001 f8ae 	bl	800c6dc <__errno>
 800b580:	2316      	movs	r3, #22
 800b582:	6003      	str	r3, [r0, #0]
 800b584:	2000      	movs	r0, #0
 800b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58a:	4834      	ldr	r0, [pc, #208]	@ (800b65c <_strtol_l.constprop.0+0xf0>)
 800b58c:	460d      	mov	r5, r1
 800b58e:	462a      	mov	r2, r5
 800b590:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b594:	5d06      	ldrb	r6, [r0, r4]
 800b596:	f016 0608 	ands.w	r6, r6, #8
 800b59a:	d1f8      	bne.n	800b58e <_strtol_l.constprop.0+0x22>
 800b59c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b59e:	d12d      	bne.n	800b5fc <_strtol_l.constprop.0+0x90>
 800b5a0:	782c      	ldrb	r4, [r5, #0]
 800b5a2:	2601      	movs	r6, #1
 800b5a4:	1c95      	adds	r5, r2, #2
 800b5a6:	f033 0210 	bics.w	r2, r3, #16
 800b5aa:	d109      	bne.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b5ac:	2c30      	cmp	r4, #48	@ 0x30
 800b5ae:	d12a      	bne.n	800b606 <_strtol_l.constprop.0+0x9a>
 800b5b0:	782a      	ldrb	r2, [r5, #0]
 800b5b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5b6:	2a58      	cmp	r2, #88	@ 0x58
 800b5b8:	d125      	bne.n	800b606 <_strtol_l.constprop.0+0x9a>
 800b5ba:	786c      	ldrb	r4, [r5, #1]
 800b5bc:	2310      	movs	r3, #16
 800b5be:	3502      	adds	r5, #2
 800b5c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b5c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	fbbc f9f3 	udiv	r9, ip, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b5d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b5d8:	2f09      	cmp	r7, #9
 800b5da:	d81b      	bhi.n	800b614 <_strtol_l.constprop.0+0xa8>
 800b5dc:	463c      	mov	r4, r7
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	dd27      	ble.n	800b632 <_strtol_l.constprop.0+0xc6>
 800b5e2:	1c57      	adds	r7, r2, #1
 800b5e4:	d007      	beq.n	800b5f6 <_strtol_l.constprop.0+0x8a>
 800b5e6:	4581      	cmp	r9, r0
 800b5e8:	d320      	bcc.n	800b62c <_strtol_l.constprop.0+0xc0>
 800b5ea:	d101      	bne.n	800b5f0 <_strtol_l.constprop.0+0x84>
 800b5ec:	45a2      	cmp	sl, r4
 800b5ee:	db1d      	blt.n	800b62c <_strtol_l.constprop.0+0xc0>
 800b5f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5fa:	e7eb      	b.n	800b5d4 <_strtol_l.constprop.0+0x68>
 800b5fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5fe:	bf04      	itt	eq
 800b600:	782c      	ldrbeq	r4, [r5, #0]
 800b602:	1c95      	addeq	r5, r2, #2
 800b604:	e7cf      	b.n	800b5a6 <_strtol_l.constprop.0+0x3a>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1da      	bne.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b60a:	2c30      	cmp	r4, #48	@ 0x30
 800b60c:	bf0c      	ite	eq
 800b60e:	2308      	moveq	r3, #8
 800b610:	230a      	movne	r3, #10
 800b612:	e7d5      	b.n	800b5c0 <_strtol_l.constprop.0+0x54>
 800b614:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b618:	2f19      	cmp	r7, #25
 800b61a:	d801      	bhi.n	800b620 <_strtol_l.constprop.0+0xb4>
 800b61c:	3c37      	subs	r4, #55	@ 0x37
 800b61e:	e7de      	b.n	800b5de <_strtol_l.constprop.0+0x72>
 800b620:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b624:	2f19      	cmp	r7, #25
 800b626:	d804      	bhi.n	800b632 <_strtol_l.constprop.0+0xc6>
 800b628:	3c57      	subs	r4, #87	@ 0x57
 800b62a:	e7d8      	b.n	800b5de <_strtol_l.constprop.0+0x72>
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	e7e1      	b.n	800b5f6 <_strtol_l.constprop.0+0x8a>
 800b632:	1c53      	adds	r3, r2, #1
 800b634:	d108      	bne.n	800b648 <_strtol_l.constprop.0+0xdc>
 800b636:	2322      	movs	r3, #34	@ 0x22
 800b638:	f8ce 3000 	str.w	r3, [lr]
 800b63c:	4660      	mov	r0, ip
 800b63e:	f1b8 0f00 	cmp.w	r8, #0
 800b642:	d0a0      	beq.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b644:	1e69      	subs	r1, r5, #1
 800b646:	e006      	b.n	800b656 <_strtol_l.constprop.0+0xea>
 800b648:	b106      	cbz	r6, 800b64c <_strtol_l.constprop.0+0xe0>
 800b64a:	4240      	negs	r0, r0
 800b64c:	f1b8 0f00 	cmp.w	r8, #0
 800b650:	d099      	beq.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b652:	2a00      	cmp	r2, #0
 800b654:	d1f6      	bne.n	800b644 <_strtol_l.constprop.0+0xd8>
 800b656:	f8c8 1000 	str.w	r1, [r8]
 800b65a:	e794      	b.n	800b586 <_strtol_l.constprop.0+0x1a>
 800b65c:	080109a1 	.word	0x080109a1

0800b660 <_strtol_r>:
 800b660:	f7ff bf84 	b.w	800b56c <_strtol_l.constprop.0>

0800b664 <strtol>:
 800b664:	4613      	mov	r3, r2
 800b666:	460a      	mov	r2, r1
 800b668:	4601      	mov	r1, r0
 800b66a:	4802      	ldr	r0, [pc, #8]	@ (800b674 <strtol+0x10>)
 800b66c:	6800      	ldr	r0, [r0, #0]
 800b66e:	f7ff bf7d 	b.w	800b56c <_strtol_l.constprop.0>
 800b672:	bf00      	nop
 800b674:	20000190 	.word	0x20000190

0800b678 <__cvt>:
 800b678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	ec57 6b10 	vmov	r6, r7, d0
 800b680:	2f00      	cmp	r7, #0
 800b682:	460c      	mov	r4, r1
 800b684:	4619      	mov	r1, r3
 800b686:	463b      	mov	r3, r7
 800b688:	bfbb      	ittet	lt
 800b68a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b68e:	461f      	movlt	r7, r3
 800b690:	2300      	movge	r3, #0
 800b692:	232d      	movlt	r3, #45	@ 0x2d
 800b694:	700b      	strb	r3, [r1, #0]
 800b696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b698:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b69c:	4691      	mov	r9, r2
 800b69e:	f023 0820 	bic.w	r8, r3, #32
 800b6a2:	bfbc      	itt	lt
 800b6a4:	4632      	movlt	r2, r6
 800b6a6:	4616      	movlt	r6, r2
 800b6a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b6ac:	d005      	beq.n	800b6ba <__cvt+0x42>
 800b6ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b6b2:	d100      	bne.n	800b6b6 <__cvt+0x3e>
 800b6b4:	3401      	adds	r4, #1
 800b6b6:	2102      	movs	r1, #2
 800b6b8:	e000      	b.n	800b6bc <__cvt+0x44>
 800b6ba:	2103      	movs	r1, #3
 800b6bc:	ab03      	add	r3, sp, #12
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	ab02      	add	r3, sp, #8
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	ec47 6b10 	vmov	d0, r6, r7
 800b6c8:	4653      	mov	r3, sl
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	f001 f8dc 	bl	800c888 <_dtoa_r>
 800b6d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b6d4:	4605      	mov	r5, r0
 800b6d6:	d119      	bne.n	800b70c <__cvt+0x94>
 800b6d8:	f019 0f01 	tst.w	r9, #1
 800b6dc:	d00e      	beq.n	800b6fc <__cvt+0x84>
 800b6de:	eb00 0904 	add.w	r9, r0, r4
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f5 f9fd 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6ee:	b108      	cbz	r0, 800b6f4 <__cvt+0x7c>
 800b6f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6f4:	2230      	movs	r2, #48	@ 0x30
 800b6f6:	9b03      	ldr	r3, [sp, #12]
 800b6f8:	454b      	cmp	r3, r9
 800b6fa:	d31e      	bcc.n	800b73a <__cvt+0xc2>
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b700:	1b5b      	subs	r3, r3, r5
 800b702:	4628      	mov	r0, r5
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	b004      	add	sp, #16
 800b708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b710:	eb00 0904 	add.w	r9, r0, r4
 800b714:	d1e5      	bne.n	800b6e2 <__cvt+0x6a>
 800b716:	7803      	ldrb	r3, [r0, #0]
 800b718:	2b30      	cmp	r3, #48	@ 0x30
 800b71a:	d10a      	bne.n	800b732 <__cvt+0xba>
 800b71c:	2200      	movs	r2, #0
 800b71e:	2300      	movs	r3, #0
 800b720:	4630      	mov	r0, r6
 800b722:	4639      	mov	r1, r7
 800b724:	f7f5 f9e0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b728:	b918      	cbnz	r0, 800b732 <__cvt+0xba>
 800b72a:	f1c4 0401 	rsb	r4, r4, #1
 800b72e:	f8ca 4000 	str.w	r4, [sl]
 800b732:	f8da 3000 	ldr.w	r3, [sl]
 800b736:	4499      	add	r9, r3
 800b738:	e7d3      	b.n	800b6e2 <__cvt+0x6a>
 800b73a:	1c59      	adds	r1, r3, #1
 800b73c:	9103      	str	r1, [sp, #12]
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	e7d9      	b.n	800b6f6 <__cvt+0x7e>

0800b742 <__exponent>:
 800b742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b744:	2900      	cmp	r1, #0
 800b746:	bfba      	itte	lt
 800b748:	4249      	neglt	r1, r1
 800b74a:	232d      	movlt	r3, #45	@ 0x2d
 800b74c:	232b      	movge	r3, #43	@ 0x2b
 800b74e:	2909      	cmp	r1, #9
 800b750:	7002      	strb	r2, [r0, #0]
 800b752:	7043      	strb	r3, [r0, #1]
 800b754:	dd29      	ble.n	800b7aa <__exponent+0x68>
 800b756:	f10d 0307 	add.w	r3, sp, #7
 800b75a:	461d      	mov	r5, r3
 800b75c:	270a      	movs	r7, #10
 800b75e:	461a      	mov	r2, r3
 800b760:	fbb1 f6f7 	udiv	r6, r1, r7
 800b764:	fb07 1416 	mls	r4, r7, r6, r1
 800b768:	3430      	adds	r4, #48	@ 0x30
 800b76a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b76e:	460c      	mov	r4, r1
 800b770:	2c63      	cmp	r4, #99	@ 0x63
 800b772:	f103 33ff 	add.w	r3, r3, #4294967295
 800b776:	4631      	mov	r1, r6
 800b778:	dcf1      	bgt.n	800b75e <__exponent+0x1c>
 800b77a:	3130      	adds	r1, #48	@ 0x30
 800b77c:	1e94      	subs	r4, r2, #2
 800b77e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b782:	1c41      	adds	r1, r0, #1
 800b784:	4623      	mov	r3, r4
 800b786:	42ab      	cmp	r3, r5
 800b788:	d30a      	bcc.n	800b7a0 <__exponent+0x5e>
 800b78a:	f10d 0309 	add.w	r3, sp, #9
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	42ac      	cmp	r4, r5
 800b792:	bf88      	it	hi
 800b794:	2300      	movhi	r3, #0
 800b796:	3302      	adds	r3, #2
 800b798:	4403      	add	r3, r0
 800b79a:	1a18      	subs	r0, r3, r0
 800b79c:	b003      	add	sp, #12
 800b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b7a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b7a8:	e7ed      	b.n	800b786 <__exponent+0x44>
 800b7aa:	2330      	movs	r3, #48	@ 0x30
 800b7ac:	3130      	adds	r1, #48	@ 0x30
 800b7ae:	7083      	strb	r3, [r0, #2]
 800b7b0:	70c1      	strb	r1, [r0, #3]
 800b7b2:	1d03      	adds	r3, r0, #4
 800b7b4:	e7f1      	b.n	800b79a <__exponent+0x58>
	...

0800b7b8 <_printf_float>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	b08d      	sub	sp, #52	@ 0x34
 800b7be:	460c      	mov	r4, r1
 800b7c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b7c4:	4616      	mov	r6, r2
 800b7c6:	461f      	mov	r7, r3
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	f000 ff2d 	bl	800c628 <_localeconv_r>
 800b7ce:	6803      	ldr	r3, [r0, #0]
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7f4 fd5c 	bl	8000290 <strlen>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b7e0:	9005      	str	r0, [sp, #20]
 800b7e2:	3307      	adds	r3, #7
 800b7e4:	f023 0307 	bic.w	r3, r3, #7
 800b7e8:	f103 0208 	add.w	r2, r3, #8
 800b7ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b7f0:	f8d4 b000 	ldr.w	fp, [r4]
 800b7f4:	f8c8 2000 	str.w	r2, [r8]
 800b7f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	f8cd 8018 	str.w	r8, [sp, #24]
 800b806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b80a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b80e:	4b9c      	ldr	r3, [pc, #624]	@ (800ba80 <_printf_float+0x2c8>)
 800b810:	f04f 32ff 	mov.w	r2, #4294967295
 800b814:	f7f5 f99a 	bl	8000b4c <__aeabi_dcmpun>
 800b818:	bb70      	cbnz	r0, 800b878 <_printf_float+0xc0>
 800b81a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b81e:	4b98      	ldr	r3, [pc, #608]	@ (800ba80 <_printf_float+0x2c8>)
 800b820:	f04f 32ff 	mov.w	r2, #4294967295
 800b824:	f7f5 f974 	bl	8000b10 <__aeabi_dcmple>
 800b828:	bb30      	cbnz	r0, 800b878 <_printf_float+0xc0>
 800b82a:	2200      	movs	r2, #0
 800b82c:	2300      	movs	r3, #0
 800b82e:	4640      	mov	r0, r8
 800b830:	4649      	mov	r1, r9
 800b832:	f7f5 f963 	bl	8000afc <__aeabi_dcmplt>
 800b836:	b110      	cbz	r0, 800b83e <_printf_float+0x86>
 800b838:	232d      	movs	r3, #45	@ 0x2d
 800b83a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b83e:	4a91      	ldr	r2, [pc, #580]	@ (800ba84 <_printf_float+0x2cc>)
 800b840:	4b91      	ldr	r3, [pc, #580]	@ (800ba88 <_printf_float+0x2d0>)
 800b842:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b846:	bf94      	ite	ls
 800b848:	4690      	movls	r8, r2
 800b84a:	4698      	movhi	r8, r3
 800b84c:	2303      	movs	r3, #3
 800b84e:	6123      	str	r3, [r4, #16]
 800b850:	f02b 0304 	bic.w	r3, fp, #4
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	f04f 0900 	mov.w	r9, #0
 800b85a:	9700      	str	r7, [sp, #0]
 800b85c:	4633      	mov	r3, r6
 800b85e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b860:	4621      	mov	r1, r4
 800b862:	4628      	mov	r0, r5
 800b864:	f000 f9d2 	bl	800bc0c <_printf_common>
 800b868:	3001      	adds	r0, #1
 800b86a:	f040 808d 	bne.w	800b988 <_printf_float+0x1d0>
 800b86e:	f04f 30ff 	mov.w	r0, #4294967295
 800b872:	b00d      	add	sp, #52	@ 0x34
 800b874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b878:	4642      	mov	r2, r8
 800b87a:	464b      	mov	r3, r9
 800b87c:	4640      	mov	r0, r8
 800b87e:	4649      	mov	r1, r9
 800b880:	f7f5 f964 	bl	8000b4c <__aeabi_dcmpun>
 800b884:	b140      	cbz	r0, 800b898 <_printf_float+0xe0>
 800b886:	464b      	mov	r3, r9
 800b888:	2b00      	cmp	r3, #0
 800b88a:	bfbc      	itt	lt
 800b88c:	232d      	movlt	r3, #45	@ 0x2d
 800b88e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b892:	4a7e      	ldr	r2, [pc, #504]	@ (800ba8c <_printf_float+0x2d4>)
 800b894:	4b7e      	ldr	r3, [pc, #504]	@ (800ba90 <_printf_float+0x2d8>)
 800b896:	e7d4      	b.n	800b842 <_printf_float+0x8a>
 800b898:	6863      	ldr	r3, [r4, #4]
 800b89a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b89e:	9206      	str	r2, [sp, #24]
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	d13b      	bne.n	800b91c <_printf_float+0x164>
 800b8a4:	2306      	movs	r3, #6
 800b8a6:	6063      	str	r3, [r4, #4]
 800b8a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	6022      	str	r2, [r4, #0]
 800b8b0:	9303      	str	r3, [sp, #12]
 800b8b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b8b8:	ab09      	add	r3, sp, #36	@ 0x24
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	6861      	ldr	r1, [r4, #4]
 800b8be:	ec49 8b10 	vmov	d0, r8, r9
 800b8c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f7ff fed6 	bl	800b678 <__cvt>
 800b8cc:	9b06      	ldr	r3, [sp, #24]
 800b8ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8d0:	2b47      	cmp	r3, #71	@ 0x47
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	d129      	bne.n	800b92a <_printf_float+0x172>
 800b8d6:	1cc8      	adds	r0, r1, #3
 800b8d8:	db02      	blt.n	800b8e0 <_printf_float+0x128>
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	4299      	cmp	r1, r3
 800b8de:	dd41      	ble.n	800b964 <_printf_float+0x1ac>
 800b8e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b8e4:	fa5f fa8a 	uxtb.w	sl, sl
 800b8e8:	3901      	subs	r1, #1
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b8f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8f2:	f7ff ff26 	bl	800b742 <__exponent>
 800b8f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8f8:	1813      	adds	r3, r2, r0
 800b8fa:	2a01      	cmp	r2, #1
 800b8fc:	4681      	mov	r9, r0
 800b8fe:	6123      	str	r3, [r4, #16]
 800b900:	dc02      	bgt.n	800b908 <_printf_float+0x150>
 800b902:	6822      	ldr	r2, [r4, #0]
 800b904:	07d2      	lsls	r2, r2, #31
 800b906:	d501      	bpl.n	800b90c <_printf_float+0x154>
 800b908:	3301      	adds	r3, #1
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0a2      	beq.n	800b85a <_printf_float+0xa2>
 800b914:	232d      	movs	r3, #45	@ 0x2d
 800b916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b91a:	e79e      	b.n	800b85a <_printf_float+0xa2>
 800b91c:	9a06      	ldr	r2, [sp, #24]
 800b91e:	2a47      	cmp	r2, #71	@ 0x47
 800b920:	d1c2      	bne.n	800b8a8 <_printf_float+0xf0>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1c0      	bne.n	800b8a8 <_printf_float+0xf0>
 800b926:	2301      	movs	r3, #1
 800b928:	e7bd      	b.n	800b8a6 <_printf_float+0xee>
 800b92a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b92e:	d9db      	bls.n	800b8e8 <_printf_float+0x130>
 800b930:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b934:	d118      	bne.n	800b968 <_printf_float+0x1b0>
 800b936:	2900      	cmp	r1, #0
 800b938:	6863      	ldr	r3, [r4, #4]
 800b93a:	dd0b      	ble.n	800b954 <_printf_float+0x19c>
 800b93c:	6121      	str	r1, [r4, #16]
 800b93e:	b913      	cbnz	r3, 800b946 <_printf_float+0x18e>
 800b940:	6822      	ldr	r2, [r4, #0]
 800b942:	07d0      	lsls	r0, r2, #31
 800b944:	d502      	bpl.n	800b94c <_printf_float+0x194>
 800b946:	3301      	adds	r3, #1
 800b948:	440b      	add	r3, r1
 800b94a:	6123      	str	r3, [r4, #16]
 800b94c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b94e:	f04f 0900 	mov.w	r9, #0
 800b952:	e7db      	b.n	800b90c <_printf_float+0x154>
 800b954:	b913      	cbnz	r3, 800b95c <_printf_float+0x1a4>
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	07d2      	lsls	r2, r2, #31
 800b95a:	d501      	bpl.n	800b960 <_printf_float+0x1a8>
 800b95c:	3302      	adds	r3, #2
 800b95e:	e7f4      	b.n	800b94a <_printf_float+0x192>
 800b960:	2301      	movs	r3, #1
 800b962:	e7f2      	b.n	800b94a <_printf_float+0x192>
 800b964:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b96a:	4299      	cmp	r1, r3
 800b96c:	db05      	blt.n	800b97a <_printf_float+0x1c2>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	6121      	str	r1, [r4, #16]
 800b972:	07d8      	lsls	r0, r3, #31
 800b974:	d5ea      	bpl.n	800b94c <_printf_float+0x194>
 800b976:	1c4b      	adds	r3, r1, #1
 800b978:	e7e7      	b.n	800b94a <_printf_float+0x192>
 800b97a:	2900      	cmp	r1, #0
 800b97c:	bfd4      	ite	le
 800b97e:	f1c1 0202 	rsble	r2, r1, #2
 800b982:	2201      	movgt	r2, #1
 800b984:	4413      	add	r3, r2
 800b986:	e7e0      	b.n	800b94a <_printf_float+0x192>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	055a      	lsls	r2, r3, #21
 800b98c:	d407      	bmi.n	800b99e <_printf_float+0x1e6>
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	4642      	mov	r2, r8
 800b992:	4631      	mov	r1, r6
 800b994:	4628      	mov	r0, r5
 800b996:	47b8      	blx	r7
 800b998:	3001      	adds	r0, #1
 800b99a:	d12b      	bne.n	800b9f4 <_printf_float+0x23c>
 800b99c:	e767      	b.n	800b86e <_printf_float+0xb6>
 800b99e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9a2:	f240 80dd 	bls.w	800bb60 <_printf_float+0x3a8>
 800b9a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f7f5 f89b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d033      	beq.n	800ba1e <_printf_float+0x266>
 800b9b6:	4a37      	ldr	r2, [pc, #220]	@ (800ba94 <_printf_float+0x2dc>)
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4628      	mov	r0, r5
 800b9be:	47b8      	blx	r7
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	f43f af54 	beq.w	800b86e <_printf_float+0xb6>
 800b9c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b9ca:	4543      	cmp	r3, r8
 800b9cc:	db02      	blt.n	800b9d4 <_printf_float+0x21c>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	07d8      	lsls	r0, r3, #31
 800b9d2:	d50f      	bpl.n	800b9f4 <_printf_float+0x23c>
 800b9d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9d8:	4631      	mov	r1, r6
 800b9da:	4628      	mov	r0, r5
 800b9dc:	47b8      	blx	r7
 800b9de:	3001      	adds	r0, #1
 800b9e0:	f43f af45 	beq.w	800b86e <_printf_float+0xb6>
 800b9e4:	f04f 0900 	mov.w	r9, #0
 800b9e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9ec:	f104 0a1a 	add.w	sl, r4, #26
 800b9f0:	45c8      	cmp	r8, r9
 800b9f2:	dc09      	bgt.n	800ba08 <_printf_float+0x250>
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	079b      	lsls	r3, r3, #30
 800b9f8:	f100 8103 	bmi.w	800bc02 <_printf_float+0x44a>
 800b9fc:	68e0      	ldr	r0, [r4, #12]
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba00:	4298      	cmp	r0, r3
 800ba02:	bfb8      	it	lt
 800ba04:	4618      	movlt	r0, r3
 800ba06:	e734      	b.n	800b872 <_printf_float+0xba>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4628      	mov	r0, r5
 800ba10:	47b8      	blx	r7
 800ba12:	3001      	adds	r0, #1
 800ba14:	f43f af2b 	beq.w	800b86e <_printf_float+0xb6>
 800ba18:	f109 0901 	add.w	r9, r9, #1
 800ba1c:	e7e8      	b.n	800b9f0 <_printf_float+0x238>
 800ba1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dc39      	bgt.n	800ba98 <_printf_float+0x2e0>
 800ba24:	4a1b      	ldr	r2, [pc, #108]	@ (800ba94 <_printf_float+0x2dc>)
 800ba26:	2301      	movs	r3, #1
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	47b8      	blx	r7
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f43f af1d 	beq.w	800b86e <_printf_float+0xb6>
 800ba34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ba38:	ea59 0303 	orrs.w	r3, r9, r3
 800ba3c:	d102      	bne.n	800ba44 <_printf_float+0x28c>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	07d9      	lsls	r1, r3, #31
 800ba42:	d5d7      	bpl.n	800b9f4 <_printf_float+0x23c>
 800ba44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba48:	4631      	mov	r1, r6
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	47b8      	blx	r7
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f43f af0d 	beq.w	800b86e <_printf_float+0xb6>
 800ba54:	f04f 0a00 	mov.w	sl, #0
 800ba58:	f104 0b1a 	add.w	fp, r4, #26
 800ba5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5e:	425b      	negs	r3, r3
 800ba60:	4553      	cmp	r3, sl
 800ba62:	dc01      	bgt.n	800ba68 <_printf_float+0x2b0>
 800ba64:	464b      	mov	r3, r9
 800ba66:	e793      	b.n	800b990 <_printf_float+0x1d8>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	465a      	mov	r2, fp
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b8      	blx	r7
 800ba72:	3001      	adds	r0, #1
 800ba74:	f43f aefb 	beq.w	800b86e <_printf_float+0xb6>
 800ba78:	f10a 0a01 	add.w	sl, sl, #1
 800ba7c:	e7ee      	b.n	800ba5c <_printf_float+0x2a4>
 800ba7e:	bf00      	nop
 800ba80:	7fefffff 	.word	0x7fefffff
 800ba84:	08010aa1 	.word	0x08010aa1
 800ba88:	08010aa5 	.word	0x08010aa5
 800ba8c:	08010aa9 	.word	0x08010aa9
 800ba90:	08010aad 	.word	0x08010aad
 800ba94:	08010d4f 	.word	0x08010d4f
 800ba98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ba9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ba9e:	4553      	cmp	r3, sl
 800baa0:	bfa8      	it	ge
 800baa2:	4653      	movge	r3, sl
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	4699      	mov	r9, r3
 800baa8:	dc36      	bgt.n	800bb18 <_printf_float+0x360>
 800baaa:	f04f 0b00 	mov.w	fp, #0
 800baae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bab2:	f104 021a 	add.w	r2, r4, #26
 800bab6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bab8:	9306      	str	r3, [sp, #24]
 800baba:	eba3 0309 	sub.w	r3, r3, r9
 800babe:	455b      	cmp	r3, fp
 800bac0:	dc31      	bgt.n	800bb26 <_printf_float+0x36e>
 800bac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac4:	459a      	cmp	sl, r3
 800bac6:	dc3a      	bgt.n	800bb3e <_printf_float+0x386>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	07da      	lsls	r2, r3, #31
 800bacc:	d437      	bmi.n	800bb3e <_printf_float+0x386>
 800bace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad0:	ebaa 0903 	sub.w	r9, sl, r3
 800bad4:	9b06      	ldr	r3, [sp, #24]
 800bad6:	ebaa 0303 	sub.w	r3, sl, r3
 800bada:	4599      	cmp	r9, r3
 800badc:	bfa8      	it	ge
 800bade:	4699      	movge	r9, r3
 800bae0:	f1b9 0f00 	cmp.w	r9, #0
 800bae4:	dc33      	bgt.n	800bb4e <_printf_float+0x396>
 800bae6:	f04f 0800 	mov.w	r8, #0
 800baea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baee:	f104 0b1a 	add.w	fp, r4, #26
 800baf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf4:	ebaa 0303 	sub.w	r3, sl, r3
 800baf8:	eba3 0309 	sub.w	r3, r3, r9
 800bafc:	4543      	cmp	r3, r8
 800bafe:	f77f af79 	ble.w	800b9f4 <_printf_float+0x23c>
 800bb02:	2301      	movs	r3, #1
 800bb04:	465a      	mov	r2, fp
 800bb06:	4631      	mov	r1, r6
 800bb08:	4628      	mov	r0, r5
 800bb0a:	47b8      	blx	r7
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	f43f aeae 	beq.w	800b86e <_printf_float+0xb6>
 800bb12:	f108 0801 	add.w	r8, r8, #1
 800bb16:	e7ec      	b.n	800baf2 <_printf_float+0x33a>
 800bb18:	4642      	mov	r2, r8
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	47b8      	blx	r7
 800bb20:	3001      	adds	r0, #1
 800bb22:	d1c2      	bne.n	800baaa <_printf_float+0x2f2>
 800bb24:	e6a3      	b.n	800b86e <_printf_float+0xb6>
 800bb26:	2301      	movs	r3, #1
 800bb28:	4631      	mov	r1, r6
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	9206      	str	r2, [sp, #24]
 800bb2e:	47b8      	blx	r7
 800bb30:	3001      	adds	r0, #1
 800bb32:	f43f ae9c 	beq.w	800b86e <_printf_float+0xb6>
 800bb36:	9a06      	ldr	r2, [sp, #24]
 800bb38:	f10b 0b01 	add.w	fp, fp, #1
 800bb3c:	e7bb      	b.n	800bab6 <_printf_float+0x2fe>
 800bb3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	47b8      	blx	r7
 800bb48:	3001      	adds	r0, #1
 800bb4a:	d1c0      	bne.n	800bace <_printf_float+0x316>
 800bb4c:	e68f      	b.n	800b86e <_printf_float+0xb6>
 800bb4e:	9a06      	ldr	r2, [sp, #24]
 800bb50:	464b      	mov	r3, r9
 800bb52:	4442      	add	r2, r8
 800bb54:	4631      	mov	r1, r6
 800bb56:	4628      	mov	r0, r5
 800bb58:	47b8      	blx	r7
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d1c3      	bne.n	800bae6 <_printf_float+0x32e>
 800bb5e:	e686      	b.n	800b86e <_printf_float+0xb6>
 800bb60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb64:	f1ba 0f01 	cmp.w	sl, #1
 800bb68:	dc01      	bgt.n	800bb6e <_printf_float+0x3b6>
 800bb6a:	07db      	lsls	r3, r3, #31
 800bb6c:	d536      	bpl.n	800bbdc <_printf_float+0x424>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4642      	mov	r2, r8
 800bb72:	4631      	mov	r1, r6
 800bb74:	4628      	mov	r0, r5
 800bb76:	47b8      	blx	r7
 800bb78:	3001      	adds	r0, #1
 800bb7a:	f43f ae78 	beq.w	800b86e <_printf_float+0xb6>
 800bb7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb82:	4631      	mov	r1, r6
 800bb84:	4628      	mov	r0, r5
 800bb86:	47b8      	blx	r7
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f43f ae70 	beq.w	800b86e <_printf_float+0xb6>
 800bb8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb92:	2200      	movs	r2, #0
 800bb94:	2300      	movs	r3, #0
 800bb96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb9a:	f7f4 ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb9e:	b9c0      	cbnz	r0, 800bbd2 <_printf_float+0x41a>
 800bba0:	4653      	mov	r3, sl
 800bba2:	f108 0201 	add.w	r2, r8, #1
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	d10c      	bne.n	800bbca <_printf_float+0x412>
 800bbb0:	e65d      	b.n	800b86e <_printf_float+0xb6>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	465a      	mov	r2, fp
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	4628      	mov	r0, r5
 800bbba:	47b8      	blx	r7
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	f43f ae56 	beq.w	800b86e <_printf_float+0xb6>
 800bbc2:	f108 0801 	add.w	r8, r8, #1
 800bbc6:	45d0      	cmp	r8, sl
 800bbc8:	dbf3      	blt.n	800bbb2 <_printf_float+0x3fa>
 800bbca:	464b      	mov	r3, r9
 800bbcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bbd0:	e6df      	b.n	800b992 <_printf_float+0x1da>
 800bbd2:	f04f 0800 	mov.w	r8, #0
 800bbd6:	f104 0b1a 	add.w	fp, r4, #26
 800bbda:	e7f4      	b.n	800bbc6 <_printf_float+0x40e>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4642      	mov	r2, r8
 800bbe0:	e7e1      	b.n	800bba6 <_printf_float+0x3ee>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	464a      	mov	r2, r9
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	4628      	mov	r0, r5
 800bbea:	47b8      	blx	r7
 800bbec:	3001      	adds	r0, #1
 800bbee:	f43f ae3e 	beq.w	800b86e <_printf_float+0xb6>
 800bbf2:	f108 0801 	add.w	r8, r8, #1
 800bbf6:	68e3      	ldr	r3, [r4, #12]
 800bbf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbfa:	1a5b      	subs	r3, r3, r1
 800bbfc:	4543      	cmp	r3, r8
 800bbfe:	dcf0      	bgt.n	800bbe2 <_printf_float+0x42a>
 800bc00:	e6fc      	b.n	800b9fc <_printf_float+0x244>
 800bc02:	f04f 0800 	mov.w	r8, #0
 800bc06:	f104 0919 	add.w	r9, r4, #25
 800bc0a:	e7f4      	b.n	800bbf6 <_printf_float+0x43e>

0800bc0c <_printf_common>:
 800bc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc10:	4616      	mov	r6, r2
 800bc12:	4698      	mov	r8, r3
 800bc14:	688a      	ldr	r2, [r1, #8]
 800bc16:	690b      	ldr	r3, [r1, #16]
 800bc18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	bfb8      	it	lt
 800bc20:	4613      	movlt	r3, r2
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc28:	4607      	mov	r7, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	b10a      	cbz	r2, 800bc32 <_printf_common+0x26>
 800bc2e:	3301      	adds	r3, #1
 800bc30:	6033      	str	r3, [r6, #0]
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	0699      	lsls	r1, r3, #26
 800bc36:	bf42      	ittt	mi
 800bc38:	6833      	ldrmi	r3, [r6, #0]
 800bc3a:	3302      	addmi	r3, #2
 800bc3c:	6033      	strmi	r3, [r6, #0]
 800bc3e:	6825      	ldr	r5, [r4, #0]
 800bc40:	f015 0506 	ands.w	r5, r5, #6
 800bc44:	d106      	bne.n	800bc54 <_printf_common+0x48>
 800bc46:	f104 0a19 	add.w	sl, r4, #25
 800bc4a:	68e3      	ldr	r3, [r4, #12]
 800bc4c:	6832      	ldr	r2, [r6, #0]
 800bc4e:	1a9b      	subs	r3, r3, r2
 800bc50:	42ab      	cmp	r3, r5
 800bc52:	dc26      	bgt.n	800bca2 <_printf_common+0x96>
 800bc54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc58:	6822      	ldr	r2, [r4, #0]
 800bc5a:	3b00      	subs	r3, #0
 800bc5c:	bf18      	it	ne
 800bc5e:	2301      	movne	r3, #1
 800bc60:	0692      	lsls	r2, r2, #26
 800bc62:	d42b      	bmi.n	800bcbc <_printf_common+0xb0>
 800bc64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc68:	4641      	mov	r1, r8
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	47c8      	blx	r9
 800bc6e:	3001      	adds	r0, #1
 800bc70:	d01e      	beq.n	800bcb0 <_printf_common+0xa4>
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	6922      	ldr	r2, [r4, #16]
 800bc76:	f003 0306 	and.w	r3, r3, #6
 800bc7a:	2b04      	cmp	r3, #4
 800bc7c:	bf02      	ittt	eq
 800bc7e:	68e5      	ldreq	r5, [r4, #12]
 800bc80:	6833      	ldreq	r3, [r6, #0]
 800bc82:	1aed      	subeq	r5, r5, r3
 800bc84:	68a3      	ldr	r3, [r4, #8]
 800bc86:	bf0c      	ite	eq
 800bc88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc8c:	2500      	movne	r5, #0
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	bfc4      	itt	gt
 800bc92:	1a9b      	subgt	r3, r3, r2
 800bc94:	18ed      	addgt	r5, r5, r3
 800bc96:	2600      	movs	r6, #0
 800bc98:	341a      	adds	r4, #26
 800bc9a:	42b5      	cmp	r5, r6
 800bc9c:	d11a      	bne.n	800bcd4 <_printf_common+0xc8>
 800bc9e:	2000      	movs	r0, #0
 800bca0:	e008      	b.n	800bcb4 <_printf_common+0xa8>
 800bca2:	2301      	movs	r3, #1
 800bca4:	4652      	mov	r2, sl
 800bca6:	4641      	mov	r1, r8
 800bca8:	4638      	mov	r0, r7
 800bcaa:	47c8      	blx	r9
 800bcac:	3001      	adds	r0, #1
 800bcae:	d103      	bne.n	800bcb8 <_printf_common+0xac>
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb8:	3501      	adds	r5, #1
 800bcba:	e7c6      	b.n	800bc4a <_printf_common+0x3e>
 800bcbc:	18e1      	adds	r1, r4, r3
 800bcbe:	1c5a      	adds	r2, r3, #1
 800bcc0:	2030      	movs	r0, #48	@ 0x30
 800bcc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bcc6:	4422      	add	r2, r4
 800bcc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bcd0:	3302      	adds	r3, #2
 800bcd2:	e7c7      	b.n	800bc64 <_printf_common+0x58>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	4641      	mov	r1, r8
 800bcda:	4638      	mov	r0, r7
 800bcdc:	47c8      	blx	r9
 800bcde:	3001      	adds	r0, #1
 800bce0:	d0e6      	beq.n	800bcb0 <_printf_common+0xa4>
 800bce2:	3601      	adds	r6, #1
 800bce4:	e7d9      	b.n	800bc9a <_printf_common+0x8e>
	...

0800bce8 <_printf_i>:
 800bce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcec:	7e0f      	ldrb	r7, [r1, #24]
 800bcee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bcf0:	2f78      	cmp	r7, #120	@ 0x78
 800bcf2:	4691      	mov	r9, r2
 800bcf4:	4680      	mov	r8, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	469a      	mov	sl, r3
 800bcfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bcfe:	d807      	bhi.n	800bd10 <_printf_i+0x28>
 800bd00:	2f62      	cmp	r7, #98	@ 0x62
 800bd02:	d80a      	bhi.n	800bd1a <_printf_i+0x32>
 800bd04:	2f00      	cmp	r7, #0
 800bd06:	f000 80d2 	beq.w	800beae <_printf_i+0x1c6>
 800bd0a:	2f58      	cmp	r7, #88	@ 0x58
 800bd0c:	f000 80b9 	beq.w	800be82 <_printf_i+0x19a>
 800bd10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd18:	e03a      	b.n	800bd90 <_printf_i+0xa8>
 800bd1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd1e:	2b15      	cmp	r3, #21
 800bd20:	d8f6      	bhi.n	800bd10 <_printf_i+0x28>
 800bd22:	a101      	add	r1, pc, #4	@ (adr r1, 800bd28 <_printf_i+0x40>)
 800bd24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd28:	0800bd81 	.word	0x0800bd81
 800bd2c:	0800bd95 	.word	0x0800bd95
 800bd30:	0800bd11 	.word	0x0800bd11
 800bd34:	0800bd11 	.word	0x0800bd11
 800bd38:	0800bd11 	.word	0x0800bd11
 800bd3c:	0800bd11 	.word	0x0800bd11
 800bd40:	0800bd95 	.word	0x0800bd95
 800bd44:	0800bd11 	.word	0x0800bd11
 800bd48:	0800bd11 	.word	0x0800bd11
 800bd4c:	0800bd11 	.word	0x0800bd11
 800bd50:	0800bd11 	.word	0x0800bd11
 800bd54:	0800be95 	.word	0x0800be95
 800bd58:	0800bdbf 	.word	0x0800bdbf
 800bd5c:	0800be4f 	.word	0x0800be4f
 800bd60:	0800bd11 	.word	0x0800bd11
 800bd64:	0800bd11 	.word	0x0800bd11
 800bd68:	0800beb7 	.word	0x0800beb7
 800bd6c:	0800bd11 	.word	0x0800bd11
 800bd70:	0800bdbf 	.word	0x0800bdbf
 800bd74:	0800bd11 	.word	0x0800bd11
 800bd78:	0800bd11 	.word	0x0800bd11
 800bd7c:	0800be57 	.word	0x0800be57
 800bd80:	6833      	ldr	r3, [r6, #0]
 800bd82:	1d1a      	adds	r2, r3, #4
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6032      	str	r2, [r6, #0]
 800bd88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bd90:	2301      	movs	r3, #1
 800bd92:	e09d      	b.n	800bed0 <_printf_i+0x1e8>
 800bd94:	6833      	ldr	r3, [r6, #0]
 800bd96:	6820      	ldr	r0, [r4, #0]
 800bd98:	1d19      	adds	r1, r3, #4
 800bd9a:	6031      	str	r1, [r6, #0]
 800bd9c:	0606      	lsls	r6, r0, #24
 800bd9e:	d501      	bpl.n	800bda4 <_printf_i+0xbc>
 800bda0:	681d      	ldr	r5, [r3, #0]
 800bda2:	e003      	b.n	800bdac <_printf_i+0xc4>
 800bda4:	0645      	lsls	r5, r0, #25
 800bda6:	d5fb      	bpl.n	800bda0 <_printf_i+0xb8>
 800bda8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bdac:	2d00      	cmp	r5, #0
 800bdae:	da03      	bge.n	800bdb8 <_printf_i+0xd0>
 800bdb0:	232d      	movs	r3, #45	@ 0x2d
 800bdb2:	426d      	negs	r5, r5
 800bdb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdb8:	4859      	ldr	r0, [pc, #356]	@ (800bf20 <_printf_i+0x238>)
 800bdba:	230a      	movs	r3, #10
 800bdbc:	e011      	b.n	800bde2 <_printf_i+0xfa>
 800bdbe:	6821      	ldr	r1, [r4, #0]
 800bdc0:	6833      	ldr	r3, [r6, #0]
 800bdc2:	0608      	lsls	r0, r1, #24
 800bdc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bdc8:	d402      	bmi.n	800bdd0 <_printf_i+0xe8>
 800bdca:	0649      	lsls	r1, r1, #25
 800bdcc:	bf48      	it	mi
 800bdce:	b2ad      	uxthmi	r5, r5
 800bdd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bdd2:	4853      	ldr	r0, [pc, #332]	@ (800bf20 <_printf_i+0x238>)
 800bdd4:	6033      	str	r3, [r6, #0]
 800bdd6:	bf14      	ite	ne
 800bdd8:	230a      	movne	r3, #10
 800bdda:	2308      	moveq	r3, #8
 800bddc:	2100      	movs	r1, #0
 800bdde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bde2:	6866      	ldr	r6, [r4, #4]
 800bde4:	60a6      	str	r6, [r4, #8]
 800bde6:	2e00      	cmp	r6, #0
 800bde8:	bfa2      	ittt	ge
 800bdea:	6821      	ldrge	r1, [r4, #0]
 800bdec:	f021 0104 	bicge.w	r1, r1, #4
 800bdf0:	6021      	strge	r1, [r4, #0]
 800bdf2:	b90d      	cbnz	r5, 800bdf8 <_printf_i+0x110>
 800bdf4:	2e00      	cmp	r6, #0
 800bdf6:	d04b      	beq.n	800be90 <_printf_i+0x1a8>
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800bdfe:	fb03 5711 	mls	r7, r3, r1, r5
 800be02:	5dc7      	ldrb	r7, [r0, r7]
 800be04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be08:	462f      	mov	r7, r5
 800be0a:	42bb      	cmp	r3, r7
 800be0c:	460d      	mov	r5, r1
 800be0e:	d9f4      	bls.n	800bdfa <_printf_i+0x112>
 800be10:	2b08      	cmp	r3, #8
 800be12:	d10b      	bne.n	800be2c <_printf_i+0x144>
 800be14:	6823      	ldr	r3, [r4, #0]
 800be16:	07df      	lsls	r7, r3, #31
 800be18:	d508      	bpl.n	800be2c <_printf_i+0x144>
 800be1a:	6923      	ldr	r3, [r4, #16]
 800be1c:	6861      	ldr	r1, [r4, #4]
 800be1e:	4299      	cmp	r1, r3
 800be20:	bfde      	ittt	le
 800be22:	2330      	movle	r3, #48	@ 0x30
 800be24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be2c:	1b92      	subs	r2, r2, r6
 800be2e:	6122      	str	r2, [r4, #16]
 800be30:	f8cd a000 	str.w	sl, [sp]
 800be34:	464b      	mov	r3, r9
 800be36:	aa03      	add	r2, sp, #12
 800be38:	4621      	mov	r1, r4
 800be3a:	4640      	mov	r0, r8
 800be3c:	f7ff fee6 	bl	800bc0c <_printf_common>
 800be40:	3001      	adds	r0, #1
 800be42:	d14a      	bne.n	800beda <_printf_i+0x1f2>
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	b004      	add	sp, #16
 800be4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	f043 0320 	orr.w	r3, r3, #32
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	4833      	ldr	r0, [pc, #204]	@ (800bf24 <_printf_i+0x23c>)
 800be58:	2778      	movs	r7, #120	@ 0x78
 800be5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be5e:	6823      	ldr	r3, [r4, #0]
 800be60:	6831      	ldr	r1, [r6, #0]
 800be62:	061f      	lsls	r7, r3, #24
 800be64:	f851 5b04 	ldr.w	r5, [r1], #4
 800be68:	d402      	bmi.n	800be70 <_printf_i+0x188>
 800be6a:	065f      	lsls	r7, r3, #25
 800be6c:	bf48      	it	mi
 800be6e:	b2ad      	uxthmi	r5, r5
 800be70:	6031      	str	r1, [r6, #0]
 800be72:	07d9      	lsls	r1, r3, #31
 800be74:	bf44      	itt	mi
 800be76:	f043 0320 	orrmi.w	r3, r3, #32
 800be7a:	6023      	strmi	r3, [r4, #0]
 800be7c:	b11d      	cbz	r5, 800be86 <_printf_i+0x19e>
 800be7e:	2310      	movs	r3, #16
 800be80:	e7ac      	b.n	800bddc <_printf_i+0xf4>
 800be82:	4827      	ldr	r0, [pc, #156]	@ (800bf20 <_printf_i+0x238>)
 800be84:	e7e9      	b.n	800be5a <_printf_i+0x172>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	f023 0320 	bic.w	r3, r3, #32
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	e7f6      	b.n	800be7e <_printf_i+0x196>
 800be90:	4616      	mov	r6, r2
 800be92:	e7bd      	b.n	800be10 <_printf_i+0x128>
 800be94:	6833      	ldr	r3, [r6, #0]
 800be96:	6825      	ldr	r5, [r4, #0]
 800be98:	6961      	ldr	r1, [r4, #20]
 800be9a:	1d18      	adds	r0, r3, #4
 800be9c:	6030      	str	r0, [r6, #0]
 800be9e:	062e      	lsls	r6, r5, #24
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	d501      	bpl.n	800bea8 <_printf_i+0x1c0>
 800bea4:	6019      	str	r1, [r3, #0]
 800bea6:	e002      	b.n	800beae <_printf_i+0x1c6>
 800bea8:	0668      	lsls	r0, r5, #25
 800beaa:	d5fb      	bpl.n	800bea4 <_printf_i+0x1bc>
 800beac:	8019      	strh	r1, [r3, #0]
 800beae:	2300      	movs	r3, #0
 800beb0:	6123      	str	r3, [r4, #16]
 800beb2:	4616      	mov	r6, r2
 800beb4:	e7bc      	b.n	800be30 <_printf_i+0x148>
 800beb6:	6833      	ldr	r3, [r6, #0]
 800beb8:	1d1a      	adds	r2, r3, #4
 800beba:	6032      	str	r2, [r6, #0]
 800bebc:	681e      	ldr	r6, [r3, #0]
 800bebe:	6862      	ldr	r2, [r4, #4]
 800bec0:	2100      	movs	r1, #0
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7f4 f994 	bl	80001f0 <memchr>
 800bec8:	b108      	cbz	r0, 800bece <_printf_i+0x1e6>
 800beca:	1b80      	subs	r0, r0, r6
 800becc:	6060      	str	r0, [r4, #4]
 800bece:	6863      	ldr	r3, [r4, #4]
 800bed0:	6123      	str	r3, [r4, #16]
 800bed2:	2300      	movs	r3, #0
 800bed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bed8:	e7aa      	b.n	800be30 <_printf_i+0x148>
 800beda:	6923      	ldr	r3, [r4, #16]
 800bedc:	4632      	mov	r2, r6
 800bede:	4649      	mov	r1, r9
 800bee0:	4640      	mov	r0, r8
 800bee2:	47d0      	blx	sl
 800bee4:	3001      	adds	r0, #1
 800bee6:	d0ad      	beq.n	800be44 <_printf_i+0x15c>
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	079b      	lsls	r3, r3, #30
 800beec:	d413      	bmi.n	800bf16 <_printf_i+0x22e>
 800beee:	68e0      	ldr	r0, [r4, #12]
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	4298      	cmp	r0, r3
 800bef4:	bfb8      	it	lt
 800bef6:	4618      	movlt	r0, r3
 800bef8:	e7a6      	b.n	800be48 <_printf_i+0x160>
 800befa:	2301      	movs	r3, #1
 800befc:	4632      	mov	r2, r6
 800befe:	4649      	mov	r1, r9
 800bf00:	4640      	mov	r0, r8
 800bf02:	47d0      	blx	sl
 800bf04:	3001      	adds	r0, #1
 800bf06:	d09d      	beq.n	800be44 <_printf_i+0x15c>
 800bf08:	3501      	adds	r5, #1
 800bf0a:	68e3      	ldr	r3, [r4, #12]
 800bf0c:	9903      	ldr	r1, [sp, #12]
 800bf0e:	1a5b      	subs	r3, r3, r1
 800bf10:	42ab      	cmp	r3, r5
 800bf12:	dcf2      	bgt.n	800befa <_printf_i+0x212>
 800bf14:	e7eb      	b.n	800beee <_printf_i+0x206>
 800bf16:	2500      	movs	r5, #0
 800bf18:	f104 0619 	add.w	r6, r4, #25
 800bf1c:	e7f5      	b.n	800bf0a <_printf_i+0x222>
 800bf1e:	bf00      	nop
 800bf20:	08010ab1 	.word	0x08010ab1
 800bf24:	08010ac2 	.word	0x08010ac2

0800bf28 <_scanf_float>:
 800bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	b087      	sub	sp, #28
 800bf2e:	4617      	mov	r7, r2
 800bf30:	9303      	str	r3, [sp, #12]
 800bf32:	688b      	ldr	r3, [r1, #8]
 800bf34:	1e5a      	subs	r2, r3, #1
 800bf36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bf3a:	bf81      	itttt	hi
 800bf3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bf40:	eb03 0b05 	addhi.w	fp, r3, r5
 800bf44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bf48:	608b      	strhi	r3, [r1, #8]
 800bf4a:	680b      	ldr	r3, [r1, #0]
 800bf4c:	460a      	mov	r2, r1
 800bf4e:	f04f 0500 	mov.w	r5, #0
 800bf52:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bf56:	f842 3b1c 	str.w	r3, [r2], #28
 800bf5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bf5e:	4680      	mov	r8, r0
 800bf60:	460c      	mov	r4, r1
 800bf62:	bf98      	it	ls
 800bf64:	f04f 0b00 	movls.w	fp, #0
 800bf68:	9201      	str	r2, [sp, #4]
 800bf6a:	4616      	mov	r6, r2
 800bf6c:	46aa      	mov	sl, r5
 800bf6e:	46a9      	mov	r9, r5
 800bf70:	9502      	str	r5, [sp, #8]
 800bf72:	68a2      	ldr	r2, [r4, #8]
 800bf74:	b152      	cbz	r2, 800bf8c <_scanf_float+0x64>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	2b4e      	cmp	r3, #78	@ 0x4e
 800bf7c:	d864      	bhi.n	800c048 <_scanf_float+0x120>
 800bf7e:	2b40      	cmp	r3, #64	@ 0x40
 800bf80:	d83c      	bhi.n	800bffc <_scanf_float+0xd4>
 800bf82:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bf86:	b2c8      	uxtb	r0, r1
 800bf88:	280e      	cmp	r0, #14
 800bf8a:	d93a      	bls.n	800c002 <_scanf_float+0xda>
 800bf8c:	f1b9 0f00 	cmp.w	r9, #0
 800bf90:	d003      	beq.n	800bf9a <_scanf_float+0x72>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf9e:	f1ba 0f01 	cmp.w	sl, #1
 800bfa2:	f200 8117 	bhi.w	800c1d4 <_scanf_float+0x2ac>
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	429e      	cmp	r6, r3
 800bfaa:	f200 8108 	bhi.w	800c1be <_scanf_float+0x296>
 800bfae:	2001      	movs	r0, #1
 800bfb0:	b007      	add	sp, #28
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bfba:	2a0d      	cmp	r2, #13
 800bfbc:	d8e6      	bhi.n	800bf8c <_scanf_float+0x64>
 800bfbe:	a101      	add	r1, pc, #4	@ (adr r1, 800bfc4 <_scanf_float+0x9c>)
 800bfc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bfc4:	0800c10b 	.word	0x0800c10b
 800bfc8:	0800bf8d 	.word	0x0800bf8d
 800bfcc:	0800bf8d 	.word	0x0800bf8d
 800bfd0:	0800bf8d 	.word	0x0800bf8d
 800bfd4:	0800c16b 	.word	0x0800c16b
 800bfd8:	0800c143 	.word	0x0800c143
 800bfdc:	0800bf8d 	.word	0x0800bf8d
 800bfe0:	0800bf8d 	.word	0x0800bf8d
 800bfe4:	0800c119 	.word	0x0800c119
 800bfe8:	0800bf8d 	.word	0x0800bf8d
 800bfec:	0800bf8d 	.word	0x0800bf8d
 800bff0:	0800bf8d 	.word	0x0800bf8d
 800bff4:	0800bf8d 	.word	0x0800bf8d
 800bff8:	0800c0d1 	.word	0x0800c0d1
 800bffc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c000:	e7db      	b.n	800bfba <_scanf_float+0x92>
 800c002:	290e      	cmp	r1, #14
 800c004:	d8c2      	bhi.n	800bf8c <_scanf_float+0x64>
 800c006:	a001      	add	r0, pc, #4	@ (adr r0, 800c00c <_scanf_float+0xe4>)
 800c008:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c00c:	0800c0c1 	.word	0x0800c0c1
 800c010:	0800bf8d 	.word	0x0800bf8d
 800c014:	0800c0c1 	.word	0x0800c0c1
 800c018:	0800c157 	.word	0x0800c157
 800c01c:	0800bf8d 	.word	0x0800bf8d
 800c020:	0800c069 	.word	0x0800c069
 800c024:	0800c0a7 	.word	0x0800c0a7
 800c028:	0800c0a7 	.word	0x0800c0a7
 800c02c:	0800c0a7 	.word	0x0800c0a7
 800c030:	0800c0a7 	.word	0x0800c0a7
 800c034:	0800c0a7 	.word	0x0800c0a7
 800c038:	0800c0a7 	.word	0x0800c0a7
 800c03c:	0800c0a7 	.word	0x0800c0a7
 800c040:	0800c0a7 	.word	0x0800c0a7
 800c044:	0800c0a7 	.word	0x0800c0a7
 800c048:	2b6e      	cmp	r3, #110	@ 0x6e
 800c04a:	d809      	bhi.n	800c060 <_scanf_float+0x138>
 800c04c:	2b60      	cmp	r3, #96	@ 0x60
 800c04e:	d8b2      	bhi.n	800bfb6 <_scanf_float+0x8e>
 800c050:	2b54      	cmp	r3, #84	@ 0x54
 800c052:	d07b      	beq.n	800c14c <_scanf_float+0x224>
 800c054:	2b59      	cmp	r3, #89	@ 0x59
 800c056:	d199      	bne.n	800bf8c <_scanf_float+0x64>
 800c058:	2d07      	cmp	r5, #7
 800c05a:	d197      	bne.n	800bf8c <_scanf_float+0x64>
 800c05c:	2508      	movs	r5, #8
 800c05e:	e02c      	b.n	800c0ba <_scanf_float+0x192>
 800c060:	2b74      	cmp	r3, #116	@ 0x74
 800c062:	d073      	beq.n	800c14c <_scanf_float+0x224>
 800c064:	2b79      	cmp	r3, #121	@ 0x79
 800c066:	e7f6      	b.n	800c056 <_scanf_float+0x12e>
 800c068:	6821      	ldr	r1, [r4, #0]
 800c06a:	05c8      	lsls	r0, r1, #23
 800c06c:	d51b      	bpl.n	800c0a6 <_scanf_float+0x17e>
 800c06e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c072:	6021      	str	r1, [r4, #0]
 800c074:	f109 0901 	add.w	r9, r9, #1
 800c078:	f1bb 0f00 	cmp.w	fp, #0
 800c07c:	d003      	beq.n	800c086 <_scanf_float+0x15e>
 800c07e:	3201      	adds	r2, #1
 800c080:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c084:	60a2      	str	r2, [r4, #8]
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	3b01      	subs	r3, #1
 800c08a:	60a3      	str	r3, [r4, #8]
 800c08c:	6923      	ldr	r3, [r4, #16]
 800c08e:	3301      	adds	r3, #1
 800c090:	6123      	str	r3, [r4, #16]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	3b01      	subs	r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	f340 8087 	ble.w	800c1ac <_scanf_float+0x284>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	603b      	str	r3, [r7, #0]
 800c0a4:	e765      	b.n	800bf72 <_scanf_float+0x4a>
 800c0a6:	eb1a 0105 	adds.w	r1, sl, r5
 800c0aa:	f47f af6f 	bne.w	800bf8c <_scanf_float+0x64>
 800c0ae:	6822      	ldr	r2, [r4, #0]
 800c0b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c0b4:	6022      	str	r2, [r4, #0]
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	468a      	mov	sl, r1
 800c0ba:	f806 3b01 	strb.w	r3, [r6], #1
 800c0be:	e7e2      	b.n	800c086 <_scanf_float+0x15e>
 800c0c0:	6822      	ldr	r2, [r4, #0]
 800c0c2:	0610      	lsls	r0, r2, #24
 800c0c4:	f57f af62 	bpl.w	800bf8c <_scanf_float+0x64>
 800c0c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0cc:	6022      	str	r2, [r4, #0]
 800c0ce:	e7f4      	b.n	800c0ba <_scanf_float+0x192>
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	d10e      	bne.n	800c0f4 <_scanf_float+0x1cc>
 800c0d6:	f1b9 0f00 	cmp.w	r9, #0
 800c0da:	d10e      	bne.n	800c0fa <_scanf_float+0x1d2>
 800c0dc:	6822      	ldr	r2, [r4, #0]
 800c0de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c0e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c0e6:	d108      	bne.n	800c0fa <_scanf_float+0x1d2>
 800c0e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c0ec:	6022      	str	r2, [r4, #0]
 800c0ee:	f04f 0a01 	mov.w	sl, #1
 800c0f2:	e7e2      	b.n	800c0ba <_scanf_float+0x192>
 800c0f4:	f1ba 0f02 	cmp.w	sl, #2
 800c0f8:	d055      	beq.n	800c1a6 <_scanf_float+0x27e>
 800c0fa:	2d01      	cmp	r5, #1
 800c0fc:	d002      	beq.n	800c104 <_scanf_float+0x1dc>
 800c0fe:	2d04      	cmp	r5, #4
 800c100:	f47f af44 	bne.w	800bf8c <_scanf_float+0x64>
 800c104:	3501      	adds	r5, #1
 800c106:	b2ed      	uxtb	r5, r5
 800c108:	e7d7      	b.n	800c0ba <_scanf_float+0x192>
 800c10a:	f1ba 0f01 	cmp.w	sl, #1
 800c10e:	f47f af3d 	bne.w	800bf8c <_scanf_float+0x64>
 800c112:	f04f 0a02 	mov.w	sl, #2
 800c116:	e7d0      	b.n	800c0ba <_scanf_float+0x192>
 800c118:	b97d      	cbnz	r5, 800c13a <_scanf_float+0x212>
 800c11a:	f1b9 0f00 	cmp.w	r9, #0
 800c11e:	f47f af38 	bne.w	800bf92 <_scanf_float+0x6a>
 800c122:	6822      	ldr	r2, [r4, #0]
 800c124:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c128:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c12c:	f040 8108 	bne.w	800c340 <_scanf_float+0x418>
 800c130:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c134:	6022      	str	r2, [r4, #0]
 800c136:	2501      	movs	r5, #1
 800c138:	e7bf      	b.n	800c0ba <_scanf_float+0x192>
 800c13a:	2d03      	cmp	r5, #3
 800c13c:	d0e2      	beq.n	800c104 <_scanf_float+0x1dc>
 800c13e:	2d05      	cmp	r5, #5
 800c140:	e7de      	b.n	800c100 <_scanf_float+0x1d8>
 800c142:	2d02      	cmp	r5, #2
 800c144:	f47f af22 	bne.w	800bf8c <_scanf_float+0x64>
 800c148:	2503      	movs	r5, #3
 800c14a:	e7b6      	b.n	800c0ba <_scanf_float+0x192>
 800c14c:	2d06      	cmp	r5, #6
 800c14e:	f47f af1d 	bne.w	800bf8c <_scanf_float+0x64>
 800c152:	2507      	movs	r5, #7
 800c154:	e7b1      	b.n	800c0ba <_scanf_float+0x192>
 800c156:	6822      	ldr	r2, [r4, #0]
 800c158:	0591      	lsls	r1, r2, #22
 800c15a:	f57f af17 	bpl.w	800bf8c <_scanf_float+0x64>
 800c15e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c162:	6022      	str	r2, [r4, #0]
 800c164:	f8cd 9008 	str.w	r9, [sp, #8]
 800c168:	e7a7      	b.n	800c0ba <_scanf_float+0x192>
 800c16a:	6822      	ldr	r2, [r4, #0]
 800c16c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c170:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c174:	d006      	beq.n	800c184 <_scanf_float+0x25c>
 800c176:	0550      	lsls	r0, r2, #21
 800c178:	f57f af08 	bpl.w	800bf8c <_scanf_float+0x64>
 800c17c:	f1b9 0f00 	cmp.w	r9, #0
 800c180:	f000 80de 	beq.w	800c340 <_scanf_float+0x418>
 800c184:	0591      	lsls	r1, r2, #22
 800c186:	bf58      	it	pl
 800c188:	9902      	ldrpl	r1, [sp, #8]
 800c18a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c18e:	bf58      	it	pl
 800c190:	eba9 0101 	subpl.w	r1, r9, r1
 800c194:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c198:	bf58      	it	pl
 800c19a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c19e:	6022      	str	r2, [r4, #0]
 800c1a0:	f04f 0900 	mov.w	r9, #0
 800c1a4:	e789      	b.n	800c0ba <_scanf_float+0x192>
 800c1a6:	f04f 0a03 	mov.w	sl, #3
 800c1aa:	e786      	b.n	800c0ba <_scanf_float+0x192>
 800c1ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	4798      	blx	r3
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	f43f aedb 	beq.w	800bf72 <_scanf_float+0x4a>
 800c1bc:	e6e6      	b.n	800bf8c <_scanf_float+0x64>
 800c1be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c1c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c1c6:	463a      	mov	r2, r7
 800c1c8:	4640      	mov	r0, r8
 800c1ca:	4798      	blx	r3
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	6123      	str	r3, [r4, #16]
 800c1d2:	e6e8      	b.n	800bfa6 <_scanf_float+0x7e>
 800c1d4:	1e6b      	subs	r3, r5, #1
 800c1d6:	2b06      	cmp	r3, #6
 800c1d8:	d824      	bhi.n	800c224 <_scanf_float+0x2fc>
 800c1da:	2d02      	cmp	r5, #2
 800c1dc:	d836      	bhi.n	800c24c <_scanf_float+0x324>
 800c1de:	9b01      	ldr	r3, [sp, #4]
 800c1e0:	429e      	cmp	r6, r3
 800c1e2:	f67f aee4 	bls.w	800bfae <_scanf_float+0x86>
 800c1e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c1ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c1ee:	463a      	mov	r2, r7
 800c1f0:	4640      	mov	r0, r8
 800c1f2:	4798      	blx	r3
 800c1f4:	6923      	ldr	r3, [r4, #16]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	6123      	str	r3, [r4, #16]
 800c1fa:	e7f0      	b.n	800c1de <_scanf_float+0x2b6>
 800c1fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c200:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c204:	463a      	mov	r2, r7
 800c206:	4640      	mov	r0, r8
 800c208:	4798      	blx	r3
 800c20a:	6923      	ldr	r3, [r4, #16]
 800c20c:	3b01      	subs	r3, #1
 800c20e:	6123      	str	r3, [r4, #16]
 800c210:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c214:	fa5f fa8a 	uxtb.w	sl, sl
 800c218:	f1ba 0f02 	cmp.w	sl, #2
 800c21c:	d1ee      	bne.n	800c1fc <_scanf_float+0x2d4>
 800c21e:	3d03      	subs	r5, #3
 800c220:	b2ed      	uxtb	r5, r5
 800c222:	1b76      	subs	r6, r6, r5
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	05da      	lsls	r2, r3, #23
 800c228:	d530      	bpl.n	800c28c <_scanf_float+0x364>
 800c22a:	055b      	lsls	r3, r3, #21
 800c22c:	d511      	bpl.n	800c252 <_scanf_float+0x32a>
 800c22e:	9b01      	ldr	r3, [sp, #4]
 800c230:	429e      	cmp	r6, r3
 800c232:	f67f aebc 	bls.w	800bfae <_scanf_float+0x86>
 800c236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c23a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c23e:	463a      	mov	r2, r7
 800c240:	4640      	mov	r0, r8
 800c242:	4798      	blx	r3
 800c244:	6923      	ldr	r3, [r4, #16]
 800c246:	3b01      	subs	r3, #1
 800c248:	6123      	str	r3, [r4, #16]
 800c24a:	e7f0      	b.n	800c22e <_scanf_float+0x306>
 800c24c:	46aa      	mov	sl, r5
 800c24e:	46b3      	mov	fp, r6
 800c250:	e7de      	b.n	800c210 <_scanf_float+0x2e8>
 800c252:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c256:	6923      	ldr	r3, [r4, #16]
 800c258:	2965      	cmp	r1, #101	@ 0x65
 800c25a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c25e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c262:	6123      	str	r3, [r4, #16]
 800c264:	d00c      	beq.n	800c280 <_scanf_float+0x358>
 800c266:	2945      	cmp	r1, #69	@ 0x45
 800c268:	d00a      	beq.n	800c280 <_scanf_float+0x358>
 800c26a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c26e:	463a      	mov	r2, r7
 800c270:	4640      	mov	r0, r8
 800c272:	4798      	blx	r3
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c27a:	3b01      	subs	r3, #1
 800c27c:	1eb5      	subs	r5, r6, #2
 800c27e:	6123      	str	r3, [r4, #16]
 800c280:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c284:	463a      	mov	r2, r7
 800c286:	4640      	mov	r0, r8
 800c288:	4798      	blx	r3
 800c28a:	462e      	mov	r6, r5
 800c28c:	6822      	ldr	r2, [r4, #0]
 800c28e:	f012 0210 	ands.w	r2, r2, #16
 800c292:	d001      	beq.n	800c298 <_scanf_float+0x370>
 800c294:	2000      	movs	r0, #0
 800c296:	e68b      	b.n	800bfb0 <_scanf_float+0x88>
 800c298:	7032      	strb	r2, [r6, #0]
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c2a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2a4:	d11c      	bne.n	800c2e0 <_scanf_float+0x3b8>
 800c2a6:	9b02      	ldr	r3, [sp, #8]
 800c2a8:	454b      	cmp	r3, r9
 800c2aa:	eba3 0209 	sub.w	r2, r3, r9
 800c2ae:	d123      	bne.n	800c2f8 <_scanf_float+0x3d0>
 800c2b0:	9901      	ldr	r1, [sp, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	f7ff f953 	bl	800b560 <_strtod_r>
 800c2ba:	9b03      	ldr	r3, [sp, #12]
 800c2bc:	6821      	ldr	r1, [r4, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f011 0f02 	tst.w	r1, #2
 800c2c4:	ec57 6b10 	vmov	r6, r7, d0
 800c2c8:	f103 0204 	add.w	r2, r3, #4
 800c2cc:	d01f      	beq.n	800c30e <_scanf_float+0x3e6>
 800c2ce:	9903      	ldr	r1, [sp, #12]
 800c2d0:	600a      	str	r2, [r1, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	e9c3 6700 	strd	r6, r7, [r3]
 800c2d8:	68e3      	ldr	r3, [r4, #12]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	60e3      	str	r3, [r4, #12]
 800c2de:	e7d9      	b.n	800c294 <_scanf_float+0x36c>
 800c2e0:	9b04      	ldr	r3, [sp, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0e4      	beq.n	800c2b0 <_scanf_float+0x388>
 800c2e6:	9905      	ldr	r1, [sp, #20]
 800c2e8:	230a      	movs	r3, #10
 800c2ea:	3101      	adds	r1, #1
 800c2ec:	4640      	mov	r0, r8
 800c2ee:	f7ff f9b7 	bl	800b660 <_strtol_r>
 800c2f2:	9b04      	ldr	r3, [sp, #16]
 800c2f4:	9e05      	ldr	r6, [sp, #20]
 800c2f6:	1ac2      	subs	r2, r0, r3
 800c2f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c2fc:	429e      	cmp	r6, r3
 800c2fe:	bf28      	it	cs
 800c300:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c304:	4910      	ldr	r1, [pc, #64]	@ (800c348 <_scanf_float+0x420>)
 800c306:	4630      	mov	r0, r6
 800c308:	f000 f8e4 	bl	800c4d4 <siprintf>
 800c30c:	e7d0      	b.n	800c2b0 <_scanf_float+0x388>
 800c30e:	f011 0f04 	tst.w	r1, #4
 800c312:	9903      	ldr	r1, [sp, #12]
 800c314:	600a      	str	r2, [r1, #0]
 800c316:	d1dc      	bne.n	800c2d2 <_scanf_float+0x3aa>
 800c318:	681d      	ldr	r5, [r3, #0]
 800c31a:	4632      	mov	r2, r6
 800c31c:	463b      	mov	r3, r7
 800c31e:	4630      	mov	r0, r6
 800c320:	4639      	mov	r1, r7
 800c322:	f7f4 fc13 	bl	8000b4c <__aeabi_dcmpun>
 800c326:	b128      	cbz	r0, 800c334 <_scanf_float+0x40c>
 800c328:	4808      	ldr	r0, [pc, #32]	@ (800c34c <_scanf_float+0x424>)
 800c32a:	f000 fa1d 	bl	800c768 <nanf>
 800c32e:	ed85 0a00 	vstr	s0, [r5]
 800c332:	e7d1      	b.n	800c2d8 <_scanf_float+0x3b0>
 800c334:	4630      	mov	r0, r6
 800c336:	4639      	mov	r1, r7
 800c338:	f7f4 fc66 	bl	8000c08 <__aeabi_d2f>
 800c33c:	6028      	str	r0, [r5, #0]
 800c33e:	e7cb      	b.n	800c2d8 <_scanf_float+0x3b0>
 800c340:	f04f 0900 	mov.w	r9, #0
 800c344:	e629      	b.n	800bf9a <_scanf_float+0x72>
 800c346:	bf00      	nop
 800c348:	08010ad3 	.word	0x08010ad3
 800c34c:	08010d8f 	.word	0x08010d8f

0800c350 <std>:
 800c350:	2300      	movs	r3, #0
 800c352:	b510      	push	{r4, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	e9c0 3300 	strd	r3, r3, [r0]
 800c35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c35e:	6083      	str	r3, [r0, #8]
 800c360:	8181      	strh	r1, [r0, #12]
 800c362:	6643      	str	r3, [r0, #100]	@ 0x64
 800c364:	81c2      	strh	r2, [r0, #14]
 800c366:	6183      	str	r3, [r0, #24]
 800c368:	4619      	mov	r1, r3
 800c36a:	2208      	movs	r2, #8
 800c36c:	305c      	adds	r0, #92	@ 0x5c
 800c36e:	f000 f940 	bl	800c5f2 <memset>
 800c372:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a8 <std+0x58>)
 800c374:	6263      	str	r3, [r4, #36]	@ 0x24
 800c376:	4b0d      	ldr	r3, [pc, #52]	@ (800c3ac <std+0x5c>)
 800c378:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c37a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b0 <std+0x60>)
 800c37c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c37e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b4 <std+0x64>)
 800c380:	6323      	str	r3, [r4, #48]	@ 0x30
 800c382:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b8 <std+0x68>)
 800c384:	6224      	str	r4, [r4, #32]
 800c386:	429c      	cmp	r4, r3
 800c388:	d006      	beq.n	800c398 <std+0x48>
 800c38a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c38e:	4294      	cmp	r4, r2
 800c390:	d002      	beq.n	800c398 <std+0x48>
 800c392:	33d0      	adds	r3, #208	@ 0xd0
 800c394:	429c      	cmp	r4, r3
 800c396:	d105      	bne.n	800c3a4 <std+0x54>
 800c398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a0:	f000 b9c6 	b.w	800c730 <__retarget_lock_init_recursive>
 800c3a4:	bd10      	pop	{r4, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800c569 	.word	0x0800c569
 800c3ac:	0800c58f 	.word	0x0800c58f
 800c3b0:	0800c5c7 	.word	0x0800c5c7
 800c3b4:	0800c5eb 	.word	0x0800c5eb
 800c3b8:	200005b8 	.word	0x200005b8

0800c3bc <stdio_exit_handler>:
 800c3bc:	4a02      	ldr	r2, [pc, #8]	@ (800c3c8 <stdio_exit_handler+0xc>)
 800c3be:	4903      	ldr	r1, [pc, #12]	@ (800c3cc <stdio_exit_handler+0x10>)
 800c3c0:	4803      	ldr	r0, [pc, #12]	@ (800c3d0 <stdio_exit_handler+0x14>)
 800c3c2:	f000 b869 	b.w	800c498 <_fwalk_sglue>
 800c3c6:	bf00      	nop
 800c3c8:	20000018 	.word	0x20000018
 800c3cc:	0800eeb5 	.word	0x0800eeb5
 800c3d0:	20000194 	.word	0x20000194

0800c3d4 <cleanup_stdio>:
 800c3d4:	6841      	ldr	r1, [r0, #4]
 800c3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c408 <cleanup_stdio+0x34>)
 800c3d8:	4299      	cmp	r1, r3
 800c3da:	b510      	push	{r4, lr}
 800c3dc:	4604      	mov	r4, r0
 800c3de:	d001      	beq.n	800c3e4 <cleanup_stdio+0x10>
 800c3e0:	f002 fd68 	bl	800eeb4 <_fflush_r>
 800c3e4:	68a1      	ldr	r1, [r4, #8]
 800c3e6:	4b09      	ldr	r3, [pc, #36]	@ (800c40c <cleanup_stdio+0x38>)
 800c3e8:	4299      	cmp	r1, r3
 800c3ea:	d002      	beq.n	800c3f2 <cleanup_stdio+0x1e>
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f002 fd61 	bl	800eeb4 <_fflush_r>
 800c3f2:	68e1      	ldr	r1, [r4, #12]
 800c3f4:	4b06      	ldr	r3, [pc, #24]	@ (800c410 <cleanup_stdio+0x3c>)
 800c3f6:	4299      	cmp	r1, r3
 800c3f8:	d004      	beq.n	800c404 <cleanup_stdio+0x30>
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c400:	f002 bd58 	b.w	800eeb4 <_fflush_r>
 800c404:	bd10      	pop	{r4, pc}
 800c406:	bf00      	nop
 800c408:	200005b8 	.word	0x200005b8
 800c40c:	20000620 	.word	0x20000620
 800c410:	20000688 	.word	0x20000688

0800c414 <global_stdio_init.part.0>:
 800c414:	b510      	push	{r4, lr}
 800c416:	4b0b      	ldr	r3, [pc, #44]	@ (800c444 <global_stdio_init.part.0+0x30>)
 800c418:	4c0b      	ldr	r4, [pc, #44]	@ (800c448 <global_stdio_init.part.0+0x34>)
 800c41a:	4a0c      	ldr	r2, [pc, #48]	@ (800c44c <global_stdio_init.part.0+0x38>)
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	4620      	mov	r0, r4
 800c420:	2200      	movs	r2, #0
 800c422:	2104      	movs	r1, #4
 800c424:	f7ff ff94 	bl	800c350 <std>
 800c428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c42c:	2201      	movs	r2, #1
 800c42e:	2109      	movs	r1, #9
 800c430:	f7ff ff8e 	bl	800c350 <std>
 800c434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c438:	2202      	movs	r2, #2
 800c43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43e:	2112      	movs	r1, #18
 800c440:	f7ff bf86 	b.w	800c350 <std>
 800c444:	200006f0 	.word	0x200006f0
 800c448:	200005b8 	.word	0x200005b8
 800c44c:	0800c3bd 	.word	0x0800c3bd

0800c450 <__sfp_lock_acquire>:
 800c450:	4801      	ldr	r0, [pc, #4]	@ (800c458 <__sfp_lock_acquire+0x8>)
 800c452:	f000 b96e 	b.w	800c732 <__retarget_lock_acquire_recursive>
 800c456:	bf00      	nop
 800c458:	200006f9 	.word	0x200006f9

0800c45c <__sfp_lock_release>:
 800c45c:	4801      	ldr	r0, [pc, #4]	@ (800c464 <__sfp_lock_release+0x8>)
 800c45e:	f000 b969 	b.w	800c734 <__retarget_lock_release_recursive>
 800c462:	bf00      	nop
 800c464:	200006f9 	.word	0x200006f9

0800c468 <__sinit>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	4604      	mov	r4, r0
 800c46c:	f7ff fff0 	bl	800c450 <__sfp_lock_acquire>
 800c470:	6a23      	ldr	r3, [r4, #32]
 800c472:	b11b      	cbz	r3, 800c47c <__sinit+0x14>
 800c474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c478:	f7ff bff0 	b.w	800c45c <__sfp_lock_release>
 800c47c:	4b04      	ldr	r3, [pc, #16]	@ (800c490 <__sinit+0x28>)
 800c47e:	6223      	str	r3, [r4, #32]
 800c480:	4b04      	ldr	r3, [pc, #16]	@ (800c494 <__sinit+0x2c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1f5      	bne.n	800c474 <__sinit+0xc>
 800c488:	f7ff ffc4 	bl	800c414 <global_stdio_init.part.0>
 800c48c:	e7f2      	b.n	800c474 <__sinit+0xc>
 800c48e:	bf00      	nop
 800c490:	0800c3d5 	.word	0x0800c3d5
 800c494:	200006f0 	.word	0x200006f0

0800c498 <_fwalk_sglue>:
 800c498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c49c:	4607      	mov	r7, r0
 800c49e:	4688      	mov	r8, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	2600      	movs	r6, #0
 800c4a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4a8:	f1b9 0901 	subs.w	r9, r9, #1
 800c4ac:	d505      	bpl.n	800c4ba <_fwalk_sglue+0x22>
 800c4ae:	6824      	ldr	r4, [r4, #0]
 800c4b0:	2c00      	cmp	r4, #0
 800c4b2:	d1f7      	bne.n	800c4a4 <_fwalk_sglue+0xc>
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ba:	89ab      	ldrh	r3, [r5, #12]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d907      	bls.n	800c4d0 <_fwalk_sglue+0x38>
 800c4c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	d003      	beq.n	800c4d0 <_fwalk_sglue+0x38>
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	47c0      	blx	r8
 800c4ce:	4306      	orrs	r6, r0
 800c4d0:	3568      	adds	r5, #104	@ 0x68
 800c4d2:	e7e9      	b.n	800c4a8 <_fwalk_sglue+0x10>

0800c4d4 <siprintf>:
 800c4d4:	b40e      	push	{r1, r2, r3}
 800c4d6:	b500      	push	{lr}
 800c4d8:	b09c      	sub	sp, #112	@ 0x70
 800c4da:	ab1d      	add	r3, sp, #116	@ 0x74
 800c4dc:	9002      	str	r0, [sp, #8]
 800c4de:	9006      	str	r0, [sp, #24]
 800c4e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c4e4:	4809      	ldr	r0, [pc, #36]	@ (800c50c <siprintf+0x38>)
 800c4e6:	9107      	str	r1, [sp, #28]
 800c4e8:	9104      	str	r1, [sp, #16]
 800c4ea:	4909      	ldr	r1, [pc, #36]	@ (800c510 <siprintf+0x3c>)
 800c4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f0:	9105      	str	r1, [sp, #20]
 800c4f2:	6800      	ldr	r0, [r0, #0]
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	a902      	add	r1, sp, #8
 800c4f8:	f002 f842 	bl	800e580 <_svfiprintf_r>
 800c4fc:	9b02      	ldr	r3, [sp, #8]
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	b01c      	add	sp, #112	@ 0x70
 800c504:	f85d eb04 	ldr.w	lr, [sp], #4
 800c508:	b003      	add	sp, #12
 800c50a:	4770      	bx	lr
 800c50c:	20000190 	.word	0x20000190
 800c510:	ffff0208 	.word	0xffff0208

0800c514 <siscanf>:
 800c514:	b40e      	push	{r1, r2, r3}
 800c516:	b530      	push	{r4, r5, lr}
 800c518:	b09c      	sub	sp, #112	@ 0x70
 800c51a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c51c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c520:	f854 5b04 	ldr.w	r5, [r4], #4
 800c524:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c528:	9002      	str	r0, [sp, #8]
 800c52a:	9006      	str	r0, [sp, #24]
 800c52c:	f7f3 feb0 	bl	8000290 <strlen>
 800c530:	4b0b      	ldr	r3, [pc, #44]	@ (800c560 <siscanf+0x4c>)
 800c532:	9003      	str	r0, [sp, #12]
 800c534:	9007      	str	r0, [sp, #28]
 800c536:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c538:	480a      	ldr	r0, [pc, #40]	@ (800c564 <siscanf+0x50>)
 800c53a:	9401      	str	r4, [sp, #4]
 800c53c:	2300      	movs	r3, #0
 800c53e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c540:	9314      	str	r3, [sp, #80]	@ 0x50
 800c542:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c546:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c54a:	462a      	mov	r2, r5
 800c54c:	4623      	mov	r3, r4
 800c54e:	a902      	add	r1, sp, #8
 800c550:	6800      	ldr	r0, [r0, #0]
 800c552:	f002 f969 	bl	800e828 <__ssvfiscanf_r>
 800c556:	b01c      	add	sp, #112	@ 0x70
 800c558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c55c:	b003      	add	sp, #12
 800c55e:	4770      	bx	lr
 800c560:	0800c58b 	.word	0x0800c58b
 800c564:	20000190 	.word	0x20000190

0800c568 <__sread>:
 800c568:	b510      	push	{r4, lr}
 800c56a:	460c      	mov	r4, r1
 800c56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c570:	f000 f880 	bl	800c674 <_read_r>
 800c574:	2800      	cmp	r0, #0
 800c576:	bfab      	itete	ge
 800c578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c57a:	89a3      	ldrhlt	r3, [r4, #12]
 800c57c:	181b      	addge	r3, r3, r0
 800c57e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c582:	bfac      	ite	ge
 800c584:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c586:	81a3      	strhlt	r3, [r4, #12]
 800c588:	bd10      	pop	{r4, pc}

0800c58a <__seofread>:
 800c58a:	2000      	movs	r0, #0
 800c58c:	4770      	bx	lr

0800c58e <__swrite>:
 800c58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c592:	461f      	mov	r7, r3
 800c594:	898b      	ldrh	r3, [r1, #12]
 800c596:	05db      	lsls	r3, r3, #23
 800c598:	4605      	mov	r5, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	4616      	mov	r6, r2
 800c59e:	d505      	bpl.n	800c5ac <__swrite+0x1e>
 800c5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f000 f852 	bl	800c650 <_lseek_r>
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	4628      	mov	r0, r5
 800c5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c2:	f000 b879 	b.w	800c6b8 <_write_r>

0800c5c6 <__sseek>:
 800c5c6:	b510      	push	{r4, lr}
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ce:	f000 f83f 	bl	800c650 <_lseek_r>
 800c5d2:	1c43      	adds	r3, r0, #1
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	bf15      	itete	ne
 800c5d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c5da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c5de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c5e2:	81a3      	strheq	r3, [r4, #12]
 800c5e4:	bf18      	it	ne
 800c5e6:	81a3      	strhne	r3, [r4, #12]
 800c5e8:	bd10      	pop	{r4, pc}

0800c5ea <__sclose>:
 800c5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ee:	f000 b81f 	b.w	800c630 <_close_r>

0800c5f2 <memset>:
 800c5f2:	4402      	add	r2, r0
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d100      	bne.n	800c5fc <memset+0xa>
 800c5fa:	4770      	bx	lr
 800c5fc:	f803 1b01 	strb.w	r1, [r3], #1
 800c600:	e7f9      	b.n	800c5f6 <memset+0x4>

0800c602 <strncmp>:
 800c602:	b510      	push	{r4, lr}
 800c604:	b16a      	cbz	r2, 800c622 <strncmp+0x20>
 800c606:	3901      	subs	r1, #1
 800c608:	1884      	adds	r4, r0, r2
 800c60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c60e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c612:	429a      	cmp	r2, r3
 800c614:	d103      	bne.n	800c61e <strncmp+0x1c>
 800c616:	42a0      	cmp	r0, r4
 800c618:	d001      	beq.n	800c61e <strncmp+0x1c>
 800c61a:	2a00      	cmp	r2, #0
 800c61c:	d1f5      	bne.n	800c60a <strncmp+0x8>
 800c61e:	1ad0      	subs	r0, r2, r3
 800c620:	bd10      	pop	{r4, pc}
 800c622:	4610      	mov	r0, r2
 800c624:	e7fc      	b.n	800c620 <strncmp+0x1e>
	...

0800c628 <_localeconv_r>:
 800c628:	4800      	ldr	r0, [pc, #0]	@ (800c62c <_localeconv_r+0x4>)
 800c62a:	4770      	bx	lr
 800c62c:	20000114 	.word	0x20000114

0800c630 <_close_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	4d06      	ldr	r5, [pc, #24]	@ (800c64c <_close_r+0x1c>)
 800c634:	2300      	movs	r3, #0
 800c636:	4604      	mov	r4, r0
 800c638:	4608      	mov	r0, r1
 800c63a:	602b      	str	r3, [r5, #0]
 800c63c:	f7f7 fb5e 	bl	8003cfc <_close>
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	d102      	bne.n	800c64a <_close_r+0x1a>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	b103      	cbz	r3, 800c64a <_close_r+0x1a>
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	200006f4 	.word	0x200006f4

0800c650 <_lseek_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4d07      	ldr	r5, [pc, #28]	@ (800c670 <_lseek_r+0x20>)
 800c654:	4604      	mov	r4, r0
 800c656:	4608      	mov	r0, r1
 800c658:	4611      	mov	r1, r2
 800c65a:	2200      	movs	r2, #0
 800c65c:	602a      	str	r2, [r5, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	f7f7 fb73 	bl	8003d4a <_lseek>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_lseek_r+0x1e>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_lseek_r+0x1e>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	200006f4 	.word	0x200006f4

0800c674 <_read_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4d07      	ldr	r5, [pc, #28]	@ (800c694 <_read_r+0x20>)
 800c678:	4604      	mov	r4, r0
 800c67a:	4608      	mov	r0, r1
 800c67c:	4611      	mov	r1, r2
 800c67e:	2200      	movs	r2, #0
 800c680:	602a      	str	r2, [r5, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	f7f7 fb01 	bl	8003c8a <_read>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	d102      	bne.n	800c692 <_read_r+0x1e>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	b103      	cbz	r3, 800c692 <_read_r+0x1e>
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	bd38      	pop	{r3, r4, r5, pc}
 800c694:	200006f4 	.word	0x200006f4

0800c698 <_sbrk_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4d06      	ldr	r5, [pc, #24]	@ (800c6b4 <_sbrk_r+0x1c>)
 800c69c:	2300      	movs	r3, #0
 800c69e:	4604      	mov	r4, r0
 800c6a0:	4608      	mov	r0, r1
 800c6a2:	602b      	str	r3, [r5, #0]
 800c6a4:	f7f7 fb5e 	bl	8003d64 <_sbrk>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	d102      	bne.n	800c6b2 <_sbrk_r+0x1a>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	b103      	cbz	r3, 800c6b2 <_sbrk_r+0x1a>
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	200006f4 	.word	0x200006f4

0800c6b8 <_write_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4d07      	ldr	r5, [pc, #28]	@ (800c6d8 <_write_r+0x20>)
 800c6bc:	4604      	mov	r4, r0
 800c6be:	4608      	mov	r0, r1
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	602a      	str	r2, [r5, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f7f7 fafc 	bl	8003cc4 <_write>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_write_r+0x1e>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_write_r+0x1e>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	200006f4 	.word	0x200006f4

0800c6dc <__errno>:
 800c6dc:	4b01      	ldr	r3, [pc, #4]	@ (800c6e4 <__errno+0x8>)
 800c6de:	6818      	ldr	r0, [r3, #0]
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	20000190 	.word	0x20000190

0800c6e8 <__libc_init_array>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	4d0d      	ldr	r5, [pc, #52]	@ (800c720 <__libc_init_array+0x38>)
 800c6ec:	4c0d      	ldr	r4, [pc, #52]	@ (800c724 <__libc_init_array+0x3c>)
 800c6ee:	1b64      	subs	r4, r4, r5
 800c6f0:	10a4      	asrs	r4, r4, #2
 800c6f2:	2600      	movs	r6, #0
 800c6f4:	42a6      	cmp	r6, r4
 800c6f6:	d109      	bne.n	800c70c <__libc_init_array+0x24>
 800c6f8:	4d0b      	ldr	r5, [pc, #44]	@ (800c728 <__libc_init_array+0x40>)
 800c6fa:	4c0c      	ldr	r4, [pc, #48]	@ (800c72c <__libc_init_array+0x44>)
 800c6fc:	f004 f86c 	bl	80107d8 <_init>
 800c700:	1b64      	subs	r4, r4, r5
 800c702:	10a4      	asrs	r4, r4, #2
 800c704:	2600      	movs	r6, #0
 800c706:	42a6      	cmp	r6, r4
 800c708:	d105      	bne.n	800c716 <__libc_init_array+0x2e>
 800c70a:	bd70      	pop	{r4, r5, r6, pc}
 800c70c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c710:	4798      	blx	r3
 800c712:	3601      	adds	r6, #1
 800c714:	e7ee      	b.n	800c6f4 <__libc_init_array+0xc>
 800c716:	f855 3b04 	ldr.w	r3, [r5], #4
 800c71a:	4798      	blx	r3
 800c71c:	3601      	adds	r6, #1
 800c71e:	e7f2      	b.n	800c706 <__libc_init_array+0x1e>
 800c720:	08010f70 	.word	0x08010f70
 800c724:	08010f70 	.word	0x08010f70
 800c728:	08010f70 	.word	0x08010f70
 800c72c:	08010f74 	.word	0x08010f74

0800c730 <__retarget_lock_init_recursive>:
 800c730:	4770      	bx	lr

0800c732 <__retarget_lock_acquire_recursive>:
 800c732:	4770      	bx	lr

0800c734 <__retarget_lock_release_recursive>:
 800c734:	4770      	bx	lr

0800c736 <memcpy>:
 800c736:	440a      	add	r2, r1
 800c738:	4291      	cmp	r1, r2
 800c73a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c73e:	d100      	bne.n	800c742 <memcpy+0xc>
 800c740:	4770      	bx	lr
 800c742:	b510      	push	{r4, lr}
 800c744:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c74c:	4291      	cmp	r1, r2
 800c74e:	d1f9      	bne.n	800c744 <memcpy+0xe>
 800c750:	bd10      	pop	{r4, pc}
 800c752:	0000      	movs	r0, r0
 800c754:	0000      	movs	r0, r0
	...

0800c758 <nan>:
 800c758:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c760 <nan+0x8>
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	00000000 	.word	0x00000000
 800c764:	7ff80000 	.word	0x7ff80000

0800c768 <nanf>:
 800c768:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c770 <nanf+0x8>
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	7fc00000 	.word	0x7fc00000

0800c774 <quorem>:
 800c774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c778:	6903      	ldr	r3, [r0, #16]
 800c77a:	690c      	ldr	r4, [r1, #16]
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	4607      	mov	r7, r0
 800c780:	db7e      	blt.n	800c880 <quorem+0x10c>
 800c782:	3c01      	subs	r4, #1
 800c784:	f101 0814 	add.w	r8, r1, #20
 800c788:	00a3      	lsls	r3, r4, #2
 800c78a:	f100 0514 	add.w	r5, r0, #20
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c79a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c7aa:	d32e      	bcc.n	800c80a <quorem+0x96>
 800c7ac:	f04f 0a00 	mov.w	sl, #0
 800c7b0:	46c4      	mov	ip, r8
 800c7b2:	46ae      	mov	lr, r5
 800c7b4:	46d3      	mov	fp, sl
 800c7b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c7ba:	b298      	uxth	r0, r3
 800c7bc:	fb06 a000 	mla	r0, r6, r0, sl
 800c7c0:	0c02      	lsrs	r2, r0, #16
 800c7c2:	0c1b      	lsrs	r3, r3, #16
 800c7c4:	fb06 2303 	mla	r3, r6, r3, r2
 800c7c8:	f8de 2000 	ldr.w	r2, [lr]
 800c7cc:	b280      	uxth	r0, r0
 800c7ce:	b292      	uxth	r2, r2
 800c7d0:	1a12      	subs	r2, r2, r0
 800c7d2:	445a      	add	r2, fp
 800c7d4:	f8de 0000 	ldr.w	r0, [lr]
 800c7d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c7e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c7e6:	b292      	uxth	r2, r2
 800c7e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c7ec:	45e1      	cmp	r9, ip
 800c7ee:	f84e 2b04 	str.w	r2, [lr], #4
 800c7f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c7f6:	d2de      	bcs.n	800c7b6 <quorem+0x42>
 800c7f8:	9b00      	ldr	r3, [sp, #0]
 800c7fa:	58eb      	ldr	r3, [r5, r3]
 800c7fc:	b92b      	cbnz	r3, 800c80a <quorem+0x96>
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	3b04      	subs	r3, #4
 800c802:	429d      	cmp	r5, r3
 800c804:	461a      	mov	r2, r3
 800c806:	d32f      	bcc.n	800c868 <quorem+0xf4>
 800c808:	613c      	str	r4, [r7, #16]
 800c80a:	4638      	mov	r0, r7
 800c80c:	f001 fc5a 	bl	800e0c4 <__mcmp>
 800c810:	2800      	cmp	r0, #0
 800c812:	db25      	blt.n	800c860 <quorem+0xec>
 800c814:	4629      	mov	r1, r5
 800c816:	2000      	movs	r0, #0
 800c818:	f858 2b04 	ldr.w	r2, [r8], #4
 800c81c:	f8d1 c000 	ldr.w	ip, [r1]
 800c820:	fa1f fe82 	uxth.w	lr, r2
 800c824:	fa1f f38c 	uxth.w	r3, ip
 800c828:	eba3 030e 	sub.w	r3, r3, lr
 800c82c:	4403      	add	r3, r0
 800c82e:	0c12      	lsrs	r2, r2, #16
 800c830:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c834:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c838:	b29b      	uxth	r3, r3
 800c83a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c83e:	45c1      	cmp	r9, r8
 800c840:	f841 3b04 	str.w	r3, [r1], #4
 800c844:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c848:	d2e6      	bcs.n	800c818 <quorem+0xa4>
 800c84a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c84e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c852:	b922      	cbnz	r2, 800c85e <quorem+0xea>
 800c854:	3b04      	subs	r3, #4
 800c856:	429d      	cmp	r5, r3
 800c858:	461a      	mov	r2, r3
 800c85a:	d30b      	bcc.n	800c874 <quorem+0x100>
 800c85c:	613c      	str	r4, [r7, #16]
 800c85e:	3601      	adds	r6, #1
 800c860:	4630      	mov	r0, r6
 800c862:	b003      	add	sp, #12
 800c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c868:	6812      	ldr	r2, [r2, #0]
 800c86a:	3b04      	subs	r3, #4
 800c86c:	2a00      	cmp	r2, #0
 800c86e:	d1cb      	bne.n	800c808 <quorem+0x94>
 800c870:	3c01      	subs	r4, #1
 800c872:	e7c6      	b.n	800c802 <quorem+0x8e>
 800c874:	6812      	ldr	r2, [r2, #0]
 800c876:	3b04      	subs	r3, #4
 800c878:	2a00      	cmp	r2, #0
 800c87a:	d1ef      	bne.n	800c85c <quorem+0xe8>
 800c87c:	3c01      	subs	r4, #1
 800c87e:	e7ea      	b.n	800c856 <quorem+0xe2>
 800c880:	2000      	movs	r0, #0
 800c882:	e7ee      	b.n	800c862 <quorem+0xee>
 800c884:	0000      	movs	r0, r0
	...

0800c888 <_dtoa_r>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	69c7      	ldr	r7, [r0, #28]
 800c88e:	b099      	sub	sp, #100	@ 0x64
 800c890:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c894:	ec55 4b10 	vmov	r4, r5, d0
 800c898:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c89a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c89c:	4683      	mov	fp, r0
 800c89e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8a2:	b97f      	cbnz	r7, 800c8c4 <_dtoa_r+0x3c>
 800c8a4:	2010      	movs	r0, #16
 800c8a6:	f7fd ff63 	bl	800a770 <malloc>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800c8b0:	b920      	cbnz	r0, 800c8bc <_dtoa_r+0x34>
 800c8b2:	4ba7      	ldr	r3, [pc, #668]	@ (800cb50 <_dtoa_r+0x2c8>)
 800c8b4:	21ef      	movs	r1, #239	@ 0xef
 800c8b6:	48a7      	ldr	r0, [pc, #668]	@ (800cb54 <_dtoa_r+0x2cc>)
 800c8b8:	f002 fbb2 	bl	800f020 <__assert_func>
 800c8bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c8c0:	6007      	str	r7, [r0, #0]
 800c8c2:	60c7      	str	r7, [r0, #12]
 800c8c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8c8:	6819      	ldr	r1, [r3, #0]
 800c8ca:	b159      	cbz	r1, 800c8e4 <_dtoa_r+0x5c>
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	604a      	str	r2, [r1, #4]
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	4093      	lsls	r3, r2
 800c8d4:	608b      	str	r3, [r1, #8]
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f001 f970 	bl	800dbbc <_Bfree>
 800c8dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	1e2b      	subs	r3, r5, #0
 800c8e6:	bfb9      	ittee	lt
 800c8e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c8ec:	9303      	strlt	r3, [sp, #12]
 800c8ee:	2300      	movge	r3, #0
 800c8f0:	6033      	strge	r3, [r6, #0]
 800c8f2:	9f03      	ldr	r7, [sp, #12]
 800c8f4:	4b98      	ldr	r3, [pc, #608]	@ (800cb58 <_dtoa_r+0x2d0>)
 800c8f6:	bfbc      	itt	lt
 800c8f8:	2201      	movlt	r2, #1
 800c8fa:	6032      	strlt	r2, [r6, #0]
 800c8fc:	43bb      	bics	r3, r7
 800c8fe:	d112      	bne.n	800c926 <_dtoa_r+0x9e>
 800c900:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c902:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c906:	6013      	str	r3, [r2, #0]
 800c908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c90c:	4323      	orrs	r3, r4
 800c90e:	f000 854d 	beq.w	800d3ac <_dtoa_r+0xb24>
 800c912:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c914:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cb6c <_dtoa_r+0x2e4>
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 854f 	beq.w	800d3bc <_dtoa_r+0xb34>
 800c91e:	f10a 0303 	add.w	r3, sl, #3
 800c922:	f000 bd49 	b.w	800d3b8 <_dtoa_r+0xb30>
 800c926:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c92a:	2200      	movs	r2, #0
 800c92c:	ec51 0b17 	vmov	r0, r1, d7
 800c930:	2300      	movs	r3, #0
 800c932:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c936:	f7f4 f8d7 	bl	8000ae8 <__aeabi_dcmpeq>
 800c93a:	4680      	mov	r8, r0
 800c93c:	b158      	cbz	r0, 800c956 <_dtoa_r+0xce>
 800c93e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c940:	2301      	movs	r3, #1
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c946:	b113      	cbz	r3, 800c94e <_dtoa_r+0xc6>
 800c948:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c94a:	4b84      	ldr	r3, [pc, #528]	@ (800cb5c <_dtoa_r+0x2d4>)
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cb70 <_dtoa_r+0x2e8>
 800c952:	f000 bd33 	b.w	800d3bc <_dtoa_r+0xb34>
 800c956:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c95a:	aa16      	add	r2, sp, #88	@ 0x58
 800c95c:	a917      	add	r1, sp, #92	@ 0x5c
 800c95e:	4658      	mov	r0, fp
 800c960:	f001 fcd0 	bl	800e304 <__d2b>
 800c964:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c968:	4681      	mov	r9, r0
 800c96a:	2e00      	cmp	r6, #0
 800c96c:	d077      	beq.n	800ca5e <_dtoa_r+0x1d6>
 800c96e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c970:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c97c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c980:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c984:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c988:	4619      	mov	r1, r3
 800c98a:	2200      	movs	r2, #0
 800c98c:	4b74      	ldr	r3, [pc, #464]	@ (800cb60 <_dtoa_r+0x2d8>)
 800c98e:	f7f3 fc8b 	bl	80002a8 <__aeabi_dsub>
 800c992:	a369      	add	r3, pc, #420	@ (adr r3, 800cb38 <_dtoa_r+0x2b0>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	f7f3 fe3e 	bl	8000618 <__aeabi_dmul>
 800c99c:	a368      	add	r3, pc, #416	@ (adr r3, 800cb40 <_dtoa_r+0x2b8>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc83 	bl	80002ac <__adddf3>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	460d      	mov	r5, r1
 800c9ac:	f7f3 fdca 	bl	8000544 <__aeabi_i2d>
 800c9b0:	a365      	add	r3, pc, #404	@ (adr r3, 800cb48 <_dtoa_r+0x2c0>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	f7f3 fe2f 	bl	8000618 <__aeabi_dmul>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4620      	mov	r0, r4
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	f7f3 fc73 	bl	80002ac <__adddf3>
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	f7f4 f8d5 	bl	8000b78 <__aeabi_d2iz>
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	4607      	mov	r7, r0
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	f7f4 f890 	bl	8000afc <__aeabi_dcmplt>
 800c9dc:	b140      	cbz	r0, 800c9f0 <_dtoa_r+0x168>
 800c9de:	4638      	mov	r0, r7
 800c9e0:	f7f3 fdb0 	bl	8000544 <__aeabi_i2d>
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	462b      	mov	r3, r5
 800c9e8:	f7f4 f87e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c9ec:	b900      	cbnz	r0, 800c9f0 <_dtoa_r+0x168>
 800c9ee:	3f01      	subs	r7, #1
 800c9f0:	2f16      	cmp	r7, #22
 800c9f2:	d851      	bhi.n	800ca98 <_dtoa_r+0x210>
 800c9f4:	4b5b      	ldr	r3, [pc, #364]	@ (800cb64 <_dtoa_r+0x2dc>)
 800c9f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca02:	f7f4 f87b 	bl	8000afc <__aeabi_dcmplt>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d048      	beq.n	800ca9c <_dtoa_r+0x214>
 800ca0a:	3f01      	subs	r7, #1
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ca12:	1b9b      	subs	r3, r3, r6
 800ca14:	1e5a      	subs	r2, r3, #1
 800ca16:	bf44      	itt	mi
 800ca18:	f1c3 0801 	rsbmi	r8, r3, #1
 800ca1c:	2300      	movmi	r3, #0
 800ca1e:	9208      	str	r2, [sp, #32]
 800ca20:	bf54      	ite	pl
 800ca22:	f04f 0800 	movpl.w	r8, #0
 800ca26:	9308      	strmi	r3, [sp, #32]
 800ca28:	2f00      	cmp	r7, #0
 800ca2a:	db39      	blt.n	800caa0 <_dtoa_r+0x218>
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ca30:	443b      	add	r3, r7
 800ca32:	9308      	str	r3, [sp, #32]
 800ca34:	2300      	movs	r3, #0
 800ca36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca3a:	2b09      	cmp	r3, #9
 800ca3c:	d864      	bhi.n	800cb08 <_dtoa_r+0x280>
 800ca3e:	2b05      	cmp	r3, #5
 800ca40:	bfc4      	itt	gt
 800ca42:	3b04      	subgt	r3, #4
 800ca44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ca46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca48:	f1a3 0302 	sub.w	r3, r3, #2
 800ca4c:	bfcc      	ite	gt
 800ca4e:	2400      	movgt	r4, #0
 800ca50:	2401      	movle	r4, #1
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d863      	bhi.n	800cb1e <_dtoa_r+0x296>
 800ca56:	e8df f003 	tbb	[pc, r3]
 800ca5a:	372a      	.short	0x372a
 800ca5c:	5535      	.short	0x5535
 800ca5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ca62:	441e      	add	r6, r3
 800ca64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	bfc1      	itttt	gt
 800ca6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ca70:	409f      	lslgt	r7, r3
 800ca72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ca76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ca7a:	bfd6      	itet	le
 800ca7c:	f1c3 0320 	rsble	r3, r3, #32
 800ca80:	ea47 0003 	orrgt.w	r0, r7, r3
 800ca84:	fa04 f003 	lslle.w	r0, r4, r3
 800ca88:	f7f3 fd4c 	bl	8000524 <__aeabi_ui2d>
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ca92:	3e01      	subs	r6, #1
 800ca94:	9214      	str	r2, [sp, #80]	@ 0x50
 800ca96:	e777      	b.n	800c988 <_dtoa_r+0x100>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e7b8      	b.n	800ca0e <_dtoa_r+0x186>
 800ca9c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ca9e:	e7b7      	b.n	800ca10 <_dtoa_r+0x188>
 800caa0:	427b      	negs	r3, r7
 800caa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800caa4:	2300      	movs	r3, #0
 800caa6:	eba8 0807 	sub.w	r8, r8, r7
 800caaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800caac:	e7c4      	b.n	800ca38 <_dtoa_r+0x1b0>
 800caae:	2300      	movs	r3, #0
 800cab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	dc35      	bgt.n	800cb24 <_dtoa_r+0x29c>
 800cab8:	2301      	movs	r3, #1
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	9307      	str	r3, [sp, #28]
 800cabe:	461a      	mov	r2, r3
 800cac0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cac2:	e00b      	b.n	800cadc <_dtoa_r+0x254>
 800cac4:	2301      	movs	r3, #1
 800cac6:	e7f3      	b.n	800cab0 <_dtoa_r+0x228>
 800cac8:	2300      	movs	r3, #0
 800caca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cacc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cace:	18fb      	adds	r3, r7, r3
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	3301      	adds	r3, #1
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	9307      	str	r3, [sp, #28]
 800cad8:	bfb8      	it	lt
 800cada:	2301      	movlt	r3, #1
 800cadc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cae0:	2100      	movs	r1, #0
 800cae2:	2204      	movs	r2, #4
 800cae4:	f102 0514 	add.w	r5, r2, #20
 800cae8:	429d      	cmp	r5, r3
 800caea:	d91f      	bls.n	800cb2c <_dtoa_r+0x2a4>
 800caec:	6041      	str	r1, [r0, #4]
 800caee:	4658      	mov	r0, fp
 800caf0:	f001 f824 	bl	800db3c <_Balloc>
 800caf4:	4682      	mov	sl, r0
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d13c      	bne.n	800cb74 <_dtoa_r+0x2ec>
 800cafa:	4b1b      	ldr	r3, [pc, #108]	@ (800cb68 <_dtoa_r+0x2e0>)
 800cafc:	4602      	mov	r2, r0
 800cafe:	f240 11af 	movw	r1, #431	@ 0x1af
 800cb02:	e6d8      	b.n	800c8b6 <_dtoa_r+0x2e>
 800cb04:	2301      	movs	r3, #1
 800cb06:	e7e0      	b.n	800caca <_dtoa_r+0x242>
 800cb08:	2401      	movs	r4, #1
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cb10:	f04f 33ff 	mov.w	r3, #4294967295
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	9307      	str	r3, [sp, #28]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2312      	movs	r3, #18
 800cb1c:	e7d0      	b.n	800cac0 <_dtoa_r+0x238>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb22:	e7f5      	b.n	800cb10 <_dtoa_r+0x288>
 800cb24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	9307      	str	r3, [sp, #28]
 800cb2a:	e7d7      	b.n	800cadc <_dtoa_r+0x254>
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	0052      	lsls	r2, r2, #1
 800cb30:	e7d8      	b.n	800cae4 <_dtoa_r+0x25c>
 800cb32:	bf00      	nop
 800cb34:	f3af 8000 	nop.w
 800cb38:	636f4361 	.word	0x636f4361
 800cb3c:	3fd287a7 	.word	0x3fd287a7
 800cb40:	8b60c8b3 	.word	0x8b60c8b3
 800cb44:	3fc68a28 	.word	0x3fc68a28
 800cb48:	509f79fb 	.word	0x509f79fb
 800cb4c:	3fd34413 	.word	0x3fd34413
 800cb50:	08010aed 	.word	0x08010aed
 800cb54:	08010b04 	.word	0x08010b04
 800cb58:	7ff00000 	.word	0x7ff00000
 800cb5c:	08010d50 	.word	0x08010d50
 800cb60:	3ff80000 	.word	0x3ff80000
 800cb64:	08010c60 	.word	0x08010c60
 800cb68:	08010b5c 	.word	0x08010b5c
 800cb6c:	08010ae9 	.word	0x08010ae9
 800cb70:	08010d4f 	.word	0x08010d4f
 800cb74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb78:	6018      	str	r0, [r3, #0]
 800cb7a:	9b07      	ldr	r3, [sp, #28]
 800cb7c:	2b0e      	cmp	r3, #14
 800cb7e:	f200 80a4 	bhi.w	800ccca <_dtoa_r+0x442>
 800cb82:	2c00      	cmp	r4, #0
 800cb84:	f000 80a1 	beq.w	800ccca <_dtoa_r+0x442>
 800cb88:	2f00      	cmp	r7, #0
 800cb8a:	dd33      	ble.n	800cbf4 <_dtoa_r+0x36c>
 800cb8c:	4bad      	ldr	r3, [pc, #692]	@ (800ce44 <_dtoa_r+0x5bc>)
 800cb8e:	f007 020f 	and.w	r2, r7, #15
 800cb92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb96:	ed93 7b00 	vldr	d7, [r3]
 800cb9a:	05f8      	lsls	r0, r7, #23
 800cb9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cba0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cba4:	d516      	bpl.n	800cbd4 <_dtoa_r+0x34c>
 800cba6:	4ba8      	ldr	r3, [pc, #672]	@ (800ce48 <_dtoa_r+0x5c0>)
 800cba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbb0:	f7f3 fe5c 	bl	800086c <__aeabi_ddiv>
 800cbb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb8:	f004 040f 	and.w	r4, r4, #15
 800cbbc:	2603      	movs	r6, #3
 800cbbe:	4da2      	ldr	r5, [pc, #648]	@ (800ce48 <_dtoa_r+0x5c0>)
 800cbc0:	b954      	cbnz	r4, 800cbd8 <_dtoa_r+0x350>
 800cbc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbca:	f7f3 fe4f 	bl	800086c <__aeabi_ddiv>
 800cbce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbd2:	e028      	b.n	800cc26 <_dtoa_r+0x39e>
 800cbd4:	2602      	movs	r6, #2
 800cbd6:	e7f2      	b.n	800cbbe <_dtoa_r+0x336>
 800cbd8:	07e1      	lsls	r1, r4, #31
 800cbda:	d508      	bpl.n	800cbee <_dtoa_r+0x366>
 800cbdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbe4:	f7f3 fd18 	bl	8000618 <__aeabi_dmul>
 800cbe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbec:	3601      	adds	r6, #1
 800cbee:	1064      	asrs	r4, r4, #1
 800cbf0:	3508      	adds	r5, #8
 800cbf2:	e7e5      	b.n	800cbc0 <_dtoa_r+0x338>
 800cbf4:	f000 80d2 	beq.w	800cd9c <_dtoa_r+0x514>
 800cbf8:	427c      	negs	r4, r7
 800cbfa:	4b92      	ldr	r3, [pc, #584]	@ (800ce44 <_dtoa_r+0x5bc>)
 800cbfc:	4d92      	ldr	r5, [pc, #584]	@ (800ce48 <_dtoa_r+0x5c0>)
 800cbfe:	f004 020f 	and.w	r2, r4, #15
 800cc02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc0e:	f7f3 fd03 	bl	8000618 <__aeabi_dmul>
 800cc12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc16:	1124      	asrs	r4, r4, #4
 800cc18:	2300      	movs	r3, #0
 800cc1a:	2602      	movs	r6, #2
 800cc1c:	2c00      	cmp	r4, #0
 800cc1e:	f040 80b2 	bne.w	800cd86 <_dtoa_r+0x4fe>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1d3      	bne.n	800cbce <_dtoa_r+0x346>
 800cc26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 80b7 	beq.w	800cda0 <_dtoa_r+0x518>
 800cc32:	4b86      	ldr	r3, [pc, #536]	@ (800ce4c <_dtoa_r+0x5c4>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	4620      	mov	r0, r4
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f7f3 ff5f 	bl	8000afc <__aeabi_dcmplt>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	f000 80ae 	beq.w	800cda0 <_dtoa_r+0x518>
 800cc44:	9b07      	ldr	r3, [sp, #28]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f000 80aa 	beq.w	800cda0 <_dtoa_r+0x518>
 800cc4c:	9b00      	ldr	r3, [sp, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	dd37      	ble.n	800ccc2 <_dtoa_r+0x43a>
 800cc52:	1e7b      	subs	r3, r7, #1
 800cc54:	9304      	str	r3, [sp, #16]
 800cc56:	4620      	mov	r0, r4
 800cc58:	4b7d      	ldr	r3, [pc, #500]	@ (800ce50 <_dtoa_r+0x5c8>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	f7f3 fcdb 	bl	8000618 <__aeabi_dmul>
 800cc62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc66:	9c00      	ldr	r4, [sp, #0]
 800cc68:	3601      	adds	r6, #1
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7f3 fc6a 	bl	8000544 <__aeabi_i2d>
 800cc70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc74:	f7f3 fcd0 	bl	8000618 <__aeabi_dmul>
 800cc78:	4b76      	ldr	r3, [pc, #472]	@ (800ce54 <_dtoa_r+0x5cc>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f7f3 fb16 	bl	80002ac <__adddf3>
 800cc80:	4605      	mov	r5, r0
 800cc82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cc86:	2c00      	cmp	r4, #0
 800cc88:	f040 808d 	bne.w	800cda6 <_dtoa_r+0x51e>
 800cc8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc90:	4b71      	ldr	r3, [pc, #452]	@ (800ce58 <_dtoa_r+0x5d0>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	f7f3 fb08 	bl	80002a8 <__aeabi_dsub>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cca0:	462a      	mov	r2, r5
 800cca2:	4633      	mov	r3, r6
 800cca4:	f7f3 ff48 	bl	8000b38 <__aeabi_dcmpgt>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	f040 828b 	bne.w	800d1c4 <_dtoa_r+0x93c>
 800ccae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ccb8:	f7f3 ff20 	bl	8000afc <__aeabi_dcmplt>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	f040 8128 	bne.w	800cf12 <_dtoa_r+0x68a>
 800ccc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ccc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ccca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f2c0 815a 	blt.w	800cf86 <_dtoa_r+0x6fe>
 800ccd2:	2f0e      	cmp	r7, #14
 800ccd4:	f300 8157 	bgt.w	800cf86 <_dtoa_r+0x6fe>
 800ccd8:	4b5a      	ldr	r3, [pc, #360]	@ (800ce44 <_dtoa_r+0x5bc>)
 800ccda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ccde:	ed93 7b00 	vldr	d7, [r3]
 800cce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	ed8d 7b00 	vstr	d7, [sp]
 800ccea:	da03      	bge.n	800ccf4 <_dtoa_r+0x46c>
 800ccec:	9b07      	ldr	r3, [sp, #28]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f340 8101 	ble.w	800cef6 <_dtoa_r+0x66e>
 800ccf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ccf8:	4656      	mov	r6, sl
 800ccfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccfe:	4620      	mov	r0, r4
 800cd00:	4629      	mov	r1, r5
 800cd02:	f7f3 fdb3 	bl	800086c <__aeabi_ddiv>
 800cd06:	f7f3 ff37 	bl	8000b78 <__aeabi_d2iz>
 800cd0a:	4680      	mov	r8, r0
 800cd0c:	f7f3 fc1a 	bl	8000544 <__aeabi_i2d>
 800cd10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd14:	f7f3 fc80 	bl	8000618 <__aeabi_dmul>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	4629      	mov	r1, r5
 800cd20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd24:	f7f3 fac0 	bl	80002a8 <__aeabi_dsub>
 800cd28:	f806 4b01 	strb.w	r4, [r6], #1
 800cd2c:	9d07      	ldr	r5, [sp, #28]
 800cd2e:	eba6 040a 	sub.w	r4, r6, sl
 800cd32:	42a5      	cmp	r5, r4
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	f040 8117 	bne.w	800cf6a <_dtoa_r+0x6e2>
 800cd3c:	f7f3 fab6 	bl	80002ac <__adddf3>
 800cd40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd44:	4604      	mov	r4, r0
 800cd46:	460d      	mov	r5, r1
 800cd48:	f7f3 fef6 	bl	8000b38 <__aeabi_dcmpgt>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f040 80f9 	bne.w	800cf44 <_dtoa_r+0x6bc>
 800cd52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd56:	4620      	mov	r0, r4
 800cd58:	4629      	mov	r1, r5
 800cd5a:	f7f3 fec5 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd5e:	b118      	cbz	r0, 800cd68 <_dtoa_r+0x4e0>
 800cd60:	f018 0f01 	tst.w	r8, #1
 800cd64:	f040 80ee 	bne.w	800cf44 <_dtoa_r+0x6bc>
 800cd68:	4649      	mov	r1, r9
 800cd6a:	4658      	mov	r0, fp
 800cd6c:	f000 ff26 	bl	800dbbc <_Bfree>
 800cd70:	2300      	movs	r3, #0
 800cd72:	7033      	strb	r3, [r6, #0]
 800cd74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd76:	3701      	adds	r7, #1
 800cd78:	601f      	str	r7, [r3, #0]
 800cd7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 831d 	beq.w	800d3bc <_dtoa_r+0xb34>
 800cd82:	601e      	str	r6, [r3, #0]
 800cd84:	e31a      	b.n	800d3bc <_dtoa_r+0xb34>
 800cd86:	07e2      	lsls	r2, r4, #31
 800cd88:	d505      	bpl.n	800cd96 <_dtoa_r+0x50e>
 800cd8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd8e:	f7f3 fc43 	bl	8000618 <__aeabi_dmul>
 800cd92:	3601      	adds	r6, #1
 800cd94:	2301      	movs	r3, #1
 800cd96:	1064      	asrs	r4, r4, #1
 800cd98:	3508      	adds	r5, #8
 800cd9a:	e73f      	b.n	800cc1c <_dtoa_r+0x394>
 800cd9c:	2602      	movs	r6, #2
 800cd9e:	e742      	b.n	800cc26 <_dtoa_r+0x39e>
 800cda0:	9c07      	ldr	r4, [sp, #28]
 800cda2:	9704      	str	r7, [sp, #16]
 800cda4:	e761      	b.n	800cc6a <_dtoa_r+0x3e2>
 800cda6:	4b27      	ldr	r3, [pc, #156]	@ (800ce44 <_dtoa_r+0x5bc>)
 800cda8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cdaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cdae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cdb2:	4454      	add	r4, sl
 800cdb4:	2900      	cmp	r1, #0
 800cdb6:	d053      	beq.n	800ce60 <_dtoa_r+0x5d8>
 800cdb8:	4928      	ldr	r1, [pc, #160]	@ (800ce5c <_dtoa_r+0x5d4>)
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f7f3 fd56 	bl	800086c <__aeabi_ddiv>
 800cdc0:	4633      	mov	r3, r6
 800cdc2:	462a      	mov	r2, r5
 800cdc4:	f7f3 fa70 	bl	80002a8 <__aeabi_dsub>
 800cdc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cdcc:	4656      	mov	r6, sl
 800cdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdd2:	f7f3 fed1 	bl	8000b78 <__aeabi_d2iz>
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	f7f3 fbb4 	bl	8000544 <__aeabi_i2d>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cde4:	f7f3 fa60 	bl	80002a8 <__aeabi_dsub>
 800cde8:	3530      	adds	r5, #48	@ 0x30
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdf2:	f806 5b01 	strb.w	r5, [r6], #1
 800cdf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cdfa:	f7f3 fe7f 	bl	8000afc <__aeabi_dcmplt>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d171      	bne.n	800cee6 <_dtoa_r+0x65e>
 800ce02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce06:	4911      	ldr	r1, [pc, #68]	@ (800ce4c <_dtoa_r+0x5c4>)
 800ce08:	2000      	movs	r0, #0
 800ce0a:	f7f3 fa4d 	bl	80002a8 <__aeabi_dsub>
 800ce0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce12:	f7f3 fe73 	bl	8000afc <__aeabi_dcmplt>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	f040 8095 	bne.w	800cf46 <_dtoa_r+0x6be>
 800ce1c:	42a6      	cmp	r6, r4
 800ce1e:	f43f af50 	beq.w	800ccc2 <_dtoa_r+0x43a>
 800ce22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce26:	4b0a      	ldr	r3, [pc, #40]	@ (800ce50 <_dtoa_r+0x5c8>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f7f3 fbf5 	bl	8000618 <__aeabi_dmul>
 800ce2e:	4b08      	ldr	r3, [pc, #32]	@ (800ce50 <_dtoa_r+0x5c8>)
 800ce30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce34:	2200      	movs	r2, #0
 800ce36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce3a:	f7f3 fbed 	bl	8000618 <__aeabi_dmul>
 800ce3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce42:	e7c4      	b.n	800cdce <_dtoa_r+0x546>
 800ce44:	08010c60 	.word	0x08010c60
 800ce48:	08010c38 	.word	0x08010c38
 800ce4c:	3ff00000 	.word	0x3ff00000
 800ce50:	40240000 	.word	0x40240000
 800ce54:	401c0000 	.word	0x401c0000
 800ce58:	40140000 	.word	0x40140000
 800ce5c:	3fe00000 	.word	0x3fe00000
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	f7f3 fbd8 	bl	8000618 <__aeabi_dmul>
 800ce68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ce6e:	4656      	mov	r6, sl
 800ce70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce74:	f7f3 fe80 	bl	8000b78 <__aeabi_d2iz>
 800ce78:	4605      	mov	r5, r0
 800ce7a:	f7f3 fb63 	bl	8000544 <__aeabi_i2d>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce86:	f7f3 fa0f 	bl	80002a8 <__aeabi_dsub>
 800ce8a:	3530      	adds	r5, #48	@ 0x30
 800ce8c:	f806 5b01 	strb.w	r5, [r6], #1
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	42a6      	cmp	r6, r4
 800ce96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce9a:	f04f 0200 	mov.w	r2, #0
 800ce9e:	d124      	bne.n	800ceea <_dtoa_r+0x662>
 800cea0:	4bac      	ldr	r3, [pc, #688]	@ (800d154 <_dtoa_r+0x8cc>)
 800cea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cea6:	f7f3 fa01 	bl	80002ac <__adddf3>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceb2:	f7f3 fe41 	bl	8000b38 <__aeabi_dcmpgt>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d145      	bne.n	800cf46 <_dtoa_r+0x6be>
 800ceba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cebe:	49a5      	ldr	r1, [pc, #660]	@ (800d154 <_dtoa_r+0x8cc>)
 800cec0:	2000      	movs	r0, #0
 800cec2:	f7f3 f9f1 	bl	80002a8 <__aeabi_dsub>
 800cec6:	4602      	mov	r2, r0
 800cec8:	460b      	mov	r3, r1
 800ceca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cece:	f7f3 fe15 	bl	8000afc <__aeabi_dcmplt>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f43f aef5 	beq.w	800ccc2 <_dtoa_r+0x43a>
 800ced8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ceda:	1e73      	subs	r3, r6, #1
 800cedc:	9315      	str	r3, [sp, #84]	@ 0x54
 800cede:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cee2:	2b30      	cmp	r3, #48	@ 0x30
 800cee4:	d0f8      	beq.n	800ced8 <_dtoa_r+0x650>
 800cee6:	9f04      	ldr	r7, [sp, #16]
 800cee8:	e73e      	b.n	800cd68 <_dtoa_r+0x4e0>
 800ceea:	4b9b      	ldr	r3, [pc, #620]	@ (800d158 <_dtoa_r+0x8d0>)
 800ceec:	f7f3 fb94 	bl	8000618 <__aeabi_dmul>
 800cef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cef4:	e7bc      	b.n	800ce70 <_dtoa_r+0x5e8>
 800cef6:	d10c      	bne.n	800cf12 <_dtoa_r+0x68a>
 800cef8:	4b98      	ldr	r3, [pc, #608]	@ (800d15c <_dtoa_r+0x8d4>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf00:	f7f3 fb8a 	bl	8000618 <__aeabi_dmul>
 800cf04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf08:	f7f3 fe0c 	bl	8000b24 <__aeabi_dcmpge>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	f000 8157 	beq.w	800d1c0 <_dtoa_r+0x938>
 800cf12:	2400      	movs	r4, #0
 800cf14:	4625      	mov	r5, r4
 800cf16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf18:	43db      	mvns	r3, r3
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	4656      	mov	r6, sl
 800cf1e:	2700      	movs	r7, #0
 800cf20:	4621      	mov	r1, r4
 800cf22:	4658      	mov	r0, fp
 800cf24:	f000 fe4a 	bl	800dbbc <_Bfree>
 800cf28:	2d00      	cmp	r5, #0
 800cf2a:	d0dc      	beq.n	800cee6 <_dtoa_r+0x65e>
 800cf2c:	b12f      	cbz	r7, 800cf3a <_dtoa_r+0x6b2>
 800cf2e:	42af      	cmp	r7, r5
 800cf30:	d003      	beq.n	800cf3a <_dtoa_r+0x6b2>
 800cf32:	4639      	mov	r1, r7
 800cf34:	4658      	mov	r0, fp
 800cf36:	f000 fe41 	bl	800dbbc <_Bfree>
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	4658      	mov	r0, fp
 800cf3e:	f000 fe3d 	bl	800dbbc <_Bfree>
 800cf42:	e7d0      	b.n	800cee6 <_dtoa_r+0x65e>
 800cf44:	9704      	str	r7, [sp, #16]
 800cf46:	4633      	mov	r3, r6
 800cf48:	461e      	mov	r6, r3
 800cf4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf4e:	2a39      	cmp	r2, #57	@ 0x39
 800cf50:	d107      	bne.n	800cf62 <_dtoa_r+0x6da>
 800cf52:	459a      	cmp	sl, r3
 800cf54:	d1f8      	bne.n	800cf48 <_dtoa_r+0x6c0>
 800cf56:	9a04      	ldr	r2, [sp, #16]
 800cf58:	3201      	adds	r2, #1
 800cf5a:	9204      	str	r2, [sp, #16]
 800cf5c:	2230      	movs	r2, #48	@ 0x30
 800cf5e:	f88a 2000 	strb.w	r2, [sl]
 800cf62:	781a      	ldrb	r2, [r3, #0]
 800cf64:	3201      	adds	r2, #1
 800cf66:	701a      	strb	r2, [r3, #0]
 800cf68:	e7bd      	b.n	800cee6 <_dtoa_r+0x65e>
 800cf6a:	4b7b      	ldr	r3, [pc, #492]	@ (800d158 <_dtoa_r+0x8d0>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f7f3 fb53 	bl	8000618 <__aeabi_dmul>
 800cf72:	2200      	movs	r2, #0
 800cf74:	2300      	movs	r3, #0
 800cf76:	4604      	mov	r4, r0
 800cf78:	460d      	mov	r5, r1
 800cf7a:	f7f3 fdb5 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f43f aebb 	beq.w	800ccfa <_dtoa_r+0x472>
 800cf84:	e6f0      	b.n	800cd68 <_dtoa_r+0x4e0>
 800cf86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf88:	2a00      	cmp	r2, #0
 800cf8a:	f000 80db 	beq.w	800d144 <_dtoa_r+0x8bc>
 800cf8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf90:	2a01      	cmp	r2, #1
 800cf92:	f300 80bf 	bgt.w	800d114 <_dtoa_r+0x88c>
 800cf96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cf98:	2a00      	cmp	r2, #0
 800cf9a:	f000 80b7 	beq.w	800d10c <_dtoa_r+0x884>
 800cf9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cfa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cfa4:	4646      	mov	r6, r8
 800cfa6:	9a08      	ldr	r2, [sp, #32]
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	441a      	add	r2, r3
 800cfac:	4658      	mov	r0, fp
 800cfae:	4498      	add	r8, r3
 800cfb0:	9208      	str	r2, [sp, #32]
 800cfb2:	f000 ff01 	bl	800ddb8 <__i2b>
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	b15e      	cbz	r6, 800cfd2 <_dtoa_r+0x74a>
 800cfba:	9b08      	ldr	r3, [sp, #32]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dd08      	ble.n	800cfd2 <_dtoa_r+0x74a>
 800cfc0:	42b3      	cmp	r3, r6
 800cfc2:	9a08      	ldr	r2, [sp, #32]
 800cfc4:	bfa8      	it	ge
 800cfc6:	4633      	movge	r3, r6
 800cfc8:	eba8 0803 	sub.w	r8, r8, r3
 800cfcc:	1af6      	subs	r6, r6, r3
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	9308      	str	r3, [sp, #32]
 800cfd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfd4:	b1f3      	cbz	r3, 800d014 <_dtoa_r+0x78c>
 800cfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80b7 	beq.w	800d14c <_dtoa_r+0x8c4>
 800cfde:	b18c      	cbz	r4, 800d004 <_dtoa_r+0x77c>
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	4622      	mov	r2, r4
 800cfe4:	4658      	mov	r0, fp
 800cfe6:	f000 ffa7 	bl	800df38 <__pow5mult>
 800cfea:	464a      	mov	r2, r9
 800cfec:	4601      	mov	r1, r0
 800cfee:	4605      	mov	r5, r0
 800cff0:	4658      	mov	r0, fp
 800cff2:	f000 fef7 	bl	800dde4 <__multiply>
 800cff6:	4649      	mov	r1, r9
 800cff8:	9004      	str	r0, [sp, #16]
 800cffa:	4658      	mov	r0, fp
 800cffc:	f000 fdde 	bl	800dbbc <_Bfree>
 800d000:	9b04      	ldr	r3, [sp, #16]
 800d002:	4699      	mov	r9, r3
 800d004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d006:	1b1a      	subs	r2, r3, r4
 800d008:	d004      	beq.n	800d014 <_dtoa_r+0x78c>
 800d00a:	4649      	mov	r1, r9
 800d00c:	4658      	mov	r0, fp
 800d00e:	f000 ff93 	bl	800df38 <__pow5mult>
 800d012:	4681      	mov	r9, r0
 800d014:	2101      	movs	r1, #1
 800d016:	4658      	mov	r0, fp
 800d018:	f000 fece 	bl	800ddb8 <__i2b>
 800d01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d01e:	4604      	mov	r4, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	f000 81cf 	beq.w	800d3c4 <_dtoa_r+0xb3c>
 800d026:	461a      	mov	r2, r3
 800d028:	4601      	mov	r1, r0
 800d02a:	4658      	mov	r0, fp
 800d02c:	f000 ff84 	bl	800df38 <__pow5mult>
 800d030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d032:	2b01      	cmp	r3, #1
 800d034:	4604      	mov	r4, r0
 800d036:	f300 8095 	bgt.w	800d164 <_dtoa_r+0x8dc>
 800d03a:	9b02      	ldr	r3, [sp, #8]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 8087 	bne.w	800d150 <_dtoa_r+0x8c8>
 800d042:	9b03      	ldr	r3, [sp, #12]
 800d044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f040 8089 	bne.w	800d160 <_dtoa_r+0x8d8>
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d054:	0d1b      	lsrs	r3, r3, #20
 800d056:	051b      	lsls	r3, r3, #20
 800d058:	b12b      	cbz	r3, 800d066 <_dtoa_r+0x7de>
 800d05a:	9b08      	ldr	r3, [sp, #32]
 800d05c:	3301      	adds	r3, #1
 800d05e:	9308      	str	r3, [sp, #32]
 800d060:	f108 0801 	add.w	r8, r8, #1
 800d064:	2301      	movs	r3, #1
 800d066:	930a      	str	r3, [sp, #40]	@ 0x28
 800d068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f000 81b0 	beq.w	800d3d0 <_dtoa_r+0xb48>
 800d070:	6923      	ldr	r3, [r4, #16]
 800d072:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d076:	6918      	ldr	r0, [r3, #16]
 800d078:	f000 fe52 	bl	800dd20 <__hi0bits>
 800d07c:	f1c0 0020 	rsb	r0, r0, #32
 800d080:	9b08      	ldr	r3, [sp, #32]
 800d082:	4418      	add	r0, r3
 800d084:	f010 001f 	ands.w	r0, r0, #31
 800d088:	d077      	beq.n	800d17a <_dtoa_r+0x8f2>
 800d08a:	f1c0 0320 	rsb	r3, r0, #32
 800d08e:	2b04      	cmp	r3, #4
 800d090:	dd6b      	ble.n	800d16a <_dtoa_r+0x8e2>
 800d092:	9b08      	ldr	r3, [sp, #32]
 800d094:	f1c0 001c 	rsb	r0, r0, #28
 800d098:	4403      	add	r3, r0
 800d09a:	4480      	add	r8, r0
 800d09c:	4406      	add	r6, r0
 800d09e:	9308      	str	r3, [sp, #32]
 800d0a0:	f1b8 0f00 	cmp.w	r8, #0
 800d0a4:	dd05      	ble.n	800d0b2 <_dtoa_r+0x82a>
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	4658      	mov	r0, fp
 800d0ac:	f000 ff9e 	bl	800dfec <__lshift>
 800d0b0:	4681      	mov	r9, r0
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	dd05      	ble.n	800d0c4 <_dtoa_r+0x83c>
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4658      	mov	r0, fp
 800d0be:	f000 ff95 	bl	800dfec <__lshift>
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d059      	beq.n	800d17e <_dtoa_r+0x8f6>
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4648      	mov	r0, r9
 800d0ce:	f000 fff9 	bl	800e0c4 <__mcmp>
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	da53      	bge.n	800d17e <_dtoa_r+0x8f6>
 800d0d6:	1e7b      	subs	r3, r7, #1
 800d0d8:	9304      	str	r3, [sp, #16]
 800d0da:	4649      	mov	r1, r9
 800d0dc:	2300      	movs	r3, #0
 800d0de:	220a      	movs	r2, #10
 800d0e0:	4658      	mov	r0, fp
 800d0e2:	f000 fd8d 	bl	800dc00 <__multadd>
 800d0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0e8:	4681      	mov	r9, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 8172 	beq.w	800d3d4 <_dtoa_r+0xb4c>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	220a      	movs	r2, #10
 800d0f6:	4658      	mov	r0, fp
 800d0f8:	f000 fd82 	bl	800dc00 <__multadd>
 800d0fc:	9b00      	ldr	r3, [sp, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	4605      	mov	r5, r0
 800d102:	dc67      	bgt.n	800d1d4 <_dtoa_r+0x94c>
 800d104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d106:	2b02      	cmp	r3, #2
 800d108:	dc41      	bgt.n	800d18e <_dtoa_r+0x906>
 800d10a:	e063      	b.n	800d1d4 <_dtoa_r+0x94c>
 800d10c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d10e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d112:	e746      	b.n	800cfa2 <_dtoa_r+0x71a>
 800d114:	9b07      	ldr	r3, [sp, #28]
 800d116:	1e5c      	subs	r4, r3, #1
 800d118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d11a:	42a3      	cmp	r3, r4
 800d11c:	bfbf      	itttt	lt
 800d11e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d120:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d122:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d124:	1ae3      	sublt	r3, r4, r3
 800d126:	bfb4      	ite	lt
 800d128:	18d2      	addlt	r2, r2, r3
 800d12a:	1b1c      	subge	r4, r3, r4
 800d12c:	9b07      	ldr	r3, [sp, #28]
 800d12e:	bfbc      	itt	lt
 800d130:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d132:	2400      	movlt	r4, #0
 800d134:	2b00      	cmp	r3, #0
 800d136:	bfb5      	itete	lt
 800d138:	eba8 0603 	sublt.w	r6, r8, r3
 800d13c:	9b07      	ldrge	r3, [sp, #28]
 800d13e:	2300      	movlt	r3, #0
 800d140:	4646      	movge	r6, r8
 800d142:	e730      	b.n	800cfa6 <_dtoa_r+0x71e>
 800d144:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d146:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d148:	4646      	mov	r6, r8
 800d14a:	e735      	b.n	800cfb8 <_dtoa_r+0x730>
 800d14c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d14e:	e75c      	b.n	800d00a <_dtoa_r+0x782>
 800d150:	2300      	movs	r3, #0
 800d152:	e788      	b.n	800d066 <_dtoa_r+0x7de>
 800d154:	3fe00000 	.word	0x3fe00000
 800d158:	40240000 	.word	0x40240000
 800d15c:	40140000 	.word	0x40140000
 800d160:	9b02      	ldr	r3, [sp, #8]
 800d162:	e780      	b.n	800d066 <_dtoa_r+0x7de>
 800d164:	2300      	movs	r3, #0
 800d166:	930a      	str	r3, [sp, #40]	@ 0x28
 800d168:	e782      	b.n	800d070 <_dtoa_r+0x7e8>
 800d16a:	d099      	beq.n	800d0a0 <_dtoa_r+0x818>
 800d16c:	9a08      	ldr	r2, [sp, #32]
 800d16e:	331c      	adds	r3, #28
 800d170:	441a      	add	r2, r3
 800d172:	4498      	add	r8, r3
 800d174:	441e      	add	r6, r3
 800d176:	9208      	str	r2, [sp, #32]
 800d178:	e792      	b.n	800d0a0 <_dtoa_r+0x818>
 800d17a:	4603      	mov	r3, r0
 800d17c:	e7f6      	b.n	800d16c <_dtoa_r+0x8e4>
 800d17e:	9b07      	ldr	r3, [sp, #28]
 800d180:	9704      	str	r7, [sp, #16]
 800d182:	2b00      	cmp	r3, #0
 800d184:	dc20      	bgt.n	800d1c8 <_dtoa_r+0x940>
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	dd1e      	ble.n	800d1cc <_dtoa_r+0x944>
 800d18e:	9b00      	ldr	r3, [sp, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	f47f aec0 	bne.w	800cf16 <_dtoa_r+0x68e>
 800d196:	4621      	mov	r1, r4
 800d198:	2205      	movs	r2, #5
 800d19a:	4658      	mov	r0, fp
 800d19c:	f000 fd30 	bl	800dc00 <__multadd>
 800d1a0:	4601      	mov	r1, r0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	f000 ff8d 	bl	800e0c4 <__mcmp>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	f77f aeb3 	ble.w	800cf16 <_dtoa_r+0x68e>
 800d1b0:	4656      	mov	r6, sl
 800d1b2:	2331      	movs	r3, #49	@ 0x31
 800d1b4:	f806 3b01 	strb.w	r3, [r6], #1
 800d1b8:	9b04      	ldr	r3, [sp, #16]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	e6ae      	b.n	800cf1e <_dtoa_r+0x696>
 800d1c0:	9c07      	ldr	r4, [sp, #28]
 800d1c2:	9704      	str	r7, [sp, #16]
 800d1c4:	4625      	mov	r5, r4
 800d1c6:	e7f3      	b.n	800d1b0 <_dtoa_r+0x928>
 800d1c8:	9b07      	ldr	r3, [sp, #28]
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f000 8104 	beq.w	800d3dc <_dtoa_r+0xb54>
 800d1d4:	2e00      	cmp	r6, #0
 800d1d6:	dd05      	ble.n	800d1e4 <_dtoa_r+0x95c>
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4632      	mov	r2, r6
 800d1dc:	4658      	mov	r0, fp
 800d1de:	f000 ff05 	bl	800dfec <__lshift>
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d05a      	beq.n	800d2a0 <_dtoa_r+0xa18>
 800d1ea:	6869      	ldr	r1, [r5, #4]
 800d1ec:	4658      	mov	r0, fp
 800d1ee:	f000 fca5 	bl	800db3c <_Balloc>
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	b928      	cbnz	r0, 800d202 <_dtoa_r+0x97a>
 800d1f6:	4b84      	ldr	r3, [pc, #528]	@ (800d408 <_dtoa_r+0xb80>)
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d1fe:	f7ff bb5a 	b.w	800c8b6 <_dtoa_r+0x2e>
 800d202:	692a      	ldr	r2, [r5, #16]
 800d204:	3202      	adds	r2, #2
 800d206:	0092      	lsls	r2, r2, #2
 800d208:	f105 010c 	add.w	r1, r5, #12
 800d20c:	300c      	adds	r0, #12
 800d20e:	f7ff fa92 	bl	800c736 <memcpy>
 800d212:	2201      	movs	r2, #1
 800d214:	4631      	mov	r1, r6
 800d216:	4658      	mov	r0, fp
 800d218:	f000 fee8 	bl	800dfec <__lshift>
 800d21c:	f10a 0301 	add.w	r3, sl, #1
 800d220:	9307      	str	r3, [sp, #28]
 800d222:	9b00      	ldr	r3, [sp, #0]
 800d224:	4453      	add	r3, sl
 800d226:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d228:	9b02      	ldr	r3, [sp, #8]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	462f      	mov	r7, r5
 800d230:	930a      	str	r3, [sp, #40]	@ 0x28
 800d232:	4605      	mov	r5, r0
 800d234:	9b07      	ldr	r3, [sp, #28]
 800d236:	4621      	mov	r1, r4
 800d238:	3b01      	subs	r3, #1
 800d23a:	4648      	mov	r0, r9
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	f7ff fa99 	bl	800c774 <quorem>
 800d242:	4639      	mov	r1, r7
 800d244:	9002      	str	r0, [sp, #8]
 800d246:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d24a:	4648      	mov	r0, r9
 800d24c:	f000 ff3a 	bl	800e0c4 <__mcmp>
 800d250:	462a      	mov	r2, r5
 800d252:	9008      	str	r0, [sp, #32]
 800d254:	4621      	mov	r1, r4
 800d256:	4658      	mov	r0, fp
 800d258:	f000 ff50 	bl	800e0fc <__mdiff>
 800d25c:	68c2      	ldr	r2, [r0, #12]
 800d25e:	4606      	mov	r6, r0
 800d260:	bb02      	cbnz	r2, 800d2a4 <_dtoa_r+0xa1c>
 800d262:	4601      	mov	r1, r0
 800d264:	4648      	mov	r0, r9
 800d266:	f000 ff2d 	bl	800e0c4 <__mcmp>
 800d26a:	4602      	mov	r2, r0
 800d26c:	4631      	mov	r1, r6
 800d26e:	4658      	mov	r0, fp
 800d270:	920e      	str	r2, [sp, #56]	@ 0x38
 800d272:	f000 fca3 	bl	800dbbc <_Bfree>
 800d276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d278:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d27a:	9e07      	ldr	r6, [sp, #28]
 800d27c:	ea43 0102 	orr.w	r1, r3, r2
 800d280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d282:	4319      	orrs	r1, r3
 800d284:	d110      	bne.n	800d2a8 <_dtoa_r+0xa20>
 800d286:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d28a:	d029      	beq.n	800d2e0 <_dtoa_r+0xa58>
 800d28c:	9b08      	ldr	r3, [sp, #32]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	dd02      	ble.n	800d298 <_dtoa_r+0xa10>
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d298:	9b00      	ldr	r3, [sp, #0]
 800d29a:	f883 8000 	strb.w	r8, [r3]
 800d29e:	e63f      	b.n	800cf20 <_dtoa_r+0x698>
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	e7bb      	b.n	800d21c <_dtoa_r+0x994>
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	e7e1      	b.n	800d26c <_dtoa_r+0x9e4>
 800d2a8:	9b08      	ldr	r3, [sp, #32]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	db04      	blt.n	800d2b8 <_dtoa_r+0xa30>
 800d2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d2b0:	430b      	orrs	r3, r1
 800d2b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d2b4:	430b      	orrs	r3, r1
 800d2b6:	d120      	bne.n	800d2fa <_dtoa_r+0xa72>
 800d2b8:	2a00      	cmp	r2, #0
 800d2ba:	dded      	ble.n	800d298 <_dtoa_r+0xa10>
 800d2bc:	4649      	mov	r1, r9
 800d2be:	2201      	movs	r2, #1
 800d2c0:	4658      	mov	r0, fp
 800d2c2:	f000 fe93 	bl	800dfec <__lshift>
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	4681      	mov	r9, r0
 800d2ca:	f000 fefb 	bl	800e0c4 <__mcmp>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	dc03      	bgt.n	800d2da <_dtoa_r+0xa52>
 800d2d2:	d1e1      	bne.n	800d298 <_dtoa_r+0xa10>
 800d2d4:	f018 0f01 	tst.w	r8, #1
 800d2d8:	d0de      	beq.n	800d298 <_dtoa_r+0xa10>
 800d2da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2de:	d1d8      	bne.n	800d292 <_dtoa_r+0xa0a>
 800d2e0:	9a00      	ldr	r2, [sp, #0]
 800d2e2:	2339      	movs	r3, #57	@ 0x39
 800d2e4:	7013      	strb	r3, [r2, #0]
 800d2e6:	4633      	mov	r3, r6
 800d2e8:	461e      	mov	r6, r3
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d2f0:	2a39      	cmp	r2, #57	@ 0x39
 800d2f2:	d052      	beq.n	800d39a <_dtoa_r+0xb12>
 800d2f4:	3201      	adds	r2, #1
 800d2f6:	701a      	strb	r2, [r3, #0]
 800d2f8:	e612      	b.n	800cf20 <_dtoa_r+0x698>
 800d2fa:	2a00      	cmp	r2, #0
 800d2fc:	dd07      	ble.n	800d30e <_dtoa_r+0xa86>
 800d2fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d302:	d0ed      	beq.n	800d2e0 <_dtoa_r+0xa58>
 800d304:	9a00      	ldr	r2, [sp, #0]
 800d306:	f108 0301 	add.w	r3, r8, #1
 800d30a:	7013      	strb	r3, [r2, #0]
 800d30c:	e608      	b.n	800cf20 <_dtoa_r+0x698>
 800d30e:	9b07      	ldr	r3, [sp, #28]
 800d310:	9a07      	ldr	r2, [sp, #28]
 800d312:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d318:	4293      	cmp	r3, r2
 800d31a:	d028      	beq.n	800d36e <_dtoa_r+0xae6>
 800d31c:	4649      	mov	r1, r9
 800d31e:	2300      	movs	r3, #0
 800d320:	220a      	movs	r2, #10
 800d322:	4658      	mov	r0, fp
 800d324:	f000 fc6c 	bl	800dc00 <__multadd>
 800d328:	42af      	cmp	r7, r5
 800d32a:	4681      	mov	r9, r0
 800d32c:	f04f 0300 	mov.w	r3, #0
 800d330:	f04f 020a 	mov.w	r2, #10
 800d334:	4639      	mov	r1, r7
 800d336:	4658      	mov	r0, fp
 800d338:	d107      	bne.n	800d34a <_dtoa_r+0xac2>
 800d33a:	f000 fc61 	bl	800dc00 <__multadd>
 800d33e:	4607      	mov	r7, r0
 800d340:	4605      	mov	r5, r0
 800d342:	9b07      	ldr	r3, [sp, #28]
 800d344:	3301      	adds	r3, #1
 800d346:	9307      	str	r3, [sp, #28]
 800d348:	e774      	b.n	800d234 <_dtoa_r+0x9ac>
 800d34a:	f000 fc59 	bl	800dc00 <__multadd>
 800d34e:	4629      	mov	r1, r5
 800d350:	4607      	mov	r7, r0
 800d352:	2300      	movs	r3, #0
 800d354:	220a      	movs	r2, #10
 800d356:	4658      	mov	r0, fp
 800d358:	f000 fc52 	bl	800dc00 <__multadd>
 800d35c:	4605      	mov	r5, r0
 800d35e:	e7f0      	b.n	800d342 <_dtoa_r+0xaba>
 800d360:	9b00      	ldr	r3, [sp, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	bfcc      	ite	gt
 800d366:	461e      	movgt	r6, r3
 800d368:	2601      	movle	r6, #1
 800d36a:	4456      	add	r6, sl
 800d36c:	2700      	movs	r7, #0
 800d36e:	4649      	mov	r1, r9
 800d370:	2201      	movs	r2, #1
 800d372:	4658      	mov	r0, fp
 800d374:	f000 fe3a 	bl	800dfec <__lshift>
 800d378:	4621      	mov	r1, r4
 800d37a:	4681      	mov	r9, r0
 800d37c:	f000 fea2 	bl	800e0c4 <__mcmp>
 800d380:	2800      	cmp	r0, #0
 800d382:	dcb0      	bgt.n	800d2e6 <_dtoa_r+0xa5e>
 800d384:	d102      	bne.n	800d38c <_dtoa_r+0xb04>
 800d386:	f018 0f01 	tst.w	r8, #1
 800d38a:	d1ac      	bne.n	800d2e6 <_dtoa_r+0xa5e>
 800d38c:	4633      	mov	r3, r6
 800d38e:	461e      	mov	r6, r3
 800d390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d394:	2a30      	cmp	r2, #48	@ 0x30
 800d396:	d0fa      	beq.n	800d38e <_dtoa_r+0xb06>
 800d398:	e5c2      	b.n	800cf20 <_dtoa_r+0x698>
 800d39a:	459a      	cmp	sl, r3
 800d39c:	d1a4      	bne.n	800d2e8 <_dtoa_r+0xa60>
 800d39e:	9b04      	ldr	r3, [sp, #16]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	9304      	str	r3, [sp, #16]
 800d3a4:	2331      	movs	r3, #49	@ 0x31
 800d3a6:	f88a 3000 	strb.w	r3, [sl]
 800d3aa:	e5b9      	b.n	800cf20 <_dtoa_r+0x698>
 800d3ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d40c <_dtoa_r+0xb84>
 800d3b2:	b11b      	cbz	r3, 800d3bc <_dtoa_r+0xb34>
 800d3b4:	f10a 0308 	add.w	r3, sl, #8
 800d3b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d3ba:	6013      	str	r3, [r2, #0]
 800d3bc:	4650      	mov	r0, sl
 800d3be:	b019      	add	sp, #100	@ 0x64
 800d3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	f77f ae37 	ble.w	800d03a <_dtoa_r+0x7b2>
 800d3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3d0:	2001      	movs	r0, #1
 800d3d2:	e655      	b.n	800d080 <_dtoa_r+0x7f8>
 800d3d4:	9b00      	ldr	r3, [sp, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f77f aed6 	ble.w	800d188 <_dtoa_r+0x900>
 800d3dc:	4656      	mov	r6, sl
 800d3de:	4621      	mov	r1, r4
 800d3e0:	4648      	mov	r0, r9
 800d3e2:	f7ff f9c7 	bl	800c774 <quorem>
 800d3e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d3ea:	f806 8b01 	strb.w	r8, [r6], #1
 800d3ee:	9b00      	ldr	r3, [sp, #0]
 800d3f0:	eba6 020a 	sub.w	r2, r6, sl
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	ddb3      	ble.n	800d360 <_dtoa_r+0xad8>
 800d3f8:	4649      	mov	r1, r9
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	220a      	movs	r2, #10
 800d3fe:	4658      	mov	r0, fp
 800d400:	f000 fbfe 	bl	800dc00 <__multadd>
 800d404:	4681      	mov	r9, r0
 800d406:	e7ea      	b.n	800d3de <_dtoa_r+0xb56>
 800d408:	08010b5c 	.word	0x08010b5c
 800d40c:	08010ae0 	.word	0x08010ae0

0800d410 <_free_r>:
 800d410:	b538      	push	{r3, r4, r5, lr}
 800d412:	4605      	mov	r5, r0
 800d414:	2900      	cmp	r1, #0
 800d416:	d041      	beq.n	800d49c <_free_r+0x8c>
 800d418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d41c:	1f0c      	subs	r4, r1, #4
 800d41e:	2b00      	cmp	r3, #0
 800d420:	bfb8      	it	lt
 800d422:	18e4      	addlt	r4, r4, r3
 800d424:	f7fd fa56 	bl	800a8d4 <__malloc_lock>
 800d428:	4a1d      	ldr	r2, [pc, #116]	@ (800d4a0 <_free_r+0x90>)
 800d42a:	6813      	ldr	r3, [r2, #0]
 800d42c:	b933      	cbnz	r3, 800d43c <_free_r+0x2c>
 800d42e:	6063      	str	r3, [r4, #4]
 800d430:	6014      	str	r4, [r2, #0]
 800d432:	4628      	mov	r0, r5
 800d434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d438:	f7fd ba52 	b.w	800a8e0 <__malloc_unlock>
 800d43c:	42a3      	cmp	r3, r4
 800d43e:	d908      	bls.n	800d452 <_free_r+0x42>
 800d440:	6820      	ldr	r0, [r4, #0]
 800d442:	1821      	adds	r1, r4, r0
 800d444:	428b      	cmp	r3, r1
 800d446:	bf01      	itttt	eq
 800d448:	6819      	ldreq	r1, [r3, #0]
 800d44a:	685b      	ldreq	r3, [r3, #4]
 800d44c:	1809      	addeq	r1, r1, r0
 800d44e:	6021      	streq	r1, [r4, #0]
 800d450:	e7ed      	b.n	800d42e <_free_r+0x1e>
 800d452:	461a      	mov	r2, r3
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	b10b      	cbz	r3, 800d45c <_free_r+0x4c>
 800d458:	42a3      	cmp	r3, r4
 800d45a:	d9fa      	bls.n	800d452 <_free_r+0x42>
 800d45c:	6811      	ldr	r1, [r2, #0]
 800d45e:	1850      	adds	r0, r2, r1
 800d460:	42a0      	cmp	r0, r4
 800d462:	d10b      	bne.n	800d47c <_free_r+0x6c>
 800d464:	6820      	ldr	r0, [r4, #0]
 800d466:	4401      	add	r1, r0
 800d468:	1850      	adds	r0, r2, r1
 800d46a:	4283      	cmp	r3, r0
 800d46c:	6011      	str	r1, [r2, #0]
 800d46e:	d1e0      	bne.n	800d432 <_free_r+0x22>
 800d470:	6818      	ldr	r0, [r3, #0]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	6053      	str	r3, [r2, #4]
 800d476:	4408      	add	r0, r1
 800d478:	6010      	str	r0, [r2, #0]
 800d47a:	e7da      	b.n	800d432 <_free_r+0x22>
 800d47c:	d902      	bls.n	800d484 <_free_r+0x74>
 800d47e:	230c      	movs	r3, #12
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	e7d6      	b.n	800d432 <_free_r+0x22>
 800d484:	6820      	ldr	r0, [r4, #0]
 800d486:	1821      	adds	r1, r4, r0
 800d488:	428b      	cmp	r3, r1
 800d48a:	bf04      	itt	eq
 800d48c:	6819      	ldreq	r1, [r3, #0]
 800d48e:	685b      	ldreq	r3, [r3, #4]
 800d490:	6063      	str	r3, [r4, #4]
 800d492:	bf04      	itt	eq
 800d494:	1809      	addeq	r1, r1, r0
 800d496:	6021      	streq	r1, [r4, #0]
 800d498:	6054      	str	r4, [r2, #4]
 800d49a:	e7ca      	b.n	800d432 <_free_r+0x22>
 800d49c:	bd38      	pop	{r3, r4, r5, pc}
 800d49e:	bf00      	nop
 800d4a0:	200005b4 	.word	0x200005b4

0800d4a4 <rshift>:
 800d4a4:	6903      	ldr	r3, [r0, #16]
 800d4a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4b2:	f100 0414 	add.w	r4, r0, #20
 800d4b6:	dd45      	ble.n	800d544 <rshift+0xa0>
 800d4b8:	f011 011f 	ands.w	r1, r1, #31
 800d4bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4c4:	d10c      	bne.n	800d4e0 <rshift+0x3c>
 800d4c6:	f100 0710 	add.w	r7, r0, #16
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	42b1      	cmp	r1, r6
 800d4ce:	d334      	bcc.n	800d53a <rshift+0x96>
 800d4d0:	1a9b      	subs	r3, r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	1eea      	subs	r2, r5, #3
 800d4d6:	4296      	cmp	r6, r2
 800d4d8:	bf38      	it	cc
 800d4da:	2300      	movcc	r3, #0
 800d4dc:	4423      	add	r3, r4
 800d4de:	e015      	b.n	800d50c <rshift+0x68>
 800d4e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4e4:	f1c1 0820 	rsb	r8, r1, #32
 800d4e8:	40cf      	lsrs	r7, r1
 800d4ea:	f105 0e04 	add.w	lr, r5, #4
 800d4ee:	46a1      	mov	r9, r4
 800d4f0:	4576      	cmp	r6, lr
 800d4f2:	46f4      	mov	ip, lr
 800d4f4:	d815      	bhi.n	800d522 <rshift+0x7e>
 800d4f6:	1a9a      	subs	r2, r3, r2
 800d4f8:	0092      	lsls	r2, r2, #2
 800d4fa:	3a04      	subs	r2, #4
 800d4fc:	3501      	adds	r5, #1
 800d4fe:	42ae      	cmp	r6, r5
 800d500:	bf38      	it	cc
 800d502:	2200      	movcc	r2, #0
 800d504:	18a3      	adds	r3, r4, r2
 800d506:	50a7      	str	r7, [r4, r2]
 800d508:	b107      	cbz	r7, 800d50c <rshift+0x68>
 800d50a:	3304      	adds	r3, #4
 800d50c:	1b1a      	subs	r2, r3, r4
 800d50e:	42a3      	cmp	r3, r4
 800d510:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d514:	bf08      	it	eq
 800d516:	2300      	moveq	r3, #0
 800d518:	6102      	str	r2, [r0, #16]
 800d51a:	bf08      	it	eq
 800d51c:	6143      	streq	r3, [r0, #20]
 800d51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d522:	f8dc c000 	ldr.w	ip, [ip]
 800d526:	fa0c fc08 	lsl.w	ip, ip, r8
 800d52a:	ea4c 0707 	orr.w	r7, ip, r7
 800d52e:	f849 7b04 	str.w	r7, [r9], #4
 800d532:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d536:	40cf      	lsrs	r7, r1
 800d538:	e7da      	b.n	800d4f0 <rshift+0x4c>
 800d53a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d53e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d542:	e7c3      	b.n	800d4cc <rshift+0x28>
 800d544:	4623      	mov	r3, r4
 800d546:	e7e1      	b.n	800d50c <rshift+0x68>

0800d548 <__hexdig_fun>:
 800d548:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d54c:	2b09      	cmp	r3, #9
 800d54e:	d802      	bhi.n	800d556 <__hexdig_fun+0xe>
 800d550:	3820      	subs	r0, #32
 800d552:	b2c0      	uxtb	r0, r0
 800d554:	4770      	bx	lr
 800d556:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d801      	bhi.n	800d562 <__hexdig_fun+0x1a>
 800d55e:	3847      	subs	r0, #71	@ 0x47
 800d560:	e7f7      	b.n	800d552 <__hexdig_fun+0xa>
 800d562:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d566:	2b05      	cmp	r3, #5
 800d568:	d801      	bhi.n	800d56e <__hexdig_fun+0x26>
 800d56a:	3827      	subs	r0, #39	@ 0x27
 800d56c:	e7f1      	b.n	800d552 <__hexdig_fun+0xa>
 800d56e:	2000      	movs	r0, #0
 800d570:	4770      	bx	lr
	...

0800d574 <__gethex>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	b085      	sub	sp, #20
 800d57a:	468a      	mov	sl, r1
 800d57c:	9302      	str	r3, [sp, #8]
 800d57e:	680b      	ldr	r3, [r1, #0]
 800d580:	9001      	str	r0, [sp, #4]
 800d582:	4690      	mov	r8, r2
 800d584:	1c9c      	adds	r4, r3, #2
 800d586:	46a1      	mov	r9, r4
 800d588:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d58c:	2830      	cmp	r0, #48	@ 0x30
 800d58e:	d0fa      	beq.n	800d586 <__gethex+0x12>
 800d590:	eba9 0303 	sub.w	r3, r9, r3
 800d594:	f1a3 0b02 	sub.w	fp, r3, #2
 800d598:	f7ff ffd6 	bl	800d548 <__hexdig_fun>
 800d59c:	4605      	mov	r5, r0
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d168      	bne.n	800d674 <__gethex+0x100>
 800d5a2:	49a0      	ldr	r1, [pc, #640]	@ (800d824 <__gethex+0x2b0>)
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	4648      	mov	r0, r9
 800d5a8:	f7ff f82b 	bl	800c602 <strncmp>
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d167      	bne.n	800d682 <__gethex+0x10e>
 800d5b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d5b6:	4626      	mov	r6, r4
 800d5b8:	f7ff ffc6 	bl	800d548 <__hexdig_fun>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d062      	beq.n	800d686 <__gethex+0x112>
 800d5c0:	4623      	mov	r3, r4
 800d5c2:	7818      	ldrb	r0, [r3, #0]
 800d5c4:	2830      	cmp	r0, #48	@ 0x30
 800d5c6:	4699      	mov	r9, r3
 800d5c8:	f103 0301 	add.w	r3, r3, #1
 800d5cc:	d0f9      	beq.n	800d5c2 <__gethex+0x4e>
 800d5ce:	f7ff ffbb 	bl	800d548 <__hexdig_fun>
 800d5d2:	fab0 f580 	clz	r5, r0
 800d5d6:	096d      	lsrs	r5, r5, #5
 800d5d8:	f04f 0b01 	mov.w	fp, #1
 800d5dc:	464a      	mov	r2, r9
 800d5de:	4616      	mov	r6, r2
 800d5e0:	3201      	adds	r2, #1
 800d5e2:	7830      	ldrb	r0, [r6, #0]
 800d5e4:	f7ff ffb0 	bl	800d548 <__hexdig_fun>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d1f8      	bne.n	800d5de <__gethex+0x6a>
 800d5ec:	498d      	ldr	r1, [pc, #564]	@ (800d824 <__gethex+0x2b0>)
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f7ff f806 	bl	800c602 <strncmp>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d13f      	bne.n	800d67a <__gethex+0x106>
 800d5fa:	b944      	cbnz	r4, 800d60e <__gethex+0x9a>
 800d5fc:	1c74      	adds	r4, r6, #1
 800d5fe:	4622      	mov	r2, r4
 800d600:	4616      	mov	r6, r2
 800d602:	3201      	adds	r2, #1
 800d604:	7830      	ldrb	r0, [r6, #0]
 800d606:	f7ff ff9f 	bl	800d548 <__hexdig_fun>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d1f8      	bne.n	800d600 <__gethex+0x8c>
 800d60e:	1ba4      	subs	r4, r4, r6
 800d610:	00a7      	lsls	r7, r4, #2
 800d612:	7833      	ldrb	r3, [r6, #0]
 800d614:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d618:	2b50      	cmp	r3, #80	@ 0x50
 800d61a:	d13e      	bne.n	800d69a <__gethex+0x126>
 800d61c:	7873      	ldrb	r3, [r6, #1]
 800d61e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d620:	d033      	beq.n	800d68a <__gethex+0x116>
 800d622:	2b2d      	cmp	r3, #45	@ 0x2d
 800d624:	d034      	beq.n	800d690 <__gethex+0x11c>
 800d626:	1c71      	adds	r1, r6, #1
 800d628:	2400      	movs	r4, #0
 800d62a:	7808      	ldrb	r0, [r1, #0]
 800d62c:	f7ff ff8c 	bl	800d548 <__hexdig_fun>
 800d630:	1e43      	subs	r3, r0, #1
 800d632:	b2db      	uxtb	r3, r3
 800d634:	2b18      	cmp	r3, #24
 800d636:	d830      	bhi.n	800d69a <__gethex+0x126>
 800d638:	f1a0 0210 	sub.w	r2, r0, #16
 800d63c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d640:	f7ff ff82 	bl	800d548 <__hexdig_fun>
 800d644:	f100 3cff 	add.w	ip, r0, #4294967295
 800d648:	fa5f fc8c 	uxtb.w	ip, ip
 800d64c:	f1bc 0f18 	cmp.w	ip, #24
 800d650:	f04f 030a 	mov.w	r3, #10
 800d654:	d91e      	bls.n	800d694 <__gethex+0x120>
 800d656:	b104      	cbz	r4, 800d65a <__gethex+0xe6>
 800d658:	4252      	negs	r2, r2
 800d65a:	4417      	add	r7, r2
 800d65c:	f8ca 1000 	str.w	r1, [sl]
 800d660:	b1ed      	cbz	r5, 800d69e <__gethex+0x12a>
 800d662:	f1bb 0f00 	cmp.w	fp, #0
 800d666:	bf0c      	ite	eq
 800d668:	2506      	moveq	r5, #6
 800d66a:	2500      	movne	r5, #0
 800d66c:	4628      	mov	r0, r5
 800d66e:	b005      	add	sp, #20
 800d670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d674:	2500      	movs	r5, #0
 800d676:	462c      	mov	r4, r5
 800d678:	e7b0      	b.n	800d5dc <__gethex+0x68>
 800d67a:	2c00      	cmp	r4, #0
 800d67c:	d1c7      	bne.n	800d60e <__gethex+0x9a>
 800d67e:	4627      	mov	r7, r4
 800d680:	e7c7      	b.n	800d612 <__gethex+0x9e>
 800d682:	464e      	mov	r6, r9
 800d684:	462f      	mov	r7, r5
 800d686:	2501      	movs	r5, #1
 800d688:	e7c3      	b.n	800d612 <__gethex+0x9e>
 800d68a:	2400      	movs	r4, #0
 800d68c:	1cb1      	adds	r1, r6, #2
 800d68e:	e7cc      	b.n	800d62a <__gethex+0xb6>
 800d690:	2401      	movs	r4, #1
 800d692:	e7fb      	b.n	800d68c <__gethex+0x118>
 800d694:	fb03 0002 	mla	r0, r3, r2, r0
 800d698:	e7ce      	b.n	800d638 <__gethex+0xc4>
 800d69a:	4631      	mov	r1, r6
 800d69c:	e7de      	b.n	800d65c <__gethex+0xe8>
 800d69e:	eba6 0309 	sub.w	r3, r6, r9
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	2b07      	cmp	r3, #7
 800d6a8:	dc0a      	bgt.n	800d6c0 <__gethex+0x14c>
 800d6aa:	9801      	ldr	r0, [sp, #4]
 800d6ac:	f000 fa46 	bl	800db3c <_Balloc>
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	b940      	cbnz	r0, 800d6c6 <__gethex+0x152>
 800d6b4:	4b5c      	ldr	r3, [pc, #368]	@ (800d828 <__gethex+0x2b4>)
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	21e4      	movs	r1, #228	@ 0xe4
 800d6ba:	485c      	ldr	r0, [pc, #368]	@ (800d82c <__gethex+0x2b8>)
 800d6bc:	f001 fcb0 	bl	800f020 <__assert_func>
 800d6c0:	3101      	adds	r1, #1
 800d6c2:	105b      	asrs	r3, r3, #1
 800d6c4:	e7ef      	b.n	800d6a6 <__gethex+0x132>
 800d6c6:	f100 0a14 	add.w	sl, r0, #20
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	4655      	mov	r5, sl
 800d6ce:	469b      	mov	fp, r3
 800d6d0:	45b1      	cmp	r9, r6
 800d6d2:	d337      	bcc.n	800d744 <__gethex+0x1d0>
 800d6d4:	f845 bb04 	str.w	fp, [r5], #4
 800d6d8:	eba5 050a 	sub.w	r5, r5, sl
 800d6dc:	10ad      	asrs	r5, r5, #2
 800d6de:	6125      	str	r5, [r4, #16]
 800d6e0:	4658      	mov	r0, fp
 800d6e2:	f000 fb1d 	bl	800dd20 <__hi0bits>
 800d6e6:	016d      	lsls	r5, r5, #5
 800d6e8:	f8d8 6000 	ldr.w	r6, [r8]
 800d6ec:	1a2d      	subs	r5, r5, r0
 800d6ee:	42b5      	cmp	r5, r6
 800d6f0:	dd54      	ble.n	800d79c <__gethex+0x228>
 800d6f2:	1bad      	subs	r5, r5, r6
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f000 feb1 	bl	800e45e <__any_on>
 800d6fc:	4681      	mov	r9, r0
 800d6fe:	b178      	cbz	r0, 800d720 <__gethex+0x1ac>
 800d700:	1e6b      	subs	r3, r5, #1
 800d702:	1159      	asrs	r1, r3, #5
 800d704:	f003 021f 	and.w	r2, r3, #31
 800d708:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d70c:	f04f 0901 	mov.w	r9, #1
 800d710:	fa09 f202 	lsl.w	r2, r9, r2
 800d714:	420a      	tst	r2, r1
 800d716:	d003      	beq.n	800d720 <__gethex+0x1ac>
 800d718:	454b      	cmp	r3, r9
 800d71a:	dc36      	bgt.n	800d78a <__gethex+0x216>
 800d71c:	f04f 0902 	mov.w	r9, #2
 800d720:	4629      	mov	r1, r5
 800d722:	4620      	mov	r0, r4
 800d724:	f7ff febe 	bl	800d4a4 <rshift>
 800d728:	442f      	add	r7, r5
 800d72a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d72e:	42bb      	cmp	r3, r7
 800d730:	da42      	bge.n	800d7b8 <__gethex+0x244>
 800d732:	9801      	ldr	r0, [sp, #4]
 800d734:	4621      	mov	r1, r4
 800d736:	f000 fa41 	bl	800dbbc <_Bfree>
 800d73a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d73c:	2300      	movs	r3, #0
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	25a3      	movs	r5, #163	@ 0xa3
 800d742:	e793      	b.n	800d66c <__gethex+0xf8>
 800d744:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d748:	2a2e      	cmp	r2, #46	@ 0x2e
 800d74a:	d012      	beq.n	800d772 <__gethex+0x1fe>
 800d74c:	2b20      	cmp	r3, #32
 800d74e:	d104      	bne.n	800d75a <__gethex+0x1e6>
 800d750:	f845 bb04 	str.w	fp, [r5], #4
 800d754:	f04f 0b00 	mov.w	fp, #0
 800d758:	465b      	mov	r3, fp
 800d75a:	7830      	ldrb	r0, [r6, #0]
 800d75c:	9303      	str	r3, [sp, #12]
 800d75e:	f7ff fef3 	bl	800d548 <__hexdig_fun>
 800d762:	9b03      	ldr	r3, [sp, #12]
 800d764:	f000 000f 	and.w	r0, r0, #15
 800d768:	4098      	lsls	r0, r3
 800d76a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d76e:	3304      	adds	r3, #4
 800d770:	e7ae      	b.n	800d6d0 <__gethex+0x15c>
 800d772:	45b1      	cmp	r9, r6
 800d774:	d8ea      	bhi.n	800d74c <__gethex+0x1d8>
 800d776:	492b      	ldr	r1, [pc, #172]	@ (800d824 <__gethex+0x2b0>)
 800d778:	9303      	str	r3, [sp, #12]
 800d77a:	2201      	movs	r2, #1
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7fe ff40 	bl	800c602 <strncmp>
 800d782:	9b03      	ldr	r3, [sp, #12]
 800d784:	2800      	cmp	r0, #0
 800d786:	d1e1      	bne.n	800d74c <__gethex+0x1d8>
 800d788:	e7a2      	b.n	800d6d0 <__gethex+0x15c>
 800d78a:	1ea9      	subs	r1, r5, #2
 800d78c:	4620      	mov	r0, r4
 800d78e:	f000 fe66 	bl	800e45e <__any_on>
 800d792:	2800      	cmp	r0, #0
 800d794:	d0c2      	beq.n	800d71c <__gethex+0x1a8>
 800d796:	f04f 0903 	mov.w	r9, #3
 800d79a:	e7c1      	b.n	800d720 <__gethex+0x1ac>
 800d79c:	da09      	bge.n	800d7b2 <__gethex+0x23e>
 800d79e:	1b75      	subs	r5, r6, r5
 800d7a0:	4621      	mov	r1, r4
 800d7a2:	9801      	ldr	r0, [sp, #4]
 800d7a4:	462a      	mov	r2, r5
 800d7a6:	f000 fc21 	bl	800dfec <__lshift>
 800d7aa:	1b7f      	subs	r7, r7, r5
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	f100 0a14 	add.w	sl, r0, #20
 800d7b2:	f04f 0900 	mov.w	r9, #0
 800d7b6:	e7b8      	b.n	800d72a <__gethex+0x1b6>
 800d7b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7bc:	42bd      	cmp	r5, r7
 800d7be:	dd6f      	ble.n	800d8a0 <__gethex+0x32c>
 800d7c0:	1bed      	subs	r5, r5, r7
 800d7c2:	42ae      	cmp	r6, r5
 800d7c4:	dc34      	bgt.n	800d830 <__gethex+0x2bc>
 800d7c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d022      	beq.n	800d814 <__gethex+0x2a0>
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d024      	beq.n	800d81c <__gethex+0x2a8>
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d115      	bne.n	800d802 <__gethex+0x28e>
 800d7d6:	42ae      	cmp	r6, r5
 800d7d8:	d113      	bne.n	800d802 <__gethex+0x28e>
 800d7da:	2e01      	cmp	r6, #1
 800d7dc:	d10b      	bne.n	800d7f6 <__gethex+0x282>
 800d7de:	9a02      	ldr	r2, [sp, #8]
 800d7e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7e4:	6013      	str	r3, [r2, #0]
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	f8ca 3000 	str.w	r3, [sl]
 800d7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7f0:	2562      	movs	r5, #98	@ 0x62
 800d7f2:	601c      	str	r4, [r3, #0]
 800d7f4:	e73a      	b.n	800d66c <__gethex+0xf8>
 800d7f6:	1e71      	subs	r1, r6, #1
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 fe30 	bl	800e45e <__any_on>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d1ed      	bne.n	800d7de <__gethex+0x26a>
 800d802:	9801      	ldr	r0, [sp, #4]
 800d804:	4621      	mov	r1, r4
 800d806:	f000 f9d9 	bl	800dbbc <_Bfree>
 800d80a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d80c:	2300      	movs	r3, #0
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	2550      	movs	r5, #80	@ 0x50
 800d812:	e72b      	b.n	800d66c <__gethex+0xf8>
 800d814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1f3      	bne.n	800d802 <__gethex+0x28e>
 800d81a:	e7e0      	b.n	800d7de <__gethex+0x26a>
 800d81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1dd      	bne.n	800d7de <__gethex+0x26a>
 800d822:	e7ee      	b.n	800d802 <__gethex+0x28e>
 800d824:	0801094c 	.word	0x0801094c
 800d828:	08010b5c 	.word	0x08010b5c
 800d82c:	08010b6d 	.word	0x08010b6d
 800d830:	1e6f      	subs	r7, r5, #1
 800d832:	f1b9 0f00 	cmp.w	r9, #0
 800d836:	d130      	bne.n	800d89a <__gethex+0x326>
 800d838:	b127      	cbz	r7, 800d844 <__gethex+0x2d0>
 800d83a:	4639      	mov	r1, r7
 800d83c:	4620      	mov	r0, r4
 800d83e:	f000 fe0e 	bl	800e45e <__any_on>
 800d842:	4681      	mov	r9, r0
 800d844:	117a      	asrs	r2, r7, #5
 800d846:	2301      	movs	r3, #1
 800d848:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d84c:	f007 071f 	and.w	r7, r7, #31
 800d850:	40bb      	lsls	r3, r7
 800d852:	4213      	tst	r3, r2
 800d854:	4629      	mov	r1, r5
 800d856:	4620      	mov	r0, r4
 800d858:	bf18      	it	ne
 800d85a:	f049 0902 	orrne.w	r9, r9, #2
 800d85e:	f7ff fe21 	bl	800d4a4 <rshift>
 800d862:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d866:	1b76      	subs	r6, r6, r5
 800d868:	2502      	movs	r5, #2
 800d86a:	f1b9 0f00 	cmp.w	r9, #0
 800d86e:	d047      	beq.n	800d900 <__gethex+0x38c>
 800d870:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d874:	2b02      	cmp	r3, #2
 800d876:	d015      	beq.n	800d8a4 <__gethex+0x330>
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d017      	beq.n	800d8ac <__gethex+0x338>
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d109      	bne.n	800d894 <__gethex+0x320>
 800d880:	f019 0f02 	tst.w	r9, #2
 800d884:	d006      	beq.n	800d894 <__gethex+0x320>
 800d886:	f8da 3000 	ldr.w	r3, [sl]
 800d88a:	ea49 0903 	orr.w	r9, r9, r3
 800d88e:	f019 0f01 	tst.w	r9, #1
 800d892:	d10e      	bne.n	800d8b2 <__gethex+0x33e>
 800d894:	f045 0510 	orr.w	r5, r5, #16
 800d898:	e032      	b.n	800d900 <__gethex+0x38c>
 800d89a:	f04f 0901 	mov.w	r9, #1
 800d89e:	e7d1      	b.n	800d844 <__gethex+0x2d0>
 800d8a0:	2501      	movs	r5, #1
 800d8a2:	e7e2      	b.n	800d86a <__gethex+0x2f6>
 800d8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8a6:	f1c3 0301 	rsb	r3, r3, #1
 800d8aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d0f0      	beq.n	800d894 <__gethex+0x320>
 800d8b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8b6:	f104 0314 	add.w	r3, r4, #20
 800d8ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8c2:	f04f 0c00 	mov.w	ip, #0
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8d0:	d01b      	beq.n	800d90a <__gethex+0x396>
 800d8d2:	3201      	adds	r2, #1
 800d8d4:	6002      	str	r2, [r0, #0]
 800d8d6:	2d02      	cmp	r5, #2
 800d8d8:	f104 0314 	add.w	r3, r4, #20
 800d8dc:	d13c      	bne.n	800d958 <__gethex+0x3e4>
 800d8de:	f8d8 2000 	ldr.w	r2, [r8]
 800d8e2:	3a01      	subs	r2, #1
 800d8e4:	42b2      	cmp	r2, r6
 800d8e6:	d109      	bne.n	800d8fc <__gethex+0x388>
 800d8e8:	1171      	asrs	r1, r6, #5
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d8f0:	f006 061f 	and.w	r6, r6, #31
 800d8f4:	fa02 f606 	lsl.w	r6, r2, r6
 800d8f8:	421e      	tst	r6, r3
 800d8fa:	d13a      	bne.n	800d972 <__gethex+0x3fe>
 800d8fc:	f045 0520 	orr.w	r5, r5, #32
 800d900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d902:	601c      	str	r4, [r3, #0]
 800d904:	9b02      	ldr	r3, [sp, #8]
 800d906:	601f      	str	r7, [r3, #0]
 800d908:	e6b0      	b.n	800d66c <__gethex+0xf8>
 800d90a:	4299      	cmp	r1, r3
 800d90c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d910:	d8d9      	bhi.n	800d8c6 <__gethex+0x352>
 800d912:	68a3      	ldr	r3, [r4, #8]
 800d914:	459b      	cmp	fp, r3
 800d916:	db17      	blt.n	800d948 <__gethex+0x3d4>
 800d918:	6861      	ldr	r1, [r4, #4]
 800d91a:	9801      	ldr	r0, [sp, #4]
 800d91c:	3101      	adds	r1, #1
 800d91e:	f000 f90d 	bl	800db3c <_Balloc>
 800d922:	4681      	mov	r9, r0
 800d924:	b918      	cbnz	r0, 800d92e <__gethex+0x3ba>
 800d926:	4b1a      	ldr	r3, [pc, #104]	@ (800d990 <__gethex+0x41c>)
 800d928:	4602      	mov	r2, r0
 800d92a:	2184      	movs	r1, #132	@ 0x84
 800d92c:	e6c5      	b.n	800d6ba <__gethex+0x146>
 800d92e:	6922      	ldr	r2, [r4, #16]
 800d930:	3202      	adds	r2, #2
 800d932:	f104 010c 	add.w	r1, r4, #12
 800d936:	0092      	lsls	r2, r2, #2
 800d938:	300c      	adds	r0, #12
 800d93a:	f7fe fefc 	bl	800c736 <memcpy>
 800d93e:	4621      	mov	r1, r4
 800d940:	9801      	ldr	r0, [sp, #4]
 800d942:	f000 f93b 	bl	800dbbc <_Bfree>
 800d946:	464c      	mov	r4, r9
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d950:	6122      	str	r2, [r4, #16]
 800d952:	2201      	movs	r2, #1
 800d954:	615a      	str	r2, [r3, #20]
 800d956:	e7be      	b.n	800d8d6 <__gethex+0x362>
 800d958:	6922      	ldr	r2, [r4, #16]
 800d95a:	455a      	cmp	r2, fp
 800d95c:	dd0b      	ble.n	800d976 <__gethex+0x402>
 800d95e:	2101      	movs	r1, #1
 800d960:	4620      	mov	r0, r4
 800d962:	f7ff fd9f 	bl	800d4a4 <rshift>
 800d966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d96a:	3701      	adds	r7, #1
 800d96c:	42bb      	cmp	r3, r7
 800d96e:	f6ff aee0 	blt.w	800d732 <__gethex+0x1be>
 800d972:	2501      	movs	r5, #1
 800d974:	e7c2      	b.n	800d8fc <__gethex+0x388>
 800d976:	f016 061f 	ands.w	r6, r6, #31
 800d97a:	d0fa      	beq.n	800d972 <__gethex+0x3fe>
 800d97c:	4453      	add	r3, sl
 800d97e:	f1c6 0620 	rsb	r6, r6, #32
 800d982:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d986:	f000 f9cb 	bl	800dd20 <__hi0bits>
 800d98a:	42b0      	cmp	r0, r6
 800d98c:	dbe7      	blt.n	800d95e <__gethex+0x3ea>
 800d98e:	e7f0      	b.n	800d972 <__gethex+0x3fe>
 800d990:	08010b5c 	.word	0x08010b5c

0800d994 <L_shift>:
 800d994:	f1c2 0208 	rsb	r2, r2, #8
 800d998:	0092      	lsls	r2, r2, #2
 800d99a:	b570      	push	{r4, r5, r6, lr}
 800d99c:	f1c2 0620 	rsb	r6, r2, #32
 800d9a0:	6843      	ldr	r3, [r0, #4]
 800d9a2:	6804      	ldr	r4, [r0, #0]
 800d9a4:	fa03 f506 	lsl.w	r5, r3, r6
 800d9a8:	432c      	orrs	r4, r5
 800d9aa:	40d3      	lsrs	r3, r2
 800d9ac:	6004      	str	r4, [r0, #0]
 800d9ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9b2:	4288      	cmp	r0, r1
 800d9b4:	d3f4      	bcc.n	800d9a0 <L_shift+0xc>
 800d9b6:	bd70      	pop	{r4, r5, r6, pc}

0800d9b8 <__match>:
 800d9b8:	b530      	push	{r4, r5, lr}
 800d9ba:	6803      	ldr	r3, [r0, #0]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9c2:	b914      	cbnz	r4, 800d9ca <__match+0x12>
 800d9c4:	6003      	str	r3, [r0, #0]
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	bd30      	pop	{r4, r5, pc}
 800d9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d9d2:	2d19      	cmp	r5, #25
 800d9d4:	bf98      	it	ls
 800d9d6:	3220      	addls	r2, #32
 800d9d8:	42a2      	cmp	r2, r4
 800d9da:	d0f0      	beq.n	800d9be <__match+0x6>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	e7f3      	b.n	800d9c8 <__match+0x10>

0800d9e0 <__hexnan>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	680b      	ldr	r3, [r1, #0]
 800d9e6:	6801      	ldr	r1, [r0, #0]
 800d9e8:	115e      	asrs	r6, r3, #5
 800d9ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d9ee:	f013 031f 	ands.w	r3, r3, #31
 800d9f2:	b087      	sub	sp, #28
 800d9f4:	bf18      	it	ne
 800d9f6:	3604      	addne	r6, #4
 800d9f8:	2500      	movs	r5, #0
 800d9fa:	1f37      	subs	r7, r6, #4
 800d9fc:	4682      	mov	sl, r0
 800d9fe:	4690      	mov	r8, r2
 800da00:	9301      	str	r3, [sp, #4]
 800da02:	f846 5c04 	str.w	r5, [r6, #-4]
 800da06:	46b9      	mov	r9, r7
 800da08:	463c      	mov	r4, r7
 800da0a:	9502      	str	r5, [sp, #8]
 800da0c:	46ab      	mov	fp, r5
 800da0e:	784a      	ldrb	r2, [r1, #1]
 800da10:	1c4b      	adds	r3, r1, #1
 800da12:	9303      	str	r3, [sp, #12]
 800da14:	b342      	cbz	r2, 800da68 <__hexnan+0x88>
 800da16:	4610      	mov	r0, r2
 800da18:	9105      	str	r1, [sp, #20]
 800da1a:	9204      	str	r2, [sp, #16]
 800da1c:	f7ff fd94 	bl	800d548 <__hexdig_fun>
 800da20:	2800      	cmp	r0, #0
 800da22:	d151      	bne.n	800dac8 <__hexnan+0xe8>
 800da24:	9a04      	ldr	r2, [sp, #16]
 800da26:	9905      	ldr	r1, [sp, #20]
 800da28:	2a20      	cmp	r2, #32
 800da2a:	d818      	bhi.n	800da5e <__hexnan+0x7e>
 800da2c:	9b02      	ldr	r3, [sp, #8]
 800da2e:	459b      	cmp	fp, r3
 800da30:	dd13      	ble.n	800da5a <__hexnan+0x7a>
 800da32:	454c      	cmp	r4, r9
 800da34:	d206      	bcs.n	800da44 <__hexnan+0x64>
 800da36:	2d07      	cmp	r5, #7
 800da38:	dc04      	bgt.n	800da44 <__hexnan+0x64>
 800da3a:	462a      	mov	r2, r5
 800da3c:	4649      	mov	r1, r9
 800da3e:	4620      	mov	r0, r4
 800da40:	f7ff ffa8 	bl	800d994 <L_shift>
 800da44:	4544      	cmp	r4, r8
 800da46:	d952      	bls.n	800daee <__hexnan+0x10e>
 800da48:	2300      	movs	r3, #0
 800da4a:	f1a4 0904 	sub.w	r9, r4, #4
 800da4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800da52:	f8cd b008 	str.w	fp, [sp, #8]
 800da56:	464c      	mov	r4, r9
 800da58:	461d      	mov	r5, r3
 800da5a:	9903      	ldr	r1, [sp, #12]
 800da5c:	e7d7      	b.n	800da0e <__hexnan+0x2e>
 800da5e:	2a29      	cmp	r2, #41	@ 0x29
 800da60:	d157      	bne.n	800db12 <__hexnan+0x132>
 800da62:	3102      	adds	r1, #2
 800da64:	f8ca 1000 	str.w	r1, [sl]
 800da68:	f1bb 0f00 	cmp.w	fp, #0
 800da6c:	d051      	beq.n	800db12 <__hexnan+0x132>
 800da6e:	454c      	cmp	r4, r9
 800da70:	d206      	bcs.n	800da80 <__hexnan+0xa0>
 800da72:	2d07      	cmp	r5, #7
 800da74:	dc04      	bgt.n	800da80 <__hexnan+0xa0>
 800da76:	462a      	mov	r2, r5
 800da78:	4649      	mov	r1, r9
 800da7a:	4620      	mov	r0, r4
 800da7c:	f7ff ff8a 	bl	800d994 <L_shift>
 800da80:	4544      	cmp	r4, r8
 800da82:	d936      	bls.n	800daf2 <__hexnan+0x112>
 800da84:	f1a8 0204 	sub.w	r2, r8, #4
 800da88:	4623      	mov	r3, r4
 800da8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800da8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800da92:	429f      	cmp	r7, r3
 800da94:	d2f9      	bcs.n	800da8a <__hexnan+0xaa>
 800da96:	1b3b      	subs	r3, r7, r4
 800da98:	f023 0303 	bic.w	r3, r3, #3
 800da9c:	3304      	adds	r3, #4
 800da9e:	3401      	adds	r4, #1
 800daa0:	3e03      	subs	r6, #3
 800daa2:	42b4      	cmp	r4, r6
 800daa4:	bf88      	it	hi
 800daa6:	2304      	movhi	r3, #4
 800daa8:	4443      	add	r3, r8
 800daaa:	2200      	movs	r2, #0
 800daac:	f843 2b04 	str.w	r2, [r3], #4
 800dab0:	429f      	cmp	r7, r3
 800dab2:	d2fb      	bcs.n	800daac <__hexnan+0xcc>
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	b91b      	cbnz	r3, 800dac0 <__hexnan+0xe0>
 800dab8:	4547      	cmp	r7, r8
 800daba:	d128      	bne.n	800db0e <__hexnan+0x12e>
 800dabc:	2301      	movs	r3, #1
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	2005      	movs	r0, #5
 800dac2:	b007      	add	sp, #28
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	3501      	adds	r5, #1
 800daca:	2d08      	cmp	r5, #8
 800dacc:	f10b 0b01 	add.w	fp, fp, #1
 800dad0:	dd06      	ble.n	800dae0 <__hexnan+0x100>
 800dad2:	4544      	cmp	r4, r8
 800dad4:	d9c1      	bls.n	800da5a <__hexnan+0x7a>
 800dad6:	2300      	movs	r3, #0
 800dad8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dadc:	2501      	movs	r5, #1
 800dade:	3c04      	subs	r4, #4
 800dae0:	6822      	ldr	r2, [r4, #0]
 800dae2:	f000 000f 	and.w	r0, r0, #15
 800dae6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800daea:	6020      	str	r0, [r4, #0]
 800daec:	e7b5      	b.n	800da5a <__hexnan+0x7a>
 800daee:	2508      	movs	r5, #8
 800daf0:	e7b3      	b.n	800da5a <__hexnan+0x7a>
 800daf2:	9b01      	ldr	r3, [sp, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d0dd      	beq.n	800dab4 <__hexnan+0xd4>
 800daf8:	f1c3 0320 	rsb	r3, r3, #32
 800dafc:	f04f 32ff 	mov.w	r2, #4294967295
 800db00:	40da      	lsrs	r2, r3
 800db02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db06:	4013      	ands	r3, r2
 800db08:	f846 3c04 	str.w	r3, [r6, #-4]
 800db0c:	e7d2      	b.n	800dab4 <__hexnan+0xd4>
 800db0e:	3f04      	subs	r7, #4
 800db10:	e7d0      	b.n	800dab4 <__hexnan+0xd4>
 800db12:	2004      	movs	r0, #4
 800db14:	e7d5      	b.n	800dac2 <__hexnan+0xe2>

0800db16 <__ascii_mbtowc>:
 800db16:	b082      	sub	sp, #8
 800db18:	b901      	cbnz	r1, 800db1c <__ascii_mbtowc+0x6>
 800db1a:	a901      	add	r1, sp, #4
 800db1c:	b142      	cbz	r2, 800db30 <__ascii_mbtowc+0x1a>
 800db1e:	b14b      	cbz	r3, 800db34 <__ascii_mbtowc+0x1e>
 800db20:	7813      	ldrb	r3, [r2, #0]
 800db22:	600b      	str	r3, [r1, #0]
 800db24:	7812      	ldrb	r2, [r2, #0]
 800db26:	1e10      	subs	r0, r2, #0
 800db28:	bf18      	it	ne
 800db2a:	2001      	movne	r0, #1
 800db2c:	b002      	add	sp, #8
 800db2e:	4770      	bx	lr
 800db30:	4610      	mov	r0, r2
 800db32:	e7fb      	b.n	800db2c <__ascii_mbtowc+0x16>
 800db34:	f06f 0001 	mvn.w	r0, #1
 800db38:	e7f8      	b.n	800db2c <__ascii_mbtowc+0x16>
	...

0800db3c <_Balloc>:
 800db3c:	b570      	push	{r4, r5, r6, lr}
 800db3e:	69c6      	ldr	r6, [r0, #28]
 800db40:	4604      	mov	r4, r0
 800db42:	460d      	mov	r5, r1
 800db44:	b976      	cbnz	r6, 800db64 <_Balloc+0x28>
 800db46:	2010      	movs	r0, #16
 800db48:	f7fc fe12 	bl	800a770 <malloc>
 800db4c:	4602      	mov	r2, r0
 800db4e:	61e0      	str	r0, [r4, #28]
 800db50:	b920      	cbnz	r0, 800db5c <_Balloc+0x20>
 800db52:	4b18      	ldr	r3, [pc, #96]	@ (800dbb4 <_Balloc+0x78>)
 800db54:	4818      	ldr	r0, [pc, #96]	@ (800dbb8 <_Balloc+0x7c>)
 800db56:	216b      	movs	r1, #107	@ 0x6b
 800db58:	f001 fa62 	bl	800f020 <__assert_func>
 800db5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db60:	6006      	str	r6, [r0, #0]
 800db62:	60c6      	str	r6, [r0, #12]
 800db64:	69e6      	ldr	r6, [r4, #28]
 800db66:	68f3      	ldr	r3, [r6, #12]
 800db68:	b183      	cbz	r3, 800db8c <_Balloc+0x50>
 800db6a:	69e3      	ldr	r3, [r4, #28]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db72:	b9b8      	cbnz	r0, 800dba4 <_Balloc+0x68>
 800db74:	2101      	movs	r1, #1
 800db76:	fa01 f605 	lsl.w	r6, r1, r5
 800db7a:	1d72      	adds	r2, r6, #5
 800db7c:	0092      	lsls	r2, r2, #2
 800db7e:	4620      	mov	r0, r4
 800db80:	f001 fa6c 	bl	800f05c <_calloc_r>
 800db84:	b160      	cbz	r0, 800dba0 <_Balloc+0x64>
 800db86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db8a:	e00e      	b.n	800dbaa <_Balloc+0x6e>
 800db8c:	2221      	movs	r2, #33	@ 0x21
 800db8e:	2104      	movs	r1, #4
 800db90:	4620      	mov	r0, r4
 800db92:	f001 fa63 	bl	800f05c <_calloc_r>
 800db96:	69e3      	ldr	r3, [r4, #28]
 800db98:	60f0      	str	r0, [r6, #12]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1e4      	bne.n	800db6a <_Balloc+0x2e>
 800dba0:	2000      	movs	r0, #0
 800dba2:	bd70      	pop	{r4, r5, r6, pc}
 800dba4:	6802      	ldr	r2, [r0, #0]
 800dba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbb0:	e7f7      	b.n	800dba2 <_Balloc+0x66>
 800dbb2:	bf00      	nop
 800dbb4:	08010aed 	.word	0x08010aed
 800dbb8:	08010bcd 	.word	0x08010bcd

0800dbbc <_Bfree>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	69c6      	ldr	r6, [r0, #28]
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	460c      	mov	r4, r1
 800dbc4:	b976      	cbnz	r6, 800dbe4 <_Bfree+0x28>
 800dbc6:	2010      	movs	r0, #16
 800dbc8:	f7fc fdd2 	bl	800a770 <malloc>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	61e8      	str	r0, [r5, #28]
 800dbd0:	b920      	cbnz	r0, 800dbdc <_Bfree+0x20>
 800dbd2:	4b09      	ldr	r3, [pc, #36]	@ (800dbf8 <_Bfree+0x3c>)
 800dbd4:	4809      	ldr	r0, [pc, #36]	@ (800dbfc <_Bfree+0x40>)
 800dbd6:	218f      	movs	r1, #143	@ 0x8f
 800dbd8:	f001 fa22 	bl	800f020 <__assert_func>
 800dbdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbe0:	6006      	str	r6, [r0, #0]
 800dbe2:	60c6      	str	r6, [r0, #12]
 800dbe4:	b13c      	cbz	r4, 800dbf6 <_Bfree+0x3a>
 800dbe6:	69eb      	ldr	r3, [r5, #28]
 800dbe8:	6862      	ldr	r2, [r4, #4]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbf0:	6021      	str	r1, [r4, #0]
 800dbf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	08010aed 	.word	0x08010aed
 800dbfc:	08010bcd 	.word	0x08010bcd

0800dc00 <__multadd>:
 800dc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc04:	690d      	ldr	r5, [r1, #16]
 800dc06:	4607      	mov	r7, r0
 800dc08:	460c      	mov	r4, r1
 800dc0a:	461e      	mov	r6, r3
 800dc0c:	f101 0c14 	add.w	ip, r1, #20
 800dc10:	2000      	movs	r0, #0
 800dc12:	f8dc 3000 	ldr.w	r3, [ip]
 800dc16:	b299      	uxth	r1, r3
 800dc18:	fb02 6101 	mla	r1, r2, r1, r6
 800dc1c:	0c1e      	lsrs	r6, r3, #16
 800dc1e:	0c0b      	lsrs	r3, r1, #16
 800dc20:	fb02 3306 	mla	r3, r2, r6, r3
 800dc24:	b289      	uxth	r1, r1
 800dc26:	3001      	adds	r0, #1
 800dc28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc2c:	4285      	cmp	r5, r0
 800dc2e:	f84c 1b04 	str.w	r1, [ip], #4
 800dc32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dc36:	dcec      	bgt.n	800dc12 <__multadd+0x12>
 800dc38:	b30e      	cbz	r6, 800dc7e <__multadd+0x7e>
 800dc3a:	68a3      	ldr	r3, [r4, #8]
 800dc3c:	42ab      	cmp	r3, r5
 800dc3e:	dc19      	bgt.n	800dc74 <__multadd+0x74>
 800dc40:	6861      	ldr	r1, [r4, #4]
 800dc42:	4638      	mov	r0, r7
 800dc44:	3101      	adds	r1, #1
 800dc46:	f7ff ff79 	bl	800db3c <_Balloc>
 800dc4a:	4680      	mov	r8, r0
 800dc4c:	b928      	cbnz	r0, 800dc5a <__multadd+0x5a>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	4b0c      	ldr	r3, [pc, #48]	@ (800dc84 <__multadd+0x84>)
 800dc52:	480d      	ldr	r0, [pc, #52]	@ (800dc88 <__multadd+0x88>)
 800dc54:	21ba      	movs	r1, #186	@ 0xba
 800dc56:	f001 f9e3 	bl	800f020 <__assert_func>
 800dc5a:	6922      	ldr	r2, [r4, #16]
 800dc5c:	3202      	adds	r2, #2
 800dc5e:	f104 010c 	add.w	r1, r4, #12
 800dc62:	0092      	lsls	r2, r2, #2
 800dc64:	300c      	adds	r0, #12
 800dc66:	f7fe fd66 	bl	800c736 <memcpy>
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	4638      	mov	r0, r7
 800dc6e:	f7ff ffa5 	bl	800dbbc <_Bfree>
 800dc72:	4644      	mov	r4, r8
 800dc74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc78:	3501      	adds	r5, #1
 800dc7a:	615e      	str	r6, [r3, #20]
 800dc7c:	6125      	str	r5, [r4, #16]
 800dc7e:	4620      	mov	r0, r4
 800dc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc84:	08010b5c 	.word	0x08010b5c
 800dc88:	08010bcd 	.word	0x08010bcd

0800dc8c <__s2b>:
 800dc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc90:	460c      	mov	r4, r1
 800dc92:	4615      	mov	r5, r2
 800dc94:	461f      	mov	r7, r3
 800dc96:	2209      	movs	r2, #9
 800dc98:	3308      	adds	r3, #8
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dca0:	2100      	movs	r1, #0
 800dca2:	2201      	movs	r2, #1
 800dca4:	429a      	cmp	r2, r3
 800dca6:	db09      	blt.n	800dcbc <__s2b+0x30>
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f7ff ff47 	bl	800db3c <_Balloc>
 800dcae:	b940      	cbnz	r0, 800dcc2 <__s2b+0x36>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	4b19      	ldr	r3, [pc, #100]	@ (800dd18 <__s2b+0x8c>)
 800dcb4:	4819      	ldr	r0, [pc, #100]	@ (800dd1c <__s2b+0x90>)
 800dcb6:	21d3      	movs	r1, #211	@ 0xd3
 800dcb8:	f001 f9b2 	bl	800f020 <__assert_func>
 800dcbc:	0052      	lsls	r2, r2, #1
 800dcbe:	3101      	adds	r1, #1
 800dcc0:	e7f0      	b.n	800dca4 <__s2b+0x18>
 800dcc2:	9b08      	ldr	r3, [sp, #32]
 800dcc4:	6143      	str	r3, [r0, #20]
 800dcc6:	2d09      	cmp	r5, #9
 800dcc8:	f04f 0301 	mov.w	r3, #1
 800dccc:	6103      	str	r3, [r0, #16]
 800dcce:	dd16      	ble.n	800dcfe <__s2b+0x72>
 800dcd0:	f104 0909 	add.w	r9, r4, #9
 800dcd4:	46c8      	mov	r8, r9
 800dcd6:	442c      	add	r4, r5
 800dcd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dcdc:	4601      	mov	r1, r0
 800dcde:	3b30      	subs	r3, #48	@ 0x30
 800dce0:	220a      	movs	r2, #10
 800dce2:	4630      	mov	r0, r6
 800dce4:	f7ff ff8c 	bl	800dc00 <__multadd>
 800dce8:	45a0      	cmp	r8, r4
 800dcea:	d1f5      	bne.n	800dcd8 <__s2b+0x4c>
 800dcec:	f1a5 0408 	sub.w	r4, r5, #8
 800dcf0:	444c      	add	r4, r9
 800dcf2:	1b2d      	subs	r5, r5, r4
 800dcf4:	1963      	adds	r3, r4, r5
 800dcf6:	42bb      	cmp	r3, r7
 800dcf8:	db04      	blt.n	800dd04 <__s2b+0x78>
 800dcfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcfe:	340a      	adds	r4, #10
 800dd00:	2509      	movs	r5, #9
 800dd02:	e7f6      	b.n	800dcf2 <__s2b+0x66>
 800dd04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd08:	4601      	mov	r1, r0
 800dd0a:	3b30      	subs	r3, #48	@ 0x30
 800dd0c:	220a      	movs	r2, #10
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f7ff ff76 	bl	800dc00 <__multadd>
 800dd14:	e7ee      	b.n	800dcf4 <__s2b+0x68>
 800dd16:	bf00      	nop
 800dd18:	08010b5c 	.word	0x08010b5c
 800dd1c:	08010bcd 	.word	0x08010bcd

0800dd20 <__hi0bits>:
 800dd20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dd24:	4603      	mov	r3, r0
 800dd26:	bf36      	itet	cc
 800dd28:	0403      	lslcc	r3, r0, #16
 800dd2a:	2000      	movcs	r0, #0
 800dd2c:	2010      	movcc	r0, #16
 800dd2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd32:	bf3c      	itt	cc
 800dd34:	021b      	lslcc	r3, r3, #8
 800dd36:	3008      	addcc	r0, #8
 800dd38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd3c:	bf3c      	itt	cc
 800dd3e:	011b      	lslcc	r3, r3, #4
 800dd40:	3004      	addcc	r0, #4
 800dd42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd46:	bf3c      	itt	cc
 800dd48:	009b      	lslcc	r3, r3, #2
 800dd4a:	3002      	addcc	r0, #2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	db05      	blt.n	800dd5c <__hi0bits+0x3c>
 800dd50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd54:	f100 0001 	add.w	r0, r0, #1
 800dd58:	bf08      	it	eq
 800dd5a:	2020      	moveq	r0, #32
 800dd5c:	4770      	bx	lr

0800dd5e <__lo0bits>:
 800dd5e:	6803      	ldr	r3, [r0, #0]
 800dd60:	4602      	mov	r2, r0
 800dd62:	f013 0007 	ands.w	r0, r3, #7
 800dd66:	d00b      	beq.n	800dd80 <__lo0bits+0x22>
 800dd68:	07d9      	lsls	r1, r3, #31
 800dd6a:	d421      	bmi.n	800ddb0 <__lo0bits+0x52>
 800dd6c:	0798      	lsls	r0, r3, #30
 800dd6e:	bf49      	itett	mi
 800dd70:	085b      	lsrmi	r3, r3, #1
 800dd72:	089b      	lsrpl	r3, r3, #2
 800dd74:	2001      	movmi	r0, #1
 800dd76:	6013      	strmi	r3, [r2, #0]
 800dd78:	bf5c      	itt	pl
 800dd7a:	6013      	strpl	r3, [r2, #0]
 800dd7c:	2002      	movpl	r0, #2
 800dd7e:	4770      	bx	lr
 800dd80:	b299      	uxth	r1, r3
 800dd82:	b909      	cbnz	r1, 800dd88 <__lo0bits+0x2a>
 800dd84:	0c1b      	lsrs	r3, r3, #16
 800dd86:	2010      	movs	r0, #16
 800dd88:	b2d9      	uxtb	r1, r3
 800dd8a:	b909      	cbnz	r1, 800dd90 <__lo0bits+0x32>
 800dd8c:	3008      	adds	r0, #8
 800dd8e:	0a1b      	lsrs	r3, r3, #8
 800dd90:	0719      	lsls	r1, r3, #28
 800dd92:	bf04      	itt	eq
 800dd94:	091b      	lsreq	r3, r3, #4
 800dd96:	3004      	addeq	r0, #4
 800dd98:	0799      	lsls	r1, r3, #30
 800dd9a:	bf04      	itt	eq
 800dd9c:	089b      	lsreq	r3, r3, #2
 800dd9e:	3002      	addeq	r0, #2
 800dda0:	07d9      	lsls	r1, r3, #31
 800dda2:	d403      	bmi.n	800ddac <__lo0bits+0x4e>
 800dda4:	085b      	lsrs	r3, r3, #1
 800dda6:	f100 0001 	add.w	r0, r0, #1
 800ddaa:	d003      	beq.n	800ddb4 <__lo0bits+0x56>
 800ddac:	6013      	str	r3, [r2, #0]
 800ddae:	4770      	bx	lr
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	4770      	bx	lr
 800ddb4:	2020      	movs	r0, #32
 800ddb6:	4770      	bx	lr

0800ddb8 <__i2b>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	460c      	mov	r4, r1
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	f7ff febd 	bl	800db3c <_Balloc>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	b928      	cbnz	r0, 800ddd2 <__i2b+0x1a>
 800ddc6:	4b05      	ldr	r3, [pc, #20]	@ (800dddc <__i2b+0x24>)
 800ddc8:	4805      	ldr	r0, [pc, #20]	@ (800dde0 <__i2b+0x28>)
 800ddca:	f240 1145 	movw	r1, #325	@ 0x145
 800ddce:	f001 f927 	bl	800f020 <__assert_func>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	6144      	str	r4, [r0, #20]
 800ddd6:	6103      	str	r3, [r0, #16]
 800ddd8:	bd10      	pop	{r4, pc}
 800ddda:	bf00      	nop
 800dddc:	08010b5c 	.word	0x08010b5c
 800dde0:	08010bcd 	.word	0x08010bcd

0800dde4 <__multiply>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	4614      	mov	r4, r2
 800ddea:	690a      	ldr	r2, [r1, #16]
 800ddec:	6923      	ldr	r3, [r4, #16]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	bfa8      	it	ge
 800ddf2:	4623      	movge	r3, r4
 800ddf4:	460f      	mov	r7, r1
 800ddf6:	bfa4      	itt	ge
 800ddf8:	460c      	movge	r4, r1
 800ddfa:	461f      	movge	r7, r3
 800ddfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800de00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800de04:	68a3      	ldr	r3, [r4, #8]
 800de06:	6861      	ldr	r1, [r4, #4]
 800de08:	eb0a 0609 	add.w	r6, sl, r9
 800de0c:	42b3      	cmp	r3, r6
 800de0e:	b085      	sub	sp, #20
 800de10:	bfb8      	it	lt
 800de12:	3101      	addlt	r1, #1
 800de14:	f7ff fe92 	bl	800db3c <_Balloc>
 800de18:	b930      	cbnz	r0, 800de28 <__multiply+0x44>
 800de1a:	4602      	mov	r2, r0
 800de1c:	4b44      	ldr	r3, [pc, #272]	@ (800df30 <__multiply+0x14c>)
 800de1e:	4845      	ldr	r0, [pc, #276]	@ (800df34 <__multiply+0x150>)
 800de20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800de24:	f001 f8fc 	bl	800f020 <__assert_func>
 800de28:	f100 0514 	add.w	r5, r0, #20
 800de2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de30:	462b      	mov	r3, r5
 800de32:	2200      	movs	r2, #0
 800de34:	4543      	cmp	r3, r8
 800de36:	d321      	bcc.n	800de7c <__multiply+0x98>
 800de38:	f107 0114 	add.w	r1, r7, #20
 800de3c:	f104 0214 	add.w	r2, r4, #20
 800de40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de48:	9302      	str	r3, [sp, #8]
 800de4a:	1b13      	subs	r3, r2, r4
 800de4c:	3b15      	subs	r3, #21
 800de4e:	f023 0303 	bic.w	r3, r3, #3
 800de52:	3304      	adds	r3, #4
 800de54:	f104 0715 	add.w	r7, r4, #21
 800de58:	42ba      	cmp	r2, r7
 800de5a:	bf38      	it	cc
 800de5c:	2304      	movcc	r3, #4
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	9b02      	ldr	r3, [sp, #8]
 800de62:	9103      	str	r1, [sp, #12]
 800de64:	428b      	cmp	r3, r1
 800de66:	d80c      	bhi.n	800de82 <__multiply+0x9e>
 800de68:	2e00      	cmp	r6, #0
 800de6a:	dd03      	ble.n	800de74 <__multiply+0x90>
 800de6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de70:	2b00      	cmp	r3, #0
 800de72:	d05b      	beq.n	800df2c <__multiply+0x148>
 800de74:	6106      	str	r6, [r0, #16]
 800de76:	b005      	add	sp, #20
 800de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7c:	f843 2b04 	str.w	r2, [r3], #4
 800de80:	e7d8      	b.n	800de34 <__multiply+0x50>
 800de82:	f8b1 a000 	ldrh.w	sl, [r1]
 800de86:	f1ba 0f00 	cmp.w	sl, #0
 800de8a:	d024      	beq.n	800ded6 <__multiply+0xf2>
 800de8c:	f104 0e14 	add.w	lr, r4, #20
 800de90:	46a9      	mov	r9, r5
 800de92:	f04f 0c00 	mov.w	ip, #0
 800de96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de9a:	f8d9 3000 	ldr.w	r3, [r9]
 800de9e:	fa1f fb87 	uxth.w	fp, r7
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	fb0a 330b 	mla	r3, sl, fp, r3
 800dea8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800deac:	f8d9 7000 	ldr.w	r7, [r9]
 800deb0:	4463      	add	r3, ip
 800deb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800deb6:	fb0a c70b 	mla	r7, sl, fp, ip
 800deba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800debe:	b29b      	uxth	r3, r3
 800dec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dec4:	4572      	cmp	r2, lr
 800dec6:	f849 3b04 	str.w	r3, [r9], #4
 800deca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dece:	d8e2      	bhi.n	800de96 <__multiply+0xb2>
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	f845 c003 	str.w	ip, [r5, r3]
 800ded6:	9b03      	ldr	r3, [sp, #12]
 800ded8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dedc:	3104      	adds	r1, #4
 800dede:	f1b9 0f00 	cmp.w	r9, #0
 800dee2:	d021      	beq.n	800df28 <__multiply+0x144>
 800dee4:	682b      	ldr	r3, [r5, #0]
 800dee6:	f104 0c14 	add.w	ip, r4, #20
 800deea:	46ae      	mov	lr, r5
 800deec:	f04f 0a00 	mov.w	sl, #0
 800def0:	f8bc b000 	ldrh.w	fp, [ip]
 800def4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800def8:	fb09 770b 	mla	r7, r9, fp, r7
 800defc:	4457      	add	r7, sl
 800defe:	b29b      	uxth	r3, r3
 800df00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df04:	f84e 3b04 	str.w	r3, [lr], #4
 800df08:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df10:	f8be 3000 	ldrh.w	r3, [lr]
 800df14:	fb09 330a 	mla	r3, r9, sl, r3
 800df18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800df1c:	4562      	cmp	r2, ip
 800df1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df22:	d8e5      	bhi.n	800def0 <__multiply+0x10c>
 800df24:	9f01      	ldr	r7, [sp, #4]
 800df26:	51eb      	str	r3, [r5, r7]
 800df28:	3504      	adds	r5, #4
 800df2a:	e799      	b.n	800de60 <__multiply+0x7c>
 800df2c:	3e01      	subs	r6, #1
 800df2e:	e79b      	b.n	800de68 <__multiply+0x84>
 800df30:	08010b5c 	.word	0x08010b5c
 800df34:	08010bcd 	.word	0x08010bcd

0800df38 <__pow5mult>:
 800df38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df3c:	4615      	mov	r5, r2
 800df3e:	f012 0203 	ands.w	r2, r2, #3
 800df42:	4607      	mov	r7, r0
 800df44:	460e      	mov	r6, r1
 800df46:	d007      	beq.n	800df58 <__pow5mult+0x20>
 800df48:	4c25      	ldr	r4, [pc, #148]	@ (800dfe0 <__pow5mult+0xa8>)
 800df4a:	3a01      	subs	r2, #1
 800df4c:	2300      	movs	r3, #0
 800df4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df52:	f7ff fe55 	bl	800dc00 <__multadd>
 800df56:	4606      	mov	r6, r0
 800df58:	10ad      	asrs	r5, r5, #2
 800df5a:	d03d      	beq.n	800dfd8 <__pow5mult+0xa0>
 800df5c:	69fc      	ldr	r4, [r7, #28]
 800df5e:	b97c      	cbnz	r4, 800df80 <__pow5mult+0x48>
 800df60:	2010      	movs	r0, #16
 800df62:	f7fc fc05 	bl	800a770 <malloc>
 800df66:	4602      	mov	r2, r0
 800df68:	61f8      	str	r0, [r7, #28]
 800df6a:	b928      	cbnz	r0, 800df78 <__pow5mult+0x40>
 800df6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe4 <__pow5mult+0xac>)
 800df6e:	481e      	ldr	r0, [pc, #120]	@ (800dfe8 <__pow5mult+0xb0>)
 800df70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800df74:	f001 f854 	bl	800f020 <__assert_func>
 800df78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df7c:	6004      	str	r4, [r0, #0]
 800df7e:	60c4      	str	r4, [r0, #12]
 800df80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800df84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df88:	b94c      	cbnz	r4, 800df9e <__pow5mult+0x66>
 800df8a:	f240 2171 	movw	r1, #625	@ 0x271
 800df8e:	4638      	mov	r0, r7
 800df90:	f7ff ff12 	bl	800ddb8 <__i2b>
 800df94:	2300      	movs	r3, #0
 800df96:	f8c8 0008 	str.w	r0, [r8, #8]
 800df9a:	4604      	mov	r4, r0
 800df9c:	6003      	str	r3, [r0, #0]
 800df9e:	f04f 0900 	mov.w	r9, #0
 800dfa2:	07eb      	lsls	r3, r5, #31
 800dfa4:	d50a      	bpl.n	800dfbc <__pow5mult+0x84>
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	4622      	mov	r2, r4
 800dfaa:	4638      	mov	r0, r7
 800dfac:	f7ff ff1a 	bl	800dde4 <__multiply>
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	4680      	mov	r8, r0
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f7ff fe01 	bl	800dbbc <_Bfree>
 800dfba:	4646      	mov	r6, r8
 800dfbc:	106d      	asrs	r5, r5, #1
 800dfbe:	d00b      	beq.n	800dfd8 <__pow5mult+0xa0>
 800dfc0:	6820      	ldr	r0, [r4, #0]
 800dfc2:	b938      	cbnz	r0, 800dfd4 <__pow5mult+0x9c>
 800dfc4:	4622      	mov	r2, r4
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	4638      	mov	r0, r7
 800dfca:	f7ff ff0b 	bl	800dde4 <__multiply>
 800dfce:	6020      	str	r0, [r4, #0]
 800dfd0:	f8c0 9000 	str.w	r9, [r0]
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	e7e4      	b.n	800dfa2 <__pow5mult+0x6a>
 800dfd8:	4630      	mov	r0, r6
 800dfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfde:	bf00      	nop
 800dfe0:	08010c28 	.word	0x08010c28
 800dfe4:	08010aed 	.word	0x08010aed
 800dfe8:	08010bcd 	.word	0x08010bcd

0800dfec <__lshift>:
 800dfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff0:	460c      	mov	r4, r1
 800dff2:	6849      	ldr	r1, [r1, #4]
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dffa:	68a3      	ldr	r3, [r4, #8]
 800dffc:	4607      	mov	r7, r0
 800dffe:	4691      	mov	r9, r2
 800e000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e004:	f108 0601 	add.w	r6, r8, #1
 800e008:	42b3      	cmp	r3, r6
 800e00a:	db0b      	blt.n	800e024 <__lshift+0x38>
 800e00c:	4638      	mov	r0, r7
 800e00e:	f7ff fd95 	bl	800db3c <_Balloc>
 800e012:	4605      	mov	r5, r0
 800e014:	b948      	cbnz	r0, 800e02a <__lshift+0x3e>
 800e016:	4602      	mov	r2, r0
 800e018:	4b28      	ldr	r3, [pc, #160]	@ (800e0bc <__lshift+0xd0>)
 800e01a:	4829      	ldr	r0, [pc, #164]	@ (800e0c0 <__lshift+0xd4>)
 800e01c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e020:	f000 fffe 	bl	800f020 <__assert_func>
 800e024:	3101      	adds	r1, #1
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	e7ee      	b.n	800e008 <__lshift+0x1c>
 800e02a:	2300      	movs	r3, #0
 800e02c:	f100 0114 	add.w	r1, r0, #20
 800e030:	f100 0210 	add.w	r2, r0, #16
 800e034:	4618      	mov	r0, r3
 800e036:	4553      	cmp	r3, sl
 800e038:	db33      	blt.n	800e0a2 <__lshift+0xb6>
 800e03a:	6920      	ldr	r0, [r4, #16]
 800e03c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e040:	f104 0314 	add.w	r3, r4, #20
 800e044:	f019 091f 	ands.w	r9, r9, #31
 800e048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e04c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e050:	d02b      	beq.n	800e0aa <__lshift+0xbe>
 800e052:	f1c9 0e20 	rsb	lr, r9, #32
 800e056:	468a      	mov	sl, r1
 800e058:	2200      	movs	r2, #0
 800e05a:	6818      	ldr	r0, [r3, #0]
 800e05c:	fa00 f009 	lsl.w	r0, r0, r9
 800e060:	4310      	orrs	r0, r2
 800e062:	f84a 0b04 	str.w	r0, [sl], #4
 800e066:	f853 2b04 	ldr.w	r2, [r3], #4
 800e06a:	459c      	cmp	ip, r3
 800e06c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e070:	d8f3      	bhi.n	800e05a <__lshift+0x6e>
 800e072:	ebac 0304 	sub.w	r3, ip, r4
 800e076:	3b15      	subs	r3, #21
 800e078:	f023 0303 	bic.w	r3, r3, #3
 800e07c:	3304      	adds	r3, #4
 800e07e:	f104 0015 	add.w	r0, r4, #21
 800e082:	4584      	cmp	ip, r0
 800e084:	bf38      	it	cc
 800e086:	2304      	movcc	r3, #4
 800e088:	50ca      	str	r2, [r1, r3]
 800e08a:	b10a      	cbz	r2, 800e090 <__lshift+0xa4>
 800e08c:	f108 0602 	add.w	r6, r8, #2
 800e090:	3e01      	subs	r6, #1
 800e092:	4638      	mov	r0, r7
 800e094:	612e      	str	r6, [r5, #16]
 800e096:	4621      	mov	r1, r4
 800e098:	f7ff fd90 	bl	800dbbc <_Bfree>
 800e09c:	4628      	mov	r0, r5
 800e09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	e7c5      	b.n	800e036 <__lshift+0x4a>
 800e0aa:	3904      	subs	r1, #4
 800e0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0b4:	459c      	cmp	ip, r3
 800e0b6:	d8f9      	bhi.n	800e0ac <__lshift+0xc0>
 800e0b8:	e7ea      	b.n	800e090 <__lshift+0xa4>
 800e0ba:	bf00      	nop
 800e0bc:	08010b5c 	.word	0x08010b5c
 800e0c0:	08010bcd 	.word	0x08010bcd

0800e0c4 <__mcmp>:
 800e0c4:	690a      	ldr	r2, [r1, #16]
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	6900      	ldr	r0, [r0, #16]
 800e0ca:	1a80      	subs	r0, r0, r2
 800e0cc:	b530      	push	{r4, r5, lr}
 800e0ce:	d10e      	bne.n	800e0ee <__mcmp+0x2a>
 800e0d0:	3314      	adds	r3, #20
 800e0d2:	3114      	adds	r1, #20
 800e0d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e0d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e0dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e0e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e0e4:	4295      	cmp	r5, r2
 800e0e6:	d003      	beq.n	800e0f0 <__mcmp+0x2c>
 800e0e8:	d205      	bcs.n	800e0f6 <__mcmp+0x32>
 800e0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ee:	bd30      	pop	{r4, r5, pc}
 800e0f0:	42a3      	cmp	r3, r4
 800e0f2:	d3f3      	bcc.n	800e0dc <__mcmp+0x18>
 800e0f4:	e7fb      	b.n	800e0ee <__mcmp+0x2a>
 800e0f6:	2001      	movs	r0, #1
 800e0f8:	e7f9      	b.n	800e0ee <__mcmp+0x2a>
	...

0800e0fc <__mdiff>:
 800e0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	4689      	mov	r9, r1
 800e102:	4606      	mov	r6, r0
 800e104:	4611      	mov	r1, r2
 800e106:	4648      	mov	r0, r9
 800e108:	4614      	mov	r4, r2
 800e10a:	f7ff ffdb 	bl	800e0c4 <__mcmp>
 800e10e:	1e05      	subs	r5, r0, #0
 800e110:	d112      	bne.n	800e138 <__mdiff+0x3c>
 800e112:	4629      	mov	r1, r5
 800e114:	4630      	mov	r0, r6
 800e116:	f7ff fd11 	bl	800db3c <_Balloc>
 800e11a:	4602      	mov	r2, r0
 800e11c:	b928      	cbnz	r0, 800e12a <__mdiff+0x2e>
 800e11e:	4b3f      	ldr	r3, [pc, #252]	@ (800e21c <__mdiff+0x120>)
 800e120:	f240 2137 	movw	r1, #567	@ 0x237
 800e124:	483e      	ldr	r0, [pc, #248]	@ (800e220 <__mdiff+0x124>)
 800e126:	f000 ff7b 	bl	800f020 <__assert_func>
 800e12a:	2301      	movs	r3, #1
 800e12c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e130:	4610      	mov	r0, r2
 800e132:	b003      	add	sp, #12
 800e134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e138:	bfbc      	itt	lt
 800e13a:	464b      	movlt	r3, r9
 800e13c:	46a1      	movlt	r9, r4
 800e13e:	4630      	mov	r0, r6
 800e140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e144:	bfba      	itte	lt
 800e146:	461c      	movlt	r4, r3
 800e148:	2501      	movlt	r5, #1
 800e14a:	2500      	movge	r5, #0
 800e14c:	f7ff fcf6 	bl	800db3c <_Balloc>
 800e150:	4602      	mov	r2, r0
 800e152:	b918      	cbnz	r0, 800e15c <__mdiff+0x60>
 800e154:	4b31      	ldr	r3, [pc, #196]	@ (800e21c <__mdiff+0x120>)
 800e156:	f240 2145 	movw	r1, #581	@ 0x245
 800e15a:	e7e3      	b.n	800e124 <__mdiff+0x28>
 800e15c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e160:	6926      	ldr	r6, [r4, #16]
 800e162:	60c5      	str	r5, [r0, #12]
 800e164:	f109 0310 	add.w	r3, r9, #16
 800e168:	f109 0514 	add.w	r5, r9, #20
 800e16c:	f104 0e14 	add.w	lr, r4, #20
 800e170:	f100 0b14 	add.w	fp, r0, #20
 800e174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	46d9      	mov	r9, fp
 800e180:	f04f 0c00 	mov.w	ip, #0
 800e184:	9b01      	ldr	r3, [sp, #4]
 800e186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e18a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e18e:	9301      	str	r3, [sp, #4]
 800e190:	fa1f f38a 	uxth.w	r3, sl
 800e194:	4619      	mov	r1, r3
 800e196:	b283      	uxth	r3, r0
 800e198:	1acb      	subs	r3, r1, r3
 800e19a:	0c00      	lsrs	r0, r0, #16
 800e19c:	4463      	add	r3, ip
 800e19e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e1a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e1ac:	4576      	cmp	r6, lr
 800e1ae:	f849 3b04 	str.w	r3, [r9], #4
 800e1b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1b6:	d8e5      	bhi.n	800e184 <__mdiff+0x88>
 800e1b8:	1b33      	subs	r3, r6, r4
 800e1ba:	3b15      	subs	r3, #21
 800e1bc:	f023 0303 	bic.w	r3, r3, #3
 800e1c0:	3415      	adds	r4, #21
 800e1c2:	3304      	adds	r3, #4
 800e1c4:	42a6      	cmp	r6, r4
 800e1c6:	bf38      	it	cc
 800e1c8:	2304      	movcc	r3, #4
 800e1ca:	441d      	add	r5, r3
 800e1cc:	445b      	add	r3, fp
 800e1ce:	461e      	mov	r6, r3
 800e1d0:	462c      	mov	r4, r5
 800e1d2:	4544      	cmp	r4, r8
 800e1d4:	d30e      	bcc.n	800e1f4 <__mdiff+0xf8>
 800e1d6:	f108 0103 	add.w	r1, r8, #3
 800e1da:	1b49      	subs	r1, r1, r5
 800e1dc:	f021 0103 	bic.w	r1, r1, #3
 800e1e0:	3d03      	subs	r5, #3
 800e1e2:	45a8      	cmp	r8, r5
 800e1e4:	bf38      	it	cc
 800e1e6:	2100      	movcc	r1, #0
 800e1e8:	440b      	add	r3, r1
 800e1ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1ee:	b191      	cbz	r1, 800e216 <__mdiff+0x11a>
 800e1f0:	6117      	str	r7, [r2, #16]
 800e1f2:	e79d      	b.n	800e130 <__mdiff+0x34>
 800e1f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e1f8:	46e6      	mov	lr, ip
 800e1fa:	0c08      	lsrs	r0, r1, #16
 800e1fc:	fa1c fc81 	uxtah	ip, ip, r1
 800e200:	4471      	add	r1, lr
 800e202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e206:	b289      	uxth	r1, r1
 800e208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e20c:	f846 1b04 	str.w	r1, [r6], #4
 800e210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e214:	e7dd      	b.n	800e1d2 <__mdiff+0xd6>
 800e216:	3f01      	subs	r7, #1
 800e218:	e7e7      	b.n	800e1ea <__mdiff+0xee>
 800e21a:	bf00      	nop
 800e21c:	08010b5c 	.word	0x08010b5c
 800e220:	08010bcd 	.word	0x08010bcd

0800e224 <__ulp>:
 800e224:	b082      	sub	sp, #8
 800e226:	ed8d 0b00 	vstr	d0, [sp]
 800e22a:	9a01      	ldr	r2, [sp, #4]
 800e22c:	4b0f      	ldr	r3, [pc, #60]	@ (800e26c <__ulp+0x48>)
 800e22e:	4013      	ands	r3, r2
 800e230:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e234:	2b00      	cmp	r3, #0
 800e236:	dc08      	bgt.n	800e24a <__ulp+0x26>
 800e238:	425b      	negs	r3, r3
 800e23a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e23e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e242:	da04      	bge.n	800e24e <__ulp+0x2a>
 800e244:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e248:	4113      	asrs	r3, r2
 800e24a:	2200      	movs	r2, #0
 800e24c:	e008      	b.n	800e260 <__ulp+0x3c>
 800e24e:	f1a2 0314 	sub.w	r3, r2, #20
 800e252:	2b1e      	cmp	r3, #30
 800e254:	bfda      	itte	le
 800e256:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e25a:	40da      	lsrle	r2, r3
 800e25c:	2201      	movgt	r2, #1
 800e25e:	2300      	movs	r3, #0
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	ec41 0b10 	vmov	d0, r0, r1
 800e268:	b002      	add	sp, #8
 800e26a:	4770      	bx	lr
 800e26c:	7ff00000 	.word	0x7ff00000

0800e270 <__b2d>:
 800e270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e274:	6906      	ldr	r6, [r0, #16]
 800e276:	f100 0814 	add.w	r8, r0, #20
 800e27a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e27e:	1f37      	subs	r7, r6, #4
 800e280:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e284:	4610      	mov	r0, r2
 800e286:	f7ff fd4b 	bl	800dd20 <__hi0bits>
 800e28a:	f1c0 0320 	rsb	r3, r0, #32
 800e28e:	280a      	cmp	r0, #10
 800e290:	600b      	str	r3, [r1, #0]
 800e292:	491b      	ldr	r1, [pc, #108]	@ (800e300 <__b2d+0x90>)
 800e294:	dc15      	bgt.n	800e2c2 <__b2d+0x52>
 800e296:	f1c0 0c0b 	rsb	ip, r0, #11
 800e29a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e29e:	45b8      	cmp	r8, r7
 800e2a0:	ea43 0501 	orr.w	r5, r3, r1
 800e2a4:	bf34      	ite	cc
 800e2a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2aa:	2300      	movcs	r3, #0
 800e2ac:	3015      	adds	r0, #21
 800e2ae:	fa02 f000 	lsl.w	r0, r2, r0
 800e2b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800e2b6:	4303      	orrs	r3, r0
 800e2b8:	461c      	mov	r4, r3
 800e2ba:	ec45 4b10 	vmov	d0, r4, r5
 800e2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c2:	45b8      	cmp	r8, r7
 800e2c4:	bf3a      	itte	cc
 800e2c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e2ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800e2ce:	2300      	movcs	r3, #0
 800e2d0:	380b      	subs	r0, #11
 800e2d2:	d012      	beq.n	800e2fa <__b2d+0x8a>
 800e2d4:	f1c0 0120 	rsb	r1, r0, #32
 800e2d8:	fa23 f401 	lsr.w	r4, r3, r1
 800e2dc:	4082      	lsls	r2, r0
 800e2de:	4322      	orrs	r2, r4
 800e2e0:	4547      	cmp	r7, r8
 800e2e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e2e6:	bf8c      	ite	hi
 800e2e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e2ec:	2200      	movls	r2, #0
 800e2ee:	4083      	lsls	r3, r0
 800e2f0:	40ca      	lsrs	r2, r1
 800e2f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	e7de      	b.n	800e2b8 <__b2d+0x48>
 800e2fa:	ea42 0501 	orr.w	r5, r2, r1
 800e2fe:	e7db      	b.n	800e2b8 <__b2d+0x48>
 800e300:	3ff00000 	.word	0x3ff00000

0800e304 <__d2b>:
 800e304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e308:	460f      	mov	r7, r1
 800e30a:	2101      	movs	r1, #1
 800e30c:	ec59 8b10 	vmov	r8, r9, d0
 800e310:	4616      	mov	r6, r2
 800e312:	f7ff fc13 	bl	800db3c <_Balloc>
 800e316:	4604      	mov	r4, r0
 800e318:	b930      	cbnz	r0, 800e328 <__d2b+0x24>
 800e31a:	4602      	mov	r2, r0
 800e31c:	4b23      	ldr	r3, [pc, #140]	@ (800e3ac <__d2b+0xa8>)
 800e31e:	4824      	ldr	r0, [pc, #144]	@ (800e3b0 <__d2b+0xac>)
 800e320:	f240 310f 	movw	r1, #783	@ 0x30f
 800e324:	f000 fe7c 	bl	800f020 <__assert_func>
 800e328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e32c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e330:	b10d      	cbz	r5, 800e336 <__d2b+0x32>
 800e332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e336:	9301      	str	r3, [sp, #4]
 800e338:	f1b8 0300 	subs.w	r3, r8, #0
 800e33c:	d023      	beq.n	800e386 <__d2b+0x82>
 800e33e:	4668      	mov	r0, sp
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	f7ff fd0c 	bl	800dd5e <__lo0bits>
 800e346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e34a:	b1d0      	cbz	r0, 800e382 <__d2b+0x7e>
 800e34c:	f1c0 0320 	rsb	r3, r0, #32
 800e350:	fa02 f303 	lsl.w	r3, r2, r3
 800e354:	430b      	orrs	r3, r1
 800e356:	40c2      	lsrs	r2, r0
 800e358:	6163      	str	r3, [r4, #20]
 800e35a:	9201      	str	r2, [sp, #4]
 800e35c:	9b01      	ldr	r3, [sp, #4]
 800e35e:	61a3      	str	r3, [r4, #24]
 800e360:	2b00      	cmp	r3, #0
 800e362:	bf0c      	ite	eq
 800e364:	2201      	moveq	r2, #1
 800e366:	2202      	movne	r2, #2
 800e368:	6122      	str	r2, [r4, #16]
 800e36a:	b1a5      	cbz	r5, 800e396 <__d2b+0x92>
 800e36c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e370:	4405      	add	r5, r0
 800e372:	603d      	str	r5, [r7, #0]
 800e374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e378:	6030      	str	r0, [r6, #0]
 800e37a:	4620      	mov	r0, r4
 800e37c:	b003      	add	sp, #12
 800e37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e382:	6161      	str	r1, [r4, #20]
 800e384:	e7ea      	b.n	800e35c <__d2b+0x58>
 800e386:	a801      	add	r0, sp, #4
 800e388:	f7ff fce9 	bl	800dd5e <__lo0bits>
 800e38c:	9b01      	ldr	r3, [sp, #4]
 800e38e:	6163      	str	r3, [r4, #20]
 800e390:	3020      	adds	r0, #32
 800e392:	2201      	movs	r2, #1
 800e394:	e7e8      	b.n	800e368 <__d2b+0x64>
 800e396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e39a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e39e:	6038      	str	r0, [r7, #0]
 800e3a0:	6918      	ldr	r0, [r3, #16]
 800e3a2:	f7ff fcbd 	bl	800dd20 <__hi0bits>
 800e3a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3aa:	e7e5      	b.n	800e378 <__d2b+0x74>
 800e3ac:	08010b5c 	.word	0x08010b5c
 800e3b0:	08010bcd 	.word	0x08010bcd

0800e3b4 <__ratio>:
 800e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	b085      	sub	sp, #20
 800e3ba:	e9cd 1000 	strd	r1, r0, [sp]
 800e3be:	a902      	add	r1, sp, #8
 800e3c0:	f7ff ff56 	bl	800e270 <__b2d>
 800e3c4:	9800      	ldr	r0, [sp, #0]
 800e3c6:	a903      	add	r1, sp, #12
 800e3c8:	ec55 4b10 	vmov	r4, r5, d0
 800e3cc:	f7ff ff50 	bl	800e270 <__b2d>
 800e3d0:	9b01      	ldr	r3, [sp, #4]
 800e3d2:	6919      	ldr	r1, [r3, #16]
 800e3d4:	9b00      	ldr	r3, [sp, #0]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	1ac9      	subs	r1, r1, r3
 800e3da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e3de:	1a9b      	subs	r3, r3, r2
 800e3e0:	ec5b ab10 	vmov	sl, fp, d0
 800e3e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bfce      	itee	gt
 800e3ec:	462a      	movgt	r2, r5
 800e3ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e3f2:	465a      	movle	r2, fp
 800e3f4:	462f      	mov	r7, r5
 800e3f6:	46d9      	mov	r9, fp
 800e3f8:	bfcc      	ite	gt
 800e3fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e3fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e402:	464b      	mov	r3, r9
 800e404:	4652      	mov	r2, sl
 800e406:	4620      	mov	r0, r4
 800e408:	4639      	mov	r1, r7
 800e40a:	f7f2 fa2f 	bl	800086c <__aeabi_ddiv>
 800e40e:	ec41 0b10 	vmov	d0, r0, r1
 800e412:	b005      	add	sp, #20
 800e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e418 <__copybits>:
 800e418:	3901      	subs	r1, #1
 800e41a:	b570      	push	{r4, r5, r6, lr}
 800e41c:	1149      	asrs	r1, r1, #5
 800e41e:	6914      	ldr	r4, [r2, #16]
 800e420:	3101      	adds	r1, #1
 800e422:	f102 0314 	add.w	r3, r2, #20
 800e426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e42a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e42e:	1f05      	subs	r5, r0, #4
 800e430:	42a3      	cmp	r3, r4
 800e432:	d30c      	bcc.n	800e44e <__copybits+0x36>
 800e434:	1aa3      	subs	r3, r4, r2
 800e436:	3b11      	subs	r3, #17
 800e438:	f023 0303 	bic.w	r3, r3, #3
 800e43c:	3211      	adds	r2, #17
 800e43e:	42a2      	cmp	r2, r4
 800e440:	bf88      	it	hi
 800e442:	2300      	movhi	r3, #0
 800e444:	4418      	add	r0, r3
 800e446:	2300      	movs	r3, #0
 800e448:	4288      	cmp	r0, r1
 800e44a:	d305      	bcc.n	800e458 <__copybits+0x40>
 800e44c:	bd70      	pop	{r4, r5, r6, pc}
 800e44e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e452:	f845 6f04 	str.w	r6, [r5, #4]!
 800e456:	e7eb      	b.n	800e430 <__copybits+0x18>
 800e458:	f840 3b04 	str.w	r3, [r0], #4
 800e45c:	e7f4      	b.n	800e448 <__copybits+0x30>

0800e45e <__any_on>:
 800e45e:	f100 0214 	add.w	r2, r0, #20
 800e462:	6900      	ldr	r0, [r0, #16]
 800e464:	114b      	asrs	r3, r1, #5
 800e466:	4298      	cmp	r0, r3
 800e468:	b510      	push	{r4, lr}
 800e46a:	db11      	blt.n	800e490 <__any_on+0x32>
 800e46c:	dd0a      	ble.n	800e484 <__any_on+0x26>
 800e46e:	f011 011f 	ands.w	r1, r1, #31
 800e472:	d007      	beq.n	800e484 <__any_on+0x26>
 800e474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e478:	fa24 f001 	lsr.w	r0, r4, r1
 800e47c:	fa00 f101 	lsl.w	r1, r0, r1
 800e480:	428c      	cmp	r4, r1
 800e482:	d10b      	bne.n	800e49c <__any_on+0x3e>
 800e484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e488:	4293      	cmp	r3, r2
 800e48a:	d803      	bhi.n	800e494 <__any_on+0x36>
 800e48c:	2000      	movs	r0, #0
 800e48e:	bd10      	pop	{r4, pc}
 800e490:	4603      	mov	r3, r0
 800e492:	e7f7      	b.n	800e484 <__any_on+0x26>
 800e494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e498:	2900      	cmp	r1, #0
 800e49a:	d0f5      	beq.n	800e488 <__any_on+0x2a>
 800e49c:	2001      	movs	r0, #1
 800e49e:	e7f6      	b.n	800e48e <__any_on+0x30>

0800e4a0 <_malloc_usable_size_r>:
 800e4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a4:	1f18      	subs	r0, r3, #4
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	bfbc      	itt	lt
 800e4aa:	580b      	ldrlt	r3, [r1, r0]
 800e4ac:	18c0      	addlt	r0, r0, r3
 800e4ae:	4770      	bx	lr

0800e4b0 <__ascii_wctomb>:
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	4608      	mov	r0, r1
 800e4b4:	b141      	cbz	r1, 800e4c8 <__ascii_wctomb+0x18>
 800e4b6:	2aff      	cmp	r2, #255	@ 0xff
 800e4b8:	d904      	bls.n	800e4c4 <__ascii_wctomb+0x14>
 800e4ba:	228a      	movs	r2, #138	@ 0x8a
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c2:	4770      	bx	lr
 800e4c4:	700a      	strb	r2, [r1, #0]
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	4770      	bx	lr

0800e4ca <__ssputs_r>:
 800e4ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ce:	688e      	ldr	r6, [r1, #8]
 800e4d0:	461f      	mov	r7, r3
 800e4d2:	42be      	cmp	r6, r7
 800e4d4:	680b      	ldr	r3, [r1, #0]
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	460c      	mov	r4, r1
 800e4da:	4690      	mov	r8, r2
 800e4dc:	d82d      	bhi.n	800e53a <__ssputs_r+0x70>
 800e4de:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4e2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e4e6:	d026      	beq.n	800e536 <__ssputs_r+0x6c>
 800e4e8:	6965      	ldr	r5, [r4, #20]
 800e4ea:	6909      	ldr	r1, [r1, #16]
 800e4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4f0:	eba3 0901 	sub.w	r9, r3, r1
 800e4f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e4f8:	1c7b      	adds	r3, r7, #1
 800e4fa:	444b      	add	r3, r9
 800e4fc:	106d      	asrs	r5, r5, #1
 800e4fe:	429d      	cmp	r5, r3
 800e500:	bf38      	it	cc
 800e502:	461d      	movcc	r5, r3
 800e504:	0553      	lsls	r3, r2, #21
 800e506:	d527      	bpl.n	800e558 <__ssputs_r+0x8e>
 800e508:	4629      	mov	r1, r5
 800e50a:	f7fc f963 	bl	800a7d4 <_malloc_r>
 800e50e:	4606      	mov	r6, r0
 800e510:	b360      	cbz	r0, 800e56c <__ssputs_r+0xa2>
 800e512:	6921      	ldr	r1, [r4, #16]
 800e514:	464a      	mov	r2, r9
 800e516:	f7fe f90e 	bl	800c736 <memcpy>
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e524:	81a3      	strh	r3, [r4, #12]
 800e526:	6126      	str	r6, [r4, #16]
 800e528:	6165      	str	r5, [r4, #20]
 800e52a:	444e      	add	r6, r9
 800e52c:	eba5 0509 	sub.w	r5, r5, r9
 800e530:	6026      	str	r6, [r4, #0]
 800e532:	60a5      	str	r5, [r4, #8]
 800e534:	463e      	mov	r6, r7
 800e536:	42be      	cmp	r6, r7
 800e538:	d900      	bls.n	800e53c <__ssputs_r+0x72>
 800e53a:	463e      	mov	r6, r7
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	4632      	mov	r2, r6
 800e540:	4641      	mov	r1, r8
 800e542:	f000 fd52 	bl	800efea <memmove>
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	1b9b      	subs	r3, r3, r6
 800e54a:	60a3      	str	r3, [r4, #8]
 800e54c:	6823      	ldr	r3, [r4, #0]
 800e54e:	4433      	add	r3, r6
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	2000      	movs	r0, #0
 800e554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e558:	462a      	mov	r2, r5
 800e55a:	f7fc f9cf 	bl	800a8fc <_realloc_r>
 800e55e:	4606      	mov	r6, r0
 800e560:	2800      	cmp	r0, #0
 800e562:	d1e0      	bne.n	800e526 <__ssputs_r+0x5c>
 800e564:	6921      	ldr	r1, [r4, #16]
 800e566:	4650      	mov	r0, sl
 800e568:	f7fe ff52 	bl	800d410 <_free_r>
 800e56c:	230c      	movs	r3, #12
 800e56e:	f8ca 3000 	str.w	r3, [sl]
 800e572:	89a3      	ldrh	r3, [r4, #12]
 800e574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e578:	81a3      	strh	r3, [r4, #12]
 800e57a:	f04f 30ff 	mov.w	r0, #4294967295
 800e57e:	e7e9      	b.n	800e554 <__ssputs_r+0x8a>

0800e580 <_svfiprintf_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	4698      	mov	r8, r3
 800e586:	898b      	ldrh	r3, [r1, #12]
 800e588:	061b      	lsls	r3, r3, #24
 800e58a:	b09d      	sub	sp, #116	@ 0x74
 800e58c:	4607      	mov	r7, r0
 800e58e:	460d      	mov	r5, r1
 800e590:	4614      	mov	r4, r2
 800e592:	d510      	bpl.n	800e5b6 <_svfiprintf_r+0x36>
 800e594:	690b      	ldr	r3, [r1, #16]
 800e596:	b973      	cbnz	r3, 800e5b6 <_svfiprintf_r+0x36>
 800e598:	2140      	movs	r1, #64	@ 0x40
 800e59a:	f7fc f91b 	bl	800a7d4 <_malloc_r>
 800e59e:	6028      	str	r0, [r5, #0]
 800e5a0:	6128      	str	r0, [r5, #16]
 800e5a2:	b930      	cbnz	r0, 800e5b2 <_svfiprintf_r+0x32>
 800e5a4:	230c      	movs	r3, #12
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ac:	b01d      	add	sp, #116	@ 0x74
 800e5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b2:	2340      	movs	r3, #64	@ 0x40
 800e5b4:	616b      	str	r3, [r5, #20]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ba:	2320      	movs	r3, #32
 800e5bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5c4:	2330      	movs	r3, #48	@ 0x30
 800e5c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e764 <_svfiprintf_r+0x1e4>
 800e5ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5ce:	f04f 0901 	mov.w	r9, #1
 800e5d2:	4623      	mov	r3, r4
 800e5d4:	469a      	mov	sl, r3
 800e5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5da:	b10a      	cbz	r2, 800e5e0 <_svfiprintf_r+0x60>
 800e5dc:	2a25      	cmp	r2, #37	@ 0x25
 800e5de:	d1f9      	bne.n	800e5d4 <_svfiprintf_r+0x54>
 800e5e0:	ebba 0b04 	subs.w	fp, sl, r4
 800e5e4:	d00b      	beq.n	800e5fe <_svfiprintf_r+0x7e>
 800e5e6:	465b      	mov	r3, fp
 800e5e8:	4622      	mov	r2, r4
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f7ff ff6c 	bl	800e4ca <__ssputs_r>
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	f000 80a7 	beq.w	800e746 <_svfiprintf_r+0x1c6>
 800e5f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5fa:	445a      	add	r2, fp
 800e5fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e602:	2b00      	cmp	r3, #0
 800e604:	f000 809f 	beq.w	800e746 <_svfiprintf_r+0x1c6>
 800e608:	2300      	movs	r3, #0
 800e60a:	f04f 32ff 	mov.w	r2, #4294967295
 800e60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e612:	f10a 0a01 	add.w	sl, sl, #1
 800e616:	9304      	str	r3, [sp, #16]
 800e618:	9307      	str	r3, [sp, #28]
 800e61a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e61e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e620:	4654      	mov	r4, sl
 800e622:	2205      	movs	r2, #5
 800e624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e628:	484e      	ldr	r0, [pc, #312]	@ (800e764 <_svfiprintf_r+0x1e4>)
 800e62a:	f7f1 fde1 	bl	80001f0 <memchr>
 800e62e:	9a04      	ldr	r2, [sp, #16]
 800e630:	b9d8      	cbnz	r0, 800e66a <_svfiprintf_r+0xea>
 800e632:	06d0      	lsls	r0, r2, #27
 800e634:	bf44      	itt	mi
 800e636:	2320      	movmi	r3, #32
 800e638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e63c:	0711      	lsls	r1, r2, #28
 800e63e:	bf44      	itt	mi
 800e640:	232b      	movmi	r3, #43	@ 0x2b
 800e642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e646:	f89a 3000 	ldrb.w	r3, [sl]
 800e64a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e64c:	d015      	beq.n	800e67a <_svfiprintf_r+0xfa>
 800e64e:	9a07      	ldr	r2, [sp, #28]
 800e650:	4654      	mov	r4, sl
 800e652:	2000      	movs	r0, #0
 800e654:	f04f 0c0a 	mov.w	ip, #10
 800e658:	4621      	mov	r1, r4
 800e65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e65e:	3b30      	subs	r3, #48	@ 0x30
 800e660:	2b09      	cmp	r3, #9
 800e662:	d94b      	bls.n	800e6fc <_svfiprintf_r+0x17c>
 800e664:	b1b0      	cbz	r0, 800e694 <_svfiprintf_r+0x114>
 800e666:	9207      	str	r2, [sp, #28]
 800e668:	e014      	b.n	800e694 <_svfiprintf_r+0x114>
 800e66a:	eba0 0308 	sub.w	r3, r0, r8
 800e66e:	fa09 f303 	lsl.w	r3, r9, r3
 800e672:	4313      	orrs	r3, r2
 800e674:	9304      	str	r3, [sp, #16]
 800e676:	46a2      	mov	sl, r4
 800e678:	e7d2      	b.n	800e620 <_svfiprintf_r+0xa0>
 800e67a:	9b03      	ldr	r3, [sp, #12]
 800e67c:	1d19      	adds	r1, r3, #4
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	9103      	str	r1, [sp, #12]
 800e682:	2b00      	cmp	r3, #0
 800e684:	bfbb      	ittet	lt
 800e686:	425b      	neglt	r3, r3
 800e688:	f042 0202 	orrlt.w	r2, r2, #2
 800e68c:	9307      	strge	r3, [sp, #28]
 800e68e:	9307      	strlt	r3, [sp, #28]
 800e690:	bfb8      	it	lt
 800e692:	9204      	strlt	r2, [sp, #16]
 800e694:	7823      	ldrb	r3, [r4, #0]
 800e696:	2b2e      	cmp	r3, #46	@ 0x2e
 800e698:	d10a      	bne.n	800e6b0 <_svfiprintf_r+0x130>
 800e69a:	7863      	ldrb	r3, [r4, #1]
 800e69c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e69e:	d132      	bne.n	800e706 <_svfiprintf_r+0x186>
 800e6a0:	9b03      	ldr	r3, [sp, #12]
 800e6a2:	1d1a      	adds	r2, r3, #4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	9203      	str	r2, [sp, #12]
 800e6a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6ac:	3402      	adds	r4, #2
 800e6ae:	9305      	str	r3, [sp, #20]
 800e6b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e774 <_svfiprintf_r+0x1f4>
 800e6b4:	7821      	ldrb	r1, [r4, #0]
 800e6b6:	2203      	movs	r2, #3
 800e6b8:	4650      	mov	r0, sl
 800e6ba:	f7f1 fd99 	bl	80001f0 <memchr>
 800e6be:	b138      	cbz	r0, 800e6d0 <_svfiprintf_r+0x150>
 800e6c0:	9b04      	ldr	r3, [sp, #16]
 800e6c2:	eba0 000a 	sub.w	r0, r0, sl
 800e6c6:	2240      	movs	r2, #64	@ 0x40
 800e6c8:	4082      	lsls	r2, r0
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	3401      	adds	r4, #1
 800e6ce:	9304      	str	r3, [sp, #16]
 800e6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6d4:	4824      	ldr	r0, [pc, #144]	@ (800e768 <_svfiprintf_r+0x1e8>)
 800e6d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6da:	2206      	movs	r2, #6
 800e6dc:	f7f1 fd88 	bl	80001f0 <memchr>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d036      	beq.n	800e752 <_svfiprintf_r+0x1d2>
 800e6e4:	4b21      	ldr	r3, [pc, #132]	@ (800e76c <_svfiprintf_r+0x1ec>)
 800e6e6:	bb1b      	cbnz	r3, 800e730 <_svfiprintf_r+0x1b0>
 800e6e8:	9b03      	ldr	r3, [sp, #12]
 800e6ea:	3307      	adds	r3, #7
 800e6ec:	f023 0307 	bic.w	r3, r3, #7
 800e6f0:	3308      	adds	r3, #8
 800e6f2:	9303      	str	r3, [sp, #12]
 800e6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6f6:	4433      	add	r3, r6
 800e6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6fa:	e76a      	b.n	800e5d2 <_svfiprintf_r+0x52>
 800e6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e700:	460c      	mov	r4, r1
 800e702:	2001      	movs	r0, #1
 800e704:	e7a8      	b.n	800e658 <_svfiprintf_r+0xd8>
 800e706:	2300      	movs	r3, #0
 800e708:	3401      	adds	r4, #1
 800e70a:	9305      	str	r3, [sp, #20]
 800e70c:	4619      	mov	r1, r3
 800e70e:	f04f 0c0a 	mov.w	ip, #10
 800e712:	4620      	mov	r0, r4
 800e714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e718:	3a30      	subs	r2, #48	@ 0x30
 800e71a:	2a09      	cmp	r2, #9
 800e71c:	d903      	bls.n	800e726 <_svfiprintf_r+0x1a6>
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d0c6      	beq.n	800e6b0 <_svfiprintf_r+0x130>
 800e722:	9105      	str	r1, [sp, #20]
 800e724:	e7c4      	b.n	800e6b0 <_svfiprintf_r+0x130>
 800e726:	fb0c 2101 	mla	r1, ip, r1, r2
 800e72a:	4604      	mov	r4, r0
 800e72c:	2301      	movs	r3, #1
 800e72e:	e7f0      	b.n	800e712 <_svfiprintf_r+0x192>
 800e730:	ab03      	add	r3, sp, #12
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	462a      	mov	r2, r5
 800e736:	4b0e      	ldr	r3, [pc, #56]	@ (800e770 <_svfiprintf_r+0x1f0>)
 800e738:	a904      	add	r1, sp, #16
 800e73a:	4638      	mov	r0, r7
 800e73c:	f7fd f83c 	bl	800b7b8 <_printf_float>
 800e740:	1c42      	adds	r2, r0, #1
 800e742:	4606      	mov	r6, r0
 800e744:	d1d6      	bne.n	800e6f4 <_svfiprintf_r+0x174>
 800e746:	89ab      	ldrh	r3, [r5, #12]
 800e748:	065b      	lsls	r3, r3, #25
 800e74a:	f53f af2d 	bmi.w	800e5a8 <_svfiprintf_r+0x28>
 800e74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e750:	e72c      	b.n	800e5ac <_svfiprintf_r+0x2c>
 800e752:	ab03      	add	r3, sp, #12
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	462a      	mov	r2, r5
 800e758:	4b05      	ldr	r3, [pc, #20]	@ (800e770 <_svfiprintf_r+0x1f0>)
 800e75a:	a904      	add	r1, sp, #16
 800e75c:	4638      	mov	r0, r7
 800e75e:	f7fd fac3 	bl	800bce8 <_printf_i>
 800e762:	e7ed      	b.n	800e740 <_svfiprintf_r+0x1c0>
 800e764:	08010d28 	.word	0x08010d28
 800e768:	08010d32 	.word	0x08010d32
 800e76c:	0800b7b9 	.word	0x0800b7b9
 800e770:	0800e4cb 	.word	0x0800e4cb
 800e774:	08010d2e 	.word	0x08010d2e

0800e778 <_sungetc_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	1c4b      	adds	r3, r1, #1
 800e77c:	4614      	mov	r4, r2
 800e77e:	d103      	bne.n	800e788 <_sungetc_r+0x10>
 800e780:	f04f 35ff 	mov.w	r5, #4294967295
 800e784:	4628      	mov	r0, r5
 800e786:	bd38      	pop	{r3, r4, r5, pc}
 800e788:	8993      	ldrh	r3, [r2, #12]
 800e78a:	f023 0320 	bic.w	r3, r3, #32
 800e78e:	8193      	strh	r3, [r2, #12]
 800e790:	6853      	ldr	r3, [r2, #4]
 800e792:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e794:	b2cd      	uxtb	r5, r1
 800e796:	b18a      	cbz	r2, 800e7bc <_sungetc_r+0x44>
 800e798:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e79a:	429a      	cmp	r2, r3
 800e79c:	dd08      	ble.n	800e7b0 <_sungetc_r+0x38>
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	1e5a      	subs	r2, r3, #1
 800e7a2:	6022      	str	r2, [r4, #0]
 800e7a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e7a8:	6863      	ldr	r3, [r4, #4]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	6063      	str	r3, [r4, #4]
 800e7ae:	e7e9      	b.n	800e784 <_sungetc_r+0xc>
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	f000 fbe0 	bl	800ef76 <__submore>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d0f1      	beq.n	800e79e <_sungetc_r+0x26>
 800e7ba:	e7e1      	b.n	800e780 <_sungetc_r+0x8>
 800e7bc:	6921      	ldr	r1, [r4, #16]
 800e7be:	6822      	ldr	r2, [r4, #0]
 800e7c0:	b141      	cbz	r1, 800e7d4 <_sungetc_r+0x5c>
 800e7c2:	4291      	cmp	r1, r2
 800e7c4:	d206      	bcs.n	800e7d4 <_sungetc_r+0x5c>
 800e7c6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e7ca:	42a9      	cmp	r1, r5
 800e7cc:	d102      	bne.n	800e7d4 <_sungetc_r+0x5c>
 800e7ce:	3a01      	subs	r2, #1
 800e7d0:	6022      	str	r2, [r4, #0]
 800e7d2:	e7ea      	b.n	800e7aa <_sungetc_r+0x32>
 800e7d4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e7d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7de:	2303      	movs	r3, #3
 800e7e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e7e2:	4623      	mov	r3, r4
 800e7e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e7de      	b.n	800e7ac <_sungetc_r+0x34>

0800e7ee <__ssrefill_r>:
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	460c      	mov	r4, r1
 800e7f2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e7f4:	b169      	cbz	r1, 800e812 <__ssrefill_r+0x24>
 800e7f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7fa:	4299      	cmp	r1, r3
 800e7fc:	d001      	beq.n	800e802 <__ssrefill_r+0x14>
 800e7fe:	f7fe fe07 	bl	800d410 <_free_r>
 800e802:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e804:	6063      	str	r3, [r4, #4]
 800e806:	2000      	movs	r0, #0
 800e808:	6360      	str	r0, [r4, #52]	@ 0x34
 800e80a:	b113      	cbz	r3, 800e812 <__ssrefill_r+0x24>
 800e80c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e80e:	6023      	str	r3, [r4, #0]
 800e810:	bd10      	pop	{r4, pc}
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	2300      	movs	r3, #0
 800e818:	6063      	str	r3, [r4, #4]
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	f043 0320 	orr.w	r3, r3, #32
 800e820:	81a3      	strh	r3, [r4, #12]
 800e822:	f04f 30ff 	mov.w	r0, #4294967295
 800e826:	e7f3      	b.n	800e810 <__ssrefill_r+0x22>

0800e828 <__ssvfiscanf_r>:
 800e828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e82c:	460c      	mov	r4, r1
 800e82e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e832:	2100      	movs	r1, #0
 800e834:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e838:	49a5      	ldr	r1, [pc, #660]	@ (800ead0 <__ssvfiscanf_r+0x2a8>)
 800e83a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e83c:	f10d 0804 	add.w	r8, sp, #4
 800e840:	49a4      	ldr	r1, [pc, #656]	@ (800ead4 <__ssvfiscanf_r+0x2ac>)
 800e842:	4fa5      	ldr	r7, [pc, #660]	@ (800ead8 <__ssvfiscanf_r+0x2b0>)
 800e844:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e848:	4606      	mov	r6, r0
 800e84a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	7813      	ldrb	r3, [r2, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	f000 8158 	beq.w	800eb06 <__ssvfiscanf_r+0x2de>
 800e856:	5cf9      	ldrb	r1, [r7, r3]
 800e858:	f011 0108 	ands.w	r1, r1, #8
 800e85c:	f102 0501 	add.w	r5, r2, #1
 800e860:	d019      	beq.n	800e896 <__ssvfiscanf_r+0x6e>
 800e862:	6863      	ldr	r3, [r4, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	dd0f      	ble.n	800e888 <__ssvfiscanf_r+0x60>
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	781a      	ldrb	r2, [r3, #0]
 800e86c:	5cba      	ldrb	r2, [r7, r2]
 800e86e:	0712      	lsls	r2, r2, #28
 800e870:	d401      	bmi.n	800e876 <__ssvfiscanf_r+0x4e>
 800e872:	462a      	mov	r2, r5
 800e874:	e7eb      	b.n	800e84e <__ssvfiscanf_r+0x26>
 800e876:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e878:	3201      	adds	r2, #1
 800e87a:	9245      	str	r2, [sp, #276]	@ 0x114
 800e87c:	6862      	ldr	r2, [r4, #4]
 800e87e:	3301      	adds	r3, #1
 800e880:	3a01      	subs	r2, #1
 800e882:	6062      	str	r2, [r4, #4]
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	e7ec      	b.n	800e862 <__ssvfiscanf_r+0x3a>
 800e888:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e88a:	4621      	mov	r1, r4
 800e88c:	4630      	mov	r0, r6
 800e88e:	4798      	blx	r3
 800e890:	2800      	cmp	r0, #0
 800e892:	d0e9      	beq.n	800e868 <__ssvfiscanf_r+0x40>
 800e894:	e7ed      	b.n	800e872 <__ssvfiscanf_r+0x4a>
 800e896:	2b25      	cmp	r3, #37	@ 0x25
 800e898:	d012      	beq.n	800e8c0 <__ssvfiscanf_r+0x98>
 800e89a:	4699      	mov	r9, r3
 800e89c:	6863      	ldr	r3, [r4, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f340 8093 	ble.w	800e9ca <__ssvfiscanf_r+0x1a2>
 800e8a4:	6822      	ldr	r2, [r4, #0]
 800e8a6:	7813      	ldrb	r3, [r2, #0]
 800e8a8:	454b      	cmp	r3, r9
 800e8aa:	f040 812c 	bne.w	800eb06 <__ssvfiscanf_r+0x2de>
 800e8ae:	6863      	ldr	r3, [r4, #4]
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	6063      	str	r3, [r4, #4]
 800e8b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e8b6:	3201      	adds	r2, #1
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	6022      	str	r2, [r4, #0]
 800e8bc:	9345      	str	r3, [sp, #276]	@ 0x114
 800e8be:	e7d8      	b.n	800e872 <__ssvfiscanf_r+0x4a>
 800e8c0:	9141      	str	r1, [sp, #260]	@ 0x104
 800e8c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e8c4:	7853      	ldrb	r3, [r2, #1]
 800e8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8c8:	bf02      	ittt	eq
 800e8ca:	2310      	moveq	r3, #16
 800e8cc:	1c95      	addeq	r5, r2, #2
 800e8ce:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e8d0:	220a      	movs	r2, #10
 800e8d2:	46a9      	mov	r9, r5
 800e8d4:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e8d8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e8dc:	2b09      	cmp	r3, #9
 800e8de:	d91e      	bls.n	800e91e <__ssvfiscanf_r+0xf6>
 800e8e0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800eadc <__ssvfiscanf_r+0x2b4>
 800e8e4:	2203      	movs	r2, #3
 800e8e6:	4650      	mov	r0, sl
 800e8e8:	f7f1 fc82 	bl	80001f0 <memchr>
 800e8ec:	b138      	cbz	r0, 800e8fe <__ssvfiscanf_r+0xd6>
 800e8ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e8f0:	eba0 000a 	sub.w	r0, r0, sl
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	4083      	lsls	r3, r0
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	9341      	str	r3, [sp, #260]	@ 0x104
 800e8fc:	464d      	mov	r5, r9
 800e8fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e902:	2b78      	cmp	r3, #120	@ 0x78
 800e904:	d806      	bhi.n	800e914 <__ssvfiscanf_r+0xec>
 800e906:	2b57      	cmp	r3, #87	@ 0x57
 800e908:	d810      	bhi.n	800e92c <__ssvfiscanf_r+0x104>
 800e90a:	2b25      	cmp	r3, #37	@ 0x25
 800e90c:	d0c5      	beq.n	800e89a <__ssvfiscanf_r+0x72>
 800e90e:	d857      	bhi.n	800e9c0 <__ssvfiscanf_r+0x198>
 800e910:	2b00      	cmp	r3, #0
 800e912:	d065      	beq.n	800e9e0 <__ssvfiscanf_r+0x1b8>
 800e914:	2303      	movs	r3, #3
 800e916:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e918:	230a      	movs	r3, #10
 800e91a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e91c:	e078      	b.n	800ea10 <__ssvfiscanf_r+0x1e8>
 800e91e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e920:	fb02 1103 	mla	r1, r2, r3, r1
 800e924:	3930      	subs	r1, #48	@ 0x30
 800e926:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e928:	464d      	mov	r5, r9
 800e92a:	e7d2      	b.n	800e8d2 <__ssvfiscanf_r+0xaa>
 800e92c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e930:	2a20      	cmp	r2, #32
 800e932:	d8ef      	bhi.n	800e914 <__ssvfiscanf_r+0xec>
 800e934:	a101      	add	r1, pc, #4	@ (adr r1, 800e93c <__ssvfiscanf_r+0x114>)
 800e936:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e93a:	bf00      	nop
 800e93c:	0800e9ef 	.word	0x0800e9ef
 800e940:	0800e915 	.word	0x0800e915
 800e944:	0800e915 	.word	0x0800e915
 800e948:	0800ea49 	.word	0x0800ea49
 800e94c:	0800e915 	.word	0x0800e915
 800e950:	0800e915 	.word	0x0800e915
 800e954:	0800e915 	.word	0x0800e915
 800e958:	0800e915 	.word	0x0800e915
 800e95c:	0800e915 	.word	0x0800e915
 800e960:	0800e915 	.word	0x0800e915
 800e964:	0800e915 	.word	0x0800e915
 800e968:	0800ea5f 	.word	0x0800ea5f
 800e96c:	0800ea45 	.word	0x0800ea45
 800e970:	0800e9c7 	.word	0x0800e9c7
 800e974:	0800e9c7 	.word	0x0800e9c7
 800e978:	0800e9c7 	.word	0x0800e9c7
 800e97c:	0800e915 	.word	0x0800e915
 800e980:	0800ea01 	.word	0x0800ea01
 800e984:	0800e915 	.word	0x0800e915
 800e988:	0800e915 	.word	0x0800e915
 800e98c:	0800e915 	.word	0x0800e915
 800e990:	0800e915 	.word	0x0800e915
 800e994:	0800ea6f 	.word	0x0800ea6f
 800e998:	0800ea09 	.word	0x0800ea09
 800e99c:	0800e9e7 	.word	0x0800e9e7
 800e9a0:	0800e915 	.word	0x0800e915
 800e9a4:	0800e915 	.word	0x0800e915
 800e9a8:	0800ea6b 	.word	0x0800ea6b
 800e9ac:	0800e915 	.word	0x0800e915
 800e9b0:	0800ea45 	.word	0x0800ea45
 800e9b4:	0800e915 	.word	0x0800e915
 800e9b8:	0800e915 	.word	0x0800e915
 800e9bc:	0800e9ef 	.word	0x0800e9ef
 800e9c0:	3b45      	subs	r3, #69	@ 0x45
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d8a6      	bhi.n	800e914 <__ssvfiscanf_r+0xec>
 800e9c6:	2305      	movs	r3, #5
 800e9c8:	e021      	b.n	800ea0e <__ssvfiscanf_r+0x1e6>
 800e9ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	4798      	blx	r3
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	f43f af66 	beq.w	800e8a4 <__ssvfiscanf_r+0x7c>
 800e9d8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	f040 808b 	bne.w	800eaf6 <__ssvfiscanf_r+0x2ce>
 800e9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e4:	e08b      	b.n	800eafe <__ssvfiscanf_r+0x2d6>
 800e9e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e9e8:	f042 0220 	orr.w	r2, r2, #32
 800e9ec:	9241      	str	r2, [sp, #260]	@ 0x104
 800e9ee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e9f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e9f4:	9241      	str	r2, [sp, #260]	@ 0x104
 800e9f6:	2210      	movs	r2, #16
 800e9f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800e9fa:	9242      	str	r2, [sp, #264]	@ 0x108
 800e9fc:	d902      	bls.n	800ea04 <__ssvfiscanf_r+0x1dc>
 800e9fe:	e005      	b.n	800ea0c <__ssvfiscanf_r+0x1e4>
 800ea00:	2300      	movs	r3, #0
 800ea02:	9342      	str	r3, [sp, #264]	@ 0x108
 800ea04:	2303      	movs	r3, #3
 800ea06:	e002      	b.n	800ea0e <__ssvfiscanf_r+0x1e6>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	9342      	str	r3, [sp, #264]	@ 0x108
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ea10:	6863      	ldr	r3, [r4, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	dd39      	ble.n	800ea8a <__ssvfiscanf_r+0x262>
 800ea16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ea18:	0659      	lsls	r1, r3, #25
 800ea1a:	d404      	bmi.n	800ea26 <__ssvfiscanf_r+0x1fe>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	781a      	ldrb	r2, [r3, #0]
 800ea20:	5cba      	ldrb	r2, [r7, r2]
 800ea22:	0712      	lsls	r2, r2, #28
 800ea24:	d438      	bmi.n	800ea98 <__ssvfiscanf_r+0x270>
 800ea26:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	dc47      	bgt.n	800eabc <__ssvfiscanf_r+0x294>
 800ea2c:	466b      	mov	r3, sp
 800ea2e:	4622      	mov	r2, r4
 800ea30:	a941      	add	r1, sp, #260	@ 0x104
 800ea32:	4630      	mov	r0, r6
 800ea34:	f000 f86c 	bl	800eb10 <_scanf_chars>
 800ea38:	2801      	cmp	r0, #1
 800ea3a:	d064      	beq.n	800eb06 <__ssvfiscanf_r+0x2de>
 800ea3c:	2802      	cmp	r0, #2
 800ea3e:	f47f af18 	bne.w	800e872 <__ssvfiscanf_r+0x4a>
 800ea42:	e7c9      	b.n	800e9d8 <__ssvfiscanf_r+0x1b0>
 800ea44:	220a      	movs	r2, #10
 800ea46:	e7d7      	b.n	800e9f8 <__ssvfiscanf_r+0x1d0>
 800ea48:	4629      	mov	r1, r5
 800ea4a:	4640      	mov	r0, r8
 800ea4c:	f000 fa5a 	bl	800ef04 <__sccl>
 800ea50:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ea52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea56:	9341      	str	r3, [sp, #260]	@ 0x104
 800ea58:	4605      	mov	r5, r0
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e7d7      	b.n	800ea0e <__ssvfiscanf_r+0x1e6>
 800ea5e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ea60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea64:	9341      	str	r3, [sp, #260]	@ 0x104
 800ea66:	2300      	movs	r3, #0
 800ea68:	e7d1      	b.n	800ea0e <__ssvfiscanf_r+0x1e6>
 800ea6a:	2302      	movs	r3, #2
 800ea6c:	e7cf      	b.n	800ea0e <__ssvfiscanf_r+0x1e6>
 800ea6e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ea70:	06c3      	lsls	r3, r0, #27
 800ea72:	f53f aefe 	bmi.w	800e872 <__ssvfiscanf_r+0x4a>
 800ea76:	9b00      	ldr	r3, [sp, #0]
 800ea78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ea7a:	1d19      	adds	r1, r3, #4
 800ea7c:	9100      	str	r1, [sp, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	07c0      	lsls	r0, r0, #31
 800ea82:	bf4c      	ite	mi
 800ea84:	801a      	strhmi	r2, [r3, #0]
 800ea86:	601a      	strpl	r2, [r3, #0]
 800ea88:	e6f3      	b.n	800e872 <__ssvfiscanf_r+0x4a>
 800ea8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	4630      	mov	r0, r6
 800ea90:	4798      	blx	r3
 800ea92:	2800      	cmp	r0, #0
 800ea94:	d0bf      	beq.n	800ea16 <__ssvfiscanf_r+0x1ee>
 800ea96:	e79f      	b.n	800e9d8 <__ssvfiscanf_r+0x1b0>
 800ea98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ea9a:	3201      	adds	r2, #1
 800ea9c:	9245      	str	r2, [sp, #276]	@ 0x114
 800ea9e:	6862      	ldr	r2, [r4, #4]
 800eaa0:	3a01      	subs	r2, #1
 800eaa2:	2a00      	cmp	r2, #0
 800eaa4:	6062      	str	r2, [r4, #4]
 800eaa6:	dd02      	ble.n	800eaae <__ssvfiscanf_r+0x286>
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	6023      	str	r3, [r4, #0]
 800eaac:	e7b6      	b.n	800ea1c <__ssvfiscanf_r+0x1f4>
 800eaae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eab0:	4621      	mov	r1, r4
 800eab2:	4630      	mov	r0, r6
 800eab4:	4798      	blx	r3
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d0b0      	beq.n	800ea1c <__ssvfiscanf_r+0x1f4>
 800eaba:	e78d      	b.n	800e9d8 <__ssvfiscanf_r+0x1b0>
 800eabc:	2b04      	cmp	r3, #4
 800eabe:	dc0f      	bgt.n	800eae0 <__ssvfiscanf_r+0x2b8>
 800eac0:	466b      	mov	r3, sp
 800eac2:	4622      	mov	r2, r4
 800eac4:	a941      	add	r1, sp, #260	@ 0x104
 800eac6:	4630      	mov	r0, r6
 800eac8:	f000 f87c 	bl	800ebc4 <_scanf_i>
 800eacc:	e7b4      	b.n	800ea38 <__ssvfiscanf_r+0x210>
 800eace:	bf00      	nop
 800ead0:	0800e779 	.word	0x0800e779
 800ead4:	0800e7ef 	.word	0x0800e7ef
 800ead8:	080109a1 	.word	0x080109a1
 800eadc:	08010d2e 	.word	0x08010d2e
 800eae0:	4b0a      	ldr	r3, [pc, #40]	@ (800eb0c <__ssvfiscanf_r+0x2e4>)
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f43f aec5 	beq.w	800e872 <__ssvfiscanf_r+0x4a>
 800eae8:	466b      	mov	r3, sp
 800eaea:	4622      	mov	r2, r4
 800eaec:	a941      	add	r1, sp, #260	@ 0x104
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f7fd fa1a 	bl	800bf28 <_scanf_float>
 800eaf4:	e7a0      	b.n	800ea38 <__ssvfiscanf_r+0x210>
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	065b      	lsls	r3, r3, #25
 800eafa:	f53f af71 	bmi.w	800e9e0 <__ssvfiscanf_r+0x1b8>
 800eafe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800eb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb06:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800eb08:	e7f9      	b.n	800eafe <__ssvfiscanf_r+0x2d6>
 800eb0a:	bf00      	nop
 800eb0c:	0800bf29 	.word	0x0800bf29

0800eb10 <_scanf_chars>:
 800eb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb14:	4615      	mov	r5, r2
 800eb16:	688a      	ldr	r2, [r1, #8]
 800eb18:	4680      	mov	r8, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	b932      	cbnz	r2, 800eb2c <_scanf_chars+0x1c>
 800eb1e:	698a      	ldr	r2, [r1, #24]
 800eb20:	2a00      	cmp	r2, #0
 800eb22:	bf14      	ite	ne
 800eb24:	f04f 32ff 	movne.w	r2, #4294967295
 800eb28:	2201      	moveq	r2, #1
 800eb2a:	608a      	str	r2, [r1, #8]
 800eb2c:	6822      	ldr	r2, [r4, #0]
 800eb2e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ebc0 <_scanf_chars+0xb0>
 800eb32:	06d1      	lsls	r1, r2, #27
 800eb34:	bf5f      	itttt	pl
 800eb36:	681a      	ldrpl	r2, [r3, #0]
 800eb38:	1d11      	addpl	r1, r2, #4
 800eb3a:	6019      	strpl	r1, [r3, #0]
 800eb3c:	6816      	ldrpl	r6, [r2, #0]
 800eb3e:	2700      	movs	r7, #0
 800eb40:	69a0      	ldr	r0, [r4, #24]
 800eb42:	b188      	cbz	r0, 800eb68 <_scanf_chars+0x58>
 800eb44:	2801      	cmp	r0, #1
 800eb46:	d107      	bne.n	800eb58 <_scanf_chars+0x48>
 800eb48:	682b      	ldr	r3, [r5, #0]
 800eb4a:	781a      	ldrb	r2, [r3, #0]
 800eb4c:	6963      	ldr	r3, [r4, #20]
 800eb4e:	5c9b      	ldrb	r3, [r3, r2]
 800eb50:	b953      	cbnz	r3, 800eb68 <_scanf_chars+0x58>
 800eb52:	2f00      	cmp	r7, #0
 800eb54:	d031      	beq.n	800ebba <_scanf_chars+0xaa>
 800eb56:	e022      	b.n	800eb9e <_scanf_chars+0x8e>
 800eb58:	2802      	cmp	r0, #2
 800eb5a:	d120      	bne.n	800eb9e <_scanf_chars+0x8e>
 800eb5c:	682b      	ldr	r3, [r5, #0]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eb64:	071b      	lsls	r3, r3, #28
 800eb66:	d41a      	bmi.n	800eb9e <_scanf_chars+0x8e>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	06da      	lsls	r2, r3, #27
 800eb6c:	bf5e      	ittt	pl
 800eb6e:	682b      	ldrpl	r3, [r5, #0]
 800eb70:	781b      	ldrbpl	r3, [r3, #0]
 800eb72:	f806 3b01 	strbpl.w	r3, [r6], #1
 800eb76:	682a      	ldr	r2, [r5, #0]
 800eb78:	686b      	ldr	r3, [r5, #4]
 800eb7a:	3201      	adds	r2, #1
 800eb7c:	602a      	str	r2, [r5, #0]
 800eb7e:	68a2      	ldr	r2, [r4, #8]
 800eb80:	3b01      	subs	r3, #1
 800eb82:	3a01      	subs	r2, #1
 800eb84:	606b      	str	r3, [r5, #4]
 800eb86:	3701      	adds	r7, #1
 800eb88:	60a2      	str	r2, [r4, #8]
 800eb8a:	b142      	cbz	r2, 800eb9e <_scanf_chars+0x8e>
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	dcd7      	bgt.n	800eb40 <_scanf_chars+0x30>
 800eb90:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb94:	4629      	mov	r1, r5
 800eb96:	4640      	mov	r0, r8
 800eb98:	4798      	blx	r3
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d0d0      	beq.n	800eb40 <_scanf_chars+0x30>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	f013 0310 	ands.w	r3, r3, #16
 800eba4:	d105      	bne.n	800ebb2 <_scanf_chars+0xa2>
 800eba6:	68e2      	ldr	r2, [r4, #12]
 800eba8:	3201      	adds	r2, #1
 800ebaa:	60e2      	str	r2, [r4, #12]
 800ebac:	69a2      	ldr	r2, [r4, #24]
 800ebae:	b102      	cbz	r2, 800ebb2 <_scanf_chars+0xa2>
 800ebb0:	7033      	strb	r3, [r6, #0]
 800ebb2:	6923      	ldr	r3, [r4, #16]
 800ebb4:	443b      	add	r3, r7
 800ebb6:	6123      	str	r3, [r4, #16]
 800ebb8:	2000      	movs	r0, #0
 800ebba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebbe:	bf00      	nop
 800ebc0:	080109a1 	.word	0x080109a1

0800ebc4 <_scanf_i>:
 800ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc8:	4698      	mov	r8, r3
 800ebca:	4b74      	ldr	r3, [pc, #464]	@ (800ed9c <_scanf_i+0x1d8>)
 800ebcc:	460c      	mov	r4, r1
 800ebce:	4682      	mov	sl, r0
 800ebd0:	4616      	mov	r6, r2
 800ebd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ebd6:	b087      	sub	sp, #28
 800ebd8:	ab03      	add	r3, sp, #12
 800ebda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ebde:	4b70      	ldr	r3, [pc, #448]	@ (800eda0 <_scanf_i+0x1dc>)
 800ebe0:	69a1      	ldr	r1, [r4, #24]
 800ebe2:	4a70      	ldr	r2, [pc, #448]	@ (800eda4 <_scanf_i+0x1e0>)
 800ebe4:	2903      	cmp	r1, #3
 800ebe6:	bf08      	it	eq
 800ebe8:	461a      	moveq	r2, r3
 800ebea:	68a3      	ldr	r3, [r4, #8]
 800ebec:	9201      	str	r2, [sp, #4]
 800ebee:	1e5a      	subs	r2, r3, #1
 800ebf0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ebf4:	bf88      	it	hi
 800ebf6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ebfa:	4627      	mov	r7, r4
 800ebfc:	bf82      	ittt	hi
 800ebfe:	eb03 0905 	addhi.w	r9, r3, r5
 800ec02:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ec06:	60a3      	strhi	r3, [r4, #8]
 800ec08:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ec0c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ec10:	bf98      	it	ls
 800ec12:	f04f 0900 	movls.w	r9, #0
 800ec16:	6023      	str	r3, [r4, #0]
 800ec18:	463d      	mov	r5, r7
 800ec1a:	f04f 0b00 	mov.w	fp, #0
 800ec1e:	6831      	ldr	r1, [r6, #0]
 800ec20:	ab03      	add	r3, sp, #12
 800ec22:	7809      	ldrb	r1, [r1, #0]
 800ec24:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ec28:	2202      	movs	r2, #2
 800ec2a:	f7f1 fae1 	bl	80001f0 <memchr>
 800ec2e:	b328      	cbz	r0, 800ec7c <_scanf_i+0xb8>
 800ec30:	f1bb 0f01 	cmp.w	fp, #1
 800ec34:	d159      	bne.n	800ecea <_scanf_i+0x126>
 800ec36:	6862      	ldr	r2, [r4, #4]
 800ec38:	b92a      	cbnz	r2, 800ec46 <_scanf_i+0x82>
 800ec3a:	6822      	ldr	r2, [r4, #0]
 800ec3c:	2108      	movs	r1, #8
 800ec3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ec42:	6061      	str	r1, [r4, #4]
 800ec44:	6022      	str	r2, [r4, #0]
 800ec46:	6822      	ldr	r2, [r4, #0]
 800ec48:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ec4c:	6022      	str	r2, [r4, #0]
 800ec4e:	68a2      	ldr	r2, [r4, #8]
 800ec50:	1e51      	subs	r1, r2, #1
 800ec52:	60a1      	str	r1, [r4, #8]
 800ec54:	b192      	cbz	r2, 800ec7c <_scanf_i+0xb8>
 800ec56:	6832      	ldr	r2, [r6, #0]
 800ec58:	1c51      	adds	r1, r2, #1
 800ec5a:	6031      	str	r1, [r6, #0]
 800ec5c:	7812      	ldrb	r2, [r2, #0]
 800ec5e:	f805 2b01 	strb.w	r2, [r5], #1
 800ec62:	6872      	ldr	r2, [r6, #4]
 800ec64:	3a01      	subs	r2, #1
 800ec66:	2a00      	cmp	r2, #0
 800ec68:	6072      	str	r2, [r6, #4]
 800ec6a:	dc07      	bgt.n	800ec7c <_scanf_i+0xb8>
 800ec6c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ec70:	4631      	mov	r1, r6
 800ec72:	4650      	mov	r0, sl
 800ec74:	4790      	blx	r2
 800ec76:	2800      	cmp	r0, #0
 800ec78:	f040 8085 	bne.w	800ed86 <_scanf_i+0x1c2>
 800ec7c:	f10b 0b01 	add.w	fp, fp, #1
 800ec80:	f1bb 0f03 	cmp.w	fp, #3
 800ec84:	d1cb      	bne.n	800ec1e <_scanf_i+0x5a>
 800ec86:	6863      	ldr	r3, [r4, #4]
 800ec88:	b90b      	cbnz	r3, 800ec8e <_scanf_i+0xca>
 800ec8a:	230a      	movs	r3, #10
 800ec8c:	6063      	str	r3, [r4, #4]
 800ec8e:	6863      	ldr	r3, [r4, #4]
 800ec90:	4945      	ldr	r1, [pc, #276]	@ (800eda8 <_scanf_i+0x1e4>)
 800ec92:	6960      	ldr	r0, [r4, #20]
 800ec94:	1ac9      	subs	r1, r1, r3
 800ec96:	f000 f935 	bl	800ef04 <__sccl>
 800ec9a:	f04f 0b00 	mov.w	fp, #0
 800ec9e:	68a3      	ldr	r3, [r4, #8]
 800eca0:	6822      	ldr	r2, [r4, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d03d      	beq.n	800ed22 <_scanf_i+0x15e>
 800eca6:	6831      	ldr	r1, [r6, #0]
 800eca8:	6960      	ldr	r0, [r4, #20]
 800ecaa:	f891 c000 	ldrb.w	ip, [r1]
 800ecae:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d035      	beq.n	800ed22 <_scanf_i+0x15e>
 800ecb6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ecba:	d124      	bne.n	800ed06 <_scanf_i+0x142>
 800ecbc:	0510      	lsls	r0, r2, #20
 800ecbe:	d522      	bpl.n	800ed06 <_scanf_i+0x142>
 800ecc0:	f10b 0b01 	add.w	fp, fp, #1
 800ecc4:	f1b9 0f00 	cmp.w	r9, #0
 800ecc8:	d003      	beq.n	800ecd2 <_scanf_i+0x10e>
 800ecca:	3301      	adds	r3, #1
 800eccc:	f109 39ff 	add.w	r9, r9, #4294967295
 800ecd0:	60a3      	str	r3, [r4, #8]
 800ecd2:	6873      	ldr	r3, [r6, #4]
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	6073      	str	r3, [r6, #4]
 800ecda:	dd1b      	ble.n	800ed14 <_scanf_i+0x150>
 800ecdc:	6833      	ldr	r3, [r6, #0]
 800ecde:	3301      	adds	r3, #1
 800ece0:	6033      	str	r3, [r6, #0]
 800ece2:	68a3      	ldr	r3, [r4, #8]
 800ece4:	3b01      	subs	r3, #1
 800ece6:	60a3      	str	r3, [r4, #8]
 800ece8:	e7d9      	b.n	800ec9e <_scanf_i+0xda>
 800ecea:	f1bb 0f02 	cmp.w	fp, #2
 800ecee:	d1ae      	bne.n	800ec4e <_scanf_i+0x8a>
 800ecf0:	6822      	ldr	r2, [r4, #0]
 800ecf2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ecf6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ecfa:	d1bf      	bne.n	800ec7c <_scanf_i+0xb8>
 800ecfc:	2110      	movs	r1, #16
 800ecfe:	6061      	str	r1, [r4, #4]
 800ed00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ed04:	e7a2      	b.n	800ec4c <_scanf_i+0x88>
 800ed06:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ed0a:	6022      	str	r2, [r4, #0]
 800ed0c:	780b      	ldrb	r3, [r1, #0]
 800ed0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ed12:	e7de      	b.n	800ecd2 <_scanf_i+0x10e>
 800ed14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ed18:	4631      	mov	r1, r6
 800ed1a:	4650      	mov	r0, sl
 800ed1c:	4798      	blx	r3
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	d0df      	beq.n	800ece2 <_scanf_i+0x11e>
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	05d9      	lsls	r1, r3, #23
 800ed26:	d50d      	bpl.n	800ed44 <_scanf_i+0x180>
 800ed28:	42bd      	cmp	r5, r7
 800ed2a:	d909      	bls.n	800ed40 <_scanf_i+0x17c>
 800ed2c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ed30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed34:	4632      	mov	r2, r6
 800ed36:	4650      	mov	r0, sl
 800ed38:	4798      	blx	r3
 800ed3a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ed3e:	464d      	mov	r5, r9
 800ed40:	42bd      	cmp	r5, r7
 800ed42:	d028      	beq.n	800ed96 <_scanf_i+0x1d2>
 800ed44:	6822      	ldr	r2, [r4, #0]
 800ed46:	f012 0210 	ands.w	r2, r2, #16
 800ed4a:	d113      	bne.n	800ed74 <_scanf_i+0x1b0>
 800ed4c:	702a      	strb	r2, [r5, #0]
 800ed4e:	6863      	ldr	r3, [r4, #4]
 800ed50:	9e01      	ldr	r6, [sp, #4]
 800ed52:	4639      	mov	r1, r7
 800ed54:	4650      	mov	r0, sl
 800ed56:	47b0      	blx	r6
 800ed58:	f8d8 3000 	ldr.w	r3, [r8]
 800ed5c:	6821      	ldr	r1, [r4, #0]
 800ed5e:	1d1a      	adds	r2, r3, #4
 800ed60:	f8c8 2000 	str.w	r2, [r8]
 800ed64:	f011 0f20 	tst.w	r1, #32
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	d00f      	beq.n	800ed8c <_scanf_i+0x1c8>
 800ed6c:	6018      	str	r0, [r3, #0]
 800ed6e:	68e3      	ldr	r3, [r4, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60e3      	str	r3, [r4, #12]
 800ed74:	6923      	ldr	r3, [r4, #16]
 800ed76:	1bed      	subs	r5, r5, r7
 800ed78:	445d      	add	r5, fp
 800ed7a:	442b      	add	r3, r5
 800ed7c:	6123      	str	r3, [r4, #16]
 800ed7e:	2000      	movs	r0, #0
 800ed80:	b007      	add	sp, #28
 800ed82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed86:	f04f 0b00 	mov.w	fp, #0
 800ed8a:	e7ca      	b.n	800ed22 <_scanf_i+0x15e>
 800ed8c:	07ca      	lsls	r2, r1, #31
 800ed8e:	bf4c      	ite	mi
 800ed90:	8018      	strhmi	r0, [r3, #0]
 800ed92:	6018      	strpl	r0, [r3, #0]
 800ed94:	e7eb      	b.n	800ed6e <_scanf_i+0x1aa>
 800ed96:	2001      	movs	r0, #1
 800ed98:	e7f2      	b.n	800ed80 <_scanf_i+0x1bc>
 800ed9a:	bf00      	nop
 800ed9c:	080108f4 	.word	0x080108f4
 800eda0:	0800b661 	.word	0x0800b661
 800eda4:	0800f161 	.word	0x0800f161
 800eda8:	08010d49 	.word	0x08010d49

0800edac <__sflush_r>:
 800edac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb4:	0716      	lsls	r6, r2, #28
 800edb6:	4605      	mov	r5, r0
 800edb8:	460c      	mov	r4, r1
 800edba:	d454      	bmi.n	800ee66 <__sflush_r+0xba>
 800edbc:	684b      	ldr	r3, [r1, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dc02      	bgt.n	800edc8 <__sflush_r+0x1c>
 800edc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	dd48      	ble.n	800ee5a <__sflush_r+0xae>
 800edc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edca:	2e00      	cmp	r6, #0
 800edcc:	d045      	beq.n	800ee5a <__sflush_r+0xae>
 800edce:	2300      	movs	r3, #0
 800edd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800edd4:	682f      	ldr	r7, [r5, #0]
 800edd6:	6a21      	ldr	r1, [r4, #32]
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	d030      	beq.n	800ee3e <__sflush_r+0x92>
 800eddc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800edde:	89a3      	ldrh	r3, [r4, #12]
 800ede0:	0759      	lsls	r1, r3, #29
 800ede2:	d505      	bpl.n	800edf0 <__sflush_r+0x44>
 800ede4:	6863      	ldr	r3, [r4, #4]
 800ede6:	1ad2      	subs	r2, r2, r3
 800ede8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800edea:	b10b      	cbz	r3, 800edf0 <__sflush_r+0x44>
 800edec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800edee:	1ad2      	subs	r2, r2, r3
 800edf0:	2300      	movs	r3, #0
 800edf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edf4:	6a21      	ldr	r1, [r4, #32]
 800edf6:	4628      	mov	r0, r5
 800edf8:	47b0      	blx	r6
 800edfa:	1c43      	adds	r3, r0, #1
 800edfc:	89a3      	ldrh	r3, [r4, #12]
 800edfe:	d106      	bne.n	800ee0e <__sflush_r+0x62>
 800ee00:	6829      	ldr	r1, [r5, #0]
 800ee02:	291d      	cmp	r1, #29
 800ee04:	d82b      	bhi.n	800ee5e <__sflush_r+0xb2>
 800ee06:	4a2a      	ldr	r2, [pc, #168]	@ (800eeb0 <__sflush_r+0x104>)
 800ee08:	410a      	asrs	r2, r1
 800ee0a:	07d6      	lsls	r6, r2, #31
 800ee0c:	d427      	bmi.n	800ee5e <__sflush_r+0xb2>
 800ee0e:	2200      	movs	r2, #0
 800ee10:	6062      	str	r2, [r4, #4]
 800ee12:	04d9      	lsls	r1, r3, #19
 800ee14:	6922      	ldr	r2, [r4, #16]
 800ee16:	6022      	str	r2, [r4, #0]
 800ee18:	d504      	bpl.n	800ee24 <__sflush_r+0x78>
 800ee1a:	1c42      	adds	r2, r0, #1
 800ee1c:	d101      	bne.n	800ee22 <__sflush_r+0x76>
 800ee1e:	682b      	ldr	r3, [r5, #0]
 800ee20:	b903      	cbnz	r3, 800ee24 <__sflush_r+0x78>
 800ee22:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee26:	602f      	str	r7, [r5, #0]
 800ee28:	b1b9      	cbz	r1, 800ee5a <__sflush_r+0xae>
 800ee2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee2e:	4299      	cmp	r1, r3
 800ee30:	d002      	beq.n	800ee38 <__sflush_r+0x8c>
 800ee32:	4628      	mov	r0, r5
 800ee34:	f7fe faec 	bl	800d410 <_free_r>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee3c:	e00d      	b.n	800ee5a <__sflush_r+0xae>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	4628      	mov	r0, r5
 800ee42:	47b0      	blx	r6
 800ee44:	4602      	mov	r2, r0
 800ee46:	1c50      	adds	r0, r2, #1
 800ee48:	d1c9      	bne.n	800edde <__sflush_r+0x32>
 800ee4a:	682b      	ldr	r3, [r5, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d0c6      	beq.n	800edde <__sflush_r+0x32>
 800ee50:	2b1d      	cmp	r3, #29
 800ee52:	d001      	beq.n	800ee58 <__sflush_r+0xac>
 800ee54:	2b16      	cmp	r3, #22
 800ee56:	d11e      	bne.n	800ee96 <__sflush_r+0xea>
 800ee58:	602f      	str	r7, [r5, #0]
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	e022      	b.n	800eea4 <__sflush_r+0xf8>
 800ee5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee62:	b21b      	sxth	r3, r3
 800ee64:	e01b      	b.n	800ee9e <__sflush_r+0xf2>
 800ee66:	690f      	ldr	r7, [r1, #16]
 800ee68:	2f00      	cmp	r7, #0
 800ee6a:	d0f6      	beq.n	800ee5a <__sflush_r+0xae>
 800ee6c:	0793      	lsls	r3, r2, #30
 800ee6e:	680e      	ldr	r6, [r1, #0]
 800ee70:	bf08      	it	eq
 800ee72:	694b      	ldreq	r3, [r1, #20]
 800ee74:	600f      	str	r7, [r1, #0]
 800ee76:	bf18      	it	ne
 800ee78:	2300      	movne	r3, #0
 800ee7a:	eba6 0807 	sub.w	r8, r6, r7
 800ee7e:	608b      	str	r3, [r1, #8]
 800ee80:	f1b8 0f00 	cmp.w	r8, #0
 800ee84:	dde9      	ble.n	800ee5a <__sflush_r+0xae>
 800ee86:	6a21      	ldr	r1, [r4, #32]
 800ee88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee8a:	4643      	mov	r3, r8
 800ee8c:	463a      	mov	r2, r7
 800ee8e:	4628      	mov	r0, r5
 800ee90:	47b0      	blx	r6
 800ee92:	2800      	cmp	r0, #0
 800ee94:	dc08      	bgt.n	800eea8 <__sflush_r+0xfc>
 800ee96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee9e:	81a3      	strh	r3, [r4, #12]
 800eea0:	f04f 30ff 	mov.w	r0, #4294967295
 800eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea8:	4407      	add	r7, r0
 800eeaa:	eba8 0800 	sub.w	r8, r8, r0
 800eeae:	e7e7      	b.n	800ee80 <__sflush_r+0xd4>
 800eeb0:	dfbffffe 	.word	0xdfbffffe

0800eeb4 <_fflush_r>:
 800eeb4:	b538      	push	{r3, r4, r5, lr}
 800eeb6:	690b      	ldr	r3, [r1, #16]
 800eeb8:	4605      	mov	r5, r0
 800eeba:	460c      	mov	r4, r1
 800eebc:	b913      	cbnz	r3, 800eec4 <_fflush_r+0x10>
 800eebe:	2500      	movs	r5, #0
 800eec0:	4628      	mov	r0, r5
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	b118      	cbz	r0, 800eece <_fflush_r+0x1a>
 800eec6:	6a03      	ldr	r3, [r0, #32]
 800eec8:	b90b      	cbnz	r3, 800eece <_fflush_r+0x1a>
 800eeca:	f7fd facd 	bl	800c468 <__sinit>
 800eece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d0f3      	beq.n	800eebe <_fflush_r+0xa>
 800eed6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eed8:	07d0      	lsls	r0, r2, #31
 800eeda:	d404      	bmi.n	800eee6 <_fflush_r+0x32>
 800eedc:	0599      	lsls	r1, r3, #22
 800eede:	d402      	bmi.n	800eee6 <_fflush_r+0x32>
 800eee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eee2:	f7fd fc26 	bl	800c732 <__retarget_lock_acquire_recursive>
 800eee6:	4628      	mov	r0, r5
 800eee8:	4621      	mov	r1, r4
 800eeea:	f7ff ff5f 	bl	800edac <__sflush_r>
 800eeee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eef0:	07da      	lsls	r2, r3, #31
 800eef2:	4605      	mov	r5, r0
 800eef4:	d4e4      	bmi.n	800eec0 <_fflush_r+0xc>
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	059b      	lsls	r3, r3, #22
 800eefa:	d4e1      	bmi.n	800eec0 <_fflush_r+0xc>
 800eefc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eefe:	f7fd fc19 	bl	800c734 <__retarget_lock_release_recursive>
 800ef02:	e7dd      	b.n	800eec0 <_fflush_r+0xc>

0800ef04 <__sccl>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	780b      	ldrb	r3, [r1, #0]
 800ef08:	4604      	mov	r4, r0
 800ef0a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ef0c:	bf0b      	itete	eq
 800ef0e:	784b      	ldrbeq	r3, [r1, #1]
 800ef10:	1c4a      	addne	r2, r1, #1
 800ef12:	1c8a      	addeq	r2, r1, #2
 800ef14:	2100      	movne	r1, #0
 800ef16:	bf08      	it	eq
 800ef18:	2101      	moveq	r1, #1
 800ef1a:	3801      	subs	r0, #1
 800ef1c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ef20:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ef24:	42a8      	cmp	r0, r5
 800ef26:	d1fb      	bne.n	800ef20 <__sccl+0x1c>
 800ef28:	b90b      	cbnz	r3, 800ef2e <__sccl+0x2a>
 800ef2a:	1e50      	subs	r0, r2, #1
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
 800ef2e:	f081 0101 	eor.w	r1, r1, #1
 800ef32:	54e1      	strb	r1, [r4, r3]
 800ef34:	4610      	mov	r0, r2
 800ef36:	4602      	mov	r2, r0
 800ef38:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ef3c:	2d2d      	cmp	r5, #45	@ 0x2d
 800ef3e:	d005      	beq.n	800ef4c <__sccl+0x48>
 800ef40:	2d5d      	cmp	r5, #93	@ 0x5d
 800ef42:	d016      	beq.n	800ef72 <__sccl+0x6e>
 800ef44:	2d00      	cmp	r5, #0
 800ef46:	d0f1      	beq.n	800ef2c <__sccl+0x28>
 800ef48:	462b      	mov	r3, r5
 800ef4a:	e7f2      	b.n	800ef32 <__sccl+0x2e>
 800ef4c:	7846      	ldrb	r6, [r0, #1]
 800ef4e:	2e5d      	cmp	r6, #93	@ 0x5d
 800ef50:	d0fa      	beq.n	800ef48 <__sccl+0x44>
 800ef52:	42b3      	cmp	r3, r6
 800ef54:	dcf8      	bgt.n	800ef48 <__sccl+0x44>
 800ef56:	3002      	adds	r0, #2
 800ef58:	461a      	mov	r2, r3
 800ef5a:	3201      	adds	r2, #1
 800ef5c:	4296      	cmp	r6, r2
 800ef5e:	54a1      	strb	r1, [r4, r2]
 800ef60:	dcfb      	bgt.n	800ef5a <__sccl+0x56>
 800ef62:	1af2      	subs	r2, r6, r3
 800ef64:	3a01      	subs	r2, #1
 800ef66:	1c5d      	adds	r5, r3, #1
 800ef68:	42b3      	cmp	r3, r6
 800ef6a:	bfa8      	it	ge
 800ef6c:	2200      	movge	r2, #0
 800ef6e:	18ab      	adds	r3, r5, r2
 800ef70:	e7e1      	b.n	800ef36 <__sccl+0x32>
 800ef72:	4610      	mov	r0, r2
 800ef74:	e7da      	b.n	800ef2c <__sccl+0x28>

0800ef76 <__submore>:
 800ef76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ef7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef82:	4299      	cmp	r1, r3
 800ef84:	d11d      	bne.n	800efc2 <__submore+0x4c>
 800ef86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ef8a:	f7fb fc23 	bl	800a7d4 <_malloc_r>
 800ef8e:	b918      	cbnz	r0, 800ef98 <__submore+0x22>
 800ef90:	f04f 30ff 	mov.w	r0, #4294967295
 800ef94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ef9e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800efa2:	6360      	str	r0, [r4, #52]	@ 0x34
 800efa4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800efa8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800efac:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800efb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800efb4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800efb8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800efbc:	6020      	str	r0, [r4, #0]
 800efbe:	2000      	movs	r0, #0
 800efc0:	e7e8      	b.n	800ef94 <__submore+0x1e>
 800efc2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800efc4:	0077      	lsls	r7, r6, #1
 800efc6:	463a      	mov	r2, r7
 800efc8:	f7fb fc98 	bl	800a8fc <_realloc_r>
 800efcc:	4605      	mov	r5, r0
 800efce:	2800      	cmp	r0, #0
 800efd0:	d0de      	beq.n	800ef90 <__submore+0x1a>
 800efd2:	eb00 0806 	add.w	r8, r0, r6
 800efd6:	4601      	mov	r1, r0
 800efd8:	4632      	mov	r2, r6
 800efda:	4640      	mov	r0, r8
 800efdc:	f7fd fbab 	bl	800c736 <memcpy>
 800efe0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800efe4:	f8c4 8000 	str.w	r8, [r4]
 800efe8:	e7e9      	b.n	800efbe <__submore+0x48>

0800efea <memmove>:
 800efea:	4288      	cmp	r0, r1
 800efec:	b510      	push	{r4, lr}
 800efee:	eb01 0402 	add.w	r4, r1, r2
 800eff2:	d902      	bls.n	800effa <memmove+0x10>
 800eff4:	4284      	cmp	r4, r0
 800eff6:	4623      	mov	r3, r4
 800eff8:	d807      	bhi.n	800f00a <memmove+0x20>
 800effa:	1e43      	subs	r3, r0, #1
 800effc:	42a1      	cmp	r1, r4
 800effe:	d008      	beq.n	800f012 <memmove+0x28>
 800f000:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f004:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f008:	e7f8      	b.n	800effc <memmove+0x12>
 800f00a:	4402      	add	r2, r0
 800f00c:	4601      	mov	r1, r0
 800f00e:	428a      	cmp	r2, r1
 800f010:	d100      	bne.n	800f014 <memmove+0x2a>
 800f012:	bd10      	pop	{r4, pc}
 800f014:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f018:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f01c:	e7f7      	b.n	800f00e <memmove+0x24>
	...

0800f020 <__assert_func>:
 800f020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f022:	4614      	mov	r4, r2
 800f024:	461a      	mov	r2, r3
 800f026:	4b09      	ldr	r3, [pc, #36]	@ (800f04c <__assert_func+0x2c>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4605      	mov	r5, r0
 800f02c:	68d8      	ldr	r0, [r3, #12]
 800f02e:	b954      	cbnz	r4, 800f046 <__assert_func+0x26>
 800f030:	4b07      	ldr	r3, [pc, #28]	@ (800f050 <__assert_func+0x30>)
 800f032:	461c      	mov	r4, r3
 800f034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f038:	9100      	str	r1, [sp, #0]
 800f03a:	462b      	mov	r3, r5
 800f03c:	4905      	ldr	r1, [pc, #20]	@ (800f054 <__assert_func+0x34>)
 800f03e:	f000 f891 	bl	800f164 <fiprintf>
 800f042:	f000 f8a1 	bl	800f188 <abort>
 800f046:	4b04      	ldr	r3, [pc, #16]	@ (800f058 <__assert_func+0x38>)
 800f048:	e7f4      	b.n	800f034 <__assert_func+0x14>
 800f04a:	bf00      	nop
 800f04c:	20000190 	.word	0x20000190
 800f050:	08010d8f 	.word	0x08010d8f
 800f054:	08010d61 	.word	0x08010d61
 800f058:	08010d54 	.word	0x08010d54

0800f05c <_calloc_r>:
 800f05c:	b570      	push	{r4, r5, r6, lr}
 800f05e:	fba1 5402 	umull	r5, r4, r1, r2
 800f062:	b93c      	cbnz	r4, 800f074 <_calloc_r+0x18>
 800f064:	4629      	mov	r1, r5
 800f066:	f7fb fbb5 	bl	800a7d4 <_malloc_r>
 800f06a:	4606      	mov	r6, r0
 800f06c:	b928      	cbnz	r0, 800f07a <_calloc_r+0x1e>
 800f06e:	2600      	movs	r6, #0
 800f070:	4630      	mov	r0, r6
 800f072:	bd70      	pop	{r4, r5, r6, pc}
 800f074:	220c      	movs	r2, #12
 800f076:	6002      	str	r2, [r0, #0]
 800f078:	e7f9      	b.n	800f06e <_calloc_r+0x12>
 800f07a:	462a      	mov	r2, r5
 800f07c:	4621      	mov	r1, r4
 800f07e:	f7fd fab8 	bl	800c5f2 <memset>
 800f082:	e7f5      	b.n	800f070 <_calloc_r+0x14>

0800f084 <_strtoul_l.constprop.0>:
 800f084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f088:	4e34      	ldr	r6, [pc, #208]	@ (800f15c <_strtoul_l.constprop.0+0xd8>)
 800f08a:	4686      	mov	lr, r0
 800f08c:	460d      	mov	r5, r1
 800f08e:	4628      	mov	r0, r5
 800f090:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f094:	5d37      	ldrb	r7, [r6, r4]
 800f096:	f017 0708 	ands.w	r7, r7, #8
 800f09a:	d1f8      	bne.n	800f08e <_strtoul_l.constprop.0+0xa>
 800f09c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f09e:	d12f      	bne.n	800f100 <_strtoul_l.constprop.0+0x7c>
 800f0a0:	782c      	ldrb	r4, [r5, #0]
 800f0a2:	2701      	movs	r7, #1
 800f0a4:	1c85      	adds	r5, r0, #2
 800f0a6:	f033 0010 	bics.w	r0, r3, #16
 800f0aa:	d109      	bne.n	800f0c0 <_strtoul_l.constprop.0+0x3c>
 800f0ac:	2c30      	cmp	r4, #48	@ 0x30
 800f0ae:	d12c      	bne.n	800f10a <_strtoul_l.constprop.0+0x86>
 800f0b0:	7828      	ldrb	r0, [r5, #0]
 800f0b2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f0b6:	2858      	cmp	r0, #88	@ 0x58
 800f0b8:	d127      	bne.n	800f10a <_strtoul_l.constprop.0+0x86>
 800f0ba:	786c      	ldrb	r4, [r5, #1]
 800f0bc:	2310      	movs	r3, #16
 800f0be:	3502      	adds	r5, #2
 800f0c0:	f04f 38ff 	mov.w	r8, #4294967295
 800f0c4:	2600      	movs	r6, #0
 800f0c6:	fbb8 f8f3 	udiv	r8, r8, r3
 800f0ca:	fb03 f908 	mul.w	r9, r3, r8
 800f0ce:	ea6f 0909 	mvn.w	r9, r9
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f0d8:	f1bc 0f09 	cmp.w	ip, #9
 800f0dc:	d81c      	bhi.n	800f118 <_strtoul_l.constprop.0+0x94>
 800f0de:	4664      	mov	r4, ip
 800f0e0:	42a3      	cmp	r3, r4
 800f0e2:	dd2a      	ble.n	800f13a <_strtoul_l.constprop.0+0xb6>
 800f0e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f0e8:	d007      	beq.n	800f0fa <_strtoul_l.constprop.0+0x76>
 800f0ea:	4580      	cmp	r8, r0
 800f0ec:	d322      	bcc.n	800f134 <_strtoul_l.constprop.0+0xb0>
 800f0ee:	d101      	bne.n	800f0f4 <_strtoul_l.constprop.0+0x70>
 800f0f0:	45a1      	cmp	r9, r4
 800f0f2:	db1f      	blt.n	800f134 <_strtoul_l.constprop.0+0xb0>
 800f0f4:	fb00 4003 	mla	r0, r0, r3, r4
 800f0f8:	2601      	movs	r6, #1
 800f0fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0fe:	e7e9      	b.n	800f0d4 <_strtoul_l.constprop.0+0x50>
 800f100:	2c2b      	cmp	r4, #43	@ 0x2b
 800f102:	bf04      	itt	eq
 800f104:	782c      	ldrbeq	r4, [r5, #0]
 800f106:	1c85      	addeq	r5, r0, #2
 800f108:	e7cd      	b.n	800f0a6 <_strtoul_l.constprop.0+0x22>
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1d8      	bne.n	800f0c0 <_strtoul_l.constprop.0+0x3c>
 800f10e:	2c30      	cmp	r4, #48	@ 0x30
 800f110:	bf0c      	ite	eq
 800f112:	2308      	moveq	r3, #8
 800f114:	230a      	movne	r3, #10
 800f116:	e7d3      	b.n	800f0c0 <_strtoul_l.constprop.0+0x3c>
 800f118:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f11c:	f1bc 0f19 	cmp.w	ip, #25
 800f120:	d801      	bhi.n	800f126 <_strtoul_l.constprop.0+0xa2>
 800f122:	3c37      	subs	r4, #55	@ 0x37
 800f124:	e7dc      	b.n	800f0e0 <_strtoul_l.constprop.0+0x5c>
 800f126:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f12a:	f1bc 0f19 	cmp.w	ip, #25
 800f12e:	d804      	bhi.n	800f13a <_strtoul_l.constprop.0+0xb6>
 800f130:	3c57      	subs	r4, #87	@ 0x57
 800f132:	e7d5      	b.n	800f0e0 <_strtoul_l.constprop.0+0x5c>
 800f134:	f04f 36ff 	mov.w	r6, #4294967295
 800f138:	e7df      	b.n	800f0fa <_strtoul_l.constprop.0+0x76>
 800f13a:	1c73      	adds	r3, r6, #1
 800f13c:	d106      	bne.n	800f14c <_strtoul_l.constprop.0+0xc8>
 800f13e:	2322      	movs	r3, #34	@ 0x22
 800f140:	f8ce 3000 	str.w	r3, [lr]
 800f144:	4630      	mov	r0, r6
 800f146:	b932      	cbnz	r2, 800f156 <_strtoul_l.constprop.0+0xd2>
 800f148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f14c:	b107      	cbz	r7, 800f150 <_strtoul_l.constprop.0+0xcc>
 800f14e:	4240      	negs	r0, r0
 800f150:	2a00      	cmp	r2, #0
 800f152:	d0f9      	beq.n	800f148 <_strtoul_l.constprop.0+0xc4>
 800f154:	b106      	cbz	r6, 800f158 <_strtoul_l.constprop.0+0xd4>
 800f156:	1e69      	subs	r1, r5, #1
 800f158:	6011      	str	r1, [r2, #0]
 800f15a:	e7f5      	b.n	800f148 <_strtoul_l.constprop.0+0xc4>
 800f15c:	080109a1 	.word	0x080109a1

0800f160 <_strtoul_r>:
 800f160:	f7ff bf90 	b.w	800f084 <_strtoul_l.constprop.0>

0800f164 <fiprintf>:
 800f164:	b40e      	push	{r1, r2, r3}
 800f166:	b503      	push	{r0, r1, lr}
 800f168:	4601      	mov	r1, r0
 800f16a:	ab03      	add	r3, sp, #12
 800f16c:	4805      	ldr	r0, [pc, #20]	@ (800f184 <fiprintf+0x20>)
 800f16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f172:	6800      	ldr	r0, [r0, #0]
 800f174:	9301      	str	r3, [sp, #4]
 800f176:	f000 f837 	bl	800f1e8 <_vfiprintf_r>
 800f17a:	b002      	add	sp, #8
 800f17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f180:	b003      	add	sp, #12
 800f182:	4770      	bx	lr
 800f184:	20000190 	.word	0x20000190

0800f188 <abort>:
 800f188:	b508      	push	{r3, lr}
 800f18a:	2006      	movs	r0, #6
 800f18c:	f000 fa00 	bl	800f590 <raise>
 800f190:	2001      	movs	r0, #1
 800f192:	f7f4 fd6f 	bl	8003c74 <_exit>

0800f196 <__sfputc_r>:
 800f196:	6893      	ldr	r3, [r2, #8]
 800f198:	3b01      	subs	r3, #1
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	b410      	push	{r4}
 800f19e:	6093      	str	r3, [r2, #8]
 800f1a0:	da08      	bge.n	800f1b4 <__sfputc_r+0x1e>
 800f1a2:	6994      	ldr	r4, [r2, #24]
 800f1a4:	42a3      	cmp	r3, r4
 800f1a6:	db01      	blt.n	800f1ac <__sfputc_r+0x16>
 800f1a8:	290a      	cmp	r1, #10
 800f1aa:	d103      	bne.n	800f1b4 <__sfputc_r+0x1e>
 800f1ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b0:	f000 b932 	b.w	800f418 <__swbuf_r>
 800f1b4:	6813      	ldr	r3, [r2, #0]
 800f1b6:	1c58      	adds	r0, r3, #1
 800f1b8:	6010      	str	r0, [r2, #0]
 800f1ba:	7019      	strb	r1, [r3, #0]
 800f1bc:	4608      	mov	r0, r1
 800f1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <__sfputs_r>:
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	460f      	mov	r7, r1
 800f1ca:	4614      	mov	r4, r2
 800f1cc:	18d5      	adds	r5, r2, r3
 800f1ce:	42ac      	cmp	r4, r5
 800f1d0:	d101      	bne.n	800f1d6 <__sfputs_r+0x12>
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	e007      	b.n	800f1e6 <__sfputs_r+0x22>
 800f1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1da:	463a      	mov	r2, r7
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7ff ffda 	bl	800f196 <__sfputc_r>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	d1f3      	bne.n	800f1ce <__sfputs_r+0xa>
 800f1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1e8 <_vfiprintf_r>:
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	460d      	mov	r5, r1
 800f1ee:	b09d      	sub	sp, #116	@ 0x74
 800f1f0:	4614      	mov	r4, r2
 800f1f2:	4698      	mov	r8, r3
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	b118      	cbz	r0, 800f200 <_vfiprintf_r+0x18>
 800f1f8:	6a03      	ldr	r3, [r0, #32]
 800f1fa:	b90b      	cbnz	r3, 800f200 <_vfiprintf_r+0x18>
 800f1fc:	f7fd f934 	bl	800c468 <__sinit>
 800f200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f202:	07d9      	lsls	r1, r3, #31
 800f204:	d405      	bmi.n	800f212 <_vfiprintf_r+0x2a>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	059a      	lsls	r2, r3, #22
 800f20a:	d402      	bmi.n	800f212 <_vfiprintf_r+0x2a>
 800f20c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f20e:	f7fd fa90 	bl	800c732 <__retarget_lock_acquire_recursive>
 800f212:	89ab      	ldrh	r3, [r5, #12]
 800f214:	071b      	lsls	r3, r3, #28
 800f216:	d501      	bpl.n	800f21c <_vfiprintf_r+0x34>
 800f218:	692b      	ldr	r3, [r5, #16]
 800f21a:	b99b      	cbnz	r3, 800f244 <_vfiprintf_r+0x5c>
 800f21c:	4629      	mov	r1, r5
 800f21e:	4630      	mov	r0, r6
 800f220:	f000 f938 	bl	800f494 <__swsetup_r>
 800f224:	b170      	cbz	r0, 800f244 <_vfiprintf_r+0x5c>
 800f226:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f228:	07dc      	lsls	r4, r3, #31
 800f22a:	d504      	bpl.n	800f236 <_vfiprintf_r+0x4e>
 800f22c:	f04f 30ff 	mov.w	r0, #4294967295
 800f230:	b01d      	add	sp, #116	@ 0x74
 800f232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f236:	89ab      	ldrh	r3, [r5, #12]
 800f238:	0598      	lsls	r0, r3, #22
 800f23a:	d4f7      	bmi.n	800f22c <_vfiprintf_r+0x44>
 800f23c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f23e:	f7fd fa79 	bl	800c734 <__retarget_lock_release_recursive>
 800f242:	e7f3      	b.n	800f22c <_vfiprintf_r+0x44>
 800f244:	2300      	movs	r3, #0
 800f246:	9309      	str	r3, [sp, #36]	@ 0x24
 800f248:	2320      	movs	r3, #32
 800f24a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f24e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f252:	2330      	movs	r3, #48	@ 0x30
 800f254:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f404 <_vfiprintf_r+0x21c>
 800f258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f25c:	f04f 0901 	mov.w	r9, #1
 800f260:	4623      	mov	r3, r4
 800f262:	469a      	mov	sl, r3
 800f264:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f268:	b10a      	cbz	r2, 800f26e <_vfiprintf_r+0x86>
 800f26a:	2a25      	cmp	r2, #37	@ 0x25
 800f26c:	d1f9      	bne.n	800f262 <_vfiprintf_r+0x7a>
 800f26e:	ebba 0b04 	subs.w	fp, sl, r4
 800f272:	d00b      	beq.n	800f28c <_vfiprintf_r+0xa4>
 800f274:	465b      	mov	r3, fp
 800f276:	4622      	mov	r2, r4
 800f278:	4629      	mov	r1, r5
 800f27a:	4630      	mov	r0, r6
 800f27c:	f7ff ffa2 	bl	800f1c4 <__sfputs_r>
 800f280:	3001      	adds	r0, #1
 800f282:	f000 80a7 	beq.w	800f3d4 <_vfiprintf_r+0x1ec>
 800f286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f288:	445a      	add	r2, fp
 800f28a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f28c:	f89a 3000 	ldrb.w	r3, [sl]
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 809f 	beq.w	800f3d4 <_vfiprintf_r+0x1ec>
 800f296:	2300      	movs	r3, #0
 800f298:	f04f 32ff 	mov.w	r2, #4294967295
 800f29c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2a0:	f10a 0a01 	add.w	sl, sl, #1
 800f2a4:	9304      	str	r3, [sp, #16]
 800f2a6:	9307      	str	r3, [sp, #28]
 800f2a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2ae:	4654      	mov	r4, sl
 800f2b0:	2205      	movs	r2, #5
 800f2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b6:	4853      	ldr	r0, [pc, #332]	@ (800f404 <_vfiprintf_r+0x21c>)
 800f2b8:	f7f0 ff9a 	bl	80001f0 <memchr>
 800f2bc:	9a04      	ldr	r2, [sp, #16]
 800f2be:	b9d8      	cbnz	r0, 800f2f8 <_vfiprintf_r+0x110>
 800f2c0:	06d1      	lsls	r1, r2, #27
 800f2c2:	bf44      	itt	mi
 800f2c4:	2320      	movmi	r3, #32
 800f2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2ca:	0713      	lsls	r3, r2, #28
 800f2cc:	bf44      	itt	mi
 800f2ce:	232b      	movmi	r3, #43	@ 0x2b
 800f2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2da:	d015      	beq.n	800f308 <_vfiprintf_r+0x120>
 800f2dc:	9a07      	ldr	r2, [sp, #28]
 800f2de:	4654      	mov	r4, sl
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	f04f 0c0a 	mov.w	ip, #10
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2ec:	3b30      	subs	r3, #48	@ 0x30
 800f2ee:	2b09      	cmp	r3, #9
 800f2f0:	d94b      	bls.n	800f38a <_vfiprintf_r+0x1a2>
 800f2f2:	b1b0      	cbz	r0, 800f322 <_vfiprintf_r+0x13a>
 800f2f4:	9207      	str	r2, [sp, #28]
 800f2f6:	e014      	b.n	800f322 <_vfiprintf_r+0x13a>
 800f2f8:	eba0 0308 	sub.w	r3, r0, r8
 800f2fc:	fa09 f303 	lsl.w	r3, r9, r3
 800f300:	4313      	orrs	r3, r2
 800f302:	9304      	str	r3, [sp, #16]
 800f304:	46a2      	mov	sl, r4
 800f306:	e7d2      	b.n	800f2ae <_vfiprintf_r+0xc6>
 800f308:	9b03      	ldr	r3, [sp, #12]
 800f30a:	1d19      	adds	r1, r3, #4
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	9103      	str	r1, [sp, #12]
 800f310:	2b00      	cmp	r3, #0
 800f312:	bfbb      	ittet	lt
 800f314:	425b      	neglt	r3, r3
 800f316:	f042 0202 	orrlt.w	r2, r2, #2
 800f31a:	9307      	strge	r3, [sp, #28]
 800f31c:	9307      	strlt	r3, [sp, #28]
 800f31e:	bfb8      	it	lt
 800f320:	9204      	strlt	r2, [sp, #16]
 800f322:	7823      	ldrb	r3, [r4, #0]
 800f324:	2b2e      	cmp	r3, #46	@ 0x2e
 800f326:	d10a      	bne.n	800f33e <_vfiprintf_r+0x156>
 800f328:	7863      	ldrb	r3, [r4, #1]
 800f32a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f32c:	d132      	bne.n	800f394 <_vfiprintf_r+0x1ac>
 800f32e:	9b03      	ldr	r3, [sp, #12]
 800f330:	1d1a      	adds	r2, r3, #4
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	9203      	str	r2, [sp, #12]
 800f336:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f33a:	3402      	adds	r4, #2
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f414 <_vfiprintf_r+0x22c>
 800f342:	7821      	ldrb	r1, [r4, #0]
 800f344:	2203      	movs	r2, #3
 800f346:	4650      	mov	r0, sl
 800f348:	f7f0 ff52 	bl	80001f0 <memchr>
 800f34c:	b138      	cbz	r0, 800f35e <_vfiprintf_r+0x176>
 800f34e:	9b04      	ldr	r3, [sp, #16]
 800f350:	eba0 000a 	sub.w	r0, r0, sl
 800f354:	2240      	movs	r2, #64	@ 0x40
 800f356:	4082      	lsls	r2, r0
 800f358:	4313      	orrs	r3, r2
 800f35a:	3401      	adds	r4, #1
 800f35c:	9304      	str	r3, [sp, #16]
 800f35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f362:	4829      	ldr	r0, [pc, #164]	@ (800f408 <_vfiprintf_r+0x220>)
 800f364:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f368:	2206      	movs	r2, #6
 800f36a:	f7f0 ff41 	bl	80001f0 <memchr>
 800f36e:	2800      	cmp	r0, #0
 800f370:	d03f      	beq.n	800f3f2 <_vfiprintf_r+0x20a>
 800f372:	4b26      	ldr	r3, [pc, #152]	@ (800f40c <_vfiprintf_r+0x224>)
 800f374:	bb1b      	cbnz	r3, 800f3be <_vfiprintf_r+0x1d6>
 800f376:	9b03      	ldr	r3, [sp, #12]
 800f378:	3307      	adds	r3, #7
 800f37a:	f023 0307 	bic.w	r3, r3, #7
 800f37e:	3308      	adds	r3, #8
 800f380:	9303      	str	r3, [sp, #12]
 800f382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f384:	443b      	add	r3, r7
 800f386:	9309      	str	r3, [sp, #36]	@ 0x24
 800f388:	e76a      	b.n	800f260 <_vfiprintf_r+0x78>
 800f38a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f38e:	460c      	mov	r4, r1
 800f390:	2001      	movs	r0, #1
 800f392:	e7a8      	b.n	800f2e6 <_vfiprintf_r+0xfe>
 800f394:	2300      	movs	r3, #0
 800f396:	3401      	adds	r4, #1
 800f398:	9305      	str	r3, [sp, #20]
 800f39a:	4619      	mov	r1, r3
 800f39c:	f04f 0c0a 	mov.w	ip, #10
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3a6:	3a30      	subs	r2, #48	@ 0x30
 800f3a8:	2a09      	cmp	r2, #9
 800f3aa:	d903      	bls.n	800f3b4 <_vfiprintf_r+0x1cc>
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d0c6      	beq.n	800f33e <_vfiprintf_r+0x156>
 800f3b0:	9105      	str	r1, [sp, #20]
 800f3b2:	e7c4      	b.n	800f33e <_vfiprintf_r+0x156>
 800f3b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e7f0      	b.n	800f3a0 <_vfiprintf_r+0x1b8>
 800f3be:	ab03      	add	r3, sp, #12
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	462a      	mov	r2, r5
 800f3c4:	4b12      	ldr	r3, [pc, #72]	@ (800f410 <_vfiprintf_r+0x228>)
 800f3c6:	a904      	add	r1, sp, #16
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f7fc f9f5 	bl	800b7b8 <_printf_float>
 800f3ce:	4607      	mov	r7, r0
 800f3d0:	1c78      	adds	r0, r7, #1
 800f3d2:	d1d6      	bne.n	800f382 <_vfiprintf_r+0x19a>
 800f3d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3d6:	07d9      	lsls	r1, r3, #31
 800f3d8:	d405      	bmi.n	800f3e6 <_vfiprintf_r+0x1fe>
 800f3da:	89ab      	ldrh	r3, [r5, #12]
 800f3dc:	059a      	lsls	r2, r3, #22
 800f3de:	d402      	bmi.n	800f3e6 <_vfiprintf_r+0x1fe>
 800f3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3e2:	f7fd f9a7 	bl	800c734 <__retarget_lock_release_recursive>
 800f3e6:	89ab      	ldrh	r3, [r5, #12]
 800f3e8:	065b      	lsls	r3, r3, #25
 800f3ea:	f53f af1f 	bmi.w	800f22c <_vfiprintf_r+0x44>
 800f3ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3f0:	e71e      	b.n	800f230 <_vfiprintf_r+0x48>
 800f3f2:	ab03      	add	r3, sp, #12
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	462a      	mov	r2, r5
 800f3f8:	4b05      	ldr	r3, [pc, #20]	@ (800f410 <_vfiprintf_r+0x228>)
 800f3fa:	a904      	add	r1, sp, #16
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f7fc fc73 	bl	800bce8 <_printf_i>
 800f402:	e7e4      	b.n	800f3ce <_vfiprintf_r+0x1e6>
 800f404:	08010d28 	.word	0x08010d28
 800f408:	08010d32 	.word	0x08010d32
 800f40c:	0800b7b9 	.word	0x0800b7b9
 800f410:	0800f1c5 	.word	0x0800f1c5
 800f414:	08010d2e 	.word	0x08010d2e

0800f418 <__swbuf_r>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	460e      	mov	r6, r1
 800f41c:	4614      	mov	r4, r2
 800f41e:	4605      	mov	r5, r0
 800f420:	b118      	cbz	r0, 800f42a <__swbuf_r+0x12>
 800f422:	6a03      	ldr	r3, [r0, #32]
 800f424:	b90b      	cbnz	r3, 800f42a <__swbuf_r+0x12>
 800f426:	f7fd f81f 	bl	800c468 <__sinit>
 800f42a:	69a3      	ldr	r3, [r4, #24]
 800f42c:	60a3      	str	r3, [r4, #8]
 800f42e:	89a3      	ldrh	r3, [r4, #12]
 800f430:	071a      	lsls	r2, r3, #28
 800f432:	d501      	bpl.n	800f438 <__swbuf_r+0x20>
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	b943      	cbnz	r3, 800f44a <__swbuf_r+0x32>
 800f438:	4621      	mov	r1, r4
 800f43a:	4628      	mov	r0, r5
 800f43c:	f000 f82a 	bl	800f494 <__swsetup_r>
 800f440:	b118      	cbz	r0, 800f44a <__swbuf_r+0x32>
 800f442:	f04f 37ff 	mov.w	r7, #4294967295
 800f446:	4638      	mov	r0, r7
 800f448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	6922      	ldr	r2, [r4, #16]
 800f44e:	1a98      	subs	r0, r3, r2
 800f450:	6963      	ldr	r3, [r4, #20]
 800f452:	b2f6      	uxtb	r6, r6
 800f454:	4283      	cmp	r3, r0
 800f456:	4637      	mov	r7, r6
 800f458:	dc05      	bgt.n	800f466 <__swbuf_r+0x4e>
 800f45a:	4621      	mov	r1, r4
 800f45c:	4628      	mov	r0, r5
 800f45e:	f7ff fd29 	bl	800eeb4 <_fflush_r>
 800f462:	2800      	cmp	r0, #0
 800f464:	d1ed      	bne.n	800f442 <__swbuf_r+0x2a>
 800f466:	68a3      	ldr	r3, [r4, #8]
 800f468:	3b01      	subs	r3, #1
 800f46a:	60a3      	str	r3, [r4, #8]
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	6022      	str	r2, [r4, #0]
 800f472:	701e      	strb	r6, [r3, #0]
 800f474:	6962      	ldr	r2, [r4, #20]
 800f476:	1c43      	adds	r3, r0, #1
 800f478:	429a      	cmp	r2, r3
 800f47a:	d004      	beq.n	800f486 <__swbuf_r+0x6e>
 800f47c:	89a3      	ldrh	r3, [r4, #12]
 800f47e:	07db      	lsls	r3, r3, #31
 800f480:	d5e1      	bpl.n	800f446 <__swbuf_r+0x2e>
 800f482:	2e0a      	cmp	r6, #10
 800f484:	d1df      	bne.n	800f446 <__swbuf_r+0x2e>
 800f486:	4621      	mov	r1, r4
 800f488:	4628      	mov	r0, r5
 800f48a:	f7ff fd13 	bl	800eeb4 <_fflush_r>
 800f48e:	2800      	cmp	r0, #0
 800f490:	d0d9      	beq.n	800f446 <__swbuf_r+0x2e>
 800f492:	e7d6      	b.n	800f442 <__swbuf_r+0x2a>

0800f494 <__swsetup_r>:
 800f494:	b538      	push	{r3, r4, r5, lr}
 800f496:	4b29      	ldr	r3, [pc, #164]	@ (800f53c <__swsetup_r+0xa8>)
 800f498:	4605      	mov	r5, r0
 800f49a:	6818      	ldr	r0, [r3, #0]
 800f49c:	460c      	mov	r4, r1
 800f49e:	b118      	cbz	r0, 800f4a8 <__swsetup_r+0x14>
 800f4a0:	6a03      	ldr	r3, [r0, #32]
 800f4a2:	b90b      	cbnz	r3, 800f4a8 <__swsetup_r+0x14>
 800f4a4:	f7fc ffe0 	bl	800c468 <__sinit>
 800f4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ac:	0719      	lsls	r1, r3, #28
 800f4ae:	d422      	bmi.n	800f4f6 <__swsetup_r+0x62>
 800f4b0:	06da      	lsls	r2, r3, #27
 800f4b2:	d407      	bmi.n	800f4c4 <__swsetup_r+0x30>
 800f4b4:	2209      	movs	r2, #9
 800f4b6:	602a      	str	r2, [r5, #0]
 800f4b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4bc:	81a3      	strh	r3, [r4, #12]
 800f4be:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c2:	e033      	b.n	800f52c <__swsetup_r+0x98>
 800f4c4:	0758      	lsls	r0, r3, #29
 800f4c6:	d512      	bpl.n	800f4ee <__swsetup_r+0x5a>
 800f4c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4ca:	b141      	cbz	r1, 800f4de <__swsetup_r+0x4a>
 800f4cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4d0:	4299      	cmp	r1, r3
 800f4d2:	d002      	beq.n	800f4da <__swsetup_r+0x46>
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f7fd ff9b 	bl	800d410 <_free_r>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4e4:	81a3      	strh	r3, [r4, #12]
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	6063      	str	r3, [r4, #4]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	f043 0308 	orr.w	r3, r3, #8
 800f4f4:	81a3      	strh	r3, [r4, #12]
 800f4f6:	6923      	ldr	r3, [r4, #16]
 800f4f8:	b94b      	cbnz	r3, 800f50e <__swsetup_r+0x7a>
 800f4fa:	89a3      	ldrh	r3, [r4, #12]
 800f4fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f504:	d003      	beq.n	800f50e <__swsetup_r+0x7a>
 800f506:	4621      	mov	r1, r4
 800f508:	4628      	mov	r0, r5
 800f50a:	f000 f883 	bl	800f614 <__smakebuf_r>
 800f50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f512:	f013 0201 	ands.w	r2, r3, #1
 800f516:	d00a      	beq.n	800f52e <__swsetup_r+0x9a>
 800f518:	2200      	movs	r2, #0
 800f51a:	60a2      	str	r2, [r4, #8]
 800f51c:	6962      	ldr	r2, [r4, #20]
 800f51e:	4252      	negs	r2, r2
 800f520:	61a2      	str	r2, [r4, #24]
 800f522:	6922      	ldr	r2, [r4, #16]
 800f524:	b942      	cbnz	r2, 800f538 <__swsetup_r+0xa4>
 800f526:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f52a:	d1c5      	bne.n	800f4b8 <__swsetup_r+0x24>
 800f52c:	bd38      	pop	{r3, r4, r5, pc}
 800f52e:	0799      	lsls	r1, r3, #30
 800f530:	bf58      	it	pl
 800f532:	6962      	ldrpl	r2, [r4, #20]
 800f534:	60a2      	str	r2, [r4, #8]
 800f536:	e7f4      	b.n	800f522 <__swsetup_r+0x8e>
 800f538:	2000      	movs	r0, #0
 800f53a:	e7f7      	b.n	800f52c <__swsetup_r+0x98>
 800f53c:	20000190 	.word	0x20000190

0800f540 <_raise_r>:
 800f540:	291f      	cmp	r1, #31
 800f542:	b538      	push	{r3, r4, r5, lr}
 800f544:	4605      	mov	r5, r0
 800f546:	460c      	mov	r4, r1
 800f548:	d904      	bls.n	800f554 <_raise_r+0x14>
 800f54a:	2316      	movs	r3, #22
 800f54c:	6003      	str	r3, [r0, #0]
 800f54e:	f04f 30ff 	mov.w	r0, #4294967295
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f556:	b112      	cbz	r2, 800f55e <_raise_r+0x1e>
 800f558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f55c:	b94b      	cbnz	r3, 800f572 <_raise_r+0x32>
 800f55e:	4628      	mov	r0, r5
 800f560:	f000 f830 	bl	800f5c4 <_getpid_r>
 800f564:	4622      	mov	r2, r4
 800f566:	4601      	mov	r1, r0
 800f568:	4628      	mov	r0, r5
 800f56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f56e:	f000 b817 	b.w	800f5a0 <_kill_r>
 800f572:	2b01      	cmp	r3, #1
 800f574:	d00a      	beq.n	800f58c <_raise_r+0x4c>
 800f576:	1c59      	adds	r1, r3, #1
 800f578:	d103      	bne.n	800f582 <_raise_r+0x42>
 800f57a:	2316      	movs	r3, #22
 800f57c:	6003      	str	r3, [r0, #0]
 800f57e:	2001      	movs	r0, #1
 800f580:	e7e7      	b.n	800f552 <_raise_r+0x12>
 800f582:	2100      	movs	r1, #0
 800f584:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f588:	4620      	mov	r0, r4
 800f58a:	4798      	blx	r3
 800f58c:	2000      	movs	r0, #0
 800f58e:	e7e0      	b.n	800f552 <_raise_r+0x12>

0800f590 <raise>:
 800f590:	4b02      	ldr	r3, [pc, #8]	@ (800f59c <raise+0xc>)
 800f592:	4601      	mov	r1, r0
 800f594:	6818      	ldr	r0, [r3, #0]
 800f596:	f7ff bfd3 	b.w	800f540 <_raise_r>
 800f59a:	bf00      	nop
 800f59c:	20000190 	.word	0x20000190

0800f5a0 <_kill_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d07      	ldr	r5, [pc, #28]	@ (800f5c0 <_kill_r+0x20>)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	602b      	str	r3, [r5, #0]
 800f5ae:	f7f4 fb51 	bl	8003c54 <_kill>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	d102      	bne.n	800f5bc <_kill_r+0x1c>
 800f5b6:	682b      	ldr	r3, [r5, #0]
 800f5b8:	b103      	cbz	r3, 800f5bc <_kill_r+0x1c>
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	bd38      	pop	{r3, r4, r5, pc}
 800f5be:	bf00      	nop
 800f5c0:	200006f4 	.word	0x200006f4

0800f5c4 <_getpid_r>:
 800f5c4:	f7f4 bb3e 	b.w	8003c44 <_getpid>

0800f5c8 <__swhatbuf_r>:
 800f5c8:	b570      	push	{r4, r5, r6, lr}
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d0:	2900      	cmp	r1, #0
 800f5d2:	b096      	sub	sp, #88	@ 0x58
 800f5d4:	4615      	mov	r5, r2
 800f5d6:	461e      	mov	r6, r3
 800f5d8:	da0d      	bge.n	800f5f6 <__swhatbuf_r+0x2e>
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5e0:	f04f 0100 	mov.w	r1, #0
 800f5e4:	bf14      	ite	ne
 800f5e6:	2340      	movne	r3, #64	@ 0x40
 800f5e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	6031      	str	r1, [r6, #0]
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	b016      	add	sp, #88	@ 0x58
 800f5f4:	bd70      	pop	{r4, r5, r6, pc}
 800f5f6:	466a      	mov	r2, sp
 800f5f8:	f000 f848 	bl	800f68c <_fstat_r>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	dbec      	blt.n	800f5da <__swhatbuf_r+0x12>
 800f600:	9901      	ldr	r1, [sp, #4]
 800f602:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f606:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f60a:	4259      	negs	r1, r3
 800f60c:	4159      	adcs	r1, r3
 800f60e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f612:	e7eb      	b.n	800f5ec <__swhatbuf_r+0x24>

0800f614 <__smakebuf_r>:
 800f614:	898b      	ldrh	r3, [r1, #12]
 800f616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f618:	079d      	lsls	r5, r3, #30
 800f61a:	4606      	mov	r6, r0
 800f61c:	460c      	mov	r4, r1
 800f61e:	d507      	bpl.n	800f630 <__smakebuf_r+0x1c>
 800f620:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	6123      	str	r3, [r4, #16]
 800f628:	2301      	movs	r3, #1
 800f62a:	6163      	str	r3, [r4, #20]
 800f62c:	b003      	add	sp, #12
 800f62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f630:	ab01      	add	r3, sp, #4
 800f632:	466a      	mov	r2, sp
 800f634:	f7ff ffc8 	bl	800f5c8 <__swhatbuf_r>
 800f638:	9f00      	ldr	r7, [sp, #0]
 800f63a:	4605      	mov	r5, r0
 800f63c:	4639      	mov	r1, r7
 800f63e:	4630      	mov	r0, r6
 800f640:	f7fb f8c8 	bl	800a7d4 <_malloc_r>
 800f644:	b948      	cbnz	r0, 800f65a <__smakebuf_r+0x46>
 800f646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f64a:	059a      	lsls	r2, r3, #22
 800f64c:	d4ee      	bmi.n	800f62c <__smakebuf_r+0x18>
 800f64e:	f023 0303 	bic.w	r3, r3, #3
 800f652:	f043 0302 	orr.w	r3, r3, #2
 800f656:	81a3      	strh	r3, [r4, #12]
 800f658:	e7e2      	b.n	800f620 <__smakebuf_r+0xc>
 800f65a:	89a3      	ldrh	r3, [r4, #12]
 800f65c:	6020      	str	r0, [r4, #0]
 800f65e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f662:	81a3      	strh	r3, [r4, #12]
 800f664:	9b01      	ldr	r3, [sp, #4]
 800f666:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f66a:	b15b      	cbz	r3, 800f684 <__smakebuf_r+0x70>
 800f66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f670:	4630      	mov	r0, r6
 800f672:	f000 f81d 	bl	800f6b0 <_isatty_r>
 800f676:	b128      	cbz	r0, 800f684 <__smakebuf_r+0x70>
 800f678:	89a3      	ldrh	r3, [r4, #12]
 800f67a:	f023 0303 	bic.w	r3, r3, #3
 800f67e:	f043 0301 	orr.w	r3, r3, #1
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	431d      	orrs	r5, r3
 800f688:	81a5      	strh	r5, [r4, #12]
 800f68a:	e7cf      	b.n	800f62c <__smakebuf_r+0x18>

0800f68c <_fstat_r>:
 800f68c:	b538      	push	{r3, r4, r5, lr}
 800f68e:	4d07      	ldr	r5, [pc, #28]	@ (800f6ac <_fstat_r+0x20>)
 800f690:	2300      	movs	r3, #0
 800f692:	4604      	mov	r4, r0
 800f694:	4608      	mov	r0, r1
 800f696:	4611      	mov	r1, r2
 800f698:	602b      	str	r3, [r5, #0]
 800f69a:	f7f4 fb3b 	bl	8003d14 <_fstat>
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	d102      	bne.n	800f6a8 <_fstat_r+0x1c>
 800f6a2:	682b      	ldr	r3, [r5, #0]
 800f6a4:	b103      	cbz	r3, 800f6a8 <_fstat_r+0x1c>
 800f6a6:	6023      	str	r3, [r4, #0]
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
 800f6aa:	bf00      	nop
 800f6ac:	200006f4 	.word	0x200006f4

0800f6b0 <_isatty_r>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	4d06      	ldr	r5, [pc, #24]	@ (800f6cc <_isatty_r+0x1c>)
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	4608      	mov	r0, r1
 800f6ba:	602b      	str	r3, [r5, #0]
 800f6bc:	f7f4 fb3a 	bl	8003d34 <_isatty>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d102      	bne.n	800f6ca <_isatty_r+0x1a>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	b103      	cbz	r3, 800f6ca <_isatty_r+0x1a>
 800f6c8:	6023      	str	r3, [r4, #0]
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	200006f4 	.word	0x200006f4

0800f6d0 <cos>:
 800f6d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6d2:	ec53 2b10 	vmov	r2, r3, d0
 800f6d6:	4826      	ldr	r0, [pc, #152]	@ (800f770 <cos+0xa0>)
 800f6d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f6dc:	4281      	cmp	r1, r0
 800f6de:	d806      	bhi.n	800f6ee <cos+0x1e>
 800f6e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f768 <cos+0x98>
 800f6e4:	b005      	add	sp, #20
 800f6e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6ea:	f000 b899 	b.w	800f820 <__kernel_cos>
 800f6ee:	4821      	ldr	r0, [pc, #132]	@ (800f774 <cos+0xa4>)
 800f6f0:	4281      	cmp	r1, r0
 800f6f2:	d908      	bls.n	800f706 <cos+0x36>
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	f7f0 fdd6 	bl	80002a8 <__aeabi_dsub>
 800f6fc:	ec41 0b10 	vmov	d0, r0, r1
 800f700:	b005      	add	sp, #20
 800f702:	f85d fb04 	ldr.w	pc, [sp], #4
 800f706:	4668      	mov	r0, sp
 800f708:	f000 fa0e 	bl	800fb28 <__ieee754_rem_pio2>
 800f70c:	f000 0003 	and.w	r0, r0, #3
 800f710:	2801      	cmp	r0, #1
 800f712:	d00b      	beq.n	800f72c <cos+0x5c>
 800f714:	2802      	cmp	r0, #2
 800f716:	d015      	beq.n	800f744 <cos+0x74>
 800f718:	b9d8      	cbnz	r0, 800f752 <cos+0x82>
 800f71a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f71e:	ed9d 0b00 	vldr	d0, [sp]
 800f722:	f000 f87d 	bl	800f820 <__kernel_cos>
 800f726:	ec51 0b10 	vmov	r0, r1, d0
 800f72a:	e7e7      	b.n	800f6fc <cos+0x2c>
 800f72c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f730:	ed9d 0b00 	vldr	d0, [sp]
 800f734:	f000 f93c 	bl	800f9b0 <__kernel_sin>
 800f738:	ec53 2b10 	vmov	r2, r3, d0
 800f73c:	4610      	mov	r0, r2
 800f73e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f742:	e7db      	b.n	800f6fc <cos+0x2c>
 800f744:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f748:	ed9d 0b00 	vldr	d0, [sp]
 800f74c:	f000 f868 	bl	800f820 <__kernel_cos>
 800f750:	e7f2      	b.n	800f738 <cos+0x68>
 800f752:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f756:	ed9d 0b00 	vldr	d0, [sp]
 800f75a:	2001      	movs	r0, #1
 800f75c:	f000 f928 	bl	800f9b0 <__kernel_sin>
 800f760:	e7e1      	b.n	800f726 <cos+0x56>
 800f762:	bf00      	nop
 800f764:	f3af 8000 	nop.w
	...
 800f770:	3fe921fb 	.word	0x3fe921fb
 800f774:	7fefffff 	.word	0x7fefffff

0800f778 <sin>:
 800f778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f77a:	ec53 2b10 	vmov	r2, r3, d0
 800f77e:	4826      	ldr	r0, [pc, #152]	@ (800f818 <sin+0xa0>)
 800f780:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f784:	4281      	cmp	r1, r0
 800f786:	d807      	bhi.n	800f798 <sin+0x20>
 800f788:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f810 <sin+0x98>
 800f78c:	2000      	movs	r0, #0
 800f78e:	b005      	add	sp, #20
 800f790:	f85d eb04 	ldr.w	lr, [sp], #4
 800f794:	f000 b90c 	b.w	800f9b0 <__kernel_sin>
 800f798:	4820      	ldr	r0, [pc, #128]	@ (800f81c <sin+0xa4>)
 800f79a:	4281      	cmp	r1, r0
 800f79c:	d908      	bls.n	800f7b0 <sin+0x38>
 800f79e:	4610      	mov	r0, r2
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	f7f0 fd81 	bl	80002a8 <__aeabi_dsub>
 800f7a6:	ec41 0b10 	vmov	d0, r0, r1
 800f7aa:	b005      	add	sp, #20
 800f7ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7b0:	4668      	mov	r0, sp
 800f7b2:	f000 f9b9 	bl	800fb28 <__ieee754_rem_pio2>
 800f7b6:	f000 0003 	and.w	r0, r0, #3
 800f7ba:	2801      	cmp	r0, #1
 800f7bc:	d00c      	beq.n	800f7d8 <sin+0x60>
 800f7be:	2802      	cmp	r0, #2
 800f7c0:	d011      	beq.n	800f7e6 <sin+0x6e>
 800f7c2:	b9e8      	cbnz	r0, 800f800 <sin+0x88>
 800f7c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7c8:	ed9d 0b00 	vldr	d0, [sp]
 800f7cc:	2001      	movs	r0, #1
 800f7ce:	f000 f8ef 	bl	800f9b0 <__kernel_sin>
 800f7d2:	ec51 0b10 	vmov	r0, r1, d0
 800f7d6:	e7e6      	b.n	800f7a6 <sin+0x2e>
 800f7d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7dc:	ed9d 0b00 	vldr	d0, [sp]
 800f7e0:	f000 f81e 	bl	800f820 <__kernel_cos>
 800f7e4:	e7f5      	b.n	800f7d2 <sin+0x5a>
 800f7e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7ea:	ed9d 0b00 	vldr	d0, [sp]
 800f7ee:	2001      	movs	r0, #1
 800f7f0:	f000 f8de 	bl	800f9b0 <__kernel_sin>
 800f7f4:	ec53 2b10 	vmov	r2, r3, d0
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f7fe:	e7d2      	b.n	800f7a6 <sin+0x2e>
 800f800:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f804:	ed9d 0b00 	vldr	d0, [sp]
 800f808:	f000 f80a 	bl	800f820 <__kernel_cos>
 800f80c:	e7f2      	b.n	800f7f4 <sin+0x7c>
 800f80e:	bf00      	nop
	...
 800f818:	3fe921fb 	.word	0x3fe921fb
 800f81c:	7fefffff 	.word	0x7fefffff

0800f820 <__kernel_cos>:
 800f820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f824:	ec57 6b10 	vmov	r6, r7, d0
 800f828:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f82c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f830:	ed8d 1b00 	vstr	d1, [sp]
 800f834:	d206      	bcs.n	800f844 <__kernel_cos+0x24>
 800f836:	4630      	mov	r0, r6
 800f838:	4639      	mov	r1, r7
 800f83a:	f7f1 f99d 	bl	8000b78 <__aeabi_d2iz>
 800f83e:	2800      	cmp	r0, #0
 800f840:	f000 8088 	beq.w	800f954 <__kernel_cos+0x134>
 800f844:	4632      	mov	r2, r6
 800f846:	463b      	mov	r3, r7
 800f848:	4630      	mov	r0, r6
 800f84a:	4639      	mov	r1, r7
 800f84c:	f7f0 fee4 	bl	8000618 <__aeabi_dmul>
 800f850:	4b51      	ldr	r3, [pc, #324]	@ (800f998 <__kernel_cos+0x178>)
 800f852:	2200      	movs	r2, #0
 800f854:	4604      	mov	r4, r0
 800f856:	460d      	mov	r5, r1
 800f858:	f7f0 fede 	bl	8000618 <__aeabi_dmul>
 800f85c:	a340      	add	r3, pc, #256	@ (adr r3, 800f960 <__kernel_cos+0x140>)
 800f85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f862:	4682      	mov	sl, r0
 800f864:	468b      	mov	fp, r1
 800f866:	4620      	mov	r0, r4
 800f868:	4629      	mov	r1, r5
 800f86a:	f7f0 fed5 	bl	8000618 <__aeabi_dmul>
 800f86e:	a33e      	add	r3, pc, #248	@ (adr r3, 800f968 <__kernel_cos+0x148>)
 800f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f874:	f7f0 fd1a 	bl	80002ac <__adddf3>
 800f878:	4622      	mov	r2, r4
 800f87a:	462b      	mov	r3, r5
 800f87c:	f7f0 fecc 	bl	8000618 <__aeabi_dmul>
 800f880:	a33b      	add	r3, pc, #236	@ (adr r3, 800f970 <__kernel_cos+0x150>)
 800f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f886:	f7f0 fd0f 	bl	80002a8 <__aeabi_dsub>
 800f88a:	4622      	mov	r2, r4
 800f88c:	462b      	mov	r3, r5
 800f88e:	f7f0 fec3 	bl	8000618 <__aeabi_dmul>
 800f892:	a339      	add	r3, pc, #228	@ (adr r3, 800f978 <__kernel_cos+0x158>)
 800f894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f898:	f7f0 fd08 	bl	80002ac <__adddf3>
 800f89c:	4622      	mov	r2, r4
 800f89e:	462b      	mov	r3, r5
 800f8a0:	f7f0 feba 	bl	8000618 <__aeabi_dmul>
 800f8a4:	a336      	add	r3, pc, #216	@ (adr r3, 800f980 <__kernel_cos+0x160>)
 800f8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8aa:	f7f0 fcfd 	bl	80002a8 <__aeabi_dsub>
 800f8ae:	4622      	mov	r2, r4
 800f8b0:	462b      	mov	r3, r5
 800f8b2:	f7f0 feb1 	bl	8000618 <__aeabi_dmul>
 800f8b6:	a334      	add	r3, pc, #208	@ (adr r3, 800f988 <__kernel_cos+0x168>)
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	f7f0 fcf6 	bl	80002ac <__adddf3>
 800f8c0:	4622      	mov	r2, r4
 800f8c2:	462b      	mov	r3, r5
 800f8c4:	f7f0 fea8 	bl	8000618 <__aeabi_dmul>
 800f8c8:	4622      	mov	r2, r4
 800f8ca:	462b      	mov	r3, r5
 800f8cc:	f7f0 fea4 	bl	8000618 <__aeabi_dmul>
 800f8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	460d      	mov	r5, r1
 800f8d8:	4630      	mov	r0, r6
 800f8da:	4639      	mov	r1, r7
 800f8dc:	f7f0 fe9c 	bl	8000618 <__aeabi_dmul>
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f7f0 fcde 	bl	80002a8 <__aeabi_dsub>
 800f8ec:	4b2b      	ldr	r3, [pc, #172]	@ (800f99c <__kernel_cos+0x17c>)
 800f8ee:	4598      	cmp	r8, r3
 800f8f0:	4606      	mov	r6, r0
 800f8f2:	460f      	mov	r7, r1
 800f8f4:	d810      	bhi.n	800f918 <__kernel_cos+0xf8>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	4650      	mov	r0, sl
 800f8fc:	4659      	mov	r1, fp
 800f8fe:	f7f0 fcd3 	bl	80002a8 <__aeabi_dsub>
 800f902:	460b      	mov	r3, r1
 800f904:	4926      	ldr	r1, [pc, #152]	@ (800f9a0 <__kernel_cos+0x180>)
 800f906:	4602      	mov	r2, r0
 800f908:	2000      	movs	r0, #0
 800f90a:	f7f0 fccd 	bl	80002a8 <__aeabi_dsub>
 800f90e:	ec41 0b10 	vmov	d0, r0, r1
 800f912:	b003      	add	sp, #12
 800f914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f918:	4b22      	ldr	r3, [pc, #136]	@ (800f9a4 <__kernel_cos+0x184>)
 800f91a:	4921      	ldr	r1, [pc, #132]	@ (800f9a0 <__kernel_cos+0x180>)
 800f91c:	4598      	cmp	r8, r3
 800f91e:	bf8c      	ite	hi
 800f920:	4d21      	ldrhi	r5, [pc, #132]	@ (800f9a8 <__kernel_cos+0x188>)
 800f922:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f926:	2400      	movs	r4, #0
 800f928:	4622      	mov	r2, r4
 800f92a:	462b      	mov	r3, r5
 800f92c:	2000      	movs	r0, #0
 800f92e:	f7f0 fcbb 	bl	80002a8 <__aeabi_dsub>
 800f932:	4622      	mov	r2, r4
 800f934:	4680      	mov	r8, r0
 800f936:	4689      	mov	r9, r1
 800f938:	462b      	mov	r3, r5
 800f93a:	4650      	mov	r0, sl
 800f93c:	4659      	mov	r1, fp
 800f93e:	f7f0 fcb3 	bl	80002a8 <__aeabi_dsub>
 800f942:	4632      	mov	r2, r6
 800f944:	463b      	mov	r3, r7
 800f946:	f7f0 fcaf 	bl	80002a8 <__aeabi_dsub>
 800f94a:	4602      	mov	r2, r0
 800f94c:	460b      	mov	r3, r1
 800f94e:	4640      	mov	r0, r8
 800f950:	4649      	mov	r1, r9
 800f952:	e7da      	b.n	800f90a <__kernel_cos+0xea>
 800f954:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f990 <__kernel_cos+0x170>
 800f958:	e7db      	b.n	800f912 <__kernel_cos+0xf2>
 800f95a:	bf00      	nop
 800f95c:	f3af 8000 	nop.w
 800f960:	be8838d4 	.word	0xbe8838d4
 800f964:	bda8fae9 	.word	0xbda8fae9
 800f968:	bdb4b1c4 	.word	0xbdb4b1c4
 800f96c:	3e21ee9e 	.word	0x3e21ee9e
 800f970:	809c52ad 	.word	0x809c52ad
 800f974:	3e927e4f 	.word	0x3e927e4f
 800f978:	19cb1590 	.word	0x19cb1590
 800f97c:	3efa01a0 	.word	0x3efa01a0
 800f980:	16c15177 	.word	0x16c15177
 800f984:	3f56c16c 	.word	0x3f56c16c
 800f988:	5555554c 	.word	0x5555554c
 800f98c:	3fa55555 	.word	0x3fa55555
 800f990:	00000000 	.word	0x00000000
 800f994:	3ff00000 	.word	0x3ff00000
 800f998:	3fe00000 	.word	0x3fe00000
 800f99c:	3fd33332 	.word	0x3fd33332
 800f9a0:	3ff00000 	.word	0x3ff00000
 800f9a4:	3fe90000 	.word	0x3fe90000
 800f9a8:	3fd20000 	.word	0x3fd20000
 800f9ac:	00000000 	.word	0x00000000

0800f9b0 <__kernel_sin>:
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	ec55 4b10 	vmov	r4, r5, d0
 800f9b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f9bc:	b085      	sub	sp, #20
 800f9be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f9c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f9c6:	4680      	mov	r8, r0
 800f9c8:	d205      	bcs.n	800f9d6 <__kernel_sin+0x26>
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	f7f1 f8d3 	bl	8000b78 <__aeabi_d2iz>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d052      	beq.n	800fa7c <__kernel_sin+0xcc>
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	462b      	mov	r3, r5
 800f9da:	4620      	mov	r0, r4
 800f9dc:	4629      	mov	r1, r5
 800f9de:	f7f0 fe1b 	bl	8000618 <__aeabi_dmul>
 800f9e2:	4682      	mov	sl, r0
 800f9e4:	468b      	mov	fp, r1
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	f7f0 fe13 	bl	8000618 <__aeabi_dmul>
 800f9f2:	a342      	add	r3, pc, #264	@ (adr r3, 800fafc <__kernel_sin+0x14c>)
 800f9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f8:	e9cd 0100 	strd	r0, r1, [sp]
 800f9fc:	4650      	mov	r0, sl
 800f9fe:	4659      	mov	r1, fp
 800fa00:	f7f0 fe0a 	bl	8000618 <__aeabi_dmul>
 800fa04:	a33f      	add	r3, pc, #252	@ (adr r3, 800fb04 <__kernel_sin+0x154>)
 800fa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0a:	f7f0 fc4d 	bl	80002a8 <__aeabi_dsub>
 800fa0e:	4652      	mov	r2, sl
 800fa10:	465b      	mov	r3, fp
 800fa12:	f7f0 fe01 	bl	8000618 <__aeabi_dmul>
 800fa16:	a33d      	add	r3, pc, #244	@ (adr r3, 800fb0c <__kernel_sin+0x15c>)
 800fa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1c:	f7f0 fc46 	bl	80002ac <__adddf3>
 800fa20:	4652      	mov	r2, sl
 800fa22:	465b      	mov	r3, fp
 800fa24:	f7f0 fdf8 	bl	8000618 <__aeabi_dmul>
 800fa28:	a33a      	add	r3, pc, #232	@ (adr r3, 800fb14 <__kernel_sin+0x164>)
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	f7f0 fc3b 	bl	80002a8 <__aeabi_dsub>
 800fa32:	4652      	mov	r2, sl
 800fa34:	465b      	mov	r3, fp
 800fa36:	f7f0 fdef 	bl	8000618 <__aeabi_dmul>
 800fa3a:	a338      	add	r3, pc, #224	@ (adr r3, 800fb1c <__kernel_sin+0x16c>)
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	f7f0 fc34 	bl	80002ac <__adddf3>
 800fa44:	4606      	mov	r6, r0
 800fa46:	460f      	mov	r7, r1
 800fa48:	f1b8 0f00 	cmp.w	r8, #0
 800fa4c:	d11b      	bne.n	800fa86 <__kernel_sin+0xd6>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4650      	mov	r0, sl
 800fa54:	4659      	mov	r1, fp
 800fa56:	f7f0 fddf 	bl	8000618 <__aeabi_dmul>
 800fa5a:	a325      	add	r3, pc, #148	@ (adr r3, 800faf0 <__kernel_sin+0x140>)
 800fa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa60:	f7f0 fc22 	bl	80002a8 <__aeabi_dsub>
 800fa64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa68:	f7f0 fdd6 	bl	8000618 <__aeabi_dmul>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	460b      	mov	r3, r1
 800fa70:	4620      	mov	r0, r4
 800fa72:	4629      	mov	r1, r5
 800fa74:	f7f0 fc1a 	bl	80002ac <__adddf3>
 800fa78:	4604      	mov	r4, r0
 800fa7a:	460d      	mov	r5, r1
 800fa7c:	ec45 4b10 	vmov	d0, r4, r5
 800fa80:	b005      	add	sp, #20
 800fa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa8a:	4b1b      	ldr	r3, [pc, #108]	@ (800faf8 <__kernel_sin+0x148>)
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f7f0 fdc3 	bl	8000618 <__aeabi_dmul>
 800fa92:	4632      	mov	r2, r6
 800fa94:	4680      	mov	r8, r0
 800fa96:	4689      	mov	r9, r1
 800fa98:	463b      	mov	r3, r7
 800fa9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa9e:	f7f0 fdbb 	bl	8000618 <__aeabi_dmul>
 800faa2:	4602      	mov	r2, r0
 800faa4:	460b      	mov	r3, r1
 800faa6:	4640      	mov	r0, r8
 800faa8:	4649      	mov	r1, r9
 800faaa:	f7f0 fbfd 	bl	80002a8 <__aeabi_dsub>
 800faae:	4652      	mov	r2, sl
 800fab0:	465b      	mov	r3, fp
 800fab2:	f7f0 fdb1 	bl	8000618 <__aeabi_dmul>
 800fab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faba:	f7f0 fbf5 	bl	80002a8 <__aeabi_dsub>
 800fabe:	a30c      	add	r3, pc, #48	@ (adr r3, 800faf0 <__kernel_sin+0x140>)
 800fac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac4:	4606      	mov	r6, r0
 800fac6:	460f      	mov	r7, r1
 800fac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800facc:	f7f0 fda4 	bl	8000618 <__aeabi_dmul>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4630      	mov	r0, r6
 800fad6:	4639      	mov	r1, r7
 800fad8:	f7f0 fbe8 	bl	80002ac <__adddf3>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	4620      	mov	r0, r4
 800fae2:	4629      	mov	r1, r5
 800fae4:	f7f0 fbe0 	bl	80002a8 <__aeabi_dsub>
 800fae8:	e7c6      	b.n	800fa78 <__kernel_sin+0xc8>
 800faea:	bf00      	nop
 800faec:	f3af 8000 	nop.w
 800faf0:	55555549 	.word	0x55555549
 800faf4:	3fc55555 	.word	0x3fc55555
 800faf8:	3fe00000 	.word	0x3fe00000
 800fafc:	5acfd57c 	.word	0x5acfd57c
 800fb00:	3de5d93a 	.word	0x3de5d93a
 800fb04:	8a2b9ceb 	.word	0x8a2b9ceb
 800fb08:	3e5ae5e6 	.word	0x3e5ae5e6
 800fb0c:	57b1fe7d 	.word	0x57b1fe7d
 800fb10:	3ec71de3 	.word	0x3ec71de3
 800fb14:	19c161d5 	.word	0x19c161d5
 800fb18:	3f2a01a0 	.word	0x3f2a01a0
 800fb1c:	1110f8a6 	.word	0x1110f8a6
 800fb20:	3f811111 	.word	0x3f811111
 800fb24:	00000000 	.word	0x00000000

0800fb28 <__ieee754_rem_pio2>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	ec57 6b10 	vmov	r6, r7, d0
 800fb30:	4bc5      	ldr	r3, [pc, #788]	@ (800fe48 <__ieee754_rem_pio2+0x320>)
 800fb32:	b08d      	sub	sp, #52	@ 0x34
 800fb34:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fb38:	4598      	cmp	r8, r3
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	9704      	str	r7, [sp, #16]
 800fb3e:	d807      	bhi.n	800fb50 <__ieee754_rem_pio2+0x28>
 800fb40:	2200      	movs	r2, #0
 800fb42:	2300      	movs	r3, #0
 800fb44:	ed80 0b00 	vstr	d0, [r0]
 800fb48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fb4c:	2500      	movs	r5, #0
 800fb4e:	e028      	b.n	800fba2 <__ieee754_rem_pio2+0x7a>
 800fb50:	4bbe      	ldr	r3, [pc, #760]	@ (800fe4c <__ieee754_rem_pio2+0x324>)
 800fb52:	4598      	cmp	r8, r3
 800fb54:	d878      	bhi.n	800fc48 <__ieee754_rem_pio2+0x120>
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	4dbd      	ldr	r5, [pc, #756]	@ (800fe50 <__ieee754_rem_pio2+0x328>)
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800fe10 <__ieee754_rem_pio2+0x2e8>)
 800fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb64:	4639      	mov	r1, r7
 800fb66:	dd38      	ble.n	800fbda <__ieee754_rem_pio2+0xb2>
 800fb68:	f7f0 fb9e 	bl	80002a8 <__aeabi_dsub>
 800fb6c:	45a8      	cmp	r8, r5
 800fb6e:	4606      	mov	r6, r0
 800fb70:	460f      	mov	r7, r1
 800fb72:	d01a      	beq.n	800fbaa <__ieee754_rem_pio2+0x82>
 800fb74:	a3a8      	add	r3, pc, #672	@ (adr r3, 800fe18 <__ieee754_rem_pio2+0x2f0>)
 800fb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7a:	f7f0 fb95 	bl	80002a8 <__aeabi_dsub>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	460b      	mov	r3, r1
 800fb82:	4680      	mov	r8, r0
 800fb84:	4689      	mov	r9, r1
 800fb86:	4630      	mov	r0, r6
 800fb88:	4639      	mov	r1, r7
 800fb8a:	f7f0 fb8d 	bl	80002a8 <__aeabi_dsub>
 800fb8e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800fe18 <__ieee754_rem_pio2+0x2f0>)
 800fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb94:	f7f0 fb88 	bl	80002a8 <__aeabi_dsub>
 800fb98:	e9c4 8900 	strd	r8, r9, [r4]
 800fb9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fba0:	2501      	movs	r5, #1
 800fba2:	4628      	mov	r0, r5
 800fba4:	b00d      	add	sp, #52	@ 0x34
 800fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbaa:	a39d      	add	r3, pc, #628	@ (adr r3, 800fe20 <__ieee754_rem_pio2+0x2f8>)
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	f7f0 fb7a 	bl	80002a8 <__aeabi_dsub>
 800fbb4:	a39c      	add	r3, pc, #624	@ (adr r3, 800fe28 <__ieee754_rem_pio2+0x300>)
 800fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbba:	4606      	mov	r6, r0
 800fbbc:	460f      	mov	r7, r1
 800fbbe:	f7f0 fb73 	bl	80002a8 <__aeabi_dsub>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	4680      	mov	r8, r0
 800fbc8:	4689      	mov	r9, r1
 800fbca:	4630      	mov	r0, r6
 800fbcc:	4639      	mov	r1, r7
 800fbce:	f7f0 fb6b 	bl	80002a8 <__aeabi_dsub>
 800fbd2:	a395      	add	r3, pc, #596	@ (adr r3, 800fe28 <__ieee754_rem_pio2+0x300>)
 800fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd8:	e7dc      	b.n	800fb94 <__ieee754_rem_pio2+0x6c>
 800fbda:	f7f0 fb67 	bl	80002ac <__adddf3>
 800fbde:	45a8      	cmp	r8, r5
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	460f      	mov	r7, r1
 800fbe4:	d018      	beq.n	800fc18 <__ieee754_rem_pio2+0xf0>
 800fbe6:	a38c      	add	r3, pc, #560	@ (adr r3, 800fe18 <__ieee754_rem_pio2+0x2f0>)
 800fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbec:	f7f0 fb5e 	bl	80002ac <__adddf3>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	4680      	mov	r8, r0
 800fbf6:	4689      	mov	r9, r1
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	4639      	mov	r1, r7
 800fbfc:	f7f0 fb54 	bl	80002a8 <__aeabi_dsub>
 800fc00:	a385      	add	r3, pc, #532	@ (adr r3, 800fe18 <__ieee754_rem_pio2+0x2f0>)
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	f7f0 fb51 	bl	80002ac <__adddf3>
 800fc0a:	f04f 35ff 	mov.w	r5, #4294967295
 800fc0e:	e9c4 8900 	strd	r8, r9, [r4]
 800fc12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fc16:	e7c4      	b.n	800fba2 <__ieee754_rem_pio2+0x7a>
 800fc18:	a381      	add	r3, pc, #516	@ (adr r3, 800fe20 <__ieee754_rem_pio2+0x2f8>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	f7f0 fb45 	bl	80002ac <__adddf3>
 800fc22:	a381      	add	r3, pc, #516	@ (adr r3, 800fe28 <__ieee754_rem_pio2+0x300>)
 800fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc28:	4606      	mov	r6, r0
 800fc2a:	460f      	mov	r7, r1
 800fc2c:	f7f0 fb3e 	bl	80002ac <__adddf3>
 800fc30:	4602      	mov	r2, r0
 800fc32:	460b      	mov	r3, r1
 800fc34:	4680      	mov	r8, r0
 800fc36:	4689      	mov	r9, r1
 800fc38:	4630      	mov	r0, r6
 800fc3a:	4639      	mov	r1, r7
 800fc3c:	f7f0 fb34 	bl	80002a8 <__aeabi_dsub>
 800fc40:	a379      	add	r3, pc, #484	@ (adr r3, 800fe28 <__ieee754_rem_pio2+0x300>)
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	e7de      	b.n	800fc06 <__ieee754_rem_pio2+0xde>
 800fc48:	4b82      	ldr	r3, [pc, #520]	@ (800fe54 <__ieee754_rem_pio2+0x32c>)
 800fc4a:	4598      	cmp	r8, r3
 800fc4c:	f200 80d1 	bhi.w	800fdf2 <__ieee754_rem_pio2+0x2ca>
 800fc50:	f000 f966 	bl	800ff20 <fabs>
 800fc54:	ec57 6b10 	vmov	r6, r7, d0
 800fc58:	a375      	add	r3, pc, #468	@ (adr r3, 800fe30 <__ieee754_rem_pio2+0x308>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	4630      	mov	r0, r6
 800fc60:	4639      	mov	r1, r7
 800fc62:	f7f0 fcd9 	bl	8000618 <__aeabi_dmul>
 800fc66:	4b7c      	ldr	r3, [pc, #496]	@ (800fe58 <__ieee754_rem_pio2+0x330>)
 800fc68:	2200      	movs	r2, #0
 800fc6a:	f7f0 fb1f 	bl	80002ac <__adddf3>
 800fc6e:	f7f0 ff83 	bl	8000b78 <__aeabi_d2iz>
 800fc72:	4605      	mov	r5, r0
 800fc74:	f7f0 fc66 	bl	8000544 <__aeabi_i2d>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	460b      	mov	r3, r1
 800fc7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fc80:	a363      	add	r3, pc, #396	@ (adr r3, 800fe10 <__ieee754_rem_pio2+0x2e8>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	f7f0 fcc7 	bl	8000618 <__aeabi_dmul>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	4630      	mov	r0, r6
 800fc90:	4639      	mov	r1, r7
 800fc92:	f7f0 fb09 	bl	80002a8 <__aeabi_dsub>
 800fc96:	a360      	add	r3, pc, #384	@ (adr r3, 800fe18 <__ieee754_rem_pio2+0x2f0>)
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	4682      	mov	sl, r0
 800fc9e:	468b      	mov	fp, r1
 800fca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fca4:	f7f0 fcb8 	bl	8000618 <__aeabi_dmul>
 800fca8:	2d1f      	cmp	r5, #31
 800fcaa:	4606      	mov	r6, r0
 800fcac:	460f      	mov	r7, r1
 800fcae:	dc0c      	bgt.n	800fcca <__ieee754_rem_pio2+0x1a2>
 800fcb0:	4b6a      	ldr	r3, [pc, #424]	@ (800fe5c <__ieee754_rem_pio2+0x334>)
 800fcb2:	1e6a      	subs	r2, r5, #1
 800fcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb8:	4543      	cmp	r3, r8
 800fcba:	d006      	beq.n	800fcca <__ieee754_rem_pio2+0x1a2>
 800fcbc:	4632      	mov	r2, r6
 800fcbe:	463b      	mov	r3, r7
 800fcc0:	4650      	mov	r0, sl
 800fcc2:	4659      	mov	r1, fp
 800fcc4:	f7f0 faf0 	bl	80002a8 <__aeabi_dsub>
 800fcc8:	e00e      	b.n	800fce8 <__ieee754_rem_pio2+0x1c0>
 800fcca:	463b      	mov	r3, r7
 800fccc:	4632      	mov	r2, r6
 800fcce:	4650      	mov	r0, sl
 800fcd0:	4659      	mov	r1, fp
 800fcd2:	f7f0 fae9 	bl	80002a8 <__aeabi_dsub>
 800fcd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fcda:	9305      	str	r3, [sp, #20]
 800fcdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fce0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fce4:	2b10      	cmp	r3, #16
 800fce6:	dc02      	bgt.n	800fcee <__ieee754_rem_pio2+0x1c6>
 800fce8:	e9c4 0100 	strd	r0, r1, [r4]
 800fcec:	e039      	b.n	800fd62 <__ieee754_rem_pio2+0x23a>
 800fcee:	a34c      	add	r3, pc, #304	@ (adr r3, 800fe20 <__ieee754_rem_pio2+0x2f8>)
 800fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcf8:	f7f0 fc8e 	bl	8000618 <__aeabi_dmul>
 800fcfc:	4606      	mov	r6, r0
 800fcfe:	460f      	mov	r7, r1
 800fd00:	4602      	mov	r2, r0
 800fd02:	460b      	mov	r3, r1
 800fd04:	4650      	mov	r0, sl
 800fd06:	4659      	mov	r1, fp
 800fd08:	f7f0 face 	bl	80002a8 <__aeabi_dsub>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	460b      	mov	r3, r1
 800fd10:	4680      	mov	r8, r0
 800fd12:	4689      	mov	r9, r1
 800fd14:	4650      	mov	r0, sl
 800fd16:	4659      	mov	r1, fp
 800fd18:	f7f0 fac6 	bl	80002a8 <__aeabi_dsub>
 800fd1c:	4632      	mov	r2, r6
 800fd1e:	463b      	mov	r3, r7
 800fd20:	f7f0 fac2 	bl	80002a8 <__aeabi_dsub>
 800fd24:	a340      	add	r3, pc, #256	@ (adr r3, 800fe28 <__ieee754_rem_pio2+0x300>)
 800fd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	460f      	mov	r7, r1
 800fd2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd32:	f7f0 fc71 	bl	8000618 <__aeabi_dmul>
 800fd36:	4632      	mov	r2, r6
 800fd38:	463b      	mov	r3, r7
 800fd3a:	f7f0 fab5 	bl	80002a8 <__aeabi_dsub>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	460b      	mov	r3, r1
 800fd42:	4606      	mov	r6, r0
 800fd44:	460f      	mov	r7, r1
 800fd46:	4640      	mov	r0, r8
 800fd48:	4649      	mov	r1, r9
 800fd4a:	f7f0 faad 	bl	80002a8 <__aeabi_dsub>
 800fd4e:	9a05      	ldr	r2, [sp, #20]
 800fd50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	2b31      	cmp	r3, #49	@ 0x31
 800fd58:	dc20      	bgt.n	800fd9c <__ieee754_rem_pio2+0x274>
 800fd5a:	e9c4 0100 	strd	r0, r1, [r4]
 800fd5e:	46c2      	mov	sl, r8
 800fd60:	46cb      	mov	fp, r9
 800fd62:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fd66:	4650      	mov	r0, sl
 800fd68:	4642      	mov	r2, r8
 800fd6a:	464b      	mov	r3, r9
 800fd6c:	4659      	mov	r1, fp
 800fd6e:	f7f0 fa9b 	bl	80002a8 <__aeabi_dsub>
 800fd72:	463b      	mov	r3, r7
 800fd74:	4632      	mov	r2, r6
 800fd76:	f7f0 fa97 	bl	80002a8 <__aeabi_dsub>
 800fd7a:	9b04      	ldr	r3, [sp, #16]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd82:	f6bf af0e 	bge.w	800fba2 <__ieee754_rem_pio2+0x7a>
 800fd86:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fd8a:	6063      	str	r3, [r4, #4]
 800fd8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd90:	f8c4 8000 	str.w	r8, [r4]
 800fd94:	60a0      	str	r0, [r4, #8]
 800fd96:	60e3      	str	r3, [r4, #12]
 800fd98:	426d      	negs	r5, r5
 800fd9a:	e702      	b.n	800fba2 <__ieee754_rem_pio2+0x7a>
 800fd9c:	a326      	add	r3, pc, #152	@ (adr r3, 800fe38 <__ieee754_rem_pio2+0x310>)
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fda6:	f7f0 fc37 	bl	8000618 <__aeabi_dmul>
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460f      	mov	r7, r1
 800fdae:	4602      	mov	r2, r0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	4640      	mov	r0, r8
 800fdb4:	4649      	mov	r1, r9
 800fdb6:	f7f0 fa77 	bl	80002a8 <__aeabi_dsub>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	4682      	mov	sl, r0
 800fdc0:	468b      	mov	fp, r1
 800fdc2:	4640      	mov	r0, r8
 800fdc4:	4649      	mov	r1, r9
 800fdc6:	f7f0 fa6f 	bl	80002a8 <__aeabi_dsub>
 800fdca:	4632      	mov	r2, r6
 800fdcc:	463b      	mov	r3, r7
 800fdce:	f7f0 fa6b 	bl	80002a8 <__aeabi_dsub>
 800fdd2:	a31b      	add	r3, pc, #108	@ (adr r3, 800fe40 <__ieee754_rem_pio2+0x318>)
 800fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd8:	4606      	mov	r6, r0
 800fdda:	460f      	mov	r7, r1
 800fddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fde0:	f7f0 fc1a 	bl	8000618 <__aeabi_dmul>
 800fde4:	4632      	mov	r2, r6
 800fde6:	463b      	mov	r3, r7
 800fde8:	f7f0 fa5e 	bl	80002a8 <__aeabi_dsub>
 800fdec:	4606      	mov	r6, r0
 800fdee:	460f      	mov	r7, r1
 800fdf0:	e764      	b.n	800fcbc <__ieee754_rem_pio2+0x194>
 800fdf2:	4b1b      	ldr	r3, [pc, #108]	@ (800fe60 <__ieee754_rem_pio2+0x338>)
 800fdf4:	4598      	cmp	r8, r3
 800fdf6:	d935      	bls.n	800fe64 <__ieee754_rem_pio2+0x33c>
 800fdf8:	4632      	mov	r2, r6
 800fdfa:	463b      	mov	r3, r7
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	4639      	mov	r1, r7
 800fe00:	f7f0 fa52 	bl	80002a8 <__aeabi_dsub>
 800fe04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fe08:	e9c4 0100 	strd	r0, r1, [r4]
 800fe0c:	e69e      	b.n	800fb4c <__ieee754_rem_pio2+0x24>
 800fe0e:	bf00      	nop
 800fe10:	54400000 	.word	0x54400000
 800fe14:	3ff921fb 	.word	0x3ff921fb
 800fe18:	1a626331 	.word	0x1a626331
 800fe1c:	3dd0b461 	.word	0x3dd0b461
 800fe20:	1a600000 	.word	0x1a600000
 800fe24:	3dd0b461 	.word	0x3dd0b461
 800fe28:	2e037073 	.word	0x2e037073
 800fe2c:	3ba3198a 	.word	0x3ba3198a
 800fe30:	6dc9c883 	.word	0x6dc9c883
 800fe34:	3fe45f30 	.word	0x3fe45f30
 800fe38:	2e000000 	.word	0x2e000000
 800fe3c:	3ba3198a 	.word	0x3ba3198a
 800fe40:	252049c1 	.word	0x252049c1
 800fe44:	397b839a 	.word	0x397b839a
 800fe48:	3fe921fb 	.word	0x3fe921fb
 800fe4c:	4002d97b 	.word	0x4002d97b
 800fe50:	3ff921fb 	.word	0x3ff921fb
 800fe54:	413921fb 	.word	0x413921fb
 800fe58:	3fe00000 	.word	0x3fe00000
 800fe5c:	08010d90 	.word	0x08010d90
 800fe60:	7fefffff 	.word	0x7fefffff
 800fe64:	ea4f 5528 	mov.w	r5, r8, asr #20
 800fe68:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800fe6c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800fe70:	4630      	mov	r0, r6
 800fe72:	460f      	mov	r7, r1
 800fe74:	f7f0 fe80 	bl	8000b78 <__aeabi_d2iz>
 800fe78:	f7f0 fb64 	bl	8000544 <__aeabi_i2d>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	460b      	mov	r3, r1
 800fe80:	4630      	mov	r0, r6
 800fe82:	4639      	mov	r1, r7
 800fe84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fe88:	f7f0 fa0e 	bl	80002a8 <__aeabi_dsub>
 800fe8c:	4b22      	ldr	r3, [pc, #136]	@ (800ff18 <__ieee754_rem_pio2+0x3f0>)
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f7f0 fbc2 	bl	8000618 <__aeabi_dmul>
 800fe94:	460f      	mov	r7, r1
 800fe96:	4606      	mov	r6, r0
 800fe98:	f7f0 fe6e 	bl	8000b78 <__aeabi_d2iz>
 800fe9c:	f7f0 fb52 	bl	8000544 <__aeabi_i2d>
 800fea0:	4602      	mov	r2, r0
 800fea2:	460b      	mov	r3, r1
 800fea4:	4630      	mov	r0, r6
 800fea6:	4639      	mov	r1, r7
 800fea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800feac:	f7f0 f9fc 	bl	80002a8 <__aeabi_dsub>
 800feb0:	4b19      	ldr	r3, [pc, #100]	@ (800ff18 <__ieee754_rem_pio2+0x3f0>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	f7f0 fbb0 	bl	8000618 <__aeabi_dmul>
 800feb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800febc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800fec0:	f04f 0803 	mov.w	r8, #3
 800fec4:	2600      	movs	r6, #0
 800fec6:	2700      	movs	r7, #0
 800fec8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800fecc:	4632      	mov	r2, r6
 800fece:	463b      	mov	r3, r7
 800fed0:	46c2      	mov	sl, r8
 800fed2:	f108 38ff 	add.w	r8, r8, #4294967295
 800fed6:	f7f0 fe07 	bl	8000ae8 <__aeabi_dcmpeq>
 800feda:	2800      	cmp	r0, #0
 800fedc:	d1f4      	bne.n	800fec8 <__ieee754_rem_pio2+0x3a0>
 800fede:	4b0f      	ldr	r3, [pc, #60]	@ (800ff1c <__ieee754_rem_pio2+0x3f4>)
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	2302      	movs	r3, #2
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	462a      	mov	r2, r5
 800fee8:	4653      	mov	r3, sl
 800feea:	4621      	mov	r1, r4
 800feec:	a806      	add	r0, sp, #24
 800feee:	f000 f81f 	bl	800ff30 <__kernel_rem_pio2>
 800fef2:	9b04      	ldr	r3, [sp, #16]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	4605      	mov	r5, r0
 800fef8:	f6bf ae53 	bge.w	800fba2 <__ieee754_rem_pio2+0x7a>
 800fefc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ff00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff04:	e9c4 2300 	strd	r2, r3, [r4]
 800ff08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ff0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ff14:	e740      	b.n	800fd98 <__ieee754_rem_pio2+0x270>
 800ff16:	bf00      	nop
 800ff18:	41700000 	.word	0x41700000
 800ff1c:	08010e10 	.word	0x08010e10

0800ff20 <fabs>:
 800ff20:	ec51 0b10 	vmov	r0, r1, d0
 800ff24:	4602      	mov	r2, r0
 800ff26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ff2a:	ec43 2b10 	vmov	d0, r2, r3
 800ff2e:	4770      	bx	lr

0800ff30 <__kernel_rem_pio2>:
 800ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff34:	ed2d 8b02 	vpush	{d8}
 800ff38:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ff3c:	f112 0f14 	cmn.w	r2, #20
 800ff40:	9306      	str	r3, [sp, #24]
 800ff42:	9104      	str	r1, [sp, #16]
 800ff44:	4bbe      	ldr	r3, [pc, #760]	@ (8010240 <__kernel_rem_pio2+0x310>)
 800ff46:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ff48:	9008      	str	r0, [sp, #32]
 800ff4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	9b06      	ldr	r3, [sp, #24]
 800ff52:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff56:	bfa8      	it	ge
 800ff58:	1ed4      	subge	r4, r2, #3
 800ff5a:	9305      	str	r3, [sp, #20]
 800ff5c:	bfb2      	itee	lt
 800ff5e:	2400      	movlt	r4, #0
 800ff60:	2318      	movge	r3, #24
 800ff62:	fb94 f4f3 	sdivge	r4, r4, r3
 800ff66:	f06f 0317 	mvn.w	r3, #23
 800ff6a:	fb04 3303 	mla	r3, r4, r3, r3
 800ff6e:	eb03 0b02 	add.w	fp, r3, r2
 800ff72:	9b00      	ldr	r3, [sp, #0]
 800ff74:	9a05      	ldr	r2, [sp, #20]
 800ff76:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8010230 <__kernel_rem_pio2+0x300>
 800ff7a:	eb03 0802 	add.w	r8, r3, r2
 800ff7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ff80:	1aa7      	subs	r7, r4, r2
 800ff82:	ae20      	add	r6, sp, #128	@ 0x80
 800ff84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ff88:	2500      	movs	r5, #0
 800ff8a:	4545      	cmp	r5, r8
 800ff8c:	dd13      	ble.n	800ffb6 <__kernel_rem_pio2+0x86>
 800ff8e:	9b06      	ldr	r3, [sp, #24]
 800ff90:	aa20      	add	r2, sp, #128	@ 0x80
 800ff92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ff96:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ff9a:	f04f 0800 	mov.w	r8, #0
 800ff9e:	9b00      	ldr	r3, [sp, #0]
 800ffa0:	4598      	cmp	r8, r3
 800ffa2:	dc31      	bgt.n	8010008 <__kernel_rem_pio2+0xd8>
 800ffa4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8010230 <__kernel_rem_pio2+0x300>
 800ffa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffb0:	462f      	mov	r7, r5
 800ffb2:	2600      	movs	r6, #0
 800ffb4:	e01b      	b.n	800ffee <__kernel_rem_pio2+0xbe>
 800ffb6:	42ef      	cmn	r7, r5
 800ffb8:	d407      	bmi.n	800ffca <__kernel_rem_pio2+0x9a>
 800ffba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ffbe:	f7f0 fac1 	bl	8000544 <__aeabi_i2d>
 800ffc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ffc6:	3501      	adds	r5, #1
 800ffc8:	e7df      	b.n	800ff8a <__kernel_rem_pio2+0x5a>
 800ffca:	ec51 0b18 	vmov	r0, r1, d8
 800ffce:	e7f8      	b.n	800ffc2 <__kernel_rem_pio2+0x92>
 800ffd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ffd8:	f7f0 fb1e 	bl	8000618 <__aeabi_dmul>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	460b      	mov	r3, r1
 800ffe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffe4:	f7f0 f962 	bl	80002ac <__adddf3>
 800ffe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffec:	3601      	adds	r6, #1
 800ffee:	9b05      	ldr	r3, [sp, #20]
 800fff0:	429e      	cmp	r6, r3
 800fff2:	f1a7 0708 	sub.w	r7, r7, #8
 800fff6:	ddeb      	ble.n	800ffd0 <__kernel_rem_pio2+0xa0>
 800fff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fffc:	f108 0801 	add.w	r8, r8, #1
 8010000:	ecaa 7b02 	vstmia	sl!, {d7}
 8010004:	3508      	adds	r5, #8
 8010006:	e7ca      	b.n	800ff9e <__kernel_rem_pio2+0x6e>
 8010008:	9b00      	ldr	r3, [sp, #0]
 801000a:	f8dd 8000 	ldr.w	r8, [sp]
 801000e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010010:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010014:	930a      	str	r3, [sp, #40]	@ 0x28
 8010016:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010018:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801001c:	9309      	str	r3, [sp, #36]	@ 0x24
 801001e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010024:	ab98      	add	r3, sp, #608	@ 0x260
 8010026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801002a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801002e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010032:	ac0c      	add	r4, sp, #48	@ 0x30
 8010034:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010036:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801003a:	46a1      	mov	r9, r4
 801003c:	46c2      	mov	sl, r8
 801003e:	f1ba 0f00 	cmp.w	sl, #0
 8010042:	f1a5 0508 	sub.w	r5, r5, #8
 8010046:	dc77      	bgt.n	8010138 <__kernel_rem_pio2+0x208>
 8010048:	4658      	mov	r0, fp
 801004a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801004e:	f000 fac7 	bl	80105e0 <scalbn>
 8010052:	ec57 6b10 	vmov	r6, r7, d0
 8010056:	2200      	movs	r2, #0
 8010058:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801005c:	4630      	mov	r0, r6
 801005e:	4639      	mov	r1, r7
 8010060:	f7f0 fada 	bl	8000618 <__aeabi_dmul>
 8010064:	ec41 0b10 	vmov	d0, r0, r1
 8010068:	f000 fb3a 	bl	80106e0 <floor>
 801006c:	4b75      	ldr	r3, [pc, #468]	@ (8010244 <__kernel_rem_pio2+0x314>)
 801006e:	ec51 0b10 	vmov	r0, r1, d0
 8010072:	2200      	movs	r2, #0
 8010074:	f7f0 fad0 	bl	8000618 <__aeabi_dmul>
 8010078:	4602      	mov	r2, r0
 801007a:	460b      	mov	r3, r1
 801007c:	4630      	mov	r0, r6
 801007e:	4639      	mov	r1, r7
 8010080:	f7f0 f912 	bl	80002a8 <__aeabi_dsub>
 8010084:	460f      	mov	r7, r1
 8010086:	4606      	mov	r6, r0
 8010088:	f7f0 fd76 	bl	8000b78 <__aeabi_d2iz>
 801008c:	9002      	str	r0, [sp, #8]
 801008e:	f7f0 fa59 	bl	8000544 <__aeabi_i2d>
 8010092:	4602      	mov	r2, r0
 8010094:	460b      	mov	r3, r1
 8010096:	4630      	mov	r0, r6
 8010098:	4639      	mov	r1, r7
 801009a:	f7f0 f905 	bl	80002a8 <__aeabi_dsub>
 801009e:	f1bb 0f00 	cmp.w	fp, #0
 80100a2:	4606      	mov	r6, r0
 80100a4:	460f      	mov	r7, r1
 80100a6:	dd6c      	ble.n	8010182 <__kernel_rem_pio2+0x252>
 80100a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80100ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80100ae:	9d02      	ldr	r5, [sp, #8]
 80100b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100b4:	f1cb 0018 	rsb	r0, fp, #24
 80100b8:	fa43 f200 	asr.w	r2, r3, r0
 80100bc:	4415      	add	r5, r2
 80100be:	4082      	lsls	r2, r0
 80100c0:	1a9b      	subs	r3, r3, r2
 80100c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80100c4:	9502      	str	r5, [sp, #8]
 80100c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80100ca:	f1cb 0217 	rsb	r2, fp, #23
 80100ce:	fa43 f902 	asr.w	r9, r3, r2
 80100d2:	f1b9 0f00 	cmp.w	r9, #0
 80100d6:	dd64      	ble.n	80101a2 <__kernel_rem_pio2+0x272>
 80100d8:	9b02      	ldr	r3, [sp, #8]
 80100da:	2200      	movs	r2, #0
 80100dc:	3301      	adds	r3, #1
 80100de:	9302      	str	r3, [sp, #8]
 80100e0:	4615      	mov	r5, r2
 80100e2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80100e6:	4590      	cmp	r8, r2
 80100e8:	f300 80b8 	bgt.w	801025c <__kernel_rem_pio2+0x32c>
 80100ec:	f1bb 0f00 	cmp.w	fp, #0
 80100f0:	dd07      	ble.n	8010102 <__kernel_rem_pio2+0x1d2>
 80100f2:	f1bb 0f01 	cmp.w	fp, #1
 80100f6:	f000 80bf 	beq.w	8010278 <__kernel_rem_pio2+0x348>
 80100fa:	f1bb 0f02 	cmp.w	fp, #2
 80100fe:	f000 80c6 	beq.w	801028e <__kernel_rem_pio2+0x35e>
 8010102:	f1b9 0f02 	cmp.w	r9, #2
 8010106:	d14c      	bne.n	80101a2 <__kernel_rem_pio2+0x272>
 8010108:	4632      	mov	r2, r6
 801010a:	463b      	mov	r3, r7
 801010c:	494e      	ldr	r1, [pc, #312]	@ (8010248 <__kernel_rem_pio2+0x318>)
 801010e:	2000      	movs	r0, #0
 8010110:	f7f0 f8ca 	bl	80002a8 <__aeabi_dsub>
 8010114:	4606      	mov	r6, r0
 8010116:	460f      	mov	r7, r1
 8010118:	2d00      	cmp	r5, #0
 801011a:	d042      	beq.n	80101a2 <__kernel_rem_pio2+0x272>
 801011c:	4658      	mov	r0, fp
 801011e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8010238 <__kernel_rem_pio2+0x308>
 8010122:	f000 fa5d 	bl	80105e0 <scalbn>
 8010126:	4630      	mov	r0, r6
 8010128:	4639      	mov	r1, r7
 801012a:	ec53 2b10 	vmov	r2, r3, d0
 801012e:	f7f0 f8bb 	bl	80002a8 <__aeabi_dsub>
 8010132:	4606      	mov	r6, r0
 8010134:	460f      	mov	r7, r1
 8010136:	e034      	b.n	80101a2 <__kernel_rem_pio2+0x272>
 8010138:	4b44      	ldr	r3, [pc, #272]	@ (801024c <__kernel_rem_pio2+0x31c>)
 801013a:	2200      	movs	r2, #0
 801013c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010140:	f7f0 fa6a 	bl	8000618 <__aeabi_dmul>
 8010144:	f7f0 fd18 	bl	8000b78 <__aeabi_d2iz>
 8010148:	f7f0 f9fc 	bl	8000544 <__aeabi_i2d>
 801014c:	4b40      	ldr	r3, [pc, #256]	@ (8010250 <__kernel_rem_pio2+0x320>)
 801014e:	2200      	movs	r2, #0
 8010150:	4606      	mov	r6, r0
 8010152:	460f      	mov	r7, r1
 8010154:	f7f0 fa60 	bl	8000618 <__aeabi_dmul>
 8010158:	4602      	mov	r2, r0
 801015a:	460b      	mov	r3, r1
 801015c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010160:	f7f0 f8a2 	bl	80002a8 <__aeabi_dsub>
 8010164:	f7f0 fd08 	bl	8000b78 <__aeabi_d2iz>
 8010168:	e9d5 2300 	ldrd	r2, r3, [r5]
 801016c:	f849 0b04 	str.w	r0, [r9], #4
 8010170:	4639      	mov	r1, r7
 8010172:	4630      	mov	r0, r6
 8010174:	f7f0 f89a 	bl	80002ac <__adddf3>
 8010178:	f10a 3aff 	add.w	sl, sl, #4294967295
 801017c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010180:	e75d      	b.n	801003e <__kernel_rem_pio2+0x10e>
 8010182:	d107      	bne.n	8010194 <__kernel_rem_pio2+0x264>
 8010184:	f108 33ff 	add.w	r3, r8, #4294967295
 8010188:	aa0c      	add	r2, sp, #48	@ 0x30
 801018a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801018e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010192:	e79e      	b.n	80100d2 <__kernel_rem_pio2+0x1a2>
 8010194:	4b2f      	ldr	r3, [pc, #188]	@ (8010254 <__kernel_rem_pio2+0x324>)
 8010196:	2200      	movs	r2, #0
 8010198:	f7f0 fcc4 	bl	8000b24 <__aeabi_dcmpge>
 801019c:	2800      	cmp	r0, #0
 801019e:	d143      	bne.n	8010228 <__kernel_rem_pio2+0x2f8>
 80101a0:	4681      	mov	r9, r0
 80101a2:	2200      	movs	r2, #0
 80101a4:	2300      	movs	r3, #0
 80101a6:	4630      	mov	r0, r6
 80101a8:	4639      	mov	r1, r7
 80101aa:	f7f0 fc9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	f000 80bf 	beq.w	8010332 <__kernel_rem_pio2+0x402>
 80101b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80101b8:	2200      	movs	r2, #0
 80101ba:	9900      	ldr	r1, [sp, #0]
 80101bc:	428b      	cmp	r3, r1
 80101be:	da6e      	bge.n	801029e <__kernel_rem_pio2+0x36e>
 80101c0:	2a00      	cmp	r2, #0
 80101c2:	f000 8089 	beq.w	80102d8 <__kernel_rem_pio2+0x3a8>
 80101c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80101ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80101cc:	f1ab 0b18 	sub.w	fp, fp, #24
 80101d0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d0f6      	beq.n	80101c6 <__kernel_rem_pio2+0x296>
 80101d8:	4658      	mov	r0, fp
 80101da:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8010238 <__kernel_rem_pio2+0x308>
 80101de:	f000 f9ff 	bl	80105e0 <scalbn>
 80101e2:	f108 0301 	add.w	r3, r8, #1
 80101e6:	00da      	lsls	r2, r3, #3
 80101e8:	9205      	str	r2, [sp, #20]
 80101ea:	ec55 4b10 	vmov	r4, r5, d0
 80101ee:	aa70      	add	r2, sp, #448	@ 0x1c0
 80101f0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801024c <__kernel_rem_pio2+0x31c>
 80101f4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80101f8:	4646      	mov	r6, r8
 80101fa:	f04f 0a00 	mov.w	sl, #0
 80101fe:	2e00      	cmp	r6, #0
 8010200:	f280 80cf 	bge.w	80103a2 <__kernel_rem_pio2+0x472>
 8010204:	4644      	mov	r4, r8
 8010206:	2c00      	cmp	r4, #0
 8010208:	f2c0 80fd 	blt.w	8010406 <__kernel_rem_pio2+0x4d6>
 801020c:	4b12      	ldr	r3, [pc, #72]	@ (8010258 <__kernel_rem_pio2+0x328>)
 801020e:	461f      	mov	r7, r3
 8010210:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010216:	9306      	str	r3, [sp, #24]
 8010218:	f04f 0a00 	mov.w	sl, #0
 801021c:	f04f 0b00 	mov.w	fp, #0
 8010220:	2600      	movs	r6, #0
 8010222:	eba8 0504 	sub.w	r5, r8, r4
 8010226:	e0e2      	b.n	80103ee <__kernel_rem_pio2+0x4be>
 8010228:	f04f 0902 	mov.w	r9, #2
 801022c:	e754      	b.n	80100d8 <__kernel_rem_pio2+0x1a8>
 801022e:	bf00      	nop
	...
 801023c:	3ff00000 	.word	0x3ff00000
 8010240:	08010f58 	.word	0x08010f58
 8010244:	40200000 	.word	0x40200000
 8010248:	3ff00000 	.word	0x3ff00000
 801024c:	3e700000 	.word	0x3e700000
 8010250:	41700000 	.word	0x41700000
 8010254:	3fe00000 	.word	0x3fe00000
 8010258:	08010f18 	.word	0x08010f18
 801025c:	f854 3b04 	ldr.w	r3, [r4], #4
 8010260:	b945      	cbnz	r5, 8010274 <__kernel_rem_pio2+0x344>
 8010262:	b123      	cbz	r3, 801026e <__kernel_rem_pio2+0x33e>
 8010264:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010268:	f844 3c04 	str.w	r3, [r4, #-4]
 801026c:	2301      	movs	r3, #1
 801026e:	3201      	adds	r2, #1
 8010270:	461d      	mov	r5, r3
 8010272:	e738      	b.n	80100e6 <__kernel_rem_pio2+0x1b6>
 8010274:	1acb      	subs	r3, r1, r3
 8010276:	e7f7      	b.n	8010268 <__kernel_rem_pio2+0x338>
 8010278:	f108 32ff 	add.w	r2, r8, #4294967295
 801027c:	ab0c      	add	r3, sp, #48	@ 0x30
 801027e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010282:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010286:	a90c      	add	r1, sp, #48	@ 0x30
 8010288:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801028c:	e739      	b.n	8010102 <__kernel_rem_pio2+0x1d2>
 801028e:	f108 32ff 	add.w	r2, r8, #4294967295
 8010292:	ab0c      	add	r3, sp, #48	@ 0x30
 8010294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010298:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801029c:	e7f3      	b.n	8010286 <__kernel_rem_pio2+0x356>
 801029e:	a90c      	add	r1, sp, #48	@ 0x30
 80102a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80102a4:	3b01      	subs	r3, #1
 80102a6:	430a      	orrs	r2, r1
 80102a8:	e787      	b.n	80101ba <__kernel_rem_pio2+0x28a>
 80102aa:	3401      	adds	r4, #1
 80102ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80102b0:	2a00      	cmp	r2, #0
 80102b2:	d0fa      	beq.n	80102aa <__kernel_rem_pio2+0x37a>
 80102b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80102ba:	eb0d 0503 	add.w	r5, sp, r3
 80102be:	9b06      	ldr	r3, [sp, #24]
 80102c0:	aa20      	add	r2, sp, #128	@ 0x80
 80102c2:	4443      	add	r3, r8
 80102c4:	f108 0701 	add.w	r7, r8, #1
 80102c8:	3d98      	subs	r5, #152	@ 0x98
 80102ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80102ce:	4444      	add	r4, r8
 80102d0:	42bc      	cmp	r4, r7
 80102d2:	da04      	bge.n	80102de <__kernel_rem_pio2+0x3ae>
 80102d4:	46a0      	mov	r8, r4
 80102d6:	e6a2      	b.n	801001e <__kernel_rem_pio2+0xee>
 80102d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102da:	2401      	movs	r4, #1
 80102dc:	e7e6      	b.n	80102ac <__kernel_rem_pio2+0x37c>
 80102de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80102e4:	f7f0 f92e 	bl	8000544 <__aeabi_i2d>
 80102e8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80105b0 <__kernel_rem_pio2+0x680>
 80102ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80102f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80102f8:	46b2      	mov	sl, r6
 80102fa:	f04f 0800 	mov.w	r8, #0
 80102fe:	9b05      	ldr	r3, [sp, #20]
 8010300:	4598      	cmp	r8, r3
 8010302:	dd05      	ble.n	8010310 <__kernel_rem_pio2+0x3e0>
 8010304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010308:	3701      	adds	r7, #1
 801030a:	eca5 7b02 	vstmia	r5!, {d7}
 801030e:	e7df      	b.n	80102d0 <__kernel_rem_pio2+0x3a0>
 8010310:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010314:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010318:	f7f0 f97e 	bl	8000618 <__aeabi_dmul>
 801031c:	4602      	mov	r2, r0
 801031e:	460b      	mov	r3, r1
 8010320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010324:	f7ef ffc2 	bl	80002ac <__adddf3>
 8010328:	f108 0801 	add.w	r8, r8, #1
 801032c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010330:	e7e5      	b.n	80102fe <__kernel_rem_pio2+0x3ce>
 8010332:	f1cb 0000 	rsb	r0, fp, #0
 8010336:	ec47 6b10 	vmov	d0, r6, r7
 801033a:	f000 f951 	bl	80105e0 <scalbn>
 801033e:	ec55 4b10 	vmov	r4, r5, d0
 8010342:	4b9d      	ldr	r3, [pc, #628]	@ (80105b8 <__kernel_rem_pio2+0x688>)
 8010344:	2200      	movs	r2, #0
 8010346:	4620      	mov	r0, r4
 8010348:	4629      	mov	r1, r5
 801034a:	f7f0 fbeb 	bl	8000b24 <__aeabi_dcmpge>
 801034e:	b300      	cbz	r0, 8010392 <__kernel_rem_pio2+0x462>
 8010350:	4b9a      	ldr	r3, [pc, #616]	@ (80105bc <__kernel_rem_pio2+0x68c>)
 8010352:	2200      	movs	r2, #0
 8010354:	4620      	mov	r0, r4
 8010356:	4629      	mov	r1, r5
 8010358:	f7f0 f95e 	bl	8000618 <__aeabi_dmul>
 801035c:	f7f0 fc0c 	bl	8000b78 <__aeabi_d2iz>
 8010360:	4606      	mov	r6, r0
 8010362:	f7f0 f8ef 	bl	8000544 <__aeabi_i2d>
 8010366:	4b94      	ldr	r3, [pc, #592]	@ (80105b8 <__kernel_rem_pio2+0x688>)
 8010368:	2200      	movs	r2, #0
 801036a:	f7f0 f955 	bl	8000618 <__aeabi_dmul>
 801036e:	460b      	mov	r3, r1
 8010370:	4602      	mov	r2, r0
 8010372:	4629      	mov	r1, r5
 8010374:	4620      	mov	r0, r4
 8010376:	f7ef ff97 	bl	80002a8 <__aeabi_dsub>
 801037a:	f7f0 fbfd 	bl	8000b78 <__aeabi_d2iz>
 801037e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010380:	f10b 0b18 	add.w	fp, fp, #24
 8010384:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010388:	f108 0801 	add.w	r8, r8, #1
 801038c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010390:	e722      	b.n	80101d8 <__kernel_rem_pio2+0x2a8>
 8010392:	4620      	mov	r0, r4
 8010394:	4629      	mov	r1, r5
 8010396:	f7f0 fbef 	bl	8000b78 <__aeabi_d2iz>
 801039a:	ab0c      	add	r3, sp, #48	@ 0x30
 801039c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80103a0:	e71a      	b.n	80101d8 <__kernel_rem_pio2+0x2a8>
 80103a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80103a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80103a8:	f7f0 f8cc 	bl	8000544 <__aeabi_i2d>
 80103ac:	4622      	mov	r2, r4
 80103ae:	462b      	mov	r3, r5
 80103b0:	f7f0 f932 	bl	8000618 <__aeabi_dmul>
 80103b4:	4652      	mov	r2, sl
 80103b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80103ba:	465b      	mov	r3, fp
 80103bc:	4620      	mov	r0, r4
 80103be:	4629      	mov	r1, r5
 80103c0:	f7f0 f92a 	bl	8000618 <__aeabi_dmul>
 80103c4:	3e01      	subs	r6, #1
 80103c6:	4604      	mov	r4, r0
 80103c8:	460d      	mov	r5, r1
 80103ca:	e718      	b.n	80101fe <__kernel_rem_pio2+0x2ce>
 80103cc:	9906      	ldr	r1, [sp, #24]
 80103ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80103d2:	9106      	str	r1, [sp, #24]
 80103d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80103d8:	f7f0 f91e 	bl	8000618 <__aeabi_dmul>
 80103dc:	4602      	mov	r2, r0
 80103de:	460b      	mov	r3, r1
 80103e0:	4650      	mov	r0, sl
 80103e2:	4659      	mov	r1, fp
 80103e4:	f7ef ff62 	bl	80002ac <__adddf3>
 80103e8:	3601      	adds	r6, #1
 80103ea:	4682      	mov	sl, r0
 80103ec:	468b      	mov	fp, r1
 80103ee:	9b00      	ldr	r3, [sp, #0]
 80103f0:	429e      	cmp	r6, r3
 80103f2:	dc01      	bgt.n	80103f8 <__kernel_rem_pio2+0x4c8>
 80103f4:	42b5      	cmp	r5, r6
 80103f6:	dae9      	bge.n	80103cc <__kernel_rem_pio2+0x49c>
 80103f8:	ab48      	add	r3, sp, #288	@ 0x120
 80103fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80103fe:	e9c5 ab00 	strd	sl, fp, [r5]
 8010402:	3c01      	subs	r4, #1
 8010404:	e6ff      	b.n	8010206 <__kernel_rem_pio2+0x2d6>
 8010406:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010408:	2b02      	cmp	r3, #2
 801040a:	dc0b      	bgt.n	8010424 <__kernel_rem_pio2+0x4f4>
 801040c:	2b00      	cmp	r3, #0
 801040e:	dc39      	bgt.n	8010484 <__kernel_rem_pio2+0x554>
 8010410:	d05d      	beq.n	80104ce <__kernel_rem_pio2+0x59e>
 8010412:	9b02      	ldr	r3, [sp, #8]
 8010414:	f003 0007 	and.w	r0, r3, #7
 8010418:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801041c:	ecbd 8b02 	vpop	{d8}
 8010420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010424:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010426:	2b03      	cmp	r3, #3
 8010428:	d1f3      	bne.n	8010412 <__kernel_rem_pio2+0x4e2>
 801042a:	9b05      	ldr	r3, [sp, #20]
 801042c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010430:	eb0d 0403 	add.w	r4, sp, r3
 8010434:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010438:	4625      	mov	r5, r4
 801043a:	46c2      	mov	sl, r8
 801043c:	f1ba 0f00 	cmp.w	sl, #0
 8010440:	f1a5 0508 	sub.w	r5, r5, #8
 8010444:	dc6b      	bgt.n	801051e <__kernel_rem_pio2+0x5ee>
 8010446:	4645      	mov	r5, r8
 8010448:	2d01      	cmp	r5, #1
 801044a:	f1a4 0408 	sub.w	r4, r4, #8
 801044e:	f300 8087 	bgt.w	8010560 <__kernel_rem_pio2+0x630>
 8010452:	9c05      	ldr	r4, [sp, #20]
 8010454:	ab48      	add	r3, sp, #288	@ 0x120
 8010456:	441c      	add	r4, r3
 8010458:	2000      	movs	r0, #0
 801045a:	2100      	movs	r1, #0
 801045c:	f1b8 0f01 	cmp.w	r8, #1
 8010460:	f300 809c 	bgt.w	801059c <__kernel_rem_pio2+0x66c>
 8010464:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8010468:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801046c:	f1b9 0f00 	cmp.w	r9, #0
 8010470:	f040 80a6 	bne.w	80105c0 <__kernel_rem_pio2+0x690>
 8010474:	9b04      	ldr	r3, [sp, #16]
 8010476:	e9c3 7800 	strd	r7, r8, [r3]
 801047a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801047e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010482:	e7c6      	b.n	8010412 <__kernel_rem_pio2+0x4e2>
 8010484:	9d05      	ldr	r5, [sp, #20]
 8010486:	ab48      	add	r3, sp, #288	@ 0x120
 8010488:	441d      	add	r5, r3
 801048a:	4644      	mov	r4, r8
 801048c:	2000      	movs	r0, #0
 801048e:	2100      	movs	r1, #0
 8010490:	2c00      	cmp	r4, #0
 8010492:	da35      	bge.n	8010500 <__kernel_rem_pio2+0x5d0>
 8010494:	f1b9 0f00 	cmp.w	r9, #0
 8010498:	d038      	beq.n	801050c <__kernel_rem_pio2+0x5dc>
 801049a:	4602      	mov	r2, r0
 801049c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104a0:	9c04      	ldr	r4, [sp, #16]
 80104a2:	e9c4 2300 	strd	r2, r3, [r4]
 80104a6:	4602      	mov	r2, r0
 80104a8:	460b      	mov	r3, r1
 80104aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80104ae:	f7ef fefb 	bl	80002a8 <__aeabi_dsub>
 80104b2:	ad4a      	add	r5, sp, #296	@ 0x128
 80104b4:	2401      	movs	r4, #1
 80104b6:	45a0      	cmp	r8, r4
 80104b8:	da2b      	bge.n	8010512 <__kernel_rem_pio2+0x5e2>
 80104ba:	f1b9 0f00 	cmp.w	r9, #0
 80104be:	d002      	beq.n	80104c6 <__kernel_rem_pio2+0x596>
 80104c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104c4:	4619      	mov	r1, r3
 80104c6:	9b04      	ldr	r3, [sp, #16]
 80104c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80104cc:	e7a1      	b.n	8010412 <__kernel_rem_pio2+0x4e2>
 80104ce:	9c05      	ldr	r4, [sp, #20]
 80104d0:	ab48      	add	r3, sp, #288	@ 0x120
 80104d2:	441c      	add	r4, r3
 80104d4:	2000      	movs	r0, #0
 80104d6:	2100      	movs	r1, #0
 80104d8:	f1b8 0f00 	cmp.w	r8, #0
 80104dc:	da09      	bge.n	80104f2 <__kernel_rem_pio2+0x5c2>
 80104de:	f1b9 0f00 	cmp.w	r9, #0
 80104e2:	d002      	beq.n	80104ea <__kernel_rem_pio2+0x5ba>
 80104e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104e8:	4619      	mov	r1, r3
 80104ea:	9b04      	ldr	r3, [sp, #16]
 80104ec:	e9c3 0100 	strd	r0, r1, [r3]
 80104f0:	e78f      	b.n	8010412 <__kernel_rem_pio2+0x4e2>
 80104f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80104f6:	f7ef fed9 	bl	80002ac <__adddf3>
 80104fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80104fe:	e7eb      	b.n	80104d8 <__kernel_rem_pio2+0x5a8>
 8010500:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010504:	f7ef fed2 	bl	80002ac <__adddf3>
 8010508:	3c01      	subs	r4, #1
 801050a:	e7c1      	b.n	8010490 <__kernel_rem_pio2+0x560>
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	e7c6      	b.n	80104a0 <__kernel_rem_pio2+0x570>
 8010512:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010516:	f7ef fec9 	bl	80002ac <__adddf3>
 801051a:	3401      	adds	r4, #1
 801051c:	e7cb      	b.n	80104b6 <__kernel_rem_pio2+0x586>
 801051e:	ed95 7b00 	vldr	d7, [r5]
 8010522:	ed8d 7b00 	vstr	d7, [sp]
 8010526:	ed95 7b02 	vldr	d7, [r5, #8]
 801052a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801052e:	ec53 2b17 	vmov	r2, r3, d7
 8010532:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010536:	f7ef feb9 	bl	80002ac <__adddf3>
 801053a:	4602      	mov	r2, r0
 801053c:	460b      	mov	r3, r1
 801053e:	4606      	mov	r6, r0
 8010540:	460f      	mov	r7, r1
 8010542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010546:	f7ef feaf 	bl	80002a8 <__aeabi_dsub>
 801054a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801054e:	f7ef fead 	bl	80002ac <__adddf3>
 8010552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010556:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801055a:	e9c5 6700 	strd	r6, r7, [r5]
 801055e:	e76d      	b.n	801043c <__kernel_rem_pio2+0x50c>
 8010560:	ed94 7b00 	vldr	d7, [r4]
 8010564:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010568:	ec51 0b17 	vmov	r0, r1, d7
 801056c:	4652      	mov	r2, sl
 801056e:	465b      	mov	r3, fp
 8010570:	ed8d 7b00 	vstr	d7, [sp]
 8010574:	f7ef fe9a 	bl	80002ac <__adddf3>
 8010578:	4602      	mov	r2, r0
 801057a:	460b      	mov	r3, r1
 801057c:	4606      	mov	r6, r0
 801057e:	460f      	mov	r7, r1
 8010580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010584:	f7ef fe90 	bl	80002a8 <__aeabi_dsub>
 8010588:	4652      	mov	r2, sl
 801058a:	465b      	mov	r3, fp
 801058c:	f7ef fe8e 	bl	80002ac <__adddf3>
 8010590:	3d01      	subs	r5, #1
 8010592:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010596:	e9c4 6700 	strd	r6, r7, [r4]
 801059a:	e755      	b.n	8010448 <__kernel_rem_pio2+0x518>
 801059c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80105a0:	f7ef fe84 	bl	80002ac <__adddf3>
 80105a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80105a8:	e758      	b.n	801045c <__kernel_rem_pio2+0x52c>
 80105aa:	bf00      	nop
 80105ac:	f3af 8000 	nop.w
	...
 80105b8:	41700000 	.word	0x41700000
 80105bc:	3e700000 	.word	0x3e700000
 80105c0:	9b04      	ldr	r3, [sp, #16]
 80105c2:	9a04      	ldr	r2, [sp, #16]
 80105c4:	601f      	str	r7, [r3, #0]
 80105c6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80105ca:	605c      	str	r4, [r3, #4]
 80105cc:	609d      	str	r5, [r3, #8]
 80105ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80105d2:	60d3      	str	r3, [r2, #12]
 80105d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80105d8:	6110      	str	r0, [r2, #16]
 80105da:	6153      	str	r3, [r2, #20]
 80105dc:	e719      	b.n	8010412 <__kernel_rem_pio2+0x4e2>
 80105de:	bf00      	nop

080105e0 <scalbn>:
 80105e0:	b570      	push	{r4, r5, r6, lr}
 80105e2:	ec55 4b10 	vmov	r4, r5, d0
 80105e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80105ea:	4606      	mov	r6, r0
 80105ec:	462b      	mov	r3, r5
 80105ee:	b991      	cbnz	r1, 8010616 <scalbn+0x36>
 80105f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80105f4:	4323      	orrs	r3, r4
 80105f6:	d03d      	beq.n	8010674 <scalbn+0x94>
 80105f8:	4b35      	ldr	r3, [pc, #212]	@ (80106d0 <scalbn+0xf0>)
 80105fa:	4620      	mov	r0, r4
 80105fc:	4629      	mov	r1, r5
 80105fe:	2200      	movs	r2, #0
 8010600:	f7f0 f80a 	bl	8000618 <__aeabi_dmul>
 8010604:	4b33      	ldr	r3, [pc, #204]	@ (80106d4 <scalbn+0xf4>)
 8010606:	429e      	cmp	r6, r3
 8010608:	4604      	mov	r4, r0
 801060a:	460d      	mov	r5, r1
 801060c:	da0f      	bge.n	801062e <scalbn+0x4e>
 801060e:	a328      	add	r3, pc, #160	@ (adr r3, 80106b0 <scalbn+0xd0>)
 8010610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010614:	e01e      	b.n	8010654 <scalbn+0x74>
 8010616:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801061a:	4291      	cmp	r1, r2
 801061c:	d10b      	bne.n	8010636 <scalbn+0x56>
 801061e:	4622      	mov	r2, r4
 8010620:	4620      	mov	r0, r4
 8010622:	4629      	mov	r1, r5
 8010624:	f7ef fe42 	bl	80002ac <__adddf3>
 8010628:	4604      	mov	r4, r0
 801062a:	460d      	mov	r5, r1
 801062c:	e022      	b.n	8010674 <scalbn+0x94>
 801062e:	460b      	mov	r3, r1
 8010630:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010634:	3936      	subs	r1, #54	@ 0x36
 8010636:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801063a:	4296      	cmp	r6, r2
 801063c:	dd0d      	ble.n	801065a <scalbn+0x7a>
 801063e:	2d00      	cmp	r5, #0
 8010640:	a11d      	add	r1, pc, #116	@ (adr r1, 80106b8 <scalbn+0xd8>)
 8010642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010646:	da02      	bge.n	801064e <scalbn+0x6e>
 8010648:	a11d      	add	r1, pc, #116	@ (adr r1, 80106c0 <scalbn+0xe0>)
 801064a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801064e:	a31a      	add	r3, pc, #104	@ (adr r3, 80106b8 <scalbn+0xd8>)
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	f7ef ffe0 	bl	8000618 <__aeabi_dmul>
 8010658:	e7e6      	b.n	8010628 <scalbn+0x48>
 801065a:	1872      	adds	r2, r6, r1
 801065c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010660:	428a      	cmp	r2, r1
 8010662:	dcec      	bgt.n	801063e <scalbn+0x5e>
 8010664:	2a00      	cmp	r2, #0
 8010666:	dd08      	ble.n	801067a <scalbn+0x9a>
 8010668:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801066c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010670:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010674:	ec45 4b10 	vmov	d0, r4, r5
 8010678:	bd70      	pop	{r4, r5, r6, pc}
 801067a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801067e:	da08      	bge.n	8010692 <scalbn+0xb2>
 8010680:	2d00      	cmp	r5, #0
 8010682:	a10b      	add	r1, pc, #44	@ (adr r1, 80106b0 <scalbn+0xd0>)
 8010684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010688:	dac1      	bge.n	801060e <scalbn+0x2e>
 801068a:	a10f      	add	r1, pc, #60	@ (adr r1, 80106c8 <scalbn+0xe8>)
 801068c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010690:	e7bd      	b.n	801060e <scalbn+0x2e>
 8010692:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010696:	3236      	adds	r2, #54	@ 0x36
 8010698:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801069c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80106a0:	4620      	mov	r0, r4
 80106a2:	4b0d      	ldr	r3, [pc, #52]	@ (80106d8 <scalbn+0xf8>)
 80106a4:	4629      	mov	r1, r5
 80106a6:	2200      	movs	r2, #0
 80106a8:	e7d4      	b.n	8010654 <scalbn+0x74>
 80106aa:	bf00      	nop
 80106ac:	f3af 8000 	nop.w
 80106b0:	c2f8f359 	.word	0xc2f8f359
 80106b4:	01a56e1f 	.word	0x01a56e1f
 80106b8:	8800759c 	.word	0x8800759c
 80106bc:	7e37e43c 	.word	0x7e37e43c
 80106c0:	8800759c 	.word	0x8800759c
 80106c4:	fe37e43c 	.word	0xfe37e43c
 80106c8:	c2f8f359 	.word	0xc2f8f359
 80106cc:	81a56e1f 	.word	0x81a56e1f
 80106d0:	43500000 	.word	0x43500000
 80106d4:	ffff3cb0 	.word	0xffff3cb0
 80106d8:	3c900000 	.word	0x3c900000
 80106dc:	00000000 	.word	0x00000000

080106e0 <floor>:
 80106e0:	ec51 0b10 	vmov	r0, r1, d0
 80106e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80106e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80106f0:	2e13      	cmp	r6, #19
 80106f2:	460c      	mov	r4, r1
 80106f4:	4605      	mov	r5, r0
 80106f6:	4680      	mov	r8, r0
 80106f8:	dc34      	bgt.n	8010764 <floor+0x84>
 80106fa:	2e00      	cmp	r6, #0
 80106fc:	da17      	bge.n	801072e <floor+0x4e>
 80106fe:	a332      	add	r3, pc, #200	@ (adr r3, 80107c8 <floor+0xe8>)
 8010700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010704:	f7ef fdd2 	bl	80002ac <__adddf3>
 8010708:	2200      	movs	r2, #0
 801070a:	2300      	movs	r3, #0
 801070c:	f7f0 fa14 	bl	8000b38 <__aeabi_dcmpgt>
 8010710:	b150      	cbz	r0, 8010728 <floor+0x48>
 8010712:	2c00      	cmp	r4, #0
 8010714:	da55      	bge.n	80107c2 <floor+0xe2>
 8010716:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801071a:	432c      	orrs	r4, r5
 801071c:	2500      	movs	r5, #0
 801071e:	42ac      	cmp	r4, r5
 8010720:	4c2b      	ldr	r4, [pc, #172]	@ (80107d0 <floor+0xf0>)
 8010722:	bf08      	it	eq
 8010724:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010728:	4621      	mov	r1, r4
 801072a:	4628      	mov	r0, r5
 801072c:	e023      	b.n	8010776 <floor+0x96>
 801072e:	4f29      	ldr	r7, [pc, #164]	@ (80107d4 <floor+0xf4>)
 8010730:	4137      	asrs	r7, r6
 8010732:	ea01 0307 	and.w	r3, r1, r7
 8010736:	4303      	orrs	r3, r0
 8010738:	d01d      	beq.n	8010776 <floor+0x96>
 801073a:	a323      	add	r3, pc, #140	@ (adr r3, 80107c8 <floor+0xe8>)
 801073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010740:	f7ef fdb4 	bl	80002ac <__adddf3>
 8010744:	2200      	movs	r2, #0
 8010746:	2300      	movs	r3, #0
 8010748:	f7f0 f9f6 	bl	8000b38 <__aeabi_dcmpgt>
 801074c:	2800      	cmp	r0, #0
 801074e:	d0eb      	beq.n	8010728 <floor+0x48>
 8010750:	2c00      	cmp	r4, #0
 8010752:	bfbe      	ittt	lt
 8010754:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010758:	4133      	asrlt	r3, r6
 801075a:	18e4      	addlt	r4, r4, r3
 801075c:	ea24 0407 	bic.w	r4, r4, r7
 8010760:	2500      	movs	r5, #0
 8010762:	e7e1      	b.n	8010728 <floor+0x48>
 8010764:	2e33      	cmp	r6, #51	@ 0x33
 8010766:	dd0a      	ble.n	801077e <floor+0x9e>
 8010768:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801076c:	d103      	bne.n	8010776 <floor+0x96>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	f7ef fd9b 	bl	80002ac <__adddf3>
 8010776:	ec41 0b10 	vmov	d0, r0, r1
 801077a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801077e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010782:	f04f 37ff 	mov.w	r7, #4294967295
 8010786:	40df      	lsrs	r7, r3
 8010788:	4207      	tst	r7, r0
 801078a:	d0f4      	beq.n	8010776 <floor+0x96>
 801078c:	a30e      	add	r3, pc, #56	@ (adr r3, 80107c8 <floor+0xe8>)
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	f7ef fd8b 	bl	80002ac <__adddf3>
 8010796:	2200      	movs	r2, #0
 8010798:	2300      	movs	r3, #0
 801079a:	f7f0 f9cd 	bl	8000b38 <__aeabi_dcmpgt>
 801079e:	2800      	cmp	r0, #0
 80107a0:	d0c2      	beq.n	8010728 <floor+0x48>
 80107a2:	2c00      	cmp	r4, #0
 80107a4:	da0a      	bge.n	80107bc <floor+0xdc>
 80107a6:	2e14      	cmp	r6, #20
 80107a8:	d101      	bne.n	80107ae <floor+0xce>
 80107aa:	3401      	adds	r4, #1
 80107ac:	e006      	b.n	80107bc <floor+0xdc>
 80107ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80107b2:	2301      	movs	r3, #1
 80107b4:	40b3      	lsls	r3, r6
 80107b6:	441d      	add	r5, r3
 80107b8:	4545      	cmp	r5, r8
 80107ba:	d3f6      	bcc.n	80107aa <floor+0xca>
 80107bc:	ea25 0507 	bic.w	r5, r5, r7
 80107c0:	e7b2      	b.n	8010728 <floor+0x48>
 80107c2:	2500      	movs	r5, #0
 80107c4:	462c      	mov	r4, r5
 80107c6:	e7af      	b.n	8010728 <floor+0x48>
 80107c8:	8800759c 	.word	0x8800759c
 80107cc:	7e37e43c 	.word	0x7e37e43c
 80107d0:	bff00000 	.word	0xbff00000
 80107d4:	000fffff 	.word	0x000fffff

080107d8 <_init>:
 80107d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107da:	bf00      	nop
 80107dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107de:	bc08      	pop	{r3}
 80107e0:	469e      	mov	lr, r3
 80107e2:	4770      	bx	lr

080107e4 <_fini>:
 80107e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e6:	bf00      	nop
 80107e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107ea:	bc08      	pop	{r3}
 80107ec:	469e      	mov	lr, r3
 80107ee:	4770      	bx	lr
