
Pathfinder_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af0  08005af0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af0  08005af0  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005af4  08005af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005af8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000060  08005b54  00007060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005b54  0000736c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cf6  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022df  00000000  00000000  00017d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c20  00000000  00000000  0001afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a57  00000000  00000000  0001bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012285  00000000  00000000  00042657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f21da  00000000  00000000  000548dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146ab6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000434c  00000000  00000000  00146afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014ae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005984 	.word	0x08005984

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08005984 	.word	0x08005984

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96a 	b.w	80004c8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	460c      	mov	r4, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14e      	bne.n	80002b6 <__udivmoddi4+0xaa>
 8000218:	4694      	mov	ip, r2
 800021a:	458c      	cmp	ip, r1
 800021c:	4686      	mov	lr, r0
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	d962      	bls.n	80002ea <__udivmoddi4+0xde>
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0320 	rsb	r3, r2, #32
 800022a:	4091      	lsls	r1, r2
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	4319      	orrs	r1, r3
 8000236:	fa00 fe02 	lsl.w	lr, r0, r2
 800023a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023e:	fa1f f68c 	uxth.w	r6, ip
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024a:	fb07 1114 	mls	r1, r7, r4, r1
 800024e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000252:	fb04 f106 	mul.w	r1, r4, r6
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000262:	f080 8112 	bcs.w	800048a <__udivmoddi4+0x27e>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 810f 	bls.w	800048a <__udivmoddi4+0x27e>
 800026c:	3c02      	subs	r4, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a59      	subs	r1, r3, r1
 8000272:	fa1f f38e 	uxth.w	r3, lr
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000282:	fb00 f606 	mul.w	r6, r0, r6
 8000286:	429e      	cmp	r6, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x94>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000292:	f080 80fc 	bcs.w	800048e <__udivmoddi4+0x282>
 8000296:	429e      	cmp	r6, r3
 8000298:	f240 80f9 	bls.w	800048e <__udivmoddi4+0x282>
 800029c:	4463      	add	r3, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	1b9b      	subs	r3, r3, r6
 80002a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa6>
 80002aa:	40d3      	lsrs	r3, r2
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xba>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb4>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x150>
 80002ce:	42a3      	cmp	r3, r4
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xcc>
 80002d2:	4290      	cmp	r0, r2
 80002d4:	f0c0 80f0 	bcc.w	80004b8 <__udivmoddi4+0x2ac>
 80002d8:	1a86      	subs	r6, r0, r2
 80002da:	eb64 0303 	sbc.w	r3, r4, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d0e6      	beq.n	80002b2 <__udivmoddi4+0xa6>
 80002e4:	e9c5 6300 	strd	r6, r3, [r5]
 80002e8:	e7e3      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x204>
 80002f0:	eba1 040c 	sub.w	r4, r1, ip
 80002f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f8:	fa1f f78c 	uxth.w	r7, ip
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030e:	fb07 f006 	mul.w	r0, r7, r6
 8000312:	4298      	cmp	r0, r3
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x11c>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 34ff 	add.w	r4, r6, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x11a>
 8000320:	4298      	cmp	r0, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 8000326:	4626      	mov	r6, r4
 8000328:	1a1c      	subs	r4, r3, r0
 800032a:	fa1f f38e 	uxth.w	r3, lr
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb00 f707 	mul.w	r7, r0, r7
 800033e:	429f      	cmp	r7, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x148>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f100 34ff 	add.w	r4, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x146>
 800034c:	429f      	cmp	r7, r3
 800034e:	f200 80b0 	bhi.w	80004b2 <__udivmoddi4+0x2a6>
 8000352:	4620      	mov	r0, r4
 8000354:	1bdb      	subs	r3, r3, r7
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x9c>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa20 fc06 	lsr.w	ip, r0, r6
 800036c:	fa04 f301 	lsl.w	r3, r4, r1
 8000370:	ea43 030c 	orr.w	r3, r3, ip
 8000374:	40f4      	lsrs	r4, r6
 8000376:	fa00 f801 	lsl.w	r8, r0, r1
 800037a:	0c38      	lsrs	r0, r7, #16
 800037c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000380:	fbb4 fef0 	udiv	lr, r4, r0
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	fb00 441e 	mls	r4, r0, lr, r4
 800038c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000390:	fb0e f90c 	mul.w	r9, lr, ip
 8000394:	45a1      	cmp	r9, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x1a6>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a2:	f080 8084 	bcs.w	80004ae <__udivmoddi4+0x2a2>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f240 8081 	bls.w	80004ae <__udivmoddi4+0x2a2>
 80003ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b0:	443c      	add	r4, r7
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	fa1f f983 	uxth.w	r9, r3
 80003ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80003be:	fb00 4413 	mls	r4, r0, r3, r4
 80003c2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1d2>
 80003ce:	193c      	adds	r4, r7, r4
 80003d0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d4:	d267      	bcs.n	80004a6 <__udivmoddi4+0x29a>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d965      	bls.n	80004a6 <__udivmoddi4+0x29a>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e2:	fba0 9302 	umull	r9, r3, r0, r2
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	429c      	cmp	r4, r3
 80003ec:	46ce      	mov	lr, r9
 80003ee:	469c      	mov	ip, r3
 80003f0:	d351      	bcc.n	8000496 <__udivmoddi4+0x28a>
 80003f2:	d04e      	beq.n	8000492 <__udivmoddi4+0x286>
 80003f4:	b155      	cbz	r5, 800040c <__udivmoddi4+0x200>
 80003f6:	ebb8 030e 	subs.w	r3, r8, lr
 80003fa:	eb64 040c 	sbc.w	r4, r4, ip
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	40cb      	lsrs	r3, r1
 8000404:	431e      	orrs	r6, r3
 8000406:	40cc      	lsrs	r4, r1
 8000408:	e9c5 6400 	strd	r6, r4, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	e750      	b.n	80002b2 <__udivmoddi4+0xa6>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa24 f303 	lsr.w	r3, r4, r3
 8000420:	4094      	lsls	r4, r2
 8000422:	430c      	orrs	r4, r1
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa00 fe02 	lsl.w	lr, r0, r2
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3110 	mls	r1, r8, r0, r3
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x24c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29e>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29e>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000460:	fb08 3311 	mls	r3, r8, r1, r3
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x276>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x296>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x296>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e739      	b.n	80002fe <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f0      	b.n	8000270 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e706      	b.n	80002a0 <__udivmoddi4+0x94>
 8000492:	45c8      	cmp	r8, r9
 8000494:	d2ae      	bcs.n	80003f4 <__udivmoddi4+0x1e8>
 8000496:	ebb9 0e02 	subs.w	lr, r9, r2
 800049a:	eb63 0c07 	sbc.w	ip, r3, r7
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a8      	b.n	80003f4 <__udivmoddi4+0x1e8>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x276>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e799      	b.n	80003de <__udivmoddi4+0x1d2>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x24c>
 80004ae:	46d6      	mov	lr, sl
 80004b0:	e77f      	b.n	80003b2 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74d      	b.n	8000354 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e70f      	b.n	80002e0 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e730      	b.n	8000328 <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <setMovmentSpeed>:
	TURN_RIGHT,
	SET_MOVMENT_SPEED,
	GET_SENSOR_VALUES = 7

};
void setMovmentSpeed(int motorA,int motorB) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	if(motorA<0)HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	da05      	bge.n	80004e8 <setMovmentSpeed+0x1c>
 80004dc:	2200      	movs	r2, #0
 80004de:	2120      	movs	r1, #32
 80004e0:	481b      	ldr	r0, [pc, #108]	@ (8000550 <setMovmentSpeed+0x84>)
 80004e2:	f001 f983 	bl	80017ec <HAL_GPIO_WritePin>
 80004e6:	e004      	b.n	80004f2 <setMovmentSpeed+0x26>
	else HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4818      	ldr	r0, [pc, #96]	@ (8000550 <setMovmentSpeed+0x84>)
 80004ee:	f001 f97d 	bl	80017ec <HAL_GPIO_WritePin>

	if(motorB<0)HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	da07      	bge.n	8000508 <setMovmentSpeed+0x3c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000502:	f001 f973 	bl	80017ec <HAL_GPIO_WritePin>
 8000506:	e006      	b.n	8000516 <setMovmentSpeed+0x4a>
	else HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800050e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000512:	f001 f96b 	bl	80017ec <HAL_GPIO_WritePin>

	if(motorA!=0)__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,motorA);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d004      	beq.n	8000526 <setMovmentSpeed+0x5a>
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <setMovmentSpeed+0x88>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000524:	e003      	b.n	800052e <setMovmentSpeed+0x62>
	else __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);;
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <setMovmentSpeed+0x88>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2200      	movs	r2, #0
 800052c:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(motorB!=0)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,motorB);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d004      	beq.n	800053e <setMovmentSpeed+0x72>
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <setMovmentSpeed+0x8c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	635a      	str	r2, [r3, #52]	@ 0x34
	else __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
}
 800053c:	e003      	b.n	8000546 <setMovmentSpeed+0x7a>
	else __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <setMovmentSpeed+0x8c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	48000400 	.word	0x48000400
 8000554:	2000007c 	.word	0x2000007c
 8000558:	200000c8 	.word	0x200000c8

0800055c <emergencyStop>:
void emergencyStop() {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2120      	movs	r1, #32
 8000564:	4809      	ldr	r0, [pc, #36]	@ (800058c <emergencyStop+0x30>)
 8000566:	f001 f941 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000574:	f001 f93a 	bl	80017ec <HAL_GPIO_WritePin>


	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <emergencyStop+0x34>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2200      	movs	r2, #0
 800057e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000580:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <emergencyStop+0x38>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	48000400 	.word	0x48000400
 8000590:	2000007c 	.word	0x2000007c
 8000594:	200000c8 	.word	0x200000c8

08000598 <moveForward>:

void moveForward() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <moveForward+0x30>)
 80005a2:	f001 f923 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f001 f91c 	bl	80017ec <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <moveForward+0x34>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2264      	movs	r2, #100	@ 0x64
 80005ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80005bc:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <moveForward+0x38>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2264      	movs	r2, #100	@ 0x64
 80005c2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	48000400 	.word	0x48000400
 80005cc:	2000007c 	.word	0x2000007c
 80005d0:	200000c8 	.word	0x200000c8

080005d4 <moveReverse>:

void moveReverse() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <moveReverse+0x30>)
 80005de:	f001 f905 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ec:	f001 f8fe 	bl	80017ec <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <moveReverse+0x34>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2264      	movs	r2, #100	@ 0x64
 80005f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <moveReverse+0x38>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2264      	movs	r2, #100	@ 0x64
 80005fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	48000400 	.word	0x48000400
 8000608:	2000007c 	.word	0x2000007c
 800060c:	200000c8 	.word	0x200000c8

08000610 <turnRight>:

void turnRight() {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2120      	movs	r1, #32
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <turnRight+0x30>)
 800061a:	f001 f8e7 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f001 f8e0 	bl	80017ec <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <turnRight+0x34>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2264      	movs	r2, #100	@ 0x64
 8000632:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8000634:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <turnRight+0x38>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2264      	movs	r2, #100	@ 0x64
 800063a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	48000400 	.word	0x48000400
 8000644:	2000007c 	.word	0x2000007c
 8000648:	200000c8 	.word	0x200000c8

0800064c <turnLeft>:
void turnLeft() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port,MOTOR_A_DIRECTION_Pin , GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2120      	movs	r1, #32
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <turnLeft+0x30>)
 8000656:	f001 f8c9 	bl	80017ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_DIRECTION_GPIO_Port,MOTOR_B_DIRECTION_Pin , GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f001 f8c2 	bl	80017ec <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <turnLeft+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2264      	movs	r2, #100	@ 0x64
 800066e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,100);
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <turnLeft+0x38>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2264      	movs	r2, #100	@ 0x64
 8000676:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	48000400 	.word	0x48000400
 8000680:	2000007c 	.word	0x2000007c
 8000684:	200000c8 	.word	0x200000c8

08000688 <getSensorValues>:
void getSensorValues(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	sensorsValues[0] = HAL_GPIO_ReadPin(SENSOR_A0_GPIO_Port, SENSOR_A0_Pin) + '0';
 800068c:	2101      	movs	r1, #1
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000692:	f001 f893 	bl	80017bc <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	3330      	adds	r3, #48	@ 0x30
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <getSensorValues+0x74>)
 800069e:	701a      	strb	r2, [r3, #0]
	sensorsValues[1] = HAL_GPIO_ReadPin(SENSOR_A1_GPIO_Port, SENSOR_A1_Pin) + '0';
 80006a0:	2102      	movs	r1, #2
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 f889 	bl	80017bc <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	3330      	adds	r3, #48	@ 0x30
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <getSensorValues+0x74>)
 80006b2:	705a      	strb	r2, [r3, #1]
	sensorsValues[2] = HAL_GPIO_ReadPin(SENSOR_A2_GPIO_Port, SENSOR_A2_Pin) + '0';
 80006b4:	2110      	movs	r1, #16
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 f87f 	bl	80017bc <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	3330      	adds	r3, #48	@ 0x30
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <getSensorValues+0x74>)
 80006c6:	709a      	strb	r2, [r3, #2]
	sensorsValues[3] = HAL_GPIO_ReadPin(SENSOR_A3_GPIO_Port, SENSOR_A3_Pin) + '0';
 80006c8:	2101      	movs	r1, #1
 80006ca:	480d      	ldr	r0, [pc, #52]	@ (8000700 <getSensorValues+0x78>)
 80006cc:	f001 f876 	bl	80017bc <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	3330      	adds	r3, #48	@ 0x30
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <getSensorValues+0x74>)
 80006d8:	70da      	strb	r2, [r3, #3]
	sensorsValues[4] = HAL_GPIO_ReadPin(SENSOR_A4_GPIO_Port, SENSOR_A4_Pin) + '0';
 80006da:	2102      	movs	r1, #2
 80006dc:	4809      	ldr	r0, [pc, #36]	@ (8000704 <getSensorValues+0x7c>)
 80006de:	f001 f86d 	bl	80017bc <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	3330      	adds	r3, #48	@ 0x30
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <getSensorValues+0x74>)
 80006ea:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit_IT(&huart2, sensorsValues , 5);
 80006ec:	2205      	movs	r2, #5
 80006ee:	4903      	ldr	r1, [pc, #12]	@ (80006fc <getSensorValues+0x74>)
 80006f0:	4805      	ldr	r0, [pc, #20]	@ (8000708 <getSensorValues+0x80>)
 80006f2:	f003 fc61 	bl	8003fb8 <HAL_UART_Transmit_IT>

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000228 	.word	0x20000228
 8000700:	48000400 	.word	0x48000400
 8000704:	48000800 	.word	0x48000800
 8000708:	20000114 	.word	0x20000114

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 fc9e 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f820 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f000 f98c 	bl	8000a34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800071c:	f000 f95a 	bl	80009d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000720:	f000 f86c 	bl	80007fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000724:	f000 f8e0 	bl	80008e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	4907      	ldr	r1, [pc, #28]	@ (8000748 <main+0x3c>)
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <main+0x40>)
 800072e:	f003 fca1 	bl	8004074 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000732:	2108      	movs	r1, #8
 8000734:	4806      	ldr	r0, [pc, #24]	@ (8000750 <main+0x44>)
 8000736:	f002 fc49 	bl	8002fcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800073a:	2100      	movs	r1, #0
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <main+0x48>)
 800073e:	f002 fc45 	bl	8002fcc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000742:	bf00      	nop
 8000744:	e7fd      	b.n	8000742 <main+0x36>
 8000746:	bf00      	nop
 8000748:	2000019c 	.word	0x2000019c
 800074c:	20000114 	.word	0x20000114
 8000750:	2000007c 	.word	0x2000007c
 8000754:	200000c8 	.word	0x200000c8

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b096      	sub	sp, #88	@ 0x58
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2244      	movs	r2, #68	@ 0x44
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f005 f8da 	bl	8005920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800077e:	f001 f85b 	bl	8001838 <HAL_PWREx_ControlVoltageScaling>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000788:	f000 fad2 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000794:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2310      	movs	r3, #16
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007a6:	230a      	movs	r3, #10
 80007a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007aa:	2307      	movs	r3, #7
 80007ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f892 	bl	80018e4 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007c6:	f000 fab3 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	2104      	movs	r1, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fc5a 	bl	800209c <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ee:	f000 fa9f 	bl	8000d30 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3758      	adds	r7, #88	@ 0x58
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	@ 0x38
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 8000830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000834:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000836:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 8000838:	2227      	movs	r2, #39	@ 0x27
 800083a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 8000844:	2263      	movs	r2, #99	@ 0x63
 8000846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084e:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	4823      	ldr	r0, [pc, #140]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 8000856:	f002 fb01 	bl	8002e5c <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000860:	f000 fa66 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 8000872:	f002 fdc5 	bl	8003400 <HAL_TIM_ConfigClockSource>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800087c:	f000 fa58 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000880:	4818      	ldr	r0, [pc, #96]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 8000882:	f002 fb42 	bl	8002f0a <HAL_TIM_PWM_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800088c:	f000 fa50 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 80008a0:	f003 fab4 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008aa:	f000 fa41 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ae:	2360      	movs	r3, #96	@ 0x60
 80008b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2208      	movs	r2, #8
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 80008c6:	f002 fc87 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80008d0:	f000 fa2e 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <MX_TIM2_Init+0xe8>)
 80008d6:	f000 fa87 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3738      	adds	r7, #56	@ 0x38
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000007c 	.word	0x2000007c

080008e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	@ 0x38
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091a:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <MX_TIM3_Init+0xe4>)
 800091c:	4a2c      	ldr	r2, [pc, #176]	@ (80009d0 <MX_TIM3_Init+0xe8>)
 800091e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8000920:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MX_TIM3_Init+0xe4>)
 8000922:	2227      	movs	r2, #39	@ 0x27
 8000924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <MX_TIM3_Init+0xe4>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800092c:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <MX_TIM3_Init+0xe4>)
 800092e:	2263      	movs	r2, #99	@ 0x63
 8000930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <MX_TIM3_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000938:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <MX_TIM3_Init+0xe4>)
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800093e:	4823      	ldr	r0, [pc, #140]	@ (80009cc <MX_TIM3_Init+0xe4>)
 8000940:	f002 fa8c 	bl	8002e5c <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800094a:	f000 f9f1 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000958:	4619      	mov	r1, r3
 800095a:	481c      	ldr	r0, [pc, #112]	@ (80009cc <MX_TIM3_Init+0xe4>)
 800095c:	f002 fd50 	bl	8003400 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000966:	f000 f9e3 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800096a:	4818      	ldr	r0, [pc, #96]	@ (80009cc <MX_TIM3_Init+0xe4>)
 800096c:	f002 facd 	bl	8002f0a <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000976:	f000 f9db 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4810      	ldr	r0, [pc, #64]	@ (80009cc <MX_TIM3_Init+0xe4>)
 800098a:	f003 fa3f 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000994:	f000 f9cc 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	@ 0x60
 800099a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	@ (80009cc <MX_TIM3_Init+0xe4>)
 80009b0:	f002 fc12 	bl	80031d8 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009ba:	f000 f9b9 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009be:	4803      	ldr	r0, [pc, #12]	@ (80009cc <MX_TIM3_Init+0xe4>)
 80009c0:	f000 fa12 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	@ 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000c8 	.word	0x200000c8
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <MX_USART2_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a18:	f003 fa80 	bl	8003f1c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f985 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000114 	.word	0x20000114
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b48      	ldr	r3, [pc, #288]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	4a47      	ldr	r2, [pc, #284]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a56:	4b45      	ldr	r3, [pc, #276]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b42      	ldr	r3, [pc, #264]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	4a41      	ldr	r2, [pc, #260]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b36      	ldr	r3, [pc, #216]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4a35      	ldr	r2, [pc, #212]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <MX_GPIO_Init+0x138>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOTOR_B_DIRECTION_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab4:	f000 fe9a 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_A_DIRECTION_GPIO_Port, MOTOR_A_DIRECTION_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	482c      	ldr	r0, [pc, #176]	@ (8000b70 <MX_GPIO_Init+0x13c>)
 8000abe:	f000 fe95 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4826      	ldr	r0, [pc, #152]	@ (8000b74 <MX_GPIO_Init+0x140>)
 8000ada:	f000 fcc5 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_A4_Pin */
  GPIO_InitStruct.Pin = SENSOR_A4_Pin;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_A4_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4820      	ldr	r0, [pc, #128]	@ (8000b74 <MX_GPIO_Init+0x140>)
 8000af2:	f000 fcb9 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_A0_Pin SENSOR_A1_Pin SENSOR_A2_Pin */
  GPIO_InitStruct.Pin = SENSOR_A0_Pin|SENSOR_A1_Pin|SENSOR_A2_Pin;
 8000af6:	2313      	movs	r3, #19
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0c:	f000 fcac 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOTOR_B_DIRECTION_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOTOR_B_DIRECTION_Pin;
 8000b10:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2c:	f000 fc9c 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_A3_Pin */
  GPIO_InitStruct.Pin = SENSOR_A3_Pin;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_A3_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <MX_GPIO_Init+0x13c>)
 8000b44:	f000 fc90 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_A_DIRECTION_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_DIRECTION_Pin;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_A_DIRECTION_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_GPIO_Init+0x13c>)
 8000b60:	f000 fc82 	bl	8001468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48000800 	.word	0x48000800

08000b78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a63      	ldr	r2, [pc, #396]	@ (8000d14 <HAL_UART_RxCpltCallback+0x19c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	f040 80be 	bne.w	8000d0a <HAL_UART_RxCpltCallback+0x192>
		if(receivedSign == '\n'){
 8000b8e:	4b62      	ldr	r3, [pc, #392]	@ (8000d18 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b0a      	cmp	r3, #10
 8000b94:	f040 808a 	bne.w	8000cac <HAL_UART_RxCpltCallback+0x134>
			frameReceived[frameCursor] = atoi(messageReceived);
 8000b98:	4860      	ldr	r0, [pc, #384]	@ (8000d1c <HAL_UART_RxCpltCallback+0x1a4>)
 8000b9a:	f004 fe39 	bl	8005810 <atoi>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a5f      	ldr	r2, [pc, #380]	@ (8000d20 <HAL_UART_RxCpltCallback+0x1a8>)
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	17da      	asrs	r2, r3, #31
 8000ba8:	4698      	mov	r8, r3
 8000baa:	4691      	mov	r9, r2
 8000bac:	4a5d      	ldr	r2, [pc, #372]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000bae:	00cb      	lsls	r3, r1, #3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	e9c3 8900 	strd	r8, r9, [r3]
			if(strcmp(frameReceived[0], EMERGENCY_STOP ) == 0) emergencyStop();
 8000bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb01 	bl	80001c8 <strcmp>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <HAL_UART_RxCpltCallback+0x5a>
 8000bcc:	f7ff fcc6 	bl	800055c <emergencyStop>
 8000bd0:	e05b      	b.n	8000c8a <HAL_UART_RxCpltCallback+0x112>
			else if(strcmp(frameReceived[0], MOVE_FORWARD) == 0)moveForward();
 8000bd2:	4b54      	ldr	r3, [pc, #336]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff faf3 	bl	80001c8 <strcmp>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <HAL_UART_RxCpltCallback+0x76>
 8000be8:	f7ff fcd6 	bl	8000598 <moveForward>
 8000bec:	e04d      	b.n	8000c8a <HAL_UART_RxCpltCallback+0x112>
			else if(strcmp(frameReceived[0], MOVE_REVERSE) == 0)moveReverse();
 8000bee:	4b4d      	ldr	r3, [pc, #308]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fae5 	bl	80001c8 <strcmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x92>
 8000c04:	f7ff fce6 	bl	80005d4 <moveReverse>
 8000c08:	e03f      	b.n	8000c8a <HAL_UART_RxCpltCallback+0x112>
			else if(strcmp(frameReceived[0], TURN_LEFT) == 0)turnLeft();
 8000c0a:	4b46      	ldr	r3, [pc, #280]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	4613      	mov	r3, r2
 8000c12:	2103      	movs	r1, #3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fad7 	bl	80001c8 <strcmp>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <HAL_UART_RxCpltCallback+0xae>
 8000c20:	f7ff fd14 	bl	800064c <turnLeft>
 8000c24:	e031      	b.n	8000c8a <HAL_UART_RxCpltCallback+0x112>
			else if(strcmp(frameReceived[0], TURN_RIGHT) == 0)turnRight();
 8000c26:	4b3f      	ldr	r3, [pc, #252]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fac9 	bl	80001c8 <strcmp>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <HAL_UART_RxCpltCallback+0xca>
 8000c3c:	f7ff fce8 	bl	8000610 <turnRight>
 8000c40:	e023      	b.n	8000c8a <HAL_UART_RxCpltCallback+0x112>
			else if(strcmp(frameReceived[0], SET_MOVMENT_SPEED) == 0)setMovmentSpeed(frameReceived[1], frameReceived[2]);
 8000c42:	4b38      	ldr	r3, [pc, #224]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fabb 	bl	80001c8 <strcmp>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10b      	bne.n	8000c70 <HAL_UART_RxCpltCallback+0xf8>
 8000c58:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4b30      	ldr	r3, [pc, #192]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000c66:	4613      	mov	r3, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f7ff fc2f 	bl	80004cc <setMovmentSpeed>
 8000c6e:	e00c      	b.n	8000c8a <HAL_UART_RxCpltCallback+0x112>
			else if(strcmp(frameReceived[0], GET_SENSOR_VALUES) == 0)getSensorValues();
 8000c70:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	4613      	mov	r3, r2
 8000c78:	2107      	movs	r1, #7
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff faa4 	bl	80001c8 <strcmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_UART_RxCpltCallback+0x112>
 8000c86:	f7ff fcff 	bl	8000688 <getSensorValues>
			memset(messageReceived, 0, 50);
 8000c8a:	2232      	movs	r2, #50	@ 0x32
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4823      	ldr	r0, [pc, #140]	@ (8000d1c <HAL_UART_RxCpltCallback+0x1a4>)
 8000c90:	f004 fe46 	bl	8005920 <memset>
			memset(frameReceived, 0, 10);
 8000c94:	220a      	movs	r2, #10
 8000c96:	2100      	movs	r1, #0
 8000c98:	4822      	ldr	r0, [pc, #136]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c9a:	f004 fe41 	bl	8005920 <memset>
			messageCursor = 0;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <HAL_UART_RxCpltCallback+0x1b0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
			frameCursor = 0;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <HAL_UART_RxCpltCallback+0x1a8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e029      	b.n	8000d00 <HAL_UART_RxCpltCallback+0x188>
		}
		else if(receivedSign == ' '){
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <HAL_UART_RxCpltCallback+0x1a0>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b20      	cmp	r3, #32
 8000cb2:	d11a      	bne.n	8000cea <HAL_UART_RxCpltCallback+0x172>
			frameReceived[frameCursor++] = atoi(messageReceived);
 8000cb4:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <HAL_UART_RxCpltCallback+0x1a4>)
 8000cb6:	f004 fdab 	bl	8005810 <atoi>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_UART_RxCpltCallback+0x1a8>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	1c59      	adds	r1, r3, #1
 8000cc2:	b2c8      	uxtb	r0, r1
 8000cc4:	4916      	ldr	r1, [pc, #88]	@ (8000d20 <HAL_UART_RxCpltCallback+0x1a8>)
 8000cc6:	7008      	strb	r0, [r1, #0]
 8000cc8:	17d1      	asrs	r1, r2, #31
 8000cca:	4614      	mov	r4, r2
 8000ccc:	460d      	mov	r5, r1
 8000cce:	4a15      	ldr	r2, [pc, #84]	@ (8000d24 <HAL_UART_RxCpltCallback+0x1ac>)
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	e9c3 4500 	strd	r4, r5, [r3]
			messageCursor = 0;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <HAL_UART_RxCpltCallback+0x1b0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
			memset(messageReceived, 0, 50);
 8000cde:	2232      	movs	r2, #50	@ 0x32
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <HAL_UART_RxCpltCallback+0x1a4>)
 8000ce4:	f004 fe1c 	bl	8005920 <memset>
 8000ce8:	e00a      	b.n	8000d00 <HAL_UART_RxCpltCallback+0x188>
		}
		else messageReceived[messageCursor++] = (char)receivedSign;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <HAL_UART_RxCpltCallback+0x1b0>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	b2d1      	uxtb	r1, r2
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <HAL_UART_RxCpltCallback+0x1b0>)
 8000cf4:	7011      	strb	r1, [r2, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <HAL_UART_RxCpltCallback+0x1a0>)
 8000cfa:	7819      	ldrb	r1, [r3, #0]
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <HAL_UART_RxCpltCallback+0x1a4>)
 8000cfe:	5499      	strb	r1, [r3, r2]
	HAL_UART_Receive_IT(&huart2, &receivedSign, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	4905      	ldr	r1, [pc, #20]	@ (8000d18 <HAL_UART_RxCpltCallback+0x1a0>)
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <HAL_UART_RxCpltCallback+0x1b4>)
 8000d06:	f003 f9b5 	bl	8004074 <HAL_UART_Receive_IT>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d14:	40004400 	.word	0x40004400
 8000d18:	2000019c 	.word	0x2000019c
 8000d1c:	200001a0 	.word	0x200001a0
 8000d20:	2000019e 	.word	0x2000019e
 8000d24:	200001d8 	.word	0x200001d8
 8000d28:	2000019d 	.word	0x2000019d
 8000d2c:	20000114 	.word	0x20000114

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	4a0e      	ldr	r2, [pc, #56]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d94:	d10c      	bne.n	8000db0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dae:	e010      	b.n	8000dd2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <HAL_TIM_Base_MspInit+0x60>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_TIM_Base_MspInit+0x5c>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40000400 	.word	0x40000400

08000de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e08:	d11d      	bne.n	8000e46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <HAL_TIM_MspPostInit+0xa8>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a20      	ldr	r2, [pc, #128]	@ (8000e90 <HAL_TIM_MspPostInit+0xa8>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <HAL_TIM_MspPostInit+0xa8>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_B_SPEED_Pin;
 8000e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e34:	2301      	movs	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEED_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4815      	ldr	r0, [pc, #84]	@ (8000e94 <HAL_TIM_MspPostInit+0xac>)
 8000e40:	f000 fb12 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e44:	e020      	b.n	8000e88 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a13      	ldr	r2, [pc, #76]	@ (8000e98 <HAL_TIM_MspPostInit+0xb0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d11b      	bne.n	8000e88 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <HAL_TIM_MspPostInit+0xa8>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	4a0e      	ldr	r2, [pc, #56]	@ (8000e90 <HAL_TIM_MspPostInit+0xa8>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <HAL_TIM_MspPostInit+0xa8>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_B_SPEEDB4_Pin;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_B_SPEEDB4_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <HAL_TIM_MspPostInit+0xac>)
 8000e84:	f000 faf0 	bl	8001468 <HAL_GPIO_Init>
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	@ 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	40000400 	.word	0x40000400

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2288      	movs	r2, #136	@ 0x88
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fd2f 	bl	8005920 <memset>
  if(huart->Instance==USART2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a25      	ldr	r2, [pc, #148]	@ (8000f5c <HAL_UART_MspInit+0xc0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d143      	bne.n	8000f54 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fb03 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f7ff ff24 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eec:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	4a16      	ldr	r2, [pc, #88]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f30:	2307      	movs	r3, #7
 8000f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f000 fa92 	bl	8001468 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2101      	movs	r1, #1
 8000f48:	2026      	movs	r0, #38	@ 0x26
 8000f4a:	f000 f9d8 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f4e:	2026      	movs	r0, #38	@ 0x26
 8000f50:	f000 f9f1 	bl	8001336 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f54:	bf00      	nop
 8000f56:	37b0      	adds	r7, #176	@ 0xb0
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40021000 	.word	0x40021000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f8a5 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <USART2_IRQHandler+0x10>)
 8000fca:	f003 f89f 	bl	800410c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000114 	.word	0x20000114

08000fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f004 fc87 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fb6d 	bl	800070c <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001034:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001040:	08005af8 	.word	0x08005af8
  ldr r2, =_sbss
 8001044:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001048:	2000036c 	.word	0x2000036c

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>
	...

08001050 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <HAL_Init+0x3c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <HAL_Init+0x3c>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001064:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f93e 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f80f 	bl	8001090 <HAL_InitTick>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	e001      	b.n	8001082 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107e:	f7ff fe5d 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001082:	79fb      	ldrb	r3, [r7, #7]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d023      	beq.n	80010ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_InitTick+0x70>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_InitTick+0x6c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f949 	bl	8001352 <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10f      	bne.n	80010e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d809      	bhi.n	80010e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f913 	bl	80012fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_InitTick+0x74>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e007      	b.n	80010f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e004      	b.n	80010f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e001      	b.n	80010f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000230 	.word	0x20000230

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000230 	.word	0x20000230

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff3e 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff31 	bl	80011ac <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d008      	beq.n	8001394 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2204      	movs	r2, #4
 8001386:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e022      	b.n	80013da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 020e 	bic.w	r2, r2, #14
 80013a2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	f003 021c 	and.w	r2, r3, #28
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d005      	beq.n	800140a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2204      	movs	r2, #4
 8001402:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e029      	b.n	800145e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 020e 	bic.w	r2, r2, #14
 8001418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f003 021c 	and.w	r2, r3, #28
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
    }
  }
  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	e17f      	b.n	8001778 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8171 	beq.w	8001772 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <HAL_GPIO_Init+0x40>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d130      	bne.n	800150a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014de:	2201      	movs	r2, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 0201 	and.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b03      	cmp	r3, #3
 8001514:	d118      	bne.n	8001548 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800151c:	2201      	movs	r2, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	f003 0201 	and.w	r2, r3, #1
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b03      	cmp	r3, #3
 8001552:	d017      	beq.n	8001584 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d123      	bne.n	80015d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	6939      	ldr	r1, [r7, #16]
 80015d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80ac 	beq.w	8001772 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b5f      	ldr	r3, [pc, #380]	@ (8001798 <HAL_GPIO_Init+0x330>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	4a5e      	ldr	r2, [pc, #376]	@ (8001798 <HAL_GPIO_Init+0x330>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6613      	str	r3, [r2, #96]	@ 0x60
 8001626:	4b5c      	ldr	r3, [pc, #368]	@ (8001798 <HAL_GPIO_Init+0x330>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001632:	4a5a      	ldr	r2, [pc, #360]	@ (800179c <HAL_GPIO_Init+0x334>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800165c:	d025      	beq.n	80016aa <HAL_GPIO_Init+0x242>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4f      	ldr	r2, [pc, #316]	@ (80017a0 <HAL_GPIO_Init+0x338>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01f      	beq.n	80016a6 <HAL_GPIO_Init+0x23e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4e      	ldr	r2, [pc, #312]	@ (80017a4 <HAL_GPIO_Init+0x33c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x23a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4d      	ldr	r2, [pc, #308]	@ (80017a8 <HAL_GPIO_Init+0x340>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x236>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4c      	ldr	r2, [pc, #304]	@ (80017ac <HAL_GPIO_Init+0x344>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x232>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4b      	ldr	r2, [pc, #300]	@ (80017b0 <HAL_GPIO_Init+0x348>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x22e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4a      	ldr	r2, [pc, #296]	@ (80017b4 <HAL_GPIO_Init+0x34c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x22a>
 800168e:	2306      	movs	r3, #6
 8001690:	e00c      	b.n	80016ac <HAL_GPIO_Init+0x244>
 8001692:	2307      	movs	r3, #7
 8001694:	e00a      	b.n	80016ac <HAL_GPIO_Init+0x244>
 8001696:	2305      	movs	r3, #5
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x244>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x244>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x244>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x244>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x244>
 80016aa:	2300      	movs	r3, #0
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	f002 0203 	and.w	r2, r2, #3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016bc:	4937      	ldr	r1, [pc, #220]	@ (800179c <HAL_GPIO_Init+0x334>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ee:	4a32      	ldr	r2, [pc, #200]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001718:	4a27      	ldr	r2, [pc, #156]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800171e:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001742:	4a1d      	ldr	r2, [pc, #116]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800176c:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <HAL_GPIO_Init+0x350>)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	f47f ae78 	bne.w	8001478 <HAL_GPIO_Init+0x10>
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	48000400 	.word	0x48000400
 80017a4:	48000800 	.word	0x48000800
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	48001000 	.word	0x48001000
 80017b0:	48001400 	.word	0x48001400
 80017b4:	48001800 	.word	0x48001800
 80017b8:	40010400 	.word	0x40010400

080017bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e001      	b.n	80017de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001808:	e002      	b.n	8001810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <HAL_PWREx_GetVoltageRange+0x18>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40007000 	.word	0x40007000

08001838 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001846:	d130      	bne.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001848:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001854:	d038      	beq.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800185e:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001860:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001866:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2232      	movs	r2, #50	@ 0x32
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0c9b      	lsrs	r3, r3, #18
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187c:	e002      	b.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3b01      	subs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001890:	d102      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f2      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a4:	d110      	bne.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e00f      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b6:	d007      	beq.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018c0:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40007000 	.word	0x40007000
 80018dc:	20000000 	.word	0x20000000
 80018e0:	431bde83 	.word	0x431bde83

080018e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e3ca      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f6:	4b97      	ldr	r3, [pc, #604]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001900:	4b94      	ldr	r3, [pc, #592]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80e4 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_RCC_OscConfig+0x4a>
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	f040 808b 	bne.w	8001a3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2b01      	cmp	r3, #1
 800192a:	f040 8087 	bne.w	8001a3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192e:	4b89      	ldr	r3, [pc, #548]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <HAL_RCC_OscConfig+0x62>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e3a2      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	4b82      	ldr	r3, [pc, #520]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_RCC_OscConfig+0x7c>
 8001956:	4b7f      	ldr	r3, [pc, #508]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800195e:	e005      	b.n	800196c <HAL_RCC_OscConfig+0x88>
 8001960:	4b7c      	ldr	r3, [pc, #496]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800196c:	4293      	cmp	r3, r2
 800196e:	d223      	bcs.n	80019b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fd55 	bl	8002424 <RCC_SetFlashLatencyFromMSIRange>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e383      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001984:	4b73      	ldr	r3, [pc, #460]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a72      	ldr	r2, [pc, #456]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b70      	ldr	r3, [pc, #448]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	496d      	ldr	r1, [pc, #436]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	4968      	ldr	r1, [pc, #416]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
 80019b6:	e025      	b.n	8001a04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b8:	4b66      	ldr	r3, [pc, #408]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a65      	ldr	r2, [pc, #404]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b63      	ldr	r3, [pc, #396]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4960      	ldr	r1, [pc, #384]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	495b      	ldr	r1, [pc, #364]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fd15 	bl	8002424 <RCC_SetFlashLatencyFromMSIRange>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e343      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a04:	f000 fc4a 	bl	800229c <HAL_RCC_GetSysClockFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b52      	ldr	r3, [pc, #328]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	4950      	ldr	r1, [pc, #320]	@ (8001b58 <HAL_RCC_OscConfig+0x274>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	4a4e      	ldr	r2, [pc, #312]	@ (8001b5c <HAL_RCC_OscConfig+0x278>)
 8001a22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a24:	4b4e      	ldr	r3, [pc, #312]	@ (8001b60 <HAL_RCC_OscConfig+0x27c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fb31 	bl	8001090 <HAL_InitTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d052      	beq.n	8001ade <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	e327      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d032      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a44:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a42      	ldr	r2, [pc, #264]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb6e 	bl	8001130 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a58:	f7ff fb6a 	bl	8001130 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e310      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a76:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a36      	ldr	r2, [pc, #216]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4931      	ldr	r1, [pc, #196]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a94:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	492c      	ldr	r1, [pc, #176]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e01a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a29      	ldr	r2, [pc, #164]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fb3b 	bl	8001130 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001abe:	f7ff fb37 	bl	8001130 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e2dd      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad0:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x1da>
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ade:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d074      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x21a>
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	d10e      	bne.n	8001b16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d10b      	bne.n	8001b16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d064      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x2f0>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d160      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e2ba      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x24a>
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e026      	b.n	8001b7c <HAL_RCC_OscConfig+0x298>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b36:	d115      	bne.n	8001b64 <HAL_RCC_OscConfig+0x280>
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a02      	ldr	r2, [pc, #8]	@ (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e014      	b.n	8001b7c <HAL_RCC_OscConfig+0x298>
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	0800599c 	.word	0x0800599c
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004
 8001b64:	4ba0      	ldr	r3, [pc, #640]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a9f      	ldr	r2, [pc, #636]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b9d      	ldr	r3, [pc, #628]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a9c      	ldr	r2, [pc, #624]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fad4 	bl	8001130 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fad0 	bl	8001130 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	@ 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e276      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	4b92      	ldr	r3, [pc, #584]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2a8>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fac0 	bl	8001130 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fabc 	bl	8001130 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	@ 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e262      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc6:	4b88      	ldr	r3, [pc, #544]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2d0>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d060      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x310>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d119      	bne.n	8001c22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d116      	bne.n	8001c22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf4:	4b7c      	ldr	r3, [pc, #496]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_OscConfig+0x328>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e23f      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b76      	ldr	r3, [pc, #472]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	4973      	ldr	r1, [pc, #460]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	e040      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d023      	beq.n	8001c72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff fa7b 	bl	8001130 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fa77 	bl	8001130 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e21d      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c50:	4b65      	ldr	r3, [pc, #404]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b62      	ldr	r3, [pc, #392]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	495f      	ldr	r1, [pc, #380]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	e018      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b5d      	ldr	r3, [pc, #372]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a5c      	ldr	r2, [pc, #368]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fa57 	bl	8001130 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff fa53 	bl	8001130 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1f9      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c98:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cbe:	4a4a      	ldr	r2, [pc, #296]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fa32 	bl	8001130 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fa2e 	bl	8001130 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1d4      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ef      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3ec>
 8001cf0:	e01b      	b.n	8001d2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff fa15 	bl	8001130 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fa11 	bl	8001130 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1b7      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1c:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ef      	bne.n	8001d0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80a6 	beq.w	8001e84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10d      	bne.n	8001d64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	4a26      	ldr	r2, [pc, #152]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d54:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d60:	2301      	movs	r3, #1
 8001d62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d64:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_RCC_OscConfig+0x508>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d118      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d70:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_RCC_OscConfig+0x508>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1d      	ldr	r2, [pc, #116]	@ (8001dec <HAL_RCC_OscConfig+0x508>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f9d8 	bl	8001130 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d84:	f7ff f9d4 	bl	8001130 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e17a      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_RCC_OscConfig+0x508>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d108      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4d8>
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db0:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dba:	e029      	b.n	8001e10 <HAL_RCC_OscConfig+0x52c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d115      	bne.n	8001df0 <HAL_RCC_OscConfig+0x50c>
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dca:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dda:	4a03      	ldr	r2, [pc, #12]	@ (8001de8 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x52c>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	4b9c      	ldr	r3, [pc, #624]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df6:	4a9b      	ldr	r2, [pc, #620]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e00:	4b98      	ldr	r3, [pc, #608]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	4a97      	ldr	r2, [pc, #604]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d016      	beq.n	8001e46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff f98a 	bl	8001130 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff f986 	bl	8001130 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e12a      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e36:	4b8b      	ldr	r3, [pc, #556]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ed      	beq.n	8001e20 <HAL_RCC_OscConfig+0x53c>
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f973 	bl	8001130 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff f96f 	bl	8001130 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e113      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e64:	4b7f      	ldr	r3, [pc, #508]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ed      	bne.n	8001e4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e72:	7ffb      	ldrb	r3, [r7, #31]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b7a      	ldr	r3, [pc, #488]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	4a79      	ldr	r2, [pc, #484]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80fe 	beq.w	800208a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	f040 80d0 	bne.w	8002038 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e98:	4b72      	ldr	r3, [pc, #456]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d130      	bne.n	8001f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d127      	bne.n	8001f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d11f      	bne.n	8001f0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ed8:	2a07      	cmp	r2, #7
 8001eda:	bf14      	ite	ne
 8001edc:	2201      	movne	r2, #1
 8001ede:	2200      	moveq	r2, #0
 8001ee0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d113      	bne.n	8001f0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d06e      	beq.n	8001fec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b0c      	cmp	r3, #12
 8001f12:	d069      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f14:	4b53      	ldr	r3, [pc, #332]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f20:	4b50      	ldr	r3, [pc, #320]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0ad      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f30:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f3c:	f7ff f8f8 	bl	8001130 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f8f4 	bl	8001130 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e09a      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f56:	4b43      	ldr	r3, [pc, #268]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f62:	4b40      	ldr	r3, [pc, #256]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	4b40      	ldr	r3, [pc, #256]	@ (8002068 <HAL_RCC_OscConfig+0x784>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f72:	3a01      	subs	r2, #1
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f7c:	0212      	lsls	r2, r2, #8
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f84:	0852      	lsrs	r2, r2, #1
 8001f86:	3a01      	subs	r2, #1
 8001f88:	0552      	lsls	r2, r2, #21
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f90:	0852      	lsrs	r2, r2, #1
 8001f92:	3a01      	subs	r2, #1
 8001f94:	0652      	lsls	r2, r2, #25
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f9c:	0912      	lsrs	r2, r2, #4
 8001f9e:	0452      	lsls	r2, r2, #17
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	4930      	ldr	r1, [pc, #192]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2d      	ldr	r2, [pc, #180]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc0:	f7ff f8b6 	bl	8001130 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f8b2 	bl	8001130 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e058      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe6:	e050      	b.n	800208a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e04f      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d148      	bne.n	800208a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002010:	f7ff f88e 	bl	8001130 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f88a 	bl	8001130 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e030      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x734>
 8002036:	e028      	b.n	800208a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d023      	beq.n	8002086 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <HAL_RCC_OscConfig+0x780>)
 8002044:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff f871 	bl	8001130 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002050:	e00c      	b.n	800206c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff f86d 	bl	8001130 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d905      	bls.n	800206c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e013      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
 8002064:	40021000 	.word	0x40021000
 8002068:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ec      	bne.n	8002052 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4905      	ldr	r1, [pc, #20]	@ (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_RCC_OscConfig+0x7b4>)
 8002080:	4013      	ands	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
 8002084:	e001      	b.n	800208a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	feeefffc 	.word	0xfeeefffc

0800209c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0e7      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b75      	ldr	r3, [pc, #468]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b72      	ldr	r3, [pc, #456]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4970      	ldr	r1, [pc, #448]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0cf      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d010      	beq.n	800210e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b66      	ldr	r3, [pc, #408]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d908      	bls.n	800210e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fc:	4b63      	ldr	r3, [pc, #396]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4960      	ldr	r1, [pc, #384]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d04c      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	4b5a      	ldr	r3, [pc, #360]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d121      	bne.n	8002172 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0a6      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213a:	4b54      	ldr	r3, [pc, #336]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d115      	bne.n	8002172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e09a      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002152:	4b4e      	ldr	r3, [pc, #312]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e08e      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002162:	4b4a      	ldr	r3, [pc, #296]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e086      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b46      	ldr	r3, [pc, #280]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4943      	ldr	r1, [pc, #268]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7fe ffd4 	bl	8001130 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7fe ffd0 	bl	8001130 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e06e      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b31      	ldr	r3, [pc, #196]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d208      	bcs.n	80021e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	492b      	ldr	r1, [pc, #172]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e2:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d210      	bcs.n	8002212 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f0:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 0207 	bic.w	r2, r3, #7
 80021f8:	4923      	ldr	r1, [pc, #140]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e036      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221e:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4918      	ldr	r1, [pc, #96]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800223c:	4b13      	ldr	r3, [pc, #76]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4910      	ldr	r1, [pc, #64]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002250:	f000 f824 	bl	800229c <HAL_RCC_GetSysClockFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	490b      	ldr	r1, [pc, #44]	@ (8002290 <HAL_RCC_ClockConfig+0x1f4>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <HAL_RCC_ClockConfig+0x1f8>)
 800226e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_RCC_ClockConfig+0x1fc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ff0b 	bl	8001090 <HAL_InitTick>
 800227a:	4603      	mov	r3, r0
 800227c:	72fb      	strb	r3, [r7, #11]

  return status;
 800227e:	7afb      	ldrb	r3, [r7, #11]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40022000 	.word	0x40022000
 800228c:	40021000 	.word	0x40021000
 8002290:	0800599c 	.word	0x0800599c
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022aa:	4b3e      	ldr	r3, [pc, #248]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b4:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x34>
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d121      	bne.n	800230e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d11e      	bne.n	800230e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022d0:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022dc:	4b31      	ldr	r3, [pc, #196]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e005      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022ec:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022f8:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002300:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d102      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002314:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	e004      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d101      	bne.n	8002324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002320:	4b23      	ldr	r3, [pc, #140]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d134      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d003      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0xa6>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d003      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0xac>
 8002340:	e005      	b.n	800234e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002344:	617b      	str	r3, [r7, #20]
      break;
 8002346:	e005      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800234a:	617b      	str	r3, [r7, #20]
      break;
 800234c:	e002      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	617b      	str	r3, [r7, #20]
      break;
 8002352:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	3301      	adds	r3, #1
 8002360:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	fb03 f202 	mul.w	r2, r3, r2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	0e5b      	lsrs	r3, r3, #25
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	3301      	adds	r3, #1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002394:	69bb      	ldr	r3, [r7, #24]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	@ 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	080059b4 	.word	0x080059b4
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4904      	ldr	r1, [pc, #16]	@ (80023f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	080059ac 	.word	0x080059ac

080023f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023fc:	f7ff ffda 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0adb      	lsrs	r3, r3, #11
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4904      	ldr	r1, [pc, #16]	@ (8002420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	080059ac 	.word	0x080059ac

08002424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002430:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800243c:	f7ff f9ee 	bl	800181c <HAL_PWREx_GetVoltageRange>
 8002440:	6178      	str	r0, [r7, #20]
 8002442:	e014      	b.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	4a24      	ldr	r2, [pc, #144]	@ (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002450:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800245c:	f7ff f9de 	bl	800181c <HAL_PWREx_GetVoltageRange>
 8002460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002474:	d10b      	bne.n	800248e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b80      	cmp	r3, #128	@ 0x80
 800247a:	d919      	bls.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002480:	d902      	bls.n	8002488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002482:	2302      	movs	r3, #2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e013      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002488:	2301      	movs	r3, #1
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e010      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b80      	cmp	r3, #128	@ 0x80
 8002492:	d902      	bls.n	800249a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002494:	2303      	movs	r3, #3
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	e00a      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b80      	cmp	r3, #128	@ 0x80
 800249e:	d102      	bne.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a0:	2302      	movs	r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	e004      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b70      	cmp	r3, #112	@ 0x70
 80024aa:	d101      	bne.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 0207 	bic.w	r2, r3, #7
 80024b8:	4909      	ldr	r1, [pc, #36]	@ (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d041      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002504:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002508:	d02a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800250a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800250e:	d824      	bhi.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002510:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002514:	d008      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002516:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800251a:	d81e      	bhi.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002524:	d010      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002526:	e018      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002528:	4b86      	ldr	r3, [pc, #536]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a85      	ldr	r2, [pc, #532]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002532:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002534:	e015      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fabb 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002546:	e00c      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3320      	adds	r3, #32
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fba6 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002558:	e003      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	74fb      	strb	r3, [r7, #19]
      break;
 800255e:	e000      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002568:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002576:	4973      	ldr	r1, [pc, #460]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800257e:	e001      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d041      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002594:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002598:	d02a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800259a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800259e:	d824      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025aa:	d81e      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025b4:	d010      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025b6:	e018      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b8:	4b62      	ldr	r3, [pc, #392]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a61      	ldr	r2, [pc, #388]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c4:	e015      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fa73 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d6:	e00c      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3320      	adds	r3, #32
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fb5e 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e8:	e003      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	74fb      	strb	r3, [r7, #19]
      break;
 80025ee:	e000      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f8:	4b52      	ldr	r3, [pc, #328]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002606:	494f      	ldr	r1, [pc, #316]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800260e:	e001      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a0 	beq.w	8002762 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	4b41      	ldr	r3, [pc, #260]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	4a40      	ldr	r2, [pc, #256]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	@ 0x58
 8002648:	4b3e      	ldr	r3, [pc, #248]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002654:	2301      	movs	r3, #1
 8002656:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002658:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3a      	ldr	r2, [pc, #232]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002664:	f7fe fd64 	bl	8001130 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800266a:	e009      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7fe fd60 	bl	8001130 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d902      	bls.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	74fb      	strb	r3, [r7, #19]
        break;
 800267e:	e005      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002680:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800268c:	7cfb      	ldrb	r3, [r7, #19]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d15c      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002692:	4b2c      	ldr	r3, [pc, #176]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01f      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d019      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026b0:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026bc:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	4a20      	ldr	r2, [pc, #128]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026dc:	4a19      	ldr	r2, [pc, #100]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe fd1f 	bl	8001130 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f4:	e00b      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe fd1b 	bl	8001130 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d902      	bls.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	74fb      	strb	r3, [r7, #19]
            break;
 800270c:	e006      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270e:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ec      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002722:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002732:	4904      	ldr	r1, [pc, #16]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800273a:	e009      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
 8002740:	e006      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002750:	7c7b      	ldrb	r3, [r7, #17]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b9e      	ldr	r3, [pc, #632]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	4a9d      	ldr	r2, [pc, #628]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800276e:	4b98      	ldr	r3, [pc, #608]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f023 0203 	bic.w	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277c:	4994      	ldr	r1, [pc, #592]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002790:	4b8f      	ldr	r3, [pc, #572]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	f023 020c 	bic.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279e:	498c      	ldr	r1, [pc, #560]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b2:	4b87      	ldr	r3, [pc, #540]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	4983      	ldr	r1, [pc, #524]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027d4:	4b7e      	ldr	r3, [pc, #504]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	497b      	ldr	r1, [pc, #492]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027f6:	4b76      	ldr	r3, [pc, #472]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002804:	4972      	ldr	r1, [pc, #456]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002818:	4b6d      	ldr	r3, [pc, #436]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	496a      	ldr	r1, [pc, #424]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800283a:	4b65      	ldr	r3, [pc, #404]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	4961      	ldr	r1, [pc, #388]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800285c:	4b5c      	ldr	r3, [pc, #368]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286a:	4959      	ldr	r1, [pc, #356]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287e:	4b54      	ldr	r3, [pc, #336]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002884:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288c:	4950      	ldr	r1, [pc, #320]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a0:	4b4b      	ldr	r3, [pc, #300]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ae:	4948      	ldr	r1, [pc, #288]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028c2:	4b43      	ldr	r3, [pc, #268]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d0:	493f      	ldr	r1, [pc, #252]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d028      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e4:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f2:	4937      	ldr	r1, [pc, #220]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002902:	d106      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002904:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a31      	ldr	r2, [pc, #196]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800290e:	60d3      	str	r3, [r2, #12]
 8002910:	e011      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002916:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800291a:	d10c      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	2101      	movs	r1, #1
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f8c8 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002932:	7cfb      	ldrb	r3, [r7, #19]
 8002934:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d028      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002948:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	491f      	ldr	r1, [pc, #124]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002960:	d106      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800296c:	60d3      	str	r3, [r2, #12]
 800296e:	e011      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002978:	d10c      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2101      	movs	r1, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f899 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800298a:	7cfb      	ldrb	r3, [r7, #19]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02b      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	4908      	ldr	r1, [pc, #32]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a02      	ldr	r2, [pc, #8]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ca:	60d3      	str	r3, [r2, #12]
 80029cc:	e014      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f867 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02f      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a04:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a12:	4928      	ldr	r1, [pc, #160]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f844 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d014      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	74bb      	strb	r3, [r7, #18]
 8002a3e:	e011      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3320      	adds	r3, #32
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f925 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a7e:	490d      	ldr	r1, [pc, #52]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa2:	4904      	ldr	r1, [pc, #16]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aaa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ac6:	4b75      	ldr	r3, [pc, #468]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d018      	beq.n	8002b04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ad2:	4b72      	ldr	r3, [pc, #456]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d10d      	bne.n	8002afe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aea:	4b6c      	ldr	r3, [pc, #432]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
       ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d047      	beq.n	8002b8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	e044      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d018      	beq.n	8002b3e <RCCEx_PLLSAI1_Config+0x86>
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d825      	bhi.n	8002b5c <RCCEx_PLLSAI1_Config+0xa4>
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0x62>
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d009      	beq.n	8002b2c <RCCEx_PLLSAI1_Config+0x74>
 8002b18:	e020      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b1a:	4b60      	ldr	r3, [pc, #384]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2a:	e01a      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b2c:	4b5b      	ldr	r3, [pc, #364]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d116      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3c:	e013      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b3e:	4b57      	ldr	r3, [pc, #348]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b4a:	4b54      	ldr	r3, [pc, #336]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b5a:	e006      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b60:	e004      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b62:	bf00      	nop
 8002b64:	e002      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10d      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b72:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	430b      	orrs	r3, r1
 8002b88:	4944      	ldr	r1, [pc, #272]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d17d      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b94:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a40      	ldr	r2, [pc, #256]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fac6 	bl	8001130 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba6:	e009      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba8:	f7fe fac2 	bl	8001130 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bba:	e005      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bbc:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ef      	bne.n	8002ba8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d160      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d111      	bne.n	8002bf8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd4:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6892      	ldr	r2, [r2, #8]
 8002be4:	0211      	lsls	r1, r2, #8
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	0912      	lsrs	r2, r2, #4
 8002bec:	0452      	lsls	r2, r2, #17
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	492a      	ldr	r1, [pc, #168]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]
 8002bf6:	e027      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d112      	bne.n	8002c24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfe:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6892      	ldr	r2, [r2, #8]
 8002c0e:	0211      	lsls	r1, r2, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6912      	ldr	r2, [r2, #16]
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0552      	lsls	r2, r2, #21
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	491f      	ldr	r1, [pc, #124]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	610b      	str	r3, [r1, #16]
 8002c22:	e011      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c24:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6892      	ldr	r2, [r2, #8]
 8002c34:	0211      	lsls	r1, r2, #8
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6952      	ldr	r2, [r2, #20]
 8002c3a:	0852      	lsrs	r2, r2, #1
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0652      	lsls	r2, r2, #25
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4916      	ldr	r1, [pc, #88]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c48:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a13      	ldr	r2, [pc, #76]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fa6c 	bl	8001130 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5a:	e009      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c5c:	f7fe fa68 	bl	8001130 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c6e:	e005      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ef      	beq.n	8002c5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4904      	ldr	r1, [pc, #16]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cae:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cba:	4b67      	ldr	r3, [pc, #412]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10d      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cd2:	4b61      	ldr	r3, [pc, #388]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d047      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e044      	b.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d018      	beq.n	8002d26 <RCCEx_PLLSAI2_Config+0x86>
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d825      	bhi.n	8002d44 <RCCEx_PLLSAI2_Config+0xa4>
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <RCCEx_PLLSAI2_Config+0x62>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d009      	beq.n	8002d14 <RCCEx_PLLSAI2_Config+0x74>
 8002d00:	e020      	b.n	8002d44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d02:	4b55      	ldr	r3, [pc, #340]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11d      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d12:	e01a      	b.n	8002d4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d14:	4b50      	ldr	r3, [pc, #320]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e013      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d26:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d32:	4b49      	ldr	r3, [pc, #292]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d42:	e006      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e004      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	4939      	ldr	r1, [pc, #228]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d167      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d7c:	4b36      	ldr	r3, [pc, #216]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a35      	ldr	r2, [pc, #212]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe f9d2 	bl	8001130 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d8e:	e009      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d90:	f7fe f9ce 	bl	8001130 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	73fb      	strb	r3, [r7, #15]
        break;
 8002da2:	e005      	b.n	8002db0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002da4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ef      	bne.n	8002d90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d14a      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dbc:	4b26      	ldr	r3, [pc, #152]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	0211      	lsls	r1, r2, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68d2      	ldr	r2, [r2, #12]
 8002dd2:	0912      	lsrs	r2, r2, #4
 8002dd4:	0452      	lsls	r2, r2, #17
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	491f      	ldr	r1, [pc, #124]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	614b      	str	r3, [r1, #20]
 8002dde:	e011      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002de8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	0211      	lsls	r1, r2, #8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6912      	ldr	r2, [r2, #16]
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	3a01      	subs	r2, #1
 8002dfa:	0652      	lsls	r2, r2, #25
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	4916      	ldr	r1, [pc, #88]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e04:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a13      	ldr	r2, [pc, #76]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe f98e 	bl	8001130 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e16:	e009      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e18:	f7fe f98a 	bl	8001130 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	73fb      	strb	r3, [r7, #15]
          break;
 8002e2a:	e005      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ef      	beq.n	8002e18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4904      	ldr	r1, [pc, #16]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e049      	b.n	8002f02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fd ff7e 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 fb7a 	bl	8003594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e049      	b.n	8002fb0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f841 	bl	8002fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 fb23 	bl	8003594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x24>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e03c      	b.n	800306a <HAL_TIM_PWM_Start+0x9e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d109      	bne.n	800300a <HAL_TIM_PWM_Start+0x3e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e02f      	b.n	800306a <HAL_TIM_PWM_Start+0x9e>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d109      	bne.n	8003024 <HAL_TIM_PWM_Start+0x58>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e022      	b.n	800306a <HAL_TIM_PWM_Start+0x9e>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d109      	bne.n	800303e <HAL_TIM_PWM_Start+0x72>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	e015      	b.n	800306a <HAL_TIM_PWM_Start+0x9e>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b10      	cmp	r3, #16
 8003042:	d109      	bne.n	8003058 <HAL_TIM_PWM_Start+0x8c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e008      	b.n	800306a <HAL_TIM_PWM_Start+0x9e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e09c      	b.n	80031ac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <HAL_TIM_PWM_Start+0xb6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003080:	e023      	b.n	80030ca <HAL_TIM_PWM_Start+0xfe>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b04      	cmp	r3, #4
 8003086:	d104      	bne.n	8003092 <HAL_TIM_PWM_Start+0xc6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003090:	e01b      	b.n	80030ca <HAL_TIM_PWM_Start+0xfe>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PWM_Start+0xd6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030a0:	e013      	b.n	80030ca <HAL_TIM_PWM_Start+0xfe>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d104      	bne.n	80030b2 <HAL_TIM_PWM_Start+0xe6>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030b0:	e00b      	b.n	80030ca <HAL_TIM_PWM_Start+0xfe>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d104      	bne.n	80030c2 <HAL_TIM_PWM_Start+0xf6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c0:	e003      	b.n	80030ca <HAL_TIM_PWM_Start+0xfe>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fe74 	bl	8003dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a35      	ldr	r2, [pc, #212]	@ (80031b4 <HAL_TIM_PWM_Start+0x1e8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_TIM_PWM_Start+0x13e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a34      	ldr	r2, [pc, #208]	@ (80031b8 <HAL_TIM_PWM_Start+0x1ec>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_TIM_PWM_Start+0x13e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a32      	ldr	r2, [pc, #200]	@ (80031bc <HAL_TIM_PWM_Start+0x1f0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_TIM_PWM_Start+0x13e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a31      	ldr	r2, [pc, #196]	@ (80031c0 <HAL_TIM_PWM_Start+0x1f4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIM_PWM_Start+0x13e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2f      	ldr	r2, [pc, #188]	@ (80031c4 <HAL_TIM_PWM_Start+0x1f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_TIM_PWM_Start+0x142>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_TIM_PWM_Start+0x144>
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003122:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <HAL_TIM_PWM_Start+0x1e8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <HAL_TIM_PWM_Start+0x19e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003136:	d018      	beq.n	800316a <HAL_TIM_PWM_Start+0x19e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <HAL_TIM_PWM_Start+0x1fc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_TIM_PWM_Start+0x19e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a21      	ldr	r2, [pc, #132]	@ (80031cc <HAL_TIM_PWM_Start+0x200>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_TIM_PWM_Start+0x19e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <HAL_TIM_PWM_Start+0x204>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_TIM_PWM_Start+0x19e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <HAL_TIM_PWM_Start+0x1ec>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIM_PWM_Start+0x19e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a15      	ldr	r2, [pc, #84]	@ (80031bc <HAL_TIM_PWM_Start+0x1f0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d115      	bne.n	8003196 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <HAL_TIM_PWM_Start+0x208>)
 8003172:	4013      	ands	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d015      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x1dc>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003182:	d011      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003194:	e008      	b.n	80031a8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e000      	b.n	80031aa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40013400 	.word	0x40013400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40014400 	.word	0x40014400
 80031c4:	40014800 	.word	0x40014800
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	00010007 	.word	0x00010007

080031d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0ff      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b14      	cmp	r3, #20
 8003202:	f200 80f0 	bhi.w	80033e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003206:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003261 	.word	0x08003261
 8003210:	080033e7 	.word	0x080033e7
 8003214:	080033e7 	.word	0x080033e7
 8003218:	080033e7 	.word	0x080033e7
 800321c:	080032a1 	.word	0x080032a1
 8003220:	080033e7 	.word	0x080033e7
 8003224:	080033e7 	.word	0x080033e7
 8003228:	080033e7 	.word	0x080033e7
 800322c:	080032e3 	.word	0x080032e3
 8003230:	080033e7 	.word	0x080033e7
 8003234:	080033e7 	.word	0x080033e7
 8003238:	080033e7 	.word	0x080033e7
 800323c:	08003323 	.word	0x08003323
 8003240:	080033e7 	.word	0x080033e7
 8003244:	080033e7 	.word	0x080033e7
 8003248:	080033e7 	.word	0x080033e7
 800324c:	08003365 	.word	0x08003365
 8003250:	080033e7 	.word	0x080033e7
 8003254:	080033e7 	.word	0x080033e7
 8003258:	080033e7 	.word	0x080033e7
 800325c:	080033a5 	.word	0x080033a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa3a 	bl	80036e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	619a      	str	r2, [r3, #24]
      break;
 800329e:	e0a5      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 faaa 	bl	8003800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
      break;
 80032e0:	e084      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fb13 	bl	8003914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0208 	orr.w	r2, r2, #8
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0204 	bic.w	r2, r2, #4
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	61da      	str	r2, [r3, #28]
      break;
 8003320:	e064      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fb7b 	bl	8003a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800333c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800334c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69d9      	ldr	r1, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	021a      	lsls	r2, r3, #8
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
      break;
 8003362:	e043      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fbc4 	bl	8003af8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0208 	orr.w	r2, r2, #8
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033a2:	e023      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fc08 	bl	8003bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	021a      	lsls	r2, r3, #8
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033e4:	e002      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
      break;
 80033ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop

08003400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIM_ConfigClockSource+0x1c>
 8003418:	2302      	movs	r3, #2
 800341a:	e0b6      	b.n	800358a <HAL_TIM_ConfigClockSource+0x18a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800343a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800343e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003458:	d03e      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0xd8>
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800345e:	f200 8087 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x170>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003466:	f000 8086 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x176>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800346e:	d87f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
 8003470:	2b70      	cmp	r3, #112	@ 0x70
 8003472:	d01a      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0xaa>
 8003474:	2b70      	cmp	r3, #112	@ 0x70
 8003476:	d87b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
 8003478:	2b60      	cmp	r3, #96	@ 0x60
 800347a:	d050      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x11e>
 800347c:	2b60      	cmp	r3, #96	@ 0x60
 800347e:	d877      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
 8003480:	2b50      	cmp	r3, #80	@ 0x50
 8003482:	d03c      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0xfe>
 8003484:	2b50      	cmp	r3, #80	@ 0x50
 8003486:	d873      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
 8003488:	2b40      	cmp	r3, #64	@ 0x40
 800348a:	d058      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x13e>
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	d86f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
 8003490:	2b30      	cmp	r3, #48	@ 0x30
 8003492:	d064      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15e>
 8003494:	2b30      	cmp	r3, #48	@ 0x30
 8003496:	d86b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
 8003498:	2b20      	cmp	r3, #32
 800349a:	d060      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15e>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d867      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05c      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15e>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d05a      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x15e>
 80034a8:	e062      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	f000 fc61 	bl	8003d80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	609a      	str	r2, [r3, #8]
      break;
 80034d6:	e04f      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	f000 fc4a 	bl	8003d80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034fa:	609a      	str	r2, [r3, #8]
      break;
 80034fc:	e03c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	461a      	mov	r2, r3
 800350c:	f000 fbbe 	bl	8003c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2150      	movs	r1, #80	@ 0x50
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fc17 	bl	8003d4a <TIM_ITRx_SetConfig>
      break;
 800351c:	e02c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	461a      	mov	r2, r3
 800352c:	f000 fbdd 	bl	8003cea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2160      	movs	r1, #96	@ 0x60
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fc07 	bl	8003d4a <TIM_ITRx_SetConfig>
      break;
 800353c:	e01c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	461a      	mov	r2, r3
 800354c:	f000 fb9e 	bl	8003c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2140      	movs	r1, #64	@ 0x40
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fbf7 	bl	8003d4a <TIM_ITRx_SetConfig>
      break;
 800355c:	e00c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 fbee 	bl	8003d4a <TIM_ITRx_SetConfig>
      break;
 800356e:	e003      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e000      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a46      	ldr	r2, [pc, #280]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b2:	d00f      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a43      	ldr	r2, [pc, #268]	@ (80036c4 <TIM_Base_SetConfig+0x130>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a42      	ldr	r2, [pc, #264]	@ (80036c8 <TIM_Base_SetConfig+0x134>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a41      	ldr	r2, [pc, #260]	@ (80036cc <TIM_Base_SetConfig+0x138>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a40      	ldr	r2, [pc, #256]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d108      	bne.n	80035e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a35      	ldr	r2, [pc, #212]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f4:	d01b      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a32      	ldr	r2, [pc, #200]	@ (80036c4 <TIM_Base_SetConfig+0x130>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d017      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a31      	ldr	r2, [pc, #196]	@ (80036c8 <TIM_Base_SetConfig+0x134>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a30      	ldr	r2, [pc, #192]	@ (80036cc <TIM_Base_SetConfig+0x138>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00f      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2f      	ldr	r2, [pc, #188]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2e      	ldr	r2, [pc, #184]	@ (80036d4 <TIM_Base_SetConfig+0x140>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2d      	ldr	r2, [pc, #180]	@ (80036d8 <TIM_Base_SetConfig+0x144>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <TIM_Base_SetConfig+0x148>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a16      	ldr	r2, [pc, #88]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00f      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <TIM_Base_SetConfig+0x140>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a16      	ldr	r2, [pc, #88]	@ (80036d8 <TIM_Base_SetConfig+0x144>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <TIM_Base_SetConfig+0x148>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d103      	bne.n	8003694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	611a      	str	r2, [r3, #16]
  }
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800

080036e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f023 0201 	bic.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f023 0302 	bic.w	r3, r3, #2
 800372c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2c      	ldr	r2, [pc, #176]	@ (80037ec <TIM_OC1_SetConfig+0x10c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00f      	beq.n	8003760 <TIM_OC1_SetConfig+0x80>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a2b      	ldr	r2, [pc, #172]	@ (80037f0 <TIM_OC1_SetConfig+0x110>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_OC1_SetConfig+0x80>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a2a      	ldr	r2, [pc, #168]	@ (80037f4 <TIM_OC1_SetConfig+0x114>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_OC1_SetConfig+0x80>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a29      	ldr	r2, [pc, #164]	@ (80037f8 <TIM_OC1_SetConfig+0x118>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_OC1_SetConfig+0x80>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a28      	ldr	r2, [pc, #160]	@ (80037fc <TIM_OC1_SetConfig+0x11c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10c      	bne.n	800377a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0308 	bic.w	r3, r3, #8
 8003766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ec <TIM_OC1_SetConfig+0x10c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00f      	beq.n	80037a2 <TIM_OC1_SetConfig+0xc2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1a      	ldr	r2, [pc, #104]	@ (80037f0 <TIM_OC1_SetConfig+0x110>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00b      	beq.n	80037a2 <TIM_OC1_SetConfig+0xc2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a19      	ldr	r2, [pc, #100]	@ (80037f4 <TIM_OC1_SetConfig+0x114>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <TIM_OC1_SetConfig+0xc2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <TIM_OC1_SetConfig+0x118>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <TIM_OC1_SetConfig+0xc2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <TIM_OC1_SetConfig+0x11c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d111      	bne.n	80037c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40013400 	.word	0x40013400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800

08003800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f023 0210 	bic.w	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0320 	bic.w	r3, r3, #32
 800384e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a28      	ldr	r2, [pc, #160]	@ (8003900 <TIM_OC2_SetConfig+0x100>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_OC2_SetConfig+0x6c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a27      	ldr	r2, [pc, #156]	@ (8003904 <TIM_OC2_SetConfig+0x104>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10d      	bne.n	8003888 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1d      	ldr	r2, [pc, #116]	@ (8003900 <TIM_OC2_SetConfig+0x100>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00f      	beq.n	80038b0 <TIM_OC2_SetConfig+0xb0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <TIM_OC2_SetConfig+0x104>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_OC2_SetConfig+0xb0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1b      	ldr	r2, [pc, #108]	@ (8003908 <TIM_OC2_SetConfig+0x108>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_OC2_SetConfig+0xb0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1a      	ldr	r2, [pc, #104]	@ (800390c <TIM_OC2_SetConfig+0x10c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC2_SetConfig+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a19      	ldr	r2, [pc, #100]	@ (8003910 <TIM_OC2_SetConfig+0x110>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d113      	bne.n	80038d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40013400 	.word	0x40013400
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800

08003914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a27      	ldr	r2, [pc, #156]	@ (8003a10 <TIM_OC3_SetConfig+0xfc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC3_SetConfig+0x6a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a26      	ldr	r2, [pc, #152]	@ (8003a14 <TIM_OC3_SetConfig+0x100>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10d      	bne.n	800399a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a10 <TIM_OC3_SetConfig+0xfc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_OC3_SetConfig+0xae>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a14 <TIM_OC3_SetConfig+0x100>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_OC3_SetConfig+0xae>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <TIM_OC3_SetConfig+0x104>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_OC3_SetConfig+0xae>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a19      	ldr	r2, [pc, #100]	@ (8003a1c <TIM_OC3_SetConfig+0x108>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_OC3_SetConfig+0xae>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a18      	ldr	r2, [pc, #96]	@ (8003a20 <TIM_OC3_SetConfig+0x10c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d113      	bne.n	80039ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40013400 	.word	0x40013400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a18      	ldr	r2, [pc, #96]	@ (8003ae4 <TIM_OC4_SetConfig+0xc0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x84>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a17      	ldr	r2, [pc, #92]	@ (8003ae8 <TIM_OC4_SetConfig+0xc4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x84>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a16      	ldr	r2, [pc, #88]	@ (8003aec <TIM_OC4_SetConfig+0xc8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x84>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <TIM_OC4_SetConfig+0xcc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_OC4_SetConfig+0x84>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <TIM_OC4_SetConfig+0xd0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d109      	bne.n	8003abc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40013400 	.word	0x40013400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800

08003af8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <TIM_OC5_SetConfig+0xb4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00f      	beq.n	8003b72 <TIM_OC5_SetConfig+0x7a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <TIM_OC5_SetConfig+0xb8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_OC5_SetConfig+0x7a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <TIM_OC5_SetConfig+0xbc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_OC5_SetConfig+0x7a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <TIM_OC5_SetConfig+0xc0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_OC5_SetConfig+0x7a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <TIM_OC5_SetConfig+0xc4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d109      	bne.n	8003b86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	621a      	str	r2, [r3, #32]
}
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40013400 	.word	0x40013400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800

08003bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	051b      	lsls	r3, r3, #20
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a18      	ldr	r2, [pc, #96]	@ (8003c78 <TIM_OC6_SetConfig+0xb8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00f      	beq.n	8003c3c <TIM_OC6_SetConfig+0x7c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	@ (8003c7c <TIM_OC6_SetConfig+0xbc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <TIM_OC6_SetConfig+0x7c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a16      	ldr	r2, [pc, #88]	@ (8003c80 <TIM_OC6_SetConfig+0xc0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_OC6_SetConfig+0x7c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a15      	ldr	r2, [pc, #84]	@ (8003c84 <TIM_OC6_SetConfig+0xc4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC6_SetConfig+0x7c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a14      	ldr	r2, [pc, #80]	@ (8003c88 <TIM_OC6_SetConfig+0xc8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	029b      	lsls	r3, r3, #10
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40013400 	.word	0x40013400
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800

08003c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f023 0201 	bic.w	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f023 030a 	bic.w	r3, r3, #10
 8003cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b087      	sub	sp, #28
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f023 0210 	bic.w	r2, r3, #16
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f043 0307 	orr.w	r3, r3, #7
 8003d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1a      	ldr	r2, [r3, #32]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e068      	b.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2e      	ldr	r2, [pc, #184]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2d      	ldr	r2, [pc, #180]	@ (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1e      	ldr	r2, [pc, #120]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01d      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e96:	d018      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a18      	ldr	r2, [pc, #96]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d009      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a13      	ldr	r2, [pc, #76]	@ (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40013400 	.word	0x40013400
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40014000 	.word	0x40014000

08003f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e040      	b.n	8003fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc ffac 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	@ 0x24
 8003f48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 feb0 	bl	8004cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fbf5 	bl	8004758 <UART_SetConfig>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01b      	b.n	8003fb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 ff2f 	bl	8004e0c <UART_CheckIdleState>
 8003fae:	4603      	mov	r3, r0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b08b      	sub	sp, #44	@ 0x2c
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d147      	bne.n	800405e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Transmit_IT+0x22>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e040      	b.n	8004060 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2221      	movs	r2, #33	@ 0x21
 8004006:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004010:	d107      	bne.n	8004022 <HAL_UART_Transmit_IT+0x6a>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a13      	ldr	r2, [pc, #76]	@ (800406c <HAL_UART_Transmit_IT+0xb4>)
 800401e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004020:	e002      	b.n	8004028 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <HAL_UART_Transmit_IT+0xb8>)
 8004026:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	613b      	str	r3, [r7, #16]
   return(result);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	61bb      	str	r3, [r7, #24]
   return(result);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e6      	bne.n	8004028 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	372c      	adds	r7, #44	@ 0x2c
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	0800536f 	.word	0x0800536f
 8004070:	080052b9 	.word	0x080052b9

08004074 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004088:	2b20      	cmp	r3, #32
 800408a:	d137      	bne.n	80040fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Receive_IT+0x24>
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e030      	b.n	80040fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a18      	ldr	r2, [pc, #96]	@ (8004108 <HAL_UART_Receive_IT+0x94>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01f      	beq.n	80040ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	613b      	str	r3, [r7, #16]
   return(result);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	69f9      	ldr	r1, [r7, #28]
 80040de:	6a3a      	ldr	r2, [r7, #32]
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e6      	bne.n	80040ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 ffa0 	bl	8005038 <UART_Start_Receive_IT>
 80040f8:	4603      	mov	r3, r0
 80040fa:	e000      	b.n	80040fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3728      	adds	r7, #40	@ 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40008000 	.word	0x40008000

0800410c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b0ba      	sub	sp, #232	@ 0xe8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004136:	f640 030f 	movw	r3, #2063	@ 0x80f
 800413a:	4013      	ands	r3, r2
 800413c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d115      	bne.n	8004174 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00f      	beq.n	8004174 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 82ca 	beq.w	80046fe <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
      }
      return;
 8004172:	e2c4      	b.n	80046fe <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8117 	beq.w	80043ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800417e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800418a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800418e:	4b85      	ldr	r3, [pc, #532]	@ (80043a4 <HAL_UART_IRQHandler+0x298>)
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 810a 	beq.w	80043ac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d011      	beq.n	80041c8 <HAL_UART_IRQHandler+0xbc>
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00b      	beq.n	80041c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041be:	f043 0201 	orr.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d011      	beq.n	80041f8 <HAL_UART_IRQHandler+0xec>
 80041d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00b      	beq.n	80041f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2202      	movs	r2, #2
 80041e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d011      	beq.n	8004228 <HAL_UART_IRQHandler+0x11c>
 8004204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00b      	beq.n	8004228 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2204      	movs	r2, #4
 8004216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800421e:	f043 0202 	orr.w	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d017      	beq.n	8004264 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004244:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2208      	movs	r2, #8
 8004252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425a:	f043 0208 	orr.w	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800426c:	2b00      	cmp	r3, #0
 800426e:	d012      	beq.n	8004296 <HAL_UART_IRQHandler+0x18a>
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004274:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00c      	beq.n	8004296 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8230 	beq.w	8004702 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042de:	2b40      	cmp	r3, #64	@ 0x40
 80042e0:	d005      	beq.n	80042ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d04f      	beq.n	800438e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ff68 	bl	80051c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b40      	cmp	r3, #64	@ 0x40
 8004300:	d141      	bne.n	8004386 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3308      	adds	r3, #8
 8004308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800431c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800432e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800433a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1d9      	bne.n	8004302 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	2b00      	cmp	r3, #0
 8004354:	d013      	beq.n	800437e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800435a:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <HAL_UART_IRQHandler+0x29c>)
 800435c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd f83f 	bl	80013e6 <HAL_DMA_Abort_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d017      	beq.n	800439e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e00f      	b.n	800439e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f9d4 	bl	800472c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e00b      	b.n	800439e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9d0 	bl	800472c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e007      	b.n	800439e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f9cc 	bl	800472c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800439c:	e1b1      	b.n	8004702 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439e:	bf00      	nop
    return;
 80043a0:	e1af      	b.n	8004702 <HAL_UART_IRQHandler+0x5f6>
 80043a2:	bf00      	nop
 80043a4:	04000120 	.word	0x04000120
 80043a8:	0800528d 	.word	0x0800528d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 816a 	bne.w	800468a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8163 	beq.w	800468a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 815c 	beq.w	800468a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2210      	movs	r2, #16
 80043d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e4:	2b40      	cmp	r3, #64	@ 0x40
 80043e6:	f040 80d4 	bne.w	8004592 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80ad 	beq.w	800455a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800440a:	429a      	cmp	r2, r3
 800440c:	f080 80a5 	bcs.w	800455a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004416:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 8086 	bne.w	8004538 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800445a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800446e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1da      	bne.n	800442c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3308      	adds	r3, #8
 8004496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800449a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800449e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e1      	bne.n	8004476 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e3      	bne.n	80044b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800451a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800451c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e4      	bne.n	80044f8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc ff19 	bl	800136a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800454a:	b29b      	uxth	r3, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	b29b      	uxth	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8f4 	bl	8004740 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004558:	e0d5      	b.n	8004706 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004564:	429a      	cmp	r2, r3
 8004566:	f040 80ce 	bne.w	8004706 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b20      	cmp	r3, #32
 8004578:	f040 80c5 	bne.w	8004706 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8d8 	bl	8004740 <HAL_UARTEx_RxEventCallback>
      return;
 8004590:	e0b9      	b.n	8004706 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80ab 	beq.w	800470a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80045b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80a6 	beq.w	800470a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e4      	bne.n	80045be <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3308      	adds	r3, #8
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	623b      	str	r3, [r7, #32]
   return(result);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004618:	633a      	str	r2, [r7, #48]	@ 0x30
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800461e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e3      	bne.n	80045f4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	60fb      	str	r3, [r7, #12]
   return(result);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f023 0310 	bic.w	r3, r3, #16
 8004654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	69b9      	ldr	r1, [r7, #24]
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	617b      	str	r3, [r7, #20]
   return(result);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e4      	bne.n	8004640 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800467c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f85c 	bl	8004740 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004688:	e03f      	b.n	800470a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00e      	beq.n	80046b4 <HAL_UART_IRQHandler+0x5a8>
 8004696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 f8a5 	bl	80057fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046b2:	e02d      	b.n	8004710 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00e      	beq.n	80046de <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01c      	beq.n	800470e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
    }
    return;
 80046dc:	e017      	b.n	800470e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d012      	beq.n	8004710 <HAL_UART_IRQHandler+0x604>
 80046ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fe99 	bl	800542e <UART_EndTransmit_IT>
    return;
 80046fc:	e008      	b.n	8004710 <HAL_UART_IRQHandler+0x604>
      return;
 80046fe:	bf00      	nop
 8004700:	e006      	b.n	8004710 <HAL_UART_IRQHandler+0x604>
    return;
 8004702:	bf00      	nop
 8004704:	e004      	b.n	8004710 <HAL_UART_IRQHandler+0x604>
      return;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <HAL_UART_IRQHandler+0x604>
      return;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <HAL_UART_IRQHandler+0x604>
    return;
 800470e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004710:	37e8      	adds	r7, #232	@ 0xe8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop

08004718 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475c:	b08a      	sub	sp, #40	@ 0x28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	431a      	orrs	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	4313      	orrs	r3, r2
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4ba4      	ldr	r3, [pc, #656]	@ (8004a18 <UART_SetConfig+0x2c0>)
 8004788:	4013      	ands	r3, r2
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004790:	430b      	orrs	r3, r1
 8004792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a99      	ldr	r2, [pc, #612]	@ (8004a1c <UART_SetConfig+0x2c4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c0:	4313      	orrs	r3, r2
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a90      	ldr	r2, [pc, #576]	@ (8004a20 <UART_SetConfig+0x2c8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d126      	bne.n	8004830 <UART_SetConfig+0xd8>
 80047e2:	4b90      	ldr	r3, [pc, #576]	@ (8004a24 <UART_SetConfig+0x2cc>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d81b      	bhi.n	8004828 <UART_SetConfig+0xd0>
 80047f0:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <UART_SetConfig+0xa0>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	08004809 	.word	0x08004809
 80047fc:	08004819 	.word	0x08004819
 8004800:	08004811 	.word	0x08004811
 8004804:	08004821 	.word	0x08004821
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480e:	e116      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004810:	2302      	movs	r3, #2
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004816:	e112      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004818:	2304      	movs	r3, #4
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481e:	e10e      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004820:	2308      	movs	r3, #8
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004826:	e10a      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004828:	2310      	movs	r3, #16
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482e:	e106      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a7c      	ldr	r2, [pc, #496]	@ (8004a28 <UART_SetConfig+0x2d0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d138      	bne.n	80048ac <UART_SetConfig+0x154>
 800483a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a24 <UART_SetConfig+0x2cc>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b0c      	cmp	r3, #12
 8004846:	d82d      	bhi.n	80048a4 <UART_SetConfig+0x14c>
 8004848:	a201      	add	r2, pc, #4	@ (adr r2, 8004850 <UART_SetConfig+0xf8>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004885 	.word	0x08004885
 8004854:	080048a5 	.word	0x080048a5
 8004858:	080048a5 	.word	0x080048a5
 800485c:	080048a5 	.word	0x080048a5
 8004860:	08004895 	.word	0x08004895
 8004864:	080048a5 	.word	0x080048a5
 8004868:	080048a5 	.word	0x080048a5
 800486c:	080048a5 	.word	0x080048a5
 8004870:	0800488d 	.word	0x0800488d
 8004874:	080048a5 	.word	0x080048a5
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048a5 	.word	0x080048a5
 8004880:	0800489d 	.word	0x0800489d
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488a:	e0d8      	b.n	8004a3e <UART_SetConfig+0x2e6>
 800488c:	2302      	movs	r3, #2
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004892:	e0d4      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004894:	2304      	movs	r3, #4
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489a:	e0d0      	b.n	8004a3e <UART_SetConfig+0x2e6>
 800489c:	2308      	movs	r3, #8
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a2:	e0cc      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048aa:	e0c8      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a5e      	ldr	r2, [pc, #376]	@ (8004a2c <UART_SetConfig+0x2d4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d125      	bne.n	8004902 <UART_SetConfig+0x1aa>
 80048b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a24 <UART_SetConfig+0x2cc>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048c0:	2b30      	cmp	r3, #48	@ 0x30
 80048c2:	d016      	beq.n	80048f2 <UART_SetConfig+0x19a>
 80048c4:	2b30      	cmp	r3, #48	@ 0x30
 80048c6:	d818      	bhi.n	80048fa <UART_SetConfig+0x1a2>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d00a      	beq.n	80048e2 <UART_SetConfig+0x18a>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d814      	bhi.n	80048fa <UART_SetConfig+0x1a2>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <UART_SetConfig+0x182>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d008      	beq.n	80048ea <UART_SetConfig+0x192>
 80048d8:	e00f      	b.n	80048fa <UART_SetConfig+0x1a2>
 80048da:	2300      	movs	r3, #0
 80048dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e0:	e0ad      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80048e2:	2302      	movs	r3, #2
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e8:	e0a9      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80048ea:	2304      	movs	r3, #4
 80048ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f0:	e0a5      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80048f2:	2308      	movs	r3, #8
 80048f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f8:	e0a1      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80048fa:	2310      	movs	r3, #16
 80048fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004900:	e09d      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a4a      	ldr	r2, [pc, #296]	@ (8004a30 <UART_SetConfig+0x2d8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d125      	bne.n	8004958 <UART_SetConfig+0x200>
 800490c:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <UART_SetConfig+0x2cc>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004916:	2bc0      	cmp	r3, #192	@ 0xc0
 8004918:	d016      	beq.n	8004948 <UART_SetConfig+0x1f0>
 800491a:	2bc0      	cmp	r3, #192	@ 0xc0
 800491c:	d818      	bhi.n	8004950 <UART_SetConfig+0x1f8>
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d00a      	beq.n	8004938 <UART_SetConfig+0x1e0>
 8004922:	2b80      	cmp	r3, #128	@ 0x80
 8004924:	d814      	bhi.n	8004950 <UART_SetConfig+0x1f8>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <UART_SetConfig+0x1d8>
 800492a:	2b40      	cmp	r3, #64	@ 0x40
 800492c:	d008      	beq.n	8004940 <UART_SetConfig+0x1e8>
 800492e:	e00f      	b.n	8004950 <UART_SetConfig+0x1f8>
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e082      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e07e      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004946:	e07a      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e076      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004956:	e072      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a35      	ldr	r2, [pc, #212]	@ (8004a34 <UART_SetConfig+0x2dc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d12a      	bne.n	80049b8 <UART_SetConfig+0x260>
 8004962:	4b30      	ldr	r3, [pc, #192]	@ (8004a24 <UART_SetConfig+0x2cc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004970:	d01a      	beq.n	80049a8 <UART_SetConfig+0x250>
 8004972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004976:	d81b      	bhi.n	80049b0 <UART_SetConfig+0x258>
 8004978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497c:	d00c      	beq.n	8004998 <UART_SetConfig+0x240>
 800497e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004982:	d815      	bhi.n	80049b0 <UART_SetConfig+0x258>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <UART_SetConfig+0x238>
 8004988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800498c:	d008      	beq.n	80049a0 <UART_SetConfig+0x248>
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x258>
 8004990:	2300      	movs	r3, #0
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e052      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004998:	2302      	movs	r3, #2
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e04e      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e04a      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e046      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e042      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <UART_SetConfig+0x2c4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d13a      	bne.n	8004a38 <UART_SetConfig+0x2e0>
 80049c2:	4b18      	ldr	r3, [pc, #96]	@ (8004a24 <UART_SetConfig+0x2cc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049d0:	d01a      	beq.n	8004a08 <UART_SetConfig+0x2b0>
 80049d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049d6:	d81b      	bhi.n	8004a10 <UART_SetConfig+0x2b8>
 80049d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049dc:	d00c      	beq.n	80049f8 <UART_SetConfig+0x2a0>
 80049de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e2:	d815      	bhi.n	8004a10 <UART_SetConfig+0x2b8>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <UART_SetConfig+0x298>
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ec:	d008      	beq.n	8004a00 <UART_SetConfig+0x2a8>
 80049ee:	e00f      	b.n	8004a10 <UART_SetConfig+0x2b8>
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e022      	b.n	8004a3e <UART_SetConfig+0x2e6>
 80049f8:	2302      	movs	r3, #2
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e01e      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004a00:	2304      	movs	r3, #4
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e01a      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e016      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e012      	b.n	8004a3e <UART_SetConfig+0x2e6>
 8004a18:	efff69f3 	.word	0xefff69f3
 8004a1c:	40008000 	.word	0x40008000
 8004a20:	40013800 	.word	0x40013800
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40004400 	.word	0x40004400
 8004a2c:	40004800 	.word	0x40004800
 8004a30:	40004c00 	.word	0x40004c00
 8004a34:	40005000 	.word	0x40005000
 8004a38:	2310      	movs	r3, #16
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a9f      	ldr	r2, [pc, #636]	@ (8004cc0 <UART_SetConfig+0x568>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d17a      	bne.n	8004b3e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d824      	bhi.n	8004a9a <UART_SetConfig+0x342>
 8004a50:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <UART_SetConfig+0x300>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a9b 	.word	0x08004a9b
 8004a60:	08004a85 	.word	0x08004a85
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004a8b 	.word	0x08004a8b
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004a9b 	.word	0x08004a9b
 8004a74:	08004a9b 	.word	0x08004a9b
 8004a78:	08004a93 	.word	0x08004a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7fd fca6 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8004a80:	61f8      	str	r0, [r7, #28]
        break;
 8004a82:	e010      	b.n	8004aa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a84:	4b8f      	ldr	r3, [pc, #572]	@ (8004cc4 <UART_SetConfig+0x56c>)
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e00d      	b.n	8004aa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8a:	f7fd fc07 	bl	800229c <HAL_RCC_GetSysClockFreq>
 8004a8e:	61f8      	str	r0, [r7, #28]
        break;
 8004a90:	e009      	b.n	8004aa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a96:	61fb      	str	r3, [r7, #28]
        break;
 8004a98:	e005      	b.n	8004aa6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004aa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80fb 	beq.w	8004ca4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d305      	bcc.n	8004aca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d903      	bls.n	8004ad2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ad0:	e0e8      	b.n	8004ca4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	461c      	mov	r4, r3
 8004ad8:	4615      	mov	r5, r2
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	022b      	lsls	r3, r5, #8
 8004ae4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ae8:	0222      	lsls	r2, r4, #8
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	6849      	ldr	r1, [r1, #4]
 8004aee:	0849      	lsrs	r1, r1, #1
 8004af0:	2000      	movs	r0, #0
 8004af2:	4688      	mov	r8, r1
 8004af4:	4681      	mov	r9, r0
 8004af6:	eb12 0a08 	adds.w	sl, r2, r8
 8004afa:	eb43 0b09 	adc.w	fp, r3, r9
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	4659      	mov	r1, fp
 8004b10:	f7fb fb64 	bl	80001dc <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b22:	d308      	bcc.n	8004b36 <UART_SetConfig+0x3de>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b2a:	d204      	bcs.n	8004b36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	60da      	str	r2, [r3, #12]
 8004b34:	e0b6      	b.n	8004ca4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b3c:	e0b2      	b.n	8004ca4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b46:	d15e      	bne.n	8004c06 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d828      	bhi.n	8004ba2 <UART_SetConfig+0x44a>
 8004b50:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0x400>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004ba3 	.word	0x08004ba3
 8004b68:	08004b93 	.word	0x08004b93
 8004b6c:	08004ba3 	.word	0x08004ba3
 8004b70:	08004ba3 	.word	0x08004ba3
 8004b74:	08004ba3 	.word	0x08004ba3
 8004b78:	08004b9b 	.word	0x08004b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fd fc26 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8004b80:	61f8      	str	r0, [r7, #28]
        break;
 8004b82:	e014      	b.n	8004bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b84:	f7fd fc38 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8004b88:	61f8      	str	r0, [r7, #28]
        break;
 8004b8a:	e010      	b.n	8004bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8004cc4 <UART_SetConfig+0x56c>)
 8004b8e:	61fb      	str	r3, [r7, #28]
        break;
 8004b90:	e00d      	b.n	8004bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b92:	f7fd fb83 	bl	800229c <HAL_RCC_GetSysClockFreq>
 8004b96:	61f8      	str	r0, [r7, #28]
        break;
 8004b98:	e009      	b.n	8004bae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ba0:	e005      	b.n	8004bae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d077      	beq.n	8004ca4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005a      	lsls	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	441a      	add	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d916      	bls.n	8004bfe <UART_SetConfig+0x4a6>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd6:	d212      	bcs.n	8004bfe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f023 030f 	bic.w	r3, r3, #15
 8004be0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	8afb      	ldrh	r3, [r7, #22]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	8afa      	ldrh	r2, [r7, #22]
 8004bfa:	60da      	str	r2, [r3, #12]
 8004bfc:	e052      	b.n	8004ca4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c04:	e04e      	b.n	8004ca4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d827      	bhi.n	8004c5e <UART_SetConfig+0x506>
 8004c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c14 <UART_SetConfig+0x4bc>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c39 	.word	0x08004c39
 8004c18:	08004c41 	.word	0x08004c41
 8004c1c:	08004c49 	.word	0x08004c49
 8004c20:	08004c5f 	.word	0x08004c5f
 8004c24:	08004c4f 	.word	0x08004c4f
 8004c28:	08004c5f 	.word	0x08004c5f
 8004c2c:	08004c5f 	.word	0x08004c5f
 8004c30:	08004c5f 	.word	0x08004c5f
 8004c34:	08004c57 	.word	0x08004c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7fd fbc8 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8004c3c:	61f8      	str	r0, [r7, #28]
        break;
 8004c3e:	e014      	b.n	8004c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c40:	f7fd fbda 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
        break;
 8004c46:	e010      	b.n	8004c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c48:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <UART_SetConfig+0x56c>)
 8004c4a:	61fb      	str	r3, [r7, #28]
        break;
 8004c4c:	e00d      	b.n	8004c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4e:	f7fd fb25 	bl	800229c <HAL_RCC_GetSysClockFreq>
 8004c52:	61f8      	str	r0, [r7, #28]
        break;
 8004c54:	e009      	b.n	8004c6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5a:	61fb      	str	r3, [r7, #28]
        break;
 8004c5c:	e005      	b.n	8004c6a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c68:	bf00      	nop
    }

    if (pclk != 0U)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d019      	beq.n	8004ca4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	085a      	lsrs	r2, r3, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	441a      	add	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b0f      	cmp	r3, #15
 8004c88:	d909      	bls.n	8004c9e <UART_SetConfig+0x546>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d205      	bcs.n	8004c9e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	e002      	b.n	8004ca4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3728      	adds	r7, #40	@ 0x28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40008000 	.word	0x40008000
 8004cc4:	00f42400 	.word	0x00f42400

08004cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01a      	beq.n	8004dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dc6:	d10a      	bne.n	8004dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b098      	sub	sp, #96	@ 0x60
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e1c:	f7fc f988 	bl	8001130 <HAL_GetTick>
 8004e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d12e      	bne.n	8004e8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f88c 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d021      	beq.n	8004e8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e062      	b.n	8004f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d149      	bne.n	8004f30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f856 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03c      	beq.n	8004f30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f08:	61fa      	str	r2, [r7, #28]
 8004f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	617b      	str	r3, [r7, #20]
   return(result);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e011      	b.n	8004f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3758      	adds	r7, #88	@ 0x58
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	e04f      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d04b      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f76:	f7fc f8db 	bl	8001130 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e04e      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d037      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b80      	cmp	r3, #128	@ 0x80
 8004fa2:	d034      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d031      	beq.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d110      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f8ff 	bl	80051c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e029      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe8:	d111      	bne.n	800500e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f8e5 	bl	80051c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e00f      	b.n	800502e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4013      	ands	r3, r2
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	bf0c      	ite	eq
 800501e:	2301      	moveq	r3, #1
 8005020:	2300      	movne	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	429a      	cmp	r2, r3
 800502a:	d0a0      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005038:	b480      	push	{r7}
 800503a:	b097      	sub	sp, #92	@ 0x5c
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	88fa      	ldrh	r2, [r7, #6]
 8005050:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506a:	d10e      	bne.n	800508a <UART_Start_Receive_IT+0x52>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <UART_Start_Receive_IT+0x48>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800507a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800507e:	e02d      	b.n	80050dc <UART_Start_Receive_IT+0xa4>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	22ff      	movs	r2, #255	@ 0xff
 8005084:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005088:	e028      	b.n	80050dc <UART_Start_Receive_IT+0xa4>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <UART_Start_Receive_IT+0x76>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <UART_Start_Receive_IT+0x6c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	22ff      	movs	r2, #255	@ 0xff
 800509e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050a2:	e01b      	b.n	80050dc <UART_Start_Receive_IT+0xa4>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	227f      	movs	r2, #127	@ 0x7f
 80050a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050ac:	e016      	b.n	80050dc <UART_Start_Receive_IT+0xa4>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b6:	d10d      	bne.n	80050d4 <UART_Start_Receive_IT+0x9c>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <UART_Start_Receive_IT+0x92>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	227f      	movs	r2, #127	@ 0x7f
 80050c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050c8:	e008      	b.n	80050dc <UART_Start_Receive_IT+0xa4>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	223f      	movs	r2, #63	@ 0x3f
 80050ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050d2:	e003      	b.n	80050dc <UART_Start_Receive_IT+0xa4>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2222      	movs	r2, #34	@ 0x22
 80050e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	657b      	str	r3, [r7, #84]	@ 0x54
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800510c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800510e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005112:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800511a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005128:	d107      	bne.n	800513a <UART_Start_Receive_IT+0x102>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a21      	ldr	r2, [pc, #132]	@ (80051bc <UART_Start_Receive_IT+0x184>)
 8005136:	669a      	str	r2, [r3, #104]	@ 0x68
 8005138:	e002      	b.n	8005140 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4a20      	ldr	r2, [pc, #128]	@ (80051c0 <UART_Start_Receive_IT+0x188>)
 800513e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d019      	beq.n	800517c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800515c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005166:	637b      	str	r3, [r7, #52]	@ 0x34
 8005168:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800516c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_Start_Receive_IT+0x110>
 800517a:	e018      	b.n	80051ae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	613b      	str	r3, [r7, #16]
   return(result);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f043 0320 	orr.w	r3, r3, #32
 8005190:	653b      	str	r3, [r7, #80]	@ 0x50
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	69f9      	ldr	r1, [r7, #28]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e6      	bne.n	800517c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	375c      	adds	r7, #92	@ 0x5c
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	08005641 	.word	0x08005641
 80051c0:	08005485 	.word	0x08005485

080051c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b095      	sub	sp, #84	@ 0x54
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	61fb      	str	r3, [r7, #28]
   return(result);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800521e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005236:	2b01      	cmp	r3, #1
 8005238:	d118      	bne.n	800526c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	60bb      	str	r3, [r7, #8]
   return(result);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f023 0310 	bic.w	r3, r3, #16
 800524e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	613b      	str	r3, [r7, #16]
   return(result);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005280:	bf00      	nop
 8005282:	3754      	adds	r7, #84	@ 0x54
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff fa3e 	bl	800472c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052b0:	bf00      	nop
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b08f      	sub	sp, #60	@ 0x3c
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052c4:	2b21      	cmp	r3, #33	@ 0x21
 80052c6:	d14c      	bne.n	8005362 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d132      	bne.n	800533a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e6      	bne.n	80052d4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	60bb      	str	r3, [r7, #8]
   return(result);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800531a:	633b      	str	r3, [r7, #48]	@ 0x30
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6979      	ldr	r1, [r7, #20]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	613b      	str	r3, [r7, #16]
   return(result);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e6      	bne.n	8005306 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005338:	e013      	b.n	8005362 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005362:	bf00      	nop
 8005364:	373c      	adds	r7, #60	@ 0x3c
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800536e:	b480      	push	{r7}
 8005370:	b091      	sub	sp, #68	@ 0x44
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800537a:	2b21      	cmp	r3, #33	@ 0x21
 800537c:	d151      	bne.n	8005422 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d132      	bne.n	80053f0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	623b      	str	r3, [r7, #32]
   return(result);
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	69b9      	ldr	r1, [r7, #24]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	617b      	str	r3, [r7, #20]
   return(result);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e6      	bne.n	80053bc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80053ee:	e018      	b.n	8005422 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80053f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005402:	b292      	uxth	r2, r2
 8005404:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540a:	1c9a      	adds	r2, r3, #2
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005422:	bf00      	nop
 8005424:	3744      	adds	r7, #68	@ 0x44
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b088      	sub	sp, #32
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60bb      	str	r3, [r7, #8]
   return(result);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6979      	ldr	r1, [r7, #20]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	613b      	str	r3, [r7, #16]
   return(result);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff f94f 	bl	8004718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800547a:	bf00      	nop
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b09c      	sub	sp, #112	@ 0x70
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005492:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549c:	2b22      	cmp	r3, #34	@ 0x22
 800549e:	f040 80be 	bne.w	800561e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054b0:	b2d9      	uxtb	r1, r3
 80054b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054bc:	400a      	ands	r2, r1
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 80a3 	bne.w	8005632 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800550a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800550c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005510:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e6      	bne.n	80054ec <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3308      	adds	r3, #8
 8005524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800552e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	667b      	str	r3, [r7, #100]	@ 0x64
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800553e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005540:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005544:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800554c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a34      	ldr	r2, [pc, #208]	@ (800563c <UART_RxISR_8BIT+0x1b8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d01f      	beq.n	80055b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d018      	beq.n	80055b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	623b      	str	r3, [r7, #32]
   return(result);
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005592:	663b      	str	r3, [r7, #96]	@ 0x60
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559c:	633b      	str	r3, [r7, #48]	@ 0x30
 800559e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e6      	bne.n	800557e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d12e      	bne.n	8005616 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0310 	bic.w	r3, r3, #16
 80055d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e6      	bne.n	80055be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d103      	bne.n	8005606 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2210      	movs	r2, #16
 8005604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff f896 	bl	8004740 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005614:	e00d      	b.n	8005632 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb faae 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 800561c:	e009      	b.n	8005632 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	8b1b      	ldrh	r3, [r3, #24]
 8005624:	b29a      	uxth	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0208 	orr.w	r2, r2, #8
 800562e:	b292      	uxth	r2, r2
 8005630:	831a      	strh	r2, [r3, #24]
}
 8005632:	bf00      	nop
 8005634:	3770      	adds	r7, #112	@ 0x70
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40008000 	.word	0x40008000

08005640 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b09c      	sub	sp, #112	@ 0x70
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800564e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005658:	2b22      	cmp	r3, #34	@ 0x22
 800565a:	f040 80be 	bne.w	80057da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005664:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800566e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005672:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005676:	4013      	ands	r3, r2
 8005678:	b29a      	uxth	r2, r3
 800567a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800567c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005682:	1c9a      	adds	r2, r3, #2
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 80a3 	bne.w	80057ee <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80056d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e6      	bne.n	80056a8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3308      	adds	r3, #8
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3308      	adds	r3, #8
 80056f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80056fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e5      	bne.n	80056da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a34      	ldr	r2, [pc, #208]	@ (80057f8 <UART_RxISR_16BIT+0x1b8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d01f      	beq.n	800576c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	61fb      	str	r3, [r7, #28]
   return(result);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800574e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800575a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800575e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e6      	bne.n	800573a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005770:	2b01      	cmp	r3, #1
 8005772:	d12e      	bne.n	80057d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	60bb      	str	r3, [r7, #8]
   return(result);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6979      	ldr	r1, [r7, #20]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	613b      	str	r3, [r7, #16]
   return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e6      	bne.n	800577a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b10      	cmp	r3, #16
 80057b8:	d103      	bne.n	80057c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2210      	movs	r2, #16
 80057c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fe ffb8 	bl	8004740 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057d0:	e00d      	b.n	80057ee <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb f9d0 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 80057d8:	e009      	b.n	80057ee <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	8b1b      	ldrh	r3, [r3, #24]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0208 	orr.w	r2, r2, #8
 80057ea:	b292      	uxth	r2, r2
 80057ec:	831a      	strh	r2, [r3, #24]
}
 80057ee:	bf00      	nop
 80057f0:	3770      	adds	r7, #112	@ 0x70
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40008000 	.word	0x40008000

080057fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <atoi>:
 8005810:	220a      	movs	r2, #10
 8005812:	2100      	movs	r1, #0
 8005814:	f000 b87a 	b.w	800590c <strtol>

08005818 <_strtol_l.constprop.0>:
 8005818:	2b24      	cmp	r3, #36	@ 0x24
 800581a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581e:	4686      	mov	lr, r0
 8005820:	4690      	mov	r8, r2
 8005822:	d801      	bhi.n	8005828 <_strtol_l.constprop.0+0x10>
 8005824:	2b01      	cmp	r3, #1
 8005826:	d106      	bne.n	8005836 <_strtol_l.constprop.0+0x1e>
 8005828:	f000 f882 	bl	8005930 <__errno>
 800582c:	2316      	movs	r3, #22
 800582e:	6003      	str	r3, [r0, #0]
 8005830:	2000      	movs	r0, #0
 8005832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005836:	4834      	ldr	r0, [pc, #208]	@ (8005908 <_strtol_l.constprop.0+0xf0>)
 8005838:	460d      	mov	r5, r1
 800583a:	462a      	mov	r2, r5
 800583c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005840:	5d06      	ldrb	r6, [r0, r4]
 8005842:	f016 0608 	ands.w	r6, r6, #8
 8005846:	d1f8      	bne.n	800583a <_strtol_l.constprop.0+0x22>
 8005848:	2c2d      	cmp	r4, #45	@ 0x2d
 800584a:	d12d      	bne.n	80058a8 <_strtol_l.constprop.0+0x90>
 800584c:	782c      	ldrb	r4, [r5, #0]
 800584e:	2601      	movs	r6, #1
 8005850:	1c95      	adds	r5, r2, #2
 8005852:	f033 0210 	bics.w	r2, r3, #16
 8005856:	d109      	bne.n	800586c <_strtol_l.constprop.0+0x54>
 8005858:	2c30      	cmp	r4, #48	@ 0x30
 800585a:	d12a      	bne.n	80058b2 <_strtol_l.constprop.0+0x9a>
 800585c:	782a      	ldrb	r2, [r5, #0]
 800585e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005862:	2a58      	cmp	r2, #88	@ 0x58
 8005864:	d125      	bne.n	80058b2 <_strtol_l.constprop.0+0x9a>
 8005866:	786c      	ldrb	r4, [r5, #1]
 8005868:	2310      	movs	r3, #16
 800586a:	3502      	adds	r5, #2
 800586c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005870:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005874:	2200      	movs	r2, #0
 8005876:	fbbc f9f3 	udiv	r9, ip, r3
 800587a:	4610      	mov	r0, r2
 800587c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005880:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005884:	2f09      	cmp	r7, #9
 8005886:	d81b      	bhi.n	80058c0 <_strtol_l.constprop.0+0xa8>
 8005888:	463c      	mov	r4, r7
 800588a:	42a3      	cmp	r3, r4
 800588c:	dd27      	ble.n	80058de <_strtol_l.constprop.0+0xc6>
 800588e:	1c57      	adds	r7, r2, #1
 8005890:	d007      	beq.n	80058a2 <_strtol_l.constprop.0+0x8a>
 8005892:	4581      	cmp	r9, r0
 8005894:	d320      	bcc.n	80058d8 <_strtol_l.constprop.0+0xc0>
 8005896:	d101      	bne.n	800589c <_strtol_l.constprop.0+0x84>
 8005898:	45a2      	cmp	sl, r4
 800589a:	db1d      	blt.n	80058d8 <_strtol_l.constprop.0+0xc0>
 800589c:	fb00 4003 	mla	r0, r0, r3, r4
 80058a0:	2201      	movs	r2, #1
 80058a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058a6:	e7eb      	b.n	8005880 <_strtol_l.constprop.0+0x68>
 80058a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80058aa:	bf04      	itt	eq
 80058ac:	782c      	ldrbeq	r4, [r5, #0]
 80058ae:	1c95      	addeq	r5, r2, #2
 80058b0:	e7cf      	b.n	8005852 <_strtol_l.constprop.0+0x3a>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1da      	bne.n	800586c <_strtol_l.constprop.0+0x54>
 80058b6:	2c30      	cmp	r4, #48	@ 0x30
 80058b8:	bf0c      	ite	eq
 80058ba:	2308      	moveq	r3, #8
 80058bc:	230a      	movne	r3, #10
 80058be:	e7d5      	b.n	800586c <_strtol_l.constprop.0+0x54>
 80058c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058c4:	2f19      	cmp	r7, #25
 80058c6:	d801      	bhi.n	80058cc <_strtol_l.constprop.0+0xb4>
 80058c8:	3c37      	subs	r4, #55	@ 0x37
 80058ca:	e7de      	b.n	800588a <_strtol_l.constprop.0+0x72>
 80058cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058d0:	2f19      	cmp	r7, #25
 80058d2:	d804      	bhi.n	80058de <_strtol_l.constprop.0+0xc6>
 80058d4:	3c57      	subs	r4, #87	@ 0x57
 80058d6:	e7d8      	b.n	800588a <_strtol_l.constprop.0+0x72>
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	e7e1      	b.n	80058a2 <_strtol_l.constprop.0+0x8a>
 80058de:	1c53      	adds	r3, r2, #1
 80058e0:	d108      	bne.n	80058f4 <_strtol_l.constprop.0+0xdc>
 80058e2:	2322      	movs	r3, #34	@ 0x22
 80058e4:	f8ce 3000 	str.w	r3, [lr]
 80058e8:	4660      	mov	r0, ip
 80058ea:	f1b8 0f00 	cmp.w	r8, #0
 80058ee:	d0a0      	beq.n	8005832 <_strtol_l.constprop.0+0x1a>
 80058f0:	1e69      	subs	r1, r5, #1
 80058f2:	e006      	b.n	8005902 <_strtol_l.constprop.0+0xea>
 80058f4:	b106      	cbz	r6, 80058f8 <_strtol_l.constprop.0+0xe0>
 80058f6:	4240      	negs	r0, r0
 80058f8:	f1b8 0f00 	cmp.w	r8, #0
 80058fc:	d099      	beq.n	8005832 <_strtol_l.constprop.0+0x1a>
 80058fe:	2a00      	cmp	r2, #0
 8005900:	d1f6      	bne.n	80058f0 <_strtol_l.constprop.0+0xd8>
 8005902:	f8c8 1000 	str.w	r1, [r8]
 8005906:	e794      	b.n	8005832 <_strtol_l.constprop.0+0x1a>
 8005908:	080059e5 	.word	0x080059e5

0800590c <strtol>:
 800590c:	4613      	mov	r3, r2
 800590e:	460a      	mov	r2, r1
 8005910:	4601      	mov	r1, r0
 8005912:	4802      	ldr	r0, [pc, #8]	@ (800591c <strtol+0x10>)
 8005914:	6800      	ldr	r0, [r0, #0]
 8005916:	f7ff bf7f 	b.w	8005818 <_strtol_l.constprop.0>
 800591a:	bf00      	nop
 800591c:	2000000c 	.word	0x2000000c

08005920 <memset>:
 8005920:	4402      	add	r2, r0
 8005922:	4603      	mov	r3, r0
 8005924:	4293      	cmp	r3, r2
 8005926:	d100      	bne.n	800592a <memset+0xa>
 8005928:	4770      	bx	lr
 800592a:	f803 1b01 	strb.w	r1, [r3], #1
 800592e:	e7f9      	b.n	8005924 <memset+0x4>

08005930 <__errno>:
 8005930:	4b01      	ldr	r3, [pc, #4]	@ (8005938 <__errno+0x8>)
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	2000000c 	.word	0x2000000c

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	@ (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	@ (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	@ (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	@ (8005980 <__libc_init_array+0x44>)
 8005950:	f000 f818 	bl	8005984 <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08005af0 	.word	0x08005af0
 8005978:	08005af0 	.word	0x08005af0
 800597c:	08005af0 	.word	0x08005af0
 8005980:	08005af4 	.word	0x08005af4

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
